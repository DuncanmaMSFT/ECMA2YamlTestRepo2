<Type Name="SettingsProviderCollection" FullName="System.Configuration.SettingsProviderCollection">
  <TypeSignature Language="C#" Value="public class SettingsProviderCollection : System.Configuration.Provider.ProviderCollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SettingsProviderCollection extends System.Configuration.Provider.ProviderCollection" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Provider.ProviderCollection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a collection of application settings providers.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SettingsProviderCollection class is a straightforward extension of the <xref:System.Configuration.Provider.ProviderCollection> class to provide for storage of <xref:System.Configuration.SettingsProvider> objects.  
  
 The <xref:System.Configuration.ApplicationSettingsBase> class uses this collection to manage the settings providers associated with each of its application settings properties through the <xref:System.Configuration.SettingsProviderAttribute>.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SettingsProviderCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Configuration.SettingsProviderCollection" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is the default constructor that is implicitly provided.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public override void Add (System.Configuration.Provider.ProviderBase provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Add(class System.Configuration.Provider.ProviderBase provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Configuration.Provider.ProviderBase" />
      </Parameters>
      <Docs>
        <param name="provider">A <see cref="T:System.Configuration.Provider.ProviderBase" /> to add to the collection.</param>
        <summary>Adds a new settings provider to the collection.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Configuration.Provider.ProviderBase.Name%2A> property of the <xref:System.Configuration.SettingsProvider> is used as the storage key.  
  
> [!CAUTION]
>  Although the Add method has a single <xref:System.Configuration.Provider.ProviderBase> parameter to match the signature of this same method in the base class <xref:System.Configuration.Provider.ProviderCollection>, this method will throw an exception if the `provider` parameter is not of type <xref:System.Configuration.SettingsProvider>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="provider" /> parameter is not of type <see cref="T:System.Configuration.SettingsProvider" />.  
  
 -or-  
  
 The &lt;xref:System.Configuration.Provider.ProviderBase.Name%2A&gt; property of the provider parameter is null or an empty string.  
  
 -or-  
  
 A settings provider with the same &lt;xref:System.Configuration.Provider.ProviderBase.Name%2A&gt; already exists in the collection.</exception>
        <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="provider" /> parameter is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Configuration.SettingsProvider this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.SettingsProvider Item(string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">A <see cref="T:System.String" /> containing the friendly name of the settings provider.</param>
        <summary>Gets the settings provider in the collection that matches the specified name.</summary>
        <value>If found, the <see cref="T:System.Configuration.SettingsProvider" /> whose name matches that specified by the name parameter; otherwise, <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can make a <xref:System.Configuration.SettingsProviderCollection> read-only by using the <xref:System.Configuration.Provider.ProviderCollection.SetReadOnly%2A> method. However, it is invalid to methods such as <xref:System.Configuration.SettingsProviderCollection.Add%2A>, <xref:System.Configuration.Provider.ProviderCollection.Remove%2A>, and <xref:System.Configuration.Provider.ProviderCollection.Clear%2A> on such a collection.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">The collection is read-only when setting this value.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>