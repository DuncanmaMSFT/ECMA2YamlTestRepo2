<Type Name="DBConcurrencyException" FullName="System.Data.DBConcurrencyException">
  <TypeSignature Language="C#" Value="public sealed class DBConcurrencyException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DBConcurrencyException extends System.SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>The exception that is thrown by the <see cref="T:System.Data.Common.DataAdapter" /> during an insert, update, or delete operation if the number of rows affected equals zero.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Data.Common.DataAdapter> examines the number of rows affected by the execution of each insert, update, or delete operation, and throws this exception if the number equals zero. This exception is generally caused by a concurrency violation.  
  
 ]]></format>
    </remarks>
    <threadsafe />
    <returns />
    <value />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DBConcurrencyException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Data.DBConcurrencyException" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default constructor initializes any fields to their default values.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DBConcurrencyException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The text string describing the details of the exception.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Data.DBConcurrencyException" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DBConcurrencyException (string message, Exception inner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception inner) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="inner" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">The text string describing the details of the exception.</param>
        <param name="inner">A reference to an inner exception.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Data.DBConcurrencyException" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can create a new exception that catches an earlier exception. The code that handles the second exception can use the additional information from the earlier exception, also called an inner exception, to examine the cause of the initial error.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DBConcurrencyException (string message, Exception inner, System.Data.DataRow[] dataRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception inner, class System.Data.DataRow[] dataRows) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="inner" Type="System.Exception" />
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="message">The error message that explains the reason for this exception.</param>
        <param name="inner">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        <param name="dataRows">An array containing the <see cref="T:System.Data.DataRow" /> objects whose update failure generated this exception.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Data.DBConcurrencyException" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="CopyToRows">
      <MemberSignature Language="C#" Value="public void CopyToRows (System.Data.DataRow[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyToRows(class System.Data.DataRow[] array) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="array">The one-dimensional array of <see cref="T:System.Data.DataRow" /> objects to copy the <see cref="T:System.Data.DataRow" /> objects into.</param>
        <summary>Copies the <see cref="T:System.Data.DataRow" /> objects whose update failure generated this exception, to the specified array of <see cref="T:System.Data.DataRow" /> objects.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When performing batch updates with the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property of the <xref:System.Data.Common.DataAdapter> set to `true`, this exception is thrown if all row updates fail. In this case, this <xref:System.Data.DBConcurrencyException> contains <xref:System.Data.DataRow> objects for all rows whose update failed, rather than just the one <xref:System.Data.DataRow> object in <xref:System.Data.DBConcurrencyException.Row%2A>, and the affected <xref:System.Data.DataRow> objects can be retrieved by calling <xref:System.Data.DBConcurrencyException.CopyToRows%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="CopyToRows">
      <MemberSignature Language="C#" Value="public void CopyToRows (System.Data.DataRow[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyToRows(class System.Data.DataRow[] array, int32 arrayIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Data.DataRow[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The one-dimensional array of <see cref="T:System.Data.DataRow" /> objects to copy the <see cref="T:System.Data.DataRow" /> objects into.</param>
        <param name="arrayIndex">The destination array index to start copying into.</param>
        <summary>Copies the <see cref="T:System.Data.DataRow" /> objects whose update failure generated this exception, to the specified array of <see cref="T:System.Data.DataRow" /> objects, starting at the specified destination array index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When performing batch updates with the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property of the <xref:System.Data.Common.DataAdapter> set to `true`, this exception is thrown if all row updates fail. In this case, this <xref:System.Data.DBConcurrencyException> contains <xref:System.Data.DataRow> objects for all rows whose update failed, rather than just the one <xref:System.Data.DataRow> object in <xref:System.Data.DBConcurrencyException.Row%2A>, and the affected <xref:System.Data.DataRow> objects can be retrieved by calling <xref:System.Data.DBConcurrencyException.CopyToRows%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized data associated with the <see cref="T:System.Data.DBConcurrencyException" />.</param>
        <param name="context">A &lt;xref:System.Runtime.Serialization.StreamingContext&gt; that contains the source and destination of the serialized stream associated with the <see cref="T:System.Data.DBConcurrencyException" />.</param>
        <summary>Populates the aprcified serialization information object with the data needed to serialize the <see cref="T:System.Data.DBConcurrencyException" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</exception>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="Row">
      <MemberSignature Language="C#" Value="public System.Data.DataRow Row { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRow Row" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value of the <see cref="T:System.Data.DataRow" /> that generated the <see cref="T:System.Data.DBConcurrencyException" />.</summary>
        <value>The value of the <see cref="T:System.Data.DataRow" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use Row to retrieve the value of the <xref:System.Data.DataRow> row that generated the <xref:System.Data.DBConcurrencyException>. Setting the value of the <xref:System.Data.DataRow> has no effect.  
  
 When performing batch updates with the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property of the <xref:System.Data.Common.DataAdapter> set to `true`, this exception is thrown if all row updates fail. In this case, this <xref:System.Data.DBConcurrencyException> contains <xref:System.Data.DataRow> objects for all rows whose update failed, rather than just the one <xref:System.Data.DataRow> object in Row, and the affected <xref:System.Data.DataRow> objects can be retrieved by calling <xref:System.Data.DBConcurrencyException.CopyToRows%2A>.  
  
 Serialization support does not exist for <xref:System.Data.DataRow> objects. Therefore, if you serialize a <xref:System.Data.DBConcurrencyException> object, the value of the Row property in the serialized version of the object is set to a null value.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The value of the <see cref="T:System.Data.DataRow" />.</returns>
      </Docs>
    </Member>
    <Member MemberName="RowCount">
      <MemberSignature Language="C#" Value="public int RowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of rows whose update failed, generating this exception.</summary>
        <value>An integer containing a count of the number of rows whose update failed.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
        <returns>An integer containing a count of the number of rows whose update failed.</returns>
      </Docs>
    </Member>
  </Members>
</Type>