<Type Name="XmlReadMode" FullName="System.Data.XmlReadMode">
  <TypeSignature Language="C#" Value="public enum XmlReadMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed XmlReadMode extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Specifies how to read XML data and a relational schema into a <see cref="T:System.Data.DataSet" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the members of this enumeration when setting the `ReadMode` parameter of the <xref:System.Data.DataSet.ReadXml%2A> method.  
  
> [!NOTE]
>  `Auto` mode may be slower than setting XmlReadMode to an explicit option.  
  
 ]]></format>
    </remarks>
    <threadsafe />
    <returns />
    <value />
  </Docs>
  <Members>
    <Member MemberName="Auto">
      <MemberSignature Language="C#" Value="Auto" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode Auto = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Default.</summary>
        <threadsafe />
        <returns />
        <value />
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Performs the most appropriate of these actions:  
  
 If the data is a DiffGram, sets `XmlReadMode` to `DiffGram`.  
  
 -or-  
  
 If the dataset already has a schema, or the document contains an in-line schema, sets `XmlReadMode` to `ReadSchema`.  
  
 -or-  
  
 If the dataset does not already have a schema and the document does not contain an in-line schema, sets `XmlReadMode` to `InferSchema`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiffGram">
      <MemberSignature Language="C#" Value="DiffGram" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode DiffGram = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reads a DiffGram, applying changes from the DiffGram to the <see cref="T:System.Data.DataSet" />. The semantics are identical to those of a M:System.Data.DataSet.Merge(System.Data.DataSet)?qualifyHint=False</summary>
        <threadsafe />
        <returns />
        <value />
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The target T:System.Data.DataSet?qualifyHint=False&autoUpgrade=True must have the same schema as the T:System.Data.DataSet?qualifyHint=False&autoUpgrade=True on which M:System.Data.DataSet.WriteXml(System.IO.Stream)?qualifyHint=False&autoUpgrade=True as DiffGram is called. Otherwise the DiffGram merge operation fails, and an exception is thrown.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fragment">
      <MemberSignature Language="C#" Value="Fragment" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode Fragment = int32(5)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reads XML fragments, such as those generated by executing FOR XML queries, against an instance of SQL Server. When XmlReadMode is set to <see langword="Fragment" />, the default namespace is read as the inline schema.</summary>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="IgnoreSchema">
      <MemberSignature Language="C#" Value="IgnoreSchema" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode IgnoreSchema = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ignores any inline schema and reads data into the existing <see cref="T:System.Data.DataSet" /> schema. If any data does not match the existing schema, it is discarded (including data from differing namespaces defined for the <see cref="T:System.Data.DataSet" />). If the data is a DiffGram, <see langword="IgnoreSchema" /> has the same functionality as <see langword="DiffGram" />.</summary>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="InferSchema">
      <MemberSignature Language="C#" Value="InferSchema" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode InferSchema = int32(3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ignores any inline schema, infers schema from the data and loads the data. If the <see cref="T:System.Data.DataSet" /> already contains a schema, the current schema is extended by adding new tables or adding columns to existing tables. An exception is thrown if the inferred table already exists but with a different namespace, or if any of the inferred columns conflict with existing columns.</summary>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="InferTypedSchema">
      <MemberSignature Language="C#" Value="InferTypedSchema" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode InferTypedSchema = int32(6)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ignores any inline schema, infers a strongly typed schema from the data, and loads the data. If the type cannot be inferred from the data, it is interpreted as string data. If the T:System.Data.DataSet?qualifyHint=False</summary>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="ReadSchema">
      <MemberSignature Language="C#" Value="ReadSchema" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.XmlReadMode ReadSchema = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reads any inline schema and loads the data. If the <see cref="T:System.Data.DataSet" /> already contains schema, new tables may be added to the schema, but an exception is thrown if any tables in the inline schema already exist in the <see cref="T:System.Data.DataSet" />.</summary>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
  </Members>
</Type>