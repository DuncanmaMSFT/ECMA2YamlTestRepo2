<Type Name="MemoryProtectionScope" FullName="System.Security.Cryptography.MemoryProtectionScope">
  <TypeSignature Language="C#" Value="public enum MemoryProtectionScope" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed MemoryProtectionScope extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Specifies the scope of memory protection to be applied by the &lt;xref:System.Security.Cryptography.ProtectedMemory.Protect%2A&gt; method.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This enumeration is used with the <xref:System.Security.Cryptography.ProtectedMemory.Protect%2A> and <xref:System.Security.Cryptography.ProtectedMemory.Unprotect%2A> methods to protect data in memory.  
  
   
  
## Examples  
 The following code example shows how to use data protection.  
  
 [!code-cs[Cryptography.MemoryProtectionSample#1](../../add/codesnippet/CSharp/t-system.security.crypto_92_1.cs)]
 [!code-vb[Cryptography.MemoryProtectionSample#1](../../add/codesnippet/VisualBasic/t-system.security.crypto_92_1.vb)]
 [!code-cpp[Cryptography.MemoryProtectionSample#1](../../add/codesnippet/CPP/t-system.security.crypto_92_1.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
    <returns />
    <value />
  </Docs>
  <Members>
    <Member MemberName="CrossProcess">
      <MemberSignature Language="C#" Value="CrossProcess" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.MemoryProtectionScope CrossProcess = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.MemoryProtectionScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>All code in any process can unprotect memory that was protected using the M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)?qualifyHint=False</summary>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="SameLogon">
      <MemberSignature Language="C#" Value="SameLogon" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.MemoryProtectionScope SameLogon = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.MemoryProtectionScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Only code running in the same user context as the code that called the M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)?qualifyHint=False</summary>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="SameProcess">
      <MemberSignature Language="C#" Value="SameProcess" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Security.Cryptography.MemoryProtectionScope SameProcess = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.MemoryProtectionScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Only code running in the same process as the code that called the M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)?qualifyHint=False</summary>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
  </Members>
</Type>