<Type Name="XmlValidatingReader" FullName="System.Xml.XmlValidatingReader">
  <TypeSignature Language="C#" Value="public class XmlValidatingReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlValidatingReader extends System.Xml.XmlReader implements class System.Xml.IXmlLineInfo, class System.Xml.IXmlNamespaceResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlReader</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.IXmlLineInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.IXmlNamespaceResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("Use XmlReader created by XmlReader.Create() method using appropriate XmlReaderSettings instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a reader that provides document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) validation.  
  
 This class is obsolete. Starting with the .NET Framework 2.0, we recommend that you use the &lt;xref:System.Xml.XmlReaderSettings&gt; class and the &lt;xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName&gt; method to create a validating XML reader.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `XmlValidatingReader` implements the <xref:System.Xml.XmlReader> class and provides support for data validation. Use the <xref:System.Xml.XmlValidatingReader.Schemas%2A> property to have the reader validate by using schema files that are cached in an <xref:System.Xml.Schema.XmlSchemaCollection>. The <xref:System.Xml.XmlValidatingReader.ValidationType%2A> property specifies what type of validation the reader should perform. Setting the property to ValidationType.None creates a non-validating reader.  
  
 XmlValidatingReader throws an <xref:System.Xml.XmlException> on XML parse errors. After an exception is thrown the state of the reader is not predictable. For example, the reported node type may be different than the actual node type of the current node. Use the <xref:System.Xml.XmlValidatingReader.ReadState%2A> property to check whether a reader is in error state.  
  
> [!NOTE]
>  The XmlValidatingReader class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 ]]></format>
    </remarks>
    <threadsafe />
    <returns />
    <value />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlValidatingReader (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">The <see langword="XmlReader" /> to read from while validating. The current implementation supports only &lt;xref:System.Xml.XmlTextReader&gt;.</param>
        <summary>Initializes a new instance of the <see langword="XmlValidatingReader" /> class that validates the content returned from the given &lt;xref:System.Xml.XmlReader&gt;.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 All nodes returned from the given `XmlReader` are also returned from this validating reader, so there is no information loss in the process. New nodes not returned from the underlying reader may be added by this reader (for example, default attributes and the children of an entity reference). Any properties set on the given `XmlTextReader` also apply to this validating reader. For example, if the supplied reader had WhitespaceHandling.None set, this validating reader also ignores white space.  
  
 When external document type definitions (DTDs) or schemas are needed for validation, the <xref:System.Xml.XmlValidatingReader.XmlResolver%2A> property sets the <xref:System.Xml.XmlResolver> object to use for resolving external resources.  
  
   
  
## Examples  
 The following example validates two documents.  
  
 [!code-cpp[XmlValidatingReader.Cctor#1](../../add/codesnippet/CPP/m-system.xml.xmlvalidati_8_1.cpp)]
 [!code-vb[XmlValidatingReader.Cctor#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlvalidati_8_1.vb)]
 [!code-cs[XmlValidatingReader.Cctor#1](../../add/codesnippet/CSharp/m-system.xml.xmlvalidati_8_1.cs)]  
  
 The sample uses the following input files:  
  
 `notValidXSD.xml`  
  
 [!code-xml[XmlValidatingReader.Cctor#2](../../add/codesnippet/XML/m-system.xml.xmlvalidati_8_2.xml)]  
  
 `books.xsd`  
  
 [!code-xml[XmlValidatingReader.Cctor#3](../../add/codesnippet/XML/m-system.xml.xmlvalidati_8_3.xsd)]  
  
 `inlineXSD.xml`  
  
 [!code-xml[XmlValidatingReader.Cctor#4](../../add/codesnippet/XML/m-system.xml.xmlvalidati_8_4.xml)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The reader specified is not an <see langword="XmlTextReader" />.</exception>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlValidatingReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.IO.Stream" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">The stream containing the XML fragment to parse.</param>
        <param name="fragType">The &lt;xref:System.Xml.XmlNodeType&gt; of the XML fragment. This determines what the fragment can contain (see table below).</param>
        <param name="context">The &lt;xref:System.Xml.XmlParserContext&gt; in which the XML fragment is to be parsed. This includes the &lt;xref:System.Xml.XmlNameTable&gt; to use, encoding, namespace scope, current <see langword="xml:lang" />, and <see langword="xml:space" /> scope.</param>
        <summary>Initializes a new instance of the <see langword="XmlValidatingReader" /> class with the specified values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 This constructor parses the given string as a fragment of XML. If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.  
  
 The following table lists valid values for `fragType` and how the reader parses each of the different node types.  
  
|XmlNodeType|Fragment May Contain|  
|-----------------|--------------------------|  
|Element|Any valid element content (for example, any combination of elements, comments, processing instructions, cdata, text, and entity references).|  
|Attribute|The value of an attribute (the part inside the quotes).|  
|Document|The contents of an entire XML document; this enforces document level rules.|  
  
 The reader uses the following steps to determine the encoding of the stream:  
  
1.  Checks the <xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=fullName> property to determine the encoding.  
  
2.  If the `Encoding` property is `null`, the reader checks for a byte-order mark at the beginning of the stream.  
  
3.  If the `Encoding` property is `null`, and no byte-order mark is found, the reader assumes the stream is encoded in UTF-8.  
  
 If this reader will be validating using document type definition (DTD) (that is, <xref:System.Xml.XmlValidatingReader.ValidationType%2A> is set to ValidationType.DTD or ValidationType.Auto), the `XmlParserContext` specified in the constructor must supply all the necessary DocumentType information.  
  
> [!NOTE]
>  It is not possible to validate a fragment by using a DTD. By definition a DTD requires an entire document to be loaded for validation.  
  
 If this reader will be validating by using XML-Data Reduced (XDR) or XML Schema definition language (XSD) schemas, use the <xref:System.Xml.XmlValidatingReader.Schemas%2A> property to specify the <xref:System.Xml.Schema.XmlSchemaCollection> that contains the schemas (that is, the `XmlParserContext` does not need to supply the DocumentType information).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="fragType" /> is not one of the node types listed in the table below.</exception>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlValidatingReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.String" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">The string containing the XML fragment to parse.</param>
        <param name="fragType">The &lt;xref:System.Xml.XmlNodeType&gt; of the XML fragment. This also determines what the fragment string can contain (see table below).</param>
        <param name="context">The &lt;xref:System.Xml.XmlParserContext&gt; in which the XML fragment is to be parsed. This includes the &lt;xref:System.Xml.NameTable&gt; to use, encoding, namespace scope, current xml:lang, and xml:space scope.</param>
        <summary>Initializes a new instance of the <see langword="XmlValidatingReader" /> class with the specified values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 This constructor parses the given string as a fragment of XML. If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents. This constructor can handle strings returned from <xref:System.Xml.XmlReader.ReadInnerXml%2A>.  
  
 The following table lists valid values for `fragType` and how the reader parses each of the different node types.  
  
|XmlNodeType|Fragment May Contain|  
|-----------------|--------------------------|  
|Element|Any valid element content (for example, any combination of elements, comments, processing instructions, cdata, text, and entity references).|  
|Attribute|The value of an attribute (the part inside the quotes).|  
|Document|The contents of an entire XML document; this enforces document level rules.|  
  
 If this reader will be validating by using document type definition (DTD) (that is, <xref:System.Xml.XmlValidatingReader.ValidationType%2A> is set to ValidationType.DTD or ValidationType.Auto), the `XmlParserContext` specified in the constructor must supply all the necessary DocumentType information.  
  
> [!NOTE]
>  It is not possible to validate a fragment by using DTD. By definition DTD requires an entire document to be loaded for validation.  
  
 If this reader will be validating by using XML-Data Reduced (XDR) or XML Schema definition language (XSD) schemas, use the <xref:System.Xml.XmlValidatingReader.Schemas%2A> property to specify the <xref:System.Xml.Schema.XmlSchemaCollection> that contains the schemas (the `XmlParserContext` does not need to supply the DocumentType information).  
  
   
  
## Examples  
 The following example reads an XML fragment. It uses an `XmlParserContext` and its <xref:System.Xml.XmlNamespaceManager> to handle namespace matching.  
  
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](../../add/codesnippet/VisualBasic/8d914aff-d0cc-48ac-9614-_1.vb)]
 [!code-cs[Classic WebData XmlParserContext.XmlParserContext Example#1](../../add/codesnippet/CSharp/8d914aff-d0cc-48ac-9614-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="fragType" /> is not one of the node types listed in the table below.</exception>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="AttributeCount">
      <MemberSignature Language="C#" Value="public override int AttributeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AttributeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of attributes on the current node.</summary>
        <value>The number of attributes on the current node. This number includes default attributes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 This property is relevant to `Element`, `DocumentType`, and `XmlDeclaration` nodes only. (Other node types do not have attributes.)  
  
   
  
## Examples  
 The following example reads all the elements on the root node.  
  
 [!code-cs[Classic WebData XmlValidatingReader.AttributeCount Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_4_1.cs)]
 [!code-cpp[Classic WebData XmlValidatingReader.AttributeCount Example#1](../../add/codesnippet/CPP/p-system.xml.xmlvalidati_4_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.AttributeCount Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The number of attributes on the current node. This number includes default attributes.</returns>
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the base URI of the current node.</summary>
        <value>The base URI of the current node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 A networked XML document is comprised of chunks of data aggregated by using various World Wide Web Consortium (W3C) standard inclusion mechanisms and therefore contains nodes that come from different places. document type definition (DTD) entities are an example of this, but this is not limited to DTDs. The base URI tells you where these nodes came from. If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), String.Empty is returned.  
  
   
  
## Examples  
 The following example parses a file and displays the base URI of each node.  
  
 [!code-cs[Classic WebData XmlValidatingReader.BaseURI Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_3_1.cs)]
 [!code-vb[Classic WebData XmlValidatingReader.BaseURI Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_3_1.vb)]
 [!code-cpp[Classic WebData XmlValidatingReader.BaseURI Example#1](../../add/codesnippet/CPP/p-system.xml.xmlvalidati_3_1.cpp)]  
  
 The example uses the file, `uri.xml`, as input.  
  
 [!code-xml[Classic WebData XmlValidatingReader.BaseURI Example#2](../../add/codesnippet/XML/p-system.xml.xmlvalidati_3_2.xml)]  
  
 The `style.xml` file contains the XML text `<style>hardcover</style>`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The base URI of the current node.</returns>
      </Docs>
    </Member>
    <Member MemberName="CanReadBinaryContent">
      <MemberSignature Language="C#" Value="public override bool CanReadBinaryContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadBinaryContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlValidatingReader" /> implements the binary content read methods.</summary>
        <value>
          <see langword="true" /> if the binary content read methods are implemented; otherwise <see langword="false" />. The <see cref="T:System.Xml.XmlValidatingReader" /> class returns <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page..  
  
 The binary content read methods include the <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A>, <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A>, <xref:System.Xml.XmlValidatingReader.ReadElementContentAsBase64%2A>, and <xref:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex%2A> methods.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>
          <see langword="true" /> if the binary content read methods are implemented; otherwise <see langword="false" />. The <see cref="T:System.Xml.XmlValidatingReader" /> class returns <see langword="true" />.</returns>
      </Docs>
    </Member>
    <Member MemberName="CanResolveEntity">
      <MemberSignature Language="C#" Value="public override bool CanResolveEntity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResolveEntity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether this reader can parse and resolve entities.</summary>
        <value>
          <see langword="true" /> if the reader can parse and resolve entities; otherwise, <see langword="false" />. <see langword="XmlValidatingReader" /> always returns <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>
          <see langword="true" /> if the reader can parse and resolve entities; otherwise, <see langword="false" />. <see langword="XmlValidatingReader" /> always returns <see langword="true" />.</returns>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Changes the &lt;xref:System.Xml.XmlReader.ReadState%2A&gt; to Closed.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 This method also releases any resources held while reading. If this reader was constructed by using an <xref:System.Xml.XmlTextReader>, this method also calls `Close` on the underlying reader. If this reader was constructed by using a stream, this method also calls `Close` on the underlying stream.  
  
 If `Close` has already been called, no action is performed.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public override int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the depth of the current node in the XML document.</summary>
        <value>The depth of the current node in the XML document.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
   
  
## Examples  
 The following example displays each node including its depth, line number, and line position.  
  
 [!code-cpp[IXmlLineInfo#1](../../add/codesnippet/CPP/p-system.xml.xmlvalidati_13_1.cpp)]
 [!code-vb[IXmlLineInfo#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_13_1.vb)]
 [!code-cs[IXmlLineInfo#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_13_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The depth of the current node in the XML document.</returns>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the encoding attribute for the document.</summary>
        <value>The encoding value. If no encoding attribute exists, and there is not byte-order mark, this defaults to UTF-8.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 When any external reference is read (such as expanding an entity in a document type definition (DTD) file or reading a schema file) the encoding property is set to the encoding value of the external reference. If encoding is not specified in the external reference, and there is no byte-order mark, this defaults to UTF-8.  
  
 All the encoding standards that the underlying operating system supports are supported.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The encoding value. If no encoding attribute exists, and there is not byte-order mark, this defaults to UTF-8.</returns>
      </Docs>
    </Member>
    <Member MemberName="EntityHandling">
      <MemberSignature Language="C#" Value="public System.Xml.EntityHandling EntityHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.EntityHandling EntityHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.EntityHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies how the reader handles entities.</summary>
        <value>One of the <see cref="T:System.Xml.EntityHandling" /> values. If no <see langword="EntityHandling" /> is specified, it defaults to EntityHandling.ExpandEntities.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 This property can be changed and takes effect after the next <xref:System.Xml.XmlValidatingReader.Read%2A> call.  
  
 When `EntityHandling` is set to `ExpandCharEntities`, attribute values are only partially normalized. The reader normalizes each individual text node independently from the content of adjacent entity reference nodes.  
  
 To illustrate the difference between the entity handling modes consider the following XML:  
  
```  
<!DOCTYPE doc [<!ENTITY num "123">]>  
 <doc> A &num; </doc>  
```  
  
 When `EntityHandling` is set to `ExpandEntities` the "doc" element node contains one text node with the expanded entity text:  
  
|Depth|NodeType|Name|Value|  
|-----------|--------------|----------|-----------|  
|1|Text||A 123|  
  
 When `EntityHandling` is set to `ExpandCharEntites`, and <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A> is set to Significant or All, the "doc" element expands the character entity and returns the general entity as a node:  
  
|Depth|NodeType|Name|Value|  
|-----------|--------------|----------|-----------|  
|1|Text||A|  
|1|EntityReference|num||  
|1|SignificantWhitespace|||  
  
   
  
## Examples  
 The following example uses the `ResolveEntity` method to expand a general entity.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](../../add/codesnippet/CPP/p-system.xml.xmlvalidati_8_1.cpp)]
 [!code-cs[Classic WebData XmlValidatingReader.ResolveEntity Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_8_1.cs)]
 [!code-vb[Classic WebData XmlValidatingReader.ResolveEntity Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_8_1.vb)]  
  
 The example uses the file, `book1.xml`, as input.  
  
 [!code-xml[Classic WebData XmlValidatingReader.ResolveEntity Example#2](../../add/codesnippet/XML/p-system.xml.xmlvalidati_8_2.xml)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Invalid value was specified.</exception>
        <threadsafe />
        <returns>One of the <see cref="T:System.Xml.EntityHandling" /> values. If no <see langword="EntityHandling" /> is specified, it defaults to EntityHandling.ExpandEntities.</returns>
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public override bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the reader is positioned at the end of the stream.</summary>
        <value>
          <see langword="true" /> if the reader is positioned at the end of the stream; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>
          <see langword="true" /> if the reader is positioned at the end of the stream; otherwise, <see langword="false" />.</returns>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(int32 i) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.)</param>
        <summary>Gets the value of the attribute with the specified index.</summary>
        <returns>The value of the specified attribute.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method does not move the reader.  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to &lt;xref:System.Xml.XmlValidatingReader.AttributeCount%2A&gt;.</exception>
        <threadsafe />
        <value>The value of the specified attribute.</value>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The qualified name of the attribute.</param>
        <summary>Gets the value of the attribute with the specified name.</summary>
        <returns>The value of the specified attribute. If the attribute is not found, <see langword="null" /> is returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 This method does not move the reader.  
  
 If the reader is positioned on a `DocumentType` node, this method can be used to get the PUBLIC and SYSTEM literals, for example, `reader.GetAttribute("PUBLIC")`  
  
   
  
## Examples  
 The following example gets the value of the ISBN attribute.  
  
 [!code-cs[Classic WebData XmlValidatingReader.GetAttribute Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlvalidati_7_1.cs)]
 [!code-cpp[Classic WebData XmlValidatingReader.GetAttribute Example#1](../../add/codesnippet/CPP/m-system.xml.xmlvalidati_7_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.GetAttribute Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlvalidati_7_1.vb)]  
  
 The example uses the file, `attrs.xml`, as input.  
  
 [!code-xml[Classic WebData XmlValidatingReader.GetAttribute Example#2](../../add/codesnippet/XML/m-system.xml.xmlvalidati_7_2.xml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>The value of the specified attribute. If the attribute is not found, <see langword="null" /> is returned.</value>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">The local name of the attribute.</param>
        <param name="namespaceURI">The namespace URI of the attribute.</param>
        <summary>Gets the value of the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</summary>
        <returns>The value of the specified attribute. If the attribute is not found, <see langword="null" /> is returned. This method does not move the reader.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 The following XML contains an attribute in a specific namespace:  
  
```  
<test xmlns:dt="urn:datatypes" dt:type="int"/>  
```  
  
 You can look up the `dt:type` attribute by using one argument (prefix and local name) or two arguments (local name and namespace URI):  
  
```  
String dt = reader.GetAttribute("dt:type");  
String dt2 = reader.GetAttribute("type","urn:datatypes");  
```  
  
 To look up the `xmlns:dt` attribute, use one of the following arguments:  
  
```  
String dt3 = reader.GetAttribute("xmlns:dt");  
String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);  
```  
  
 You can also get this information by using the <xref:System.Xml.XmlValidatingReader.Prefix%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>The value of the specified attribute. If the attribute is not found, <see langword="null" /> is returned. This method does not move the reader.</value>
      </Docs>
    </Member>
    <Member MemberName="HasLineInfo">
      <MemberSignature Language="C#" Value="public bool HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasLineInfo() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a value indicating whether the class can return line information.</summary>
        <returns>
          <see langword="true" /> if the class can return line information; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>
          <see langword="true" /> if the class can return line information; otherwise, <see langword="false" />.</value>
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public override bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current node can have a &lt;xref:System.Xml.XmlValidatingReader.Value%2A&gt; other than String.Empty.</summary>
        <value>
          <see langword="true" /> if the node on which the reader is currently positioned can have a <see langword="Value" />; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 The following table lists node types that have a value to return.  
  
|Node Type|Value|  
|---------------|-----------|  
|`Attribute`|The value of the attribute.|  
|`CDATA`|The content of the CDATA section.|  
|`Comment`|The content of the comment.|  
|`DocumentType`|The internal subset.|  
|`ProcessingInstruction`|The entire content, excluding the target.|  
|`SignificantWhitespace`|The white space between markup in a mixed content model.|  
|`Text`|The content of the text node.|  
|`Whitespace`|The white space between markup.|  
|`XmlDeclaration`|The content of the declaration.|  
  
   
  
## Examples  
 The following example reads in XML with various data types and displays each of the nodes.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.HasValue Example#1](../../add/codesnippet/CPP/p-system.xml.xmlvalidati_10_1.cpp)]
 [!code-cs[Classic WebData XmlValidatingReader.HasValue Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_10_1.cs)]
 [!code-vb[Classic WebData XmlValidatingReader.HasValue Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>
          <see langword="true" /> if the node on which the reader is currently positioned can have a <see langword="Value" />; otherwise, <see langword="false" />.</returns>
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public override bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.</summary>
        <value>
          <see langword="true" /> if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; <see langword="false" /> if the attribute value was explicitly set.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property applies only to an attribute node.  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
   
  
## Examples  
 The following example displays all attributes nodes on the root element.  
  
 [!code-cpp[XmlValidatingReader.IsDefault#1](../../add/codesnippet/CPP/p-system.xml.xmlvalidati_12_1.cpp)]
 [!code-cs[XmlValidatingReader.IsDefault#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_12_1.cs)]
 [!code-vb[XmlValidatingReader.IsDefault#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_12_1.vb)]  
  
 The example uses the following files as input.  
  
 `book4.xml`  
  
 [!code-xml[XmlValidatingReader.IsDefault#2](../../add/codesnippet/XML/p-system.xml.xmlvalidati_12_2.xml)]  
  
 `book.dtd`  
  
 [!CODE [XmlValidatingReader.IsDefault#3](../CodeSnippet/VS_Snippets_Data/XmlValidatingReader.IsDefault#3)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>
          <see langword="true" /> if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; <see langword="false" /> if the attribute value was explicitly set.</returns>
      </Docs>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="C#" Value="public override bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current node is an empty element (for example, `<MyElement />`).</summary>
        <value>
          <see langword="true" /> if the current node is an element (&lt;xref:System.Xml.XmlValidatingReader.NodeType%2A&gt; equals <see langword="XmlNodeType.Element" />) that ends with `/&gt;`; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 This property enables you to determine the difference between the following:  
  
 `<item num="123"/>` (`IsEmptyElement` is `true`).  
  
 `<item num="123">` (`IsEmptyElement` is `false`, although element content is empty).  
  
 A corresponding `EndElement` node is not generated for empty elements.  
  
 If default content has been added to an element due to schema validation, `IsEmptyElement` still returns `true`. It has no bearing on whether or not the element has a default value. In other words, `IsEmptyElement` simply reports whether or not the element in the source document had an end element tag.  
  
   
  
## Examples  
 The following example displays the text content of each element.  
  
 [!code-cs[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_2_1.cs)]
 [!code-cpp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](../../add/codesnippet/CPP/p-system.xml.xmlvalidati_2_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_2_1.vb)]  
  
 The example uses the file, `elems.xml`, as input.  
  
 [!code-xml[Classic WebData XmlValidatingReader.IsEmptyElement Example#2](../../add/codesnippet/XML/p-system.xml.xmlvalidati_2_2.xml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>
          <see langword="true" /> if the current node is an element (&lt;xref:System.Xml.XmlValidatingReader.NodeType%2A&gt; equals <see langword="XmlNodeType.Element" />) that ends with `/&gt;`; otherwise, <see langword="false" />.</returns>
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public int LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current line number.</summary>
        <value>The current line number. The starting value for this property is 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 This property is most commonly used for error reporting, but can be called at any time. The starting value for this property is 1. Combined with <xref:System.Xml.XmlValidatingReader.LinePosition%2A>, a value of 1,1 indicates the start of the document.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The current line number. The starting value for this property is 1.</returns>
      </Docs>
    </Member>
    <Member MemberName="LinePosition">
      <MemberSignature Language="C#" Value="public int LinePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current line position.</summary>
        <value>The current line position. The starting value for this property is 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 This property is most commonly used for error reporting, but can be called at any time. The starting value for this property is `1`.  
  
 The position indicated is the first character of text in the markup.  
  
```  
<root>  
 abc<tag/>  
</root>  
```  
  
 On the first line of the preceding XML text, a `LinePosition` of `2` corresponds to the character `r`; on the second line, a `LinePosition` of `5` corresponds to the character `t`; and on the third line, a `LinePosition` of `3` corresponds to the character `r`.  
  
 Combined with <xref:System.Xml.XmlValidatingReader.LineNumber%2A>, a value of `1,1` indicates the start of the document.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The current line position. The starting value for this property is 1.</returns>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the current node.</summary>
        <value>The name of the current node with the prefix removed. For example, <see langword="LocalName" /> is <see langword="book" /> for the element `</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
   
  
## Examples  
 The following example reads an XML fragment.  
  
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_15_1.vb)]
 [!code-cs[Classic WebData XmlParserContext.XmlParserContext Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_15_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="C#" Value="public override string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The prefix whose namespace Uniform Resource Identifier (URI) you want to resolve. To match the default namespace, pass an empty string.</param>
        <summary>Resolves a namespace prefix in the current element's scope.</summary>
        <returns>The namespace URI to which the prefix maps or <see langword="null" /> if no matching prefix is found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page..  
  
 In the following XML string, if the reader is positioned on the `href` attribute, the prefix `a` is resolved by calling `reader.LookupNamespace("a", true)`. The returned string is `urn:456`.  
  
```  
<root xmlns:a="urn:456">  
 <item>  
 <ref href="a:b"/>  
 </item>  
</root>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>The namespace URI to which the prefix maps or <see langword="null" /> if no matching prefix is found.</value>
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override void MoveToAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void MoveToAttribute(int32 i) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">The index of the attribute.</param>
        <summary>Moves to the attribute with the specified index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
   
  
## Examples  
 The following example reads all the elements on the root node.  
  
 [!code-cs[Classic WebData XmlValidatingReader.AttributeCount Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlvalidati_3_1.cs)]
 [!code-cpp[Classic WebData XmlValidatingReader.AttributeCount Example#1](../../add/codesnippet/CPP/m-system.xml.xmlvalidati_3_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.AttributeCount Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlvalidati_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to &lt;xref:System.Xml.XmlReader.AttributeCount%2A&gt;.</exception>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The qualified name of the attribute.</param>
        <summary>Moves to the attribute with the specified name.</summary>
        <returns>
          <see langword="true" /> if the attribute is found; otherwise, <see langword="false" />. If <see langword="false" />, the position of the reader does not change.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 After calling this method, the <xref:System.Xml.XmlValidatingReader.Name%2A>, <xref:System.Xml.XmlValidatingReader.NamespaceURI%2A>, and <xref:System.Xml.XmlValidatingReader.Prefix%2A> properties reflect the properties of that attribute.  
  
   
  
## Examples  
 The following example reads an attribute with text and entity reference nodes.  
  
 [!code-cs[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlvalidati_2_1.cs)]
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](../../add/codesnippet/CPP/m-system.xml.xmlvalidati_2_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlvalidati_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>
          <see langword="true" /> if the attribute is found; otherwise, <see langword="false" />. If <see langword="false" />, the position of the reader does not change.</value>
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string localName, string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">The local name of the attribute.</param>
        <param name="namespaceURI">The namespace URI of the attribute.</param>
        <summary>Moves to the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</summary>
        <returns>
          <see langword="true" /> if the attribute is found; otherwise, <see langword="false" />. If <see langword="false" />, the position of the reader does not change.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 After calling this method, the <xref:System.Xml.XmlValidatingReader.Name%2A>, <xref:System.Xml.XmlValidatingReader.NamespaceURI%2A>, and <xref:System.Xml.XmlValidatingReader.Prefix%2A> properties reflect the properties of that attribute.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>
          <see langword="true" /> if the attribute is found; otherwise, <see langword="false" />. If <see langword="false" />, the position of the reader does not change.</value>
      </Docs>
    </Member>
    <Member MemberName="MoveToElement">
      <MemberSignature Language="C#" Value="public override bool MoveToElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToElement() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Moves to the element that contains the current attribute node.</summary>
        <returns>
          <see langword="true" /> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <see langword="false" /> if the reader is not positioned on an attribute (the position of the reader does not change).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 Use this method to return to an element after navigating through its attributes. This method moves the reader to one of the following node types: `Element`, `DocumentType`, or `XmlDeclaration`.  
  
   
  
## Examples  
 The following example reads all the elements on the root node.  
  
 [!code-cs[Classic WebData XmlValidatingReader.AttributeCount Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlvalidati_4_1.cs)]
 [!code-cpp[Classic WebData XmlValidatingReader.AttributeCount Example#1](../../add/codesnippet/CPP/m-system.xml.xmlvalidati_4_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.AttributeCount Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlvalidati_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>
          <see langword="true" /> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <see langword="false" /> if the reader is not positioned on an attribute (the position of the reader does not change).</value>
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Moves to the first attribute.</summary>
        <returns>
          <see langword="true" /> if an attribute exists (the reader moves to the first attribute); otherwise, <see langword="false" /> (the position of the reader does not change).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
   
  
## Examples  
 The following example reads an XML fragment.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](../../add/codesnippet/CPP/m-system.xml.xmlvalidati_9_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlvalidati_9_1.vb)]
 [!code-cs[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlvalidati_9_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>
          <see langword="true" /> if an attribute exists (the reader moves to the first attribute); otherwise, <see langword="false" /> (the position of the reader does not change).</value>
      </Docs>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Moves to the next attribute.</summary>
        <returns>
          <see langword="true" /> if there is a next attribute; <see langword="false" /> if there are no more attributes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 If the current node is an element node, this method is equivalent to <xref:System.Xml.XmlValidatingReader.MoveToFirstAttribute%2A>. If `MoveToNextAttribute` returns `true`, the reader moves to the next attribute; otherwise, the position of the reader does not change.  
  
   
  
## Examples  
 The following example reads an XML fragment.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](../../add/codesnippet/CPP/m-system.xml.xmlvalidati_10_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlvalidati_10_1.vb)]
 [!code-cs[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlvalidati_10_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>
          <see langword="true" /> if there is a next attribute; <see langword="false" /> if there are no more attributes.</value>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the qualified name of the current node.</summary>
        <value>The qualified name of the current node. For example, <see langword="Name" /> is <see langword="bk:book" /> for the element `</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
   
  
## Examples  
 The following example reads an XML file and displays each of the nodes.  
  
 [!code-cs[Classic WebData XmlValidatingReader.Name Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_5_1.cs)]
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](../../add/codesnippet/CPP/p-system.xml.xmlvalidati_5_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_5_1.vb)]  
  
 The example uses the file, `items.xml`, as input.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](../../add/codesnippet/XML/p-system.xml.xmlvalidati_5_2.xml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether to do namespace support.</summary>
        <value>
          <see langword="true" /> to do namespace support; otherwise, <see langword="false" />. The default is <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>
          <see langword="true" /> to do namespace support; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public override string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the namespace Uniform Resource Identifier (URI) (as defined in the World Wide Web Consortium (W3C) Namespace specification) of the node on which the reader is positioned.</summary>
        <value>The namespace URI of the current node; otherwise an empty string.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is relevant to `Element` and `Attribute` nodes only.  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
   
  
## Examples  
 The following example reads an XML fragment.  
  
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_9_1.vb)]
 [!code-cs[Classic WebData XmlParserContext.XmlParserContext Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_9_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The namespace URI of the current node; otherwise an empty string.</returns>
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;xref:System.Xml.XmlNameTable&gt; associated with this implementation.</summary>
        <value>
          <see langword="XmlNameTable" /> that enables you to get the atomized version of a string within the node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 All node and attribute names returned from <xref:System.Xml.XmlValidatingReader> are atomized by using the `NameTable`. When the same name is returned multiple times (for example, `Customer`), the same `String` object will be returned for that name. This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>
          <see langword="XmlNameTable" /> that enables you to get the atomized version of a string within the node.</returns>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the current node.</summary>
        <value>One of the &lt;xref:System.Xml.XmlNodeType&gt; values representing the type of the current node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 This property never returns the following `XmlNodeType` types: `Document`, `DocumentFragment`, `Entity`, or `Notation`.  
  
   
  
## Examples  
 The following example reads an XML file and displays each of the nodes.  
  
 [!code-cs[Classic WebData XmlValidatingReader.Name Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_0_1.cs)]
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](../../add/codesnippet/CPP/p-system.xml.xmlvalidati_0_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_0_1.vb)]  
  
 The example uses the file, `items.xml`, as input.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](../../add/codesnippet/XML/p-system.xml.xmlvalidati_0_2.xml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>One of the &lt;xref:System.Xml.XmlNodeType&gt; values representing the type of the current node.</returns>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public override string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the namespace prefix associated with the current node.</summary>
        <value>The namespace prefix associated with the current node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
   
  
## Examples  
 The following example reads an XML fragment.  
  
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_1_1.vb)]
 [!code-cs[Classic WebData XmlParserContext.XmlParserContext Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The namespace prefix associated with the current node.</returns>
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public override char QuoteChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the quotation mark character used to enclose the value of an attribute node.</summary>
        <value>The quotation mark character (" or ') used to enclose the value of an attribute node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property applies only to an attribute node.  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The quotation mark character (" or ') used to enclose the value of an attribute node.</returns>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the next node from the stream.</summary>
        <returns>
          <see langword="true" /> if the next node was read successfully; <see langword="false" /> if there are no more nodes to read.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 When a reader is first created and initialized, there is no information available. You must call `Read` to read the first node.  
  
   
  
## Examples  
 The following example reads an XML file and displays each node.  
  
 [!code-cs[Classic WebData XmlValidatingReader.Name Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlvalidati_5_1.cs)]
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](../../add/codesnippet/CPP/m-system.xml.xmlvalidati_5_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlvalidati_5_1.vb)]  
  
 The example uses the file, `items.xml`, as input.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](../../add/codesnippet/XML/m-system.xml.xmlvalidati_5_2.xml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>
          <see langword="true" /> if the next node was read successfully; <see langword="false" /> if there are no more nodes to read.</value>
      </Docs>
    </Member>
    <Member MemberName="ReadAttributeValue">
      <MemberSignature Language="C#" Value="public override bool ReadAttributeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ReadAttributeValue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Parses the attribute value into one or more <see langword="Text" />, <see langword="EntityReference" />, or <see langword="EndEntity" /> nodes.</summary>
        <returns>
          <see langword="true" /> if there are nodes to return.  
  
 <see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  
  
 An empty attribute, such as, `misc=""`, returns <see langword="true" /> with a single node with a value of String.Empty.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 Use this method after calling <xref:System.Xml.XmlValidatingReader.MoveToAttribute%2A> to read through the text or entity reference nodes that make up the attribute value. The <xref:System.Xml.XmlReader.Depth%2A> of the attribute value nodes is one plus the depth of the attribute node. The `Depth` increments and decrements by one when you step into and out of general entity references.  
  
 For example, suppose you have the following XML: `<test name="a &b; c"/>`  
  
 where the entity `b` is defined in the document type definition (DTD) as follows: `<!ENTITY b "123">`  
  
 If <xref:System.Xml.XmlValidatingReader.EntityHandling%2A> is set to `ExpandCharEntities`, the following C# code returns the attribute value as two text nodes and one entity reference node:  
  
```  
reader.MoveToAttribute("name");  
  while (reader.ReadAttributeValue())  
  {  
  if (reader.NodeType == XmlNodeType.Text)  
  {  
  // at this point reader.Value == "a " or " c"  
  }  
  else if (reader.NodeType == XmlNodeType.EntityReference)  
  {  
  // at this point reader.Name == "b"  
  reader.ResolveEntity();  
  while (reader.ReadAttributeValue() &&  
  reader.NodeType != XmlNodeType.EndEntity)  
  {  
  // reader.Value == "123"  
  }  
  }  
    }  
```  
  
   
  
## Examples  
 The following example reads an attribute with text and entity reference nodes.  
  
 [!code-cs[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlvalidati_6_1.cs)]
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](../../add/codesnippet/CPP/m-system.xml.xmlvalidati_6_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlvalidati_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>
          <see langword="true" /> if there are nodes to return.  
  
 <see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  
  
 An empty attribute, such as, `misc=""`, returns <see langword="true" /> with a single node with a value of String.Empty.</value>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer into which to copy the resulting text. This value cannot be <see langword="null" />.</param>
        <param name="index">The offset into the buffer where to start copying the result.</param>
        <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
        <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
        <returns>The number of bytes written to the buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page..  
  
 This method streams the content, decodes the Base64 content, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text. For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies". You can obtain RFCs from the Request for Comments Web site at http://www.rfc-editor.org.  
  
> [!NOTE]
>  You should not access any of the reader properties between calls to the ReadContentAsBase64 method until the method returns the value 0.  
  
 This method has the following behavior:  
  
-   ReadContentAsBase64 returns the value 0 when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.  
  
-   If you ask for fewer, or the exact number, of bytes than are left in the stream, the reader remains in its current position.  
  
-   ReadContentAsBase64 is not supported on the following XML node types:  Element, XmlDeclaration, None, Document, DocumentType, Notation, Entity, and DocumentFragment.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">ReadContentAsBase64 is not supported on the current node.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
        <threadsafe />
        <value>The number of bytes written to the buffer.</value>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer into which to copy the resulting text. This value cannot be <see langword="null" />.</param>
        <param name="index">The offset into the buffer where to start copying the result.</param>
        <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
        <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
        <returns>The number of bytes written to the buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page..  
  
 This method streams the content, decodes the BinHex content, and returns the decoded binary bytes (for example, an inline BinHex encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text.  
  
> [!NOTE]
>  You should not access any of the reader properties between calls to the ReadContentAsBinHex method until the method returns the value 0.  
  
 This method has the following behavior:  
  
-   ReadContentAsBinHex returns the value 0 when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.  
  
-   If you ask for fewer, or the exact number, of bytes than are left in the stream, the reader remains in its current position.  
  
-   ReadContentAsBinHex is not supported on the following XML node types:  Element, XmlDeclaration, None, Document, DocumentType, Notation, Entity, and DocumentFragment.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">ReadContentAsBinHex is not supported on the current node.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlValidatingReader" /> implementation does not support this method.</exception>
        <threadsafe />
        <value>The number of bytes written to the buffer.</value>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer into which to copy the resulting text. This value cannot be <see langword="null" />.</param>
        <param name="index">The offset into the buffer where to start copying the result.</param>
        <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
        <summary>Reads the element and decodes the Base64 content.</summary>
        <returns>The number of bytes written to the buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 This method reads the element content, decodes it using Base64 encoding, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer. For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies". You can obtain RFCs from the Request for Comments Web site at http://www.rfc-editor.org.  
  
 This method can read only simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments, and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.  
  
 This method is very similar to the <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A> method except that it can be called only on element node types.  
  
 If the `count` value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <xref:System.Xml.XmlValidatingReader> reads all the remaining bytes in the document and returns the number of bytes read. The next <xref:System.Xml.XmlValidatingReader> method call returns a zero and moves the reader to the node following the <xref:System.Xml.XmlNodeType>.  
  
 If you call <xref:System.Xml.XmlValidatingReader.Read%2A> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <xref:System.Xml.XmlValidatingReader.Read%2A> method was called. This means that the reader will read all the text until the end element is encountered. It will then read the end tag node, read the next node, and then position itself on the next subsequent node.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlValidatingReader" /> implementation does not support this method.</exception>
        <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
        <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
        <threadsafe />
        <value>The number of bytes written to the buffer.</value>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The buffer into which to copy the resulting text. This value cannot be <see langword="null" />.</param>
        <param name="index">The offset into the buffer where to start copying the result.</param>
        <param name="count">The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</param>
        <summary>Reads the element and decodes the BinHex content.</summary>
        <returns>The number of bytes written to the buffer.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 This method reads the element content, decodes it using BinHex encoding, and returns the decoded binary bytes (for example, an inline BinHex encoded GIF image) into the buffer.  
  
 This method can read only simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments, and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.  
  
 This method is very similar to the <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A> method except that it can be called only on element node types.  
  
 If the `count` value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <xref:System.Xml.XmlValidatingReader> reads all the remaining bytes in the document and returns the number of bytes read. The next <xref:System.Xml.XmlValidatingReader> method call returns a zero and moves the reader to the node following the <xref:System.Xml.XmlNodeType>.  
  
 If you call <xref:System.Xml.XmlValidatingReader.Read%2A> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <xref:System.Xml.XmlValidatingReader.Read%2A> method was called. This means that the reader will read all the text until the end element is encountered. It will then read the end tag node, read the next node, and then position itself on the next subsequent node.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The current node is not an element node.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The index into the buffer or index + count is larger than the allocated buffer size.</exception>
        <exception cref="T:System.NotSupportedException">The <see cref="T:System.Xml.XmlValidatingReader" /> implementation does not support this method.</exception>
        <exception cref="T:System.Xml.XmlException">The element contains mixed-content.</exception>
        <exception cref="T:System.FormatException">The content cannot be converted to the requested type.</exception>
        <threadsafe />
        <value>The number of bytes written to the buffer.</value>
      </Docs>
    </Member>
    <Member MemberName="Reader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Reader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlReader Reader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;xref:System.Xml.XmlReader&gt; used to construct this <see langword="XmlValidatingReader" />.</summary>
        <value>The <see langword="XmlReader" /> specified in the constructor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 This property allows the user to access properties specific to the supplied reader. It returns a typed `XmlReader`. The user should query for the type before casting.  
  
 Changing the state of the returned reader (for example, calling one of the read methods) can lead to unpredictable results.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The <see langword="XmlReader" /> specified in the constructor.</returns>
      </Docs>
    </Member>
    <Member MemberName="ReadState">
      <MemberSignature Language="C#" Value="public override System.Xml.ReadState ReadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ReadState ReadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ReadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the state of the reader.</summary>
        <value>One of the &lt;xref:System.Xml.ReadState&gt; values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>One of the &lt;xref:System.Xml.ReadState&gt; values.</returns>
      </Docs>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public override string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the contents of an element or text node as a string.</summary>
        <returns>The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.  
  
 <block subset="none" type="note">  
 The text node can be either an element or an attribute text node.  
  
</block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 If positioned on an element, `ReadString` concatenates all text, significant white space, white space, and CDATA section node types together and returns the concatenated data as the element content. The reader stops when any markup is encountered, including comments and processing instructions. This could occur in a mixed content model, or when an element end tag is read.  
  
 If positioned on a text node, `ReadString` performs the same concatenation from the text node to the element end tag. If the reader is positioned on an attribute text node, `ReadString` has the same functionality as if the reader were position on the element start tag. It returns all the concatenated element text nodes.  
  
 The <xref:System.Xml.XmlValidatingReader.EntityHandling%2A> property determines how `ReadString` works as follows:  
  
|Value|Description|  
|-----------|-----------------|  
|ExpandEntities|Returns expanded character and general entities. This is the default.|  
|ExpandCharEntities|Returns the text content up to but not including a general entity reference. This means a general entity causes ReadString to stop. You must call `Read` to step over the entity reference.|  
  
   
  
## Examples  
 The following example displays the text content of each of the elements.  
  
 [!code-cs[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlvalidati_0_1.cs)]
 [!code-cpp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](../../add/codesnippet/CPP/m-system.xml.xmlvalidati_0_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlvalidati_0_1.vb)]  
  
 The example uses the file, `elems.xml`, as input.  
  
 [!code-xml[Classic WebData XmlValidatingReader.IsEmptyElement Example#2](../../add/codesnippet/XML/m-system.xml.xmlvalidati_0_2.xml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.  
  
 <block subset="none" type="note">  
 The text node can be either an element or an attribute text node.  
  
</block></value>
      </Docs>
    </Member>
    <Member MemberName="ReadTypedValue">
      <MemberSignature Language="C#" Value="public object ReadTypedValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadTypedValue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the common language runtime type for the specified XML Schema definition language (XSD) type.</summary>
        <returns>The common language runtime type for the specified XML Schema type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 For example, if the schema type is defined as `xsd:int`, the runtime type `int32` is returned for the object. This can be tested using the <xref:System.Object.GetType%2A> method and cast accordingly. The ReadTypedValue method always returns a type that is derived from the <xref:System.Object> class. It never returns the <xref:System.Object> type.  
  
 If the reader is positioned on an attribute, this method returns the runtime typed object, but does not change the position of the reader. If the reader is positioned on an element, `ReadTypedValue` reads any CDATA, text, white space, significant white space, and comment nodes, returns the runtime typed object and positions the reader on the end tag. Any types that do not have a direct mapping, for example `NMTOKENS`, are returned as strings.  
  
> [!NOTE]
>  If <xref:System.Xml.XmlValidatingReader.ValidationType%2A> has been set to ValidationType.None, data type information is not provided from either schemas or document type definitions (DTDs).  
  
> [!CAUTION]
>  After calling <xref:System.Xml.XmlValidatingReader.Close%2A>, `ReadTypedValue` will return `null`.  
  
   
  
## Examples  
 The following example displays the type information for each of the elements in the XML document.  
  
 [!code-cs[XmlValidatingReader.SchemaType#1](../../add/codesnippet/CSharp/m-system.xml.xmlvalidati_11_1.cs)]
 [!code-cpp[XmlValidatingReader.SchemaType#1](../../add/codesnippet/CPP/m-system.xml.xmlvalidati_11_1.cpp)]
 [!code-vb[XmlValidatingReader.SchemaType#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlvalidati_11_1.vb)]  
  
 The example uses the following input files.  
  
 `booksSchema.xml`  
  
 [!code-xml[XmlValidatingReader.SchemaType#2](../../add/codesnippet/XML/m-system.xml.xmlvalidati_11_2.xml)]  
  
 `books.xsd`  
  
 [!code-xml[XmlValidatingReader.SchemaType#3](../../add/codesnippet/XML/m-system.xml.xmlvalidati_11_3.xsd)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>The common language runtime type for the specified XML Schema type.</value>
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="C#" Value="public override void ResolveEntity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResolveEntity() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resolves the entity reference for <see langword="EntityReference" /> nodes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 If the reader is positioned on an `EntityReference` node (`XmlNodeType.EntityReference`), if <xref:System.Xml.XmlValidatingReader.Read%2A> is called after calling this method, the entity replacement text is parsed. After the entity replacement text is finished, an `EndEntity` node is returned to close the entity reference scope.  
  
> [!NOTE]
>  After calling this method, if the entity is part of an attribute value, you must call <xref:System.Xml.XmlValidatingReader.ReadAttributeValue%2A> to step into the entity.  
  
   
  
## Examples  
 The following example uses `ResolveEntity` to expand a general entity.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](../../add/codesnippet/CPP/m-system.xml.xmlvalidati_1_1.cpp)]
 [!code-cs[Classic WebData XmlValidatingReader.ResolveEntity Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlvalidati_1_1.cs)]
 [!code-vb[Classic WebData XmlValidatingReader.ResolveEntity Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlvalidati_1_1.vb)]  
  
 The example uses the file, `book1.xml`, as input.  
  
 [!code-xml[Classic WebData XmlValidatingReader.ResolveEntity Example#2](../../add/codesnippet/XML/m-system.xml.xmlvalidati_1_2.xml)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The reader is not positioned on an <see langword="EntityReference" /> node.</exception>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCollection Schemas { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCollection Schemas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> to use for validation.</summary>
        <value>The <see langword="XmlSchemaCollection" /> to use for validation.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 The `XmlSchemaCollection` holds pre-loaded XML-Data Reduced (XDR) and XML Schema definition language (XSD) schemas. This property gives the reader access to the cache of schemas and allows it to validate without having to re-load schemas every time. The reader does not add anything to the `XmlSchemaCollection`.  
  
 If the `XmlSchemaCollection` includes an XML schema (XSD) which contains `include` or `import` elements that reference other namespaces, the schemas for these other namespaces are loaded for validation purposes only. Unless these schemas were explicitly added to the schema collection, they will not be accessible using any of the collection methods or properties. For example, if the collection contains the schema file `a.xsd`, which contains a reference to the schema file `b.xsd`, you must add `b.xsd` to the schema collection before you can access it using any of the collection methods or properties.  
  
 When the `XmlSchemaCollection` is accessed using the `Schemas` property, the <xref:System.Xml.Schema.XmlSchemaCollection.Add%2A?displayProperty=fullName> method uses the <xref:System.Xml.XmlResolver> specified by the <xref:System.Xml.XmlValidatingReader.XmlResolver%2A?displayProperty=fullName> property.  
  
> [!NOTE]
>  The schemas must be added to the `XmlSchemaCollection` before the first `Read` call.  
  
   
  
## Examples  
 The following example validates three XML files using schemas stored in the XmlSchemaCollection.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Schemas Example#1](../../add/codesnippet/CPP/p-system.xml.xmlvalidati_6_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.Schemas Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_6_1.vb)]
 [!code-cs[Classic WebData XmlValidatingReader.Schemas Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_6_1.cs)]  
  
 The sample uses the following five input files:  
  
 `booksSchema.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#2](../../add/codesnippet/XML/p-system.xml.xmlvalidati_6_2.xml)]  
  
 `booksSchemaFail.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#3](../../add/codesnippet/XML/p-system.xml.xmlvalidati_6_3.xml)]  
  
 `newbooks.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#4](../../add/codesnippet/XML/p-system.xml.xmlvalidati_6_4.xml)]  
  
 `books.xsd`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#5](../../add/codesnippet/XML/p-system.xml.xmlvalidati_6_5.xml)]  
  
 `schema1.xdr`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#6](../../add/codesnippet/XML/p-system.xml.xmlvalidati_6_6.xml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The <see langword="XmlSchemaCollection" /> to use for validation.</returns>
      </Docs>
    </Member>
    <Member MemberName="SchemaType">
      <MemberSignature Language="C#" Value="public object SchemaType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SchemaType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a schema type object.</summary>
        <value>
          <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />, or <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> depending whether the node value is a built in XML Schema definition language (XSD) type or a user defined simpleType or complexType; <see langword="null" /> if the current node has no schema type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 The user needs to test for the returned type. For example,  
  
```  
object obj = vreader.SchemaType;  
 if (obj is XmlSchemaType)  
 {  
   XmlSchemaType st = (XmlSchemaType)obj;  
   // use XmlSchemaType object  
 }  
 if (obj is XmlSchemaDatatype)  
 {  
   XmlSchemaDatatype sd = (XmlSchemaDatatype)obj;  
   Type vt = sd.ValueType;  
   // use XmlSchemaDatatype object  
       }  
```  
  
 If XML Schema validation is being performed, the `XmlSchemaType` or `XmlSchemaDatatype` corresponds to the current element being read. If document type definition (DTD validation) is being performed, this property returns `null`.  
  
 `XmlSchemaDatatype` is returned if the current element, or attribute, is a simple type that can specify special validation constraints on the simple types, like min and max.  
  
 `XmlSchemaSimpleType` is returned if the current element, or attribute, is a user defined simpleType.  
  
 `XmlSchemaComplexType` is returned if the current element is a user defined complexType. This type cannot be returned by attributes.  
  
> [!NOTE]
>  If <xref:System.Xml.XmlValidatingReader.ValidationType%2A> has been set to ValidationType.None, no data type information is provided from either schemas or DTDs.  
  
> [!CAUTION]
>  After calling <xref:System.Xml.XmlValidatingReader.Close%2A>, SchemaType will return Null.  
  
   
  
## Examples  
 The following example displays the type information for each of the elements in the XML document.  
  
 [!code-cs[XmlValidatingReader.SchemaType#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_16_1.cs)]
 [!code-cpp[XmlValidatingReader.SchemaType#1](../../add/codesnippet/CPP/p-system.xml.xmlvalidati_16_1.cpp)]
 [!code-vb[XmlValidatingReader.SchemaType#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_16_1.vb)]  
  
 The example uses the following input files.  
  
 `booksSchema.xml`  
  
 [!code-xml[XmlValidatingReader.SchemaType#2](../../add/codesnippet/XML/p-system.xml.xmlvalidati_16_2.xml)]  
  
 `books.xsd`  
  
 [!code-xml[XmlValidatingReader.SchemaType#3](../../add/codesnippet/XML/p-system.xml.xmlvalidati_16_3.xsd)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>
          <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />, or <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> depending whether the node value is a built in XML Schema definition language (XSD) type or a user defined simpleType or complexType; <see langword="null" /> if the current node has no schema type.</returns>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.GetNamespacesInScope">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IDictionary&lt;string,string&gt; IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" />
      </Parameters>
      <Docs>
        <param name="scope">An &lt;xref:System.Xml.XmlNamespaceScope&gt; object that identifies the scope of the reader.</param>
        <summary>For a description of this member, see &lt;xref:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope%2A?displayProperty=fullName&gt;.</summary>
        <returns>An T:System.Collections.IDictionary object that identifies the namespaces in scope.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Xml.XmlValidatingReader> instance is cast to an <xref:System.Xml.IXmlNamespaceResolver> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>An T:System.Collections.IDictionary object that identifies the namespaces in scope.</value>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupNamespace">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The namespace prefix.</param>
        <summary>For a description of this member, see &lt;xref:System.Xml.IXmlNamespaceResolver.LookupNamespace%2A?displayProperty=fullName&gt;.</summary>
        <returns>A string value that contains the namespace Uri that is associated with the prefix.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Xml.XmlValidatingReader> instance is cast to an <xref:System.Xml.IXmlNamespaceResolver> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>A string value that contains the namespace Uri that is associated with the prefix.</value>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupPrefix">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupPrefix (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">The namespace that is associated with the prefix.</param>
        <summary>For a description of this member, see &lt;xref:System.Xml.IXmlNamespaceResolver.LookupPrefix%2A?displayProperty=fullName&gt;.</summary>
        <returns>A string value that contains the namespace prefix that is associated with the <paramref name="namespaceName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Xml.XmlValidatingReader> instance is cast to an <xref:System.Xml.IXmlNamespaceResolver> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>A string value that contains the namespace prefix that is associated with the <paramref name="namespaceName" />.</value>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets an event handler for receiving information about document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) schema validation errors.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 These events occur during <xref:System.Xml.XmlValidatingReader.Read%2A> and only if a <xref:System.Xml.XmlValidatingReader.ValidationType%2A> of DTD, XDR, Schema, or Auto is specified.  
  
 If no event handler is provided, an <xref:System.Xml.XmlException> is thrown on the first validation error (Severity is equal to XmlSeverityType.Error).  
  
> [!NOTE]
>  If an element reports a validation error, the rest of the content model for that element is not validated, however, its children are validated. The reader only reports the first error for a given element.  
  
 The callback handler can use the <xref:System.Xml.Schema.ValidationEventArgs.Severity%2A?displayProperty=fullName> property to guarantee that an XML instance document is validated against a schema. The `Severity` property allows you to distinguish between validation errors (Severity is equal to XmlSeverityType.Error) that indicate a fatal error, and validation warnings (Severity is equal to XmlSeverityType.Warning) that indicate that no schema information is available.  
  
   
  
## Examples  
 The following example validates a file against an XML Schema.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ValidationEventHandler Example#1](../../add/codesnippet/CPP/e-system.xml.xmlvalidati_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.ValidationEventHandler Example#1](../../add/codesnippet/VisualBasic/e-system.xml.xmlvalidati_1.vb)]
 [!code-cs[Classic WebData XmlValidatingReader.ValidationEventHandler Example#1](../../add/codesnippet/CSharp/e-system.xml.xmlvalidati_1.cs)]  
  
 The sample uses the following two input files:  
  
 `notValidXSD.xml` (The `xsi:schemaLocation` attribute identifies the XML Schema for the reader.)  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationEventHandler Example#2](../../add/codesnippet/XML/e-system.xml.xmlvalidati_2.xml)]  
  
 `books.xsd`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationEventHandler Example#3](../../add/codesnippet/XML/e-system.xml.xmlvalidati_3.xml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="ValidationType">
      <MemberSignature Language="C#" Value="public System.Xml.ValidationType ValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ValidationType ValidationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ValidationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating the type of validation to perform.</summary>
        <value>One of the <see cref="T:System.Xml.ValidationType" /> values. If this property is not set, it defaults to ValidationType.Auto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 This property must be set before the first call to <xref:System.Xml.XmlValidatingReader.Read%2A>. Setting this property to ValidationType.None creates a non-validating reader.  
  
 If external document type definitions (DTDs) or schemas are needed for validation, the <xref:System.Xml.XmlResolver> is used.  
  
   
  
## Examples  
 The following example validates two files.  
  
 [!code-vb[Classic WebData XmlValidatingReader.ValidationType Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_7_1.vb)]
 [!code-cs[Classic WebData XmlValidatingReader.ValidationType Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_7_1.cs)]
 [!code-cpp[Classic WebData XmlValidatingReader.ValidationType Example#1](../../add/codesnippet/CPP/p-system.xml.xmlvalidati_7_1.cpp)]  
  
 The sample uses the following four input files:  
  
 `notValid.xml` (The "x-schema:" prefix identifies the XML-Data Reduced (XDR) schema for the reader.)  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#2](../../add/codesnippet/XML/p-system.xml.xmlvalidati_7_2.xml)]  
  
 `schema1.xdr`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#3](../../add/codesnippet/XML/p-system.xml.xmlvalidati_7_3.xml)]  
  
 `cdDTD.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#4](../../add/codesnippet/XML/p-system.xml.xmlvalidati_7_4.xml)]  
  
 `book1.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#5](../../add/codesnippet/XML/p-system.xml.xmlvalidati_7_5.xml)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Setting the property after a Read has been called.</exception>
        <threadsafe />
        <returns>One of the <see cref="T:System.Xml.ValidationType" /> values. If this property is not set, it defaults to ValidationType.Auto.</returns>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public override string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the text value of the current node.</summary>
        <value>The value returned depends on the &lt;xref:System.Xml.XmlValidatingReader.NodeType%2A&gt; of the node. The following table lists node types that have a value to return. All other node types return String.Empty.  
  
 <list type="table">  
<listheader>  
<term> Node Type  
  
 </term>  
<description> Value  
  
 </description>  
</listheader>  
<item>  
<term> <see langword="Attribute" />  
  
 </term>  
<description> The value of the attribute.  
  
 </description>  
</item>  
<item>  
<term> <see langword="CDATA" />  
  
 </term>  
<description> The content of the CDATA section.  
  
 </description>  
</item>  
<item>  
<term> <see langword="Comment" />  
  
 </term>  
<description> The content of the comment.  
  
 </description>  
</item>  
<item>  
<term> <see langword="DocumentType" />  
  
 </term>  
<description> The internal subset.  
  
 </description>  
</item>  
<item>  
<term> <see langword="ProcessingInstruction" />  
  
 </term>  
<description> The entire content, excluding the target.  
  
 </description>  
</item>  
<item>  
<term> <see langword="SignificantWhitespace" />  
  
 </term>  
<description> The white space between markup in a mixed content model.  
  
 </description>  
</item>  
<item>  
<term> <see langword="Text" />  
  
 </term>  
<description> The content of the text node.  
  
 </description>  
</item>  
<item>  
<term> <see langword="Whitespace" />  
  
 </term>  
<description> The white space between markup.  
  
 </description>  
</item>  
<item>  
<term> <see langword="XmlDeclaration" />  
  
 </term>  
<description> The content of the declaration.  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
   
  
## Examples  
 The following example reads an XML file and displays each node.  
  
 [!code-cs[Classic WebData XmlValidatingReader.Name Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_11_1.cs)]
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](../../add/codesnippet/CPP/p-system.xml.xmlvalidati_11_1.cpp)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_11_1.vb)]  
  
 The example uses the file, `items.xml`, as input.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](../../add/codesnippet/XML/p-system.xml.xmlvalidati_11_2.xml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The value returned depends on the &lt;xref:System.Xml.XmlValidatingReader.NodeType%2A&gt; of the node. The following table lists node types that have a value to return. All other node types return String.Empty.  
  
 <list type="table">  
<listheader>  
<term> Node Type  
  
 </term>  
<description> Value  
  
 </description>  
</listheader>  
<item>  
<term> <see langword="Attribute" />  
  
 </term>  
<description> The value of the attribute.  
  
 </description>  
</item>  
<item>  
<term> <see langword="CDATA" />  
  
 </term>  
<description> The content of the CDATA section.  
  
 </description>  
</item>  
<item>  
<term> <see langword="Comment" />  
  
 </term>  
<description> The content of the comment.  
  
 </description>  
</item>  
<item>  
<term> <see langword="DocumentType" />  
  
 </term>  
<description> The internal subset.  
  
 </description>  
</item>  
<item>  
<term> <see langword="ProcessingInstruction" />  
  
 </term>  
<description> The entire content, excluding the target.  
  
 </description>  
</item>  
<item>  
<term> <see langword="SignificantWhitespace" />  
  
 </term>  
<description> The white space between markup in a mixed content model.  
  
 </description>  
</item>  
<item>  
<term> <see langword="Text" />  
  
 </term>  
<description> The content of the text node.  
  
 </description>  
</item>  
<item>  
<term> <see langword="Whitespace" />  
  
 </term>  
<description> The white space between markup.  
  
 </description>  
</item>  
<item>  
<term> <see langword="XmlDeclaration" />  
  
 </term>  
<description> The content of the declaration.  
  
 </description>  
</item>  
</list></returns>
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current <see langword="xml:lang" /> scope.</summary>
        <value>The current <see langword="xml:lang" /> scope.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 This property represents the xml:lang scope within which the current node resides. For example, here is an XML fragment with `xml:lang` set to U.S. English in the root element:  
  
```  
<root xml:lang="en-us">   
<name>Fred</name>   
</root>   
```  
  
 When the reader is positioned on the `name` element, you can use this property to find that it is in the scope of a U.S. English `xml:lang` attribute.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The current <see langword="xml:lang" /> scope.</returns>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> used for resolving external document type definition (DTD) and schema location references. The <see langword="XmlResolver" /> is also used to handle any import or include elements found in XML Schema definition language (XSD) schemas.</summary>
        <value>The <see langword="XmlResolver" /> to use. If set to <see langword="null" />, external resources are not resolved.  
  
 In version 1.1 of the [!INCLUDE[dnprdnshort](../../add/includes/dnprdnshort-md.md)], the caller must be fully trusted to specify an <see langword="XmlResolver" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 The `XmlResolver` is used to load any DTDs, entities, or schemas needed to complete the validation process.  
  
 This property can be set at any time and takes affect after the next <xref:System.Xml.XmlValidatingReader.Read%2A> call. If this property is set to `null`, the reader assumes the user is not interested in resolving external references. In this case, the reader only validates against internal resources, if the resource is present.  
  
 In version 1.1 of [!INCLUDE[dnprdnshort](../../add/includes/dnprdnshort-md.md)] , if this property is not set, the trust level of the application determines the default behavior.  
  
 `Fully trusted code:` The reader uses a default <xref:System.Xml.XmlUrlResolver> with no user credentials. If authentication is required to access a network resource, use the `XmlResolver` property to specify an `XmlResolver` with the necessary credentials.  
  
 `Semi-trusted code:` The `XmlResolver` property is set to `null`. External resources are not resolved.  
  
 When validating using schemas, you can avoid the expensive load process by providing an <xref:System.Xml.Schema.XmlSchemaCollection> using the <xref:System.Xml.XmlValidatingReader.Schemas%2A> property.  
  
   
  
## Examples  
 The following example uses the `XmlResolver` property to specify the credentials necessary to access the networked DTD file.  
  
 [!code-cpp[XmlValidatingReader.XmlResolver#1](../../add/codesnippet/CPP/p-system.xml.xmlvalidati_14_1.cpp)]
 [!code-vb[XmlValidatingReader.XmlResolver#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlvalidati_14_1.vb)]
 [!code-cs[XmlValidatingReader.XmlResolver#1](../../add/codesnippet/CSharp/p-system.xml.xmlvalidati_14_1.cs)]  
  
 The example uses the following files as input.  
  
 `book5.xml`  
  
 [!code-xml[XmlValidatingReader.XmlResolver#2](../../add/codesnippet/XML/p-system.xml.xmlvalidati_14_2.xml)]  
  
 `books.dtd`  
  
 [!CODE [XmlValidatingReader.XmlResolver#3](../CodeSnippet/VS_Snippets_Data/XmlValidatingReader.XmlResolver#3)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The <see langword="XmlResolver" /> to use. If set to <see langword="null" />, external resources are not resolved.  
  
 In version 1.1 of the [!INCLUDE[dnprdnshort](../../add/includes/dnprdnshort-md.md)], the caller must be fully trusted to specify an <see langword="XmlResolver" />.</returns>
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current <see langword="xml:space" /> scope.</summary>
        <value>One of the &lt;xref:System.Xml.XmlSpace&gt; values. If no <see langword="xml:space" /> scope exists, this property defaults to <see langword="XmlSpace.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  The <xref:System.Xml.XmlValidatingReader> class is obsolete in [!INCLUDE[dnprdnext](../../add/includes/dnprdnext-md.md)]. You can create a validating <xref:System.Xml.XmlReader> instance by using the <xref:System.Xml.XmlReaderSettings> class and the <xref:System.Xml.XmlReader.Create%2A> method. For more information, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>One of the &lt;xref:System.Xml.XmlSpace&gt; values. If no <see langword="xml:space" /> scope exists, this property defaults to <see langword="XmlSpace.None" />.</returns>
      </Docs>
    </Member>
  </Members>
</Type>