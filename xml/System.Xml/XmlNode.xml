<Type Name="XmlNode" FullName="System.Xml.XmlNode">
  <TypeSignature Language="C#" Value="public abstract class XmlNode : ICloneable, System.Collections.IEnumerable, System.Xml.XPath.IXPathNavigable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlNode extends System.Object implements class System.Collections.IEnumerable, class System.ICloneable, class System.Xml.XPath.IXPathNavigable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.XPath.IXPathNavigable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{debuggerDisplayProxy}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a single node in the XML document.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This class implements the W3C Document Object Model (DOM) Level 1 Core and the Core DOM Level 2. The DOM is an in-memory (cache) tree representation of an XML document. `XmlNode` is the base class in the .NET implementation of the DOM. It supports XPath selections and provides editing capabilities. The <xref:System.Xml.XmlDocument> class extends `XmlNode` and represents an XML document. You can use `XmlDocument` to load and save XML data. It also includes methods for node creation. See [XML Document Object Model (DOM)](../Topic/XML%20Document%20Object%20Model%20\(DOM\).md) for more information.  
  
> [!IMPORTANT]
>  Exceptions raised as a result of using the XmlNode class, such as the <xref:System.Xml.XmlException> class may contain sensitive information that should not be exposed in untrusted scenarios. Exceptions should be properly handled so that this sensitive information is not exposed in untrusted scenarios.  
  
 ]]></format>
    </remarks>
    <threadsafe />
    <returns />
    <value />
  </Docs>
  <Members>
    <Member MemberName="AppendChild">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode AppendChild (System.Xml.XmlNode newChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode AppendChild(class System.Xml.XmlNode newChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="newChild">The node to add. All the contents of the node to be added are moved into the specified location.</param>
        <summary>Adds the specified node to the end of the list of child nodes, of this node.</summary>
        <returns>The node added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the `newChild` is already in the tree, it is removed from its original position and added to its target position. For more information about inserting nodes, see [Inserting Nodes into an XML Document](../Topic/Inserting%20Nodes%20into%20an%20XML%20Document.md).  
  
 If the node being inserted was created from another document, you can use <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> to import the node to the current document. The imported node can then be inserted into the current document.  
  
   
  
## Examples  
 The following example adds a new node to the XML document.  
  
 [!code-cpp[Classic WebData XmlNode.AppendChild Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.app_1.cpp)]
 [!code-cs[Classic WebData XmlNode.AppendChild Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.app_1.cs)]
 [!code-vb[Classic WebData XmlNode.AppendChild Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.app_1.vb)]  
  
 **Output:**  
  
```  
Display the modified XML...  
<?xml version="1.0" encoding="IBM437"?>  
<book genre="novel" ISBN="1-861001-57-5">  
  <title>Pride And Prejudice</title>  
  <price>19.95</price>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.  
  
 The <paramref name="newChild" /> is an ancestor of this node.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.  
  
 This node is read-only.</exception>
        <threadsafe />
        <value>The node added.</value>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlAttributeCollection Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlAttributeCollection Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlAttributeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an <see cref="T:System.Xml.XmlAttributeCollection" /> containing the attributes of this node.</summary>
        <value>An <see langword="XmlAttributeCollection" /> containing the attributes of the node.  
  
 If the node is of type XmlNodeType.Element, the attributes of the node are returned. Otherwise, this property returns <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example adds a new attribute to the XML document.  
  
 [!code-cpp[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](../../add/codesnippet/CPP/p-system.xml.xmlnode.att_1.cpp)]
 [!code-vb[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlnode.att_1.vb)]
 [!code-cs[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlnode.att_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>An <see langword="XmlAttributeCollection" /> containing the attributes of the node.  
  
 If the node is of type XmlNodeType.Element, the attributes of the node are returned. Otherwise, this property returns <see langword="null" />.</returns>
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public virtual string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the base URI of the current node.</summary>
        <value>The location from which the node was loaded or String.Empty if the node has no base URI.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places. The `BaseURI` tells you where these nodes came from.  
  
 The value of this property varies depending on the node type. For example, Document nodes return the location of the <xref:System.Xml.XmlDocument> object. Nodes which are child nodes of external EntityReference nodes return the location of the entity itself. For example, consider the following XML document:  
  
```  
<!DOCTYPE item [  
<!ENTITY xyz SYSTEM "a/b.xml">  
]>  
<item num='123'>&xyz;</item>  
```  
  
 where the external entity `a/b.xml` contains the XML text: `<test>123</test>`.  
  
 If the document is loaded from http://server/mydata.xml, `BaseURI` returns the following:  
  
|NodeType|Name|BaseURI|  
|--------------|----------|-------------|  
|Attribute|num|http://server/mydata.xml|  
|Document|#document|http://server/mydata.xml|  
|DocumentType|item|http://server/mydata.xml|  
|Entity|xyz|http://server/mydata.xml|  
|Element|item|http://server/mydata.xml|  
|EntityReference|xyz|http://server/mydata.xml|  
|Element|test|http://server/a/b.xml|  
|Text|#text|http://server/a/b.xml|  
  
 `BaseURI` looks for entity reference boundaries, so if entities are expanded this information is not preserved and this property returns the location of the `XmlDocument` object in all cases.  
  
 As a second example, given the following XML document:  
  
```  
<!DOCTYPE Mydata SYSTEM "http://localhost/doctype.dtd">  
<baa>&xyz;</baa>  
```  
  
 where the DTD file contains the following:  
  
```  
<!ENTITY xyz <E1>My Data</E1>  
<!ELEMENT baa #PCDATA>  
<!ATTLIST baa attr1 "woof">  
```  
  
 If the XML document is loaded from http://localhost/mydata.xml, `BaseURI` returns the following for each of the nodes:  
  
|NodeType|Name|BaseURI|  
|--------------|----------|-------------|  
|Document|#document|http://localhost/mydata.xml|  
|DocumentType|Mydata|http://localhost/mydata.xml<br /><br /> The <xref:System.Xml.XmlDocumentType.SystemId%2A?displayProperty=fullName> or <xref:System.Xml.XmlDocumentType.PublicId%2A?displayProperty=fullName> properties can be used to identify where the DTD file was loaded from.|  
|Element|baa|http://localhost/mydata.xml|  
|Entity|xyz|http://localhost/doctype.dtd|  
|EntityReference|xyz|http://localhost/mydata.xml|  
|Attribute|woof|http://localhost/mydata.xml|  
  
> [!NOTE]
>  The base URI of a default attribute is the same as the base URI of the element to which they belong.  
  
 This property is a Microsoft extension to the Document Object Model (DOM).  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The location from which the node was loaded or String.Empty if the node has no base URI.</returns>
      </Docs>
    </Member>
    <Member MemberName="ChildNodes">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNodeList ChildNodes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNodeList ChildNodes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets all the child nodes of the node.</summary>
        <value>An object that contains all the child nodes of the node.  
  
 If there are no child nodes, this property returns an empty <see cref="T:System.Xml.XmlNodeList" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For information about child nodes, see the [W3C DOM (Core) Level 1 specification](http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html)  
  
   
  
## Examples  
 The following example displays all the child nodes of the root element.  
  
 [!code-cs[Classic WebData XmlNode.HasChildNodes Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlnode.chi_1.cs)]
 [!code-cpp[Classic WebData XmlNode.HasChildNodes Example#1](../../add/codesnippet/CPP/p-system.xml.xmlnode.chi_1.cpp)]
 [!code-vb[Classic WebData XmlNode.HasChildNodes Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlnode.chi_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>An object that contains all the child nodes of the node.  
  
 If there are no child nodes, this property returns an empty <see cref="T:System.Xml.XmlNodeList" />.</returns>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a duplicate of this node.</summary>
        <returns>The cloned node.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cloning an <xref:System.Xml.XmlElement> copies all attributes and their values, including those generated by the XML processor to represent defaulted attributes. This method recursively clones the node and the subtree underneath it.  
  
 `Clone` is equivalent to calling `CloneNode(true)`.  
  
 The following table describes the specific behavior for each <xref:System.Xml.XmlNodeType>.  
  
|XmlNodeType|Clone|  
|-----------------|-----------|  
|Attribute|Clones the attribute node, including child nodes.|  
|CData|Clones the CData node, including its data content.|  
|Comment|Clones the comment node, including its text content.|  
|Document|Clones the document node, including any child nodes.|  
|DocumentFragment|Clones the document fragment node, including any child nodes.|  
|DocumentType|Clones the document type node.|  
|Element|Clones the element node, its attributes, and any child nodes.|  
|Entity|Entity nodes cannot be cloned.|  
|EntityReference|Clones the entity reference node. The replacement text is not included.|  
|Notation|Notation nodes cannot be cloned.|  
|ProcessingInstruction|Clones the processing instruction node, including its target and data.|  
|SignificantWhitespace|Clones the significant white space node, including its data value.|  
|Text|Clones the text node, including its data value.|  
|Whitespace|Clones the white space node, including its data value.|  
|XmlDeclaration|Clones the XmlDeclaration node, including its data value.|  
|All other node types.|These node types cannot be cloned.|  
  
 This method is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 The following example clones the root node of the XML document.  
  
 [!code-vb[Classic WebData XmlNode.Clone Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.clone_1.vb)]
 [!code-cs[Classic WebData XmlNode.Clone Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.clone_1.cs)]
 [!code-cpp[Classic WebData XmlNode.Clone Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.clone_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>The cloned node.</value>
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XmlNode CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode CloneNode(bool deep) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">
          <see langword="true" /> to recursively clone the subtree under the specified node; <see langword="false" /> to clone only the node itself.</param>
        <summary>Creates a duplicate of the node, when overridden in a derived class.</summary>
        <returns>The cloned node.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method serves as a copy constructor for nodes. The duplicate node has no parent (<xref:System.Xml.XmlNode.ParentNode%2A> returns `null`).  
  
 The following table describes the specific behavior for each <xref:System.Xml.XmlNodeType>.  
  
|XmlNodeType|CloneNode(true)|CloneNode(false)|  
|-----------------|-----------------------|------------------------|  
|Attribute|Clones the attribute node, including child nodes.|Clones the attribute node, including child nodes.|  
|CData|Clones the CData node, including its data content.|Clones the CData node, including its data content.|  
|Comment|Clones the comment node, including its text content.|Clones the comment node, including its text content.|  
|Document|Clones the document node, including any child nodes.|Clones the document node.|  
|DocumentFragment|Clones the document fragment node, including any child nodes.|Clones the document fragment node.|  
|DocumentType|Clones the document type node.|Clones the document type node.|  
|Element|Clones the element node, its attributes, and any child nodes.|Clones the element node and its attributes, including any default attributes.|  
|Entity|Entity nodes cannot be cloned.|Entity nodes cannot be cloned.|  
|EntityReference|Clones the entity reference node. The replacement text is not included.|Clones the entity reference node. The replacement text is not included.|  
|Notation|Notation nodes cannot be cloned.|Notation nodes cannot be cloned.|  
|ProcessingInstruction|Clones the processing instruction node, including its target and data.|Clones the processing instruction node, including its target and data.|  
|SignificantWhitespace|Clones the significant white space node, including its data value.|Clones the significant white space node, including its data value.|  
|Text|Clones the text node, including its data value.|Clones the text node, including its data value.|  
|Whitespace|Clones the white space node, including its data value.|Clones the white space node, including its data value.|  
|XmlDeclaration|Clones the XmlDeclaration node, including its data value.|Clones the XmlDeclaration node, including its data value.|  
|All other node types.|These node types cannot be cloned.|These node types cannot be cloned.|  
  
   
  
## Examples  
 The following example shows the difference between a deep and shallow clone.  
  
 [!code-cpp[Classic WebData XmlNode.CloneNode Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.clo_1.cpp)]
 [!code-vb[Classic WebData XmlNode.CloneNode Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.clo_1.vb)]
 [!code-cs[Classic WebData XmlNode.CloneNode Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.clo_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Calling this method on a node type that cannot be cloned.</exception>
        <threadsafe />
        <value>The cloned node.</value>
      </Docs>
    </Member>
    <Member MemberName="CreateNavigator">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XPath.XPathNavigator CreateNavigator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XPath.XPathNavigator CreateNavigator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.XPathNavigator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> for navigating this object.</summary>
        <returns>An <see langword="XPathNavigator" /> object used to navigate the node. The <see langword="XPathNavigator" /> is positioned on the node from which the method was called. It is not positioned on the root of the document.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `XPathNavigator` provides read-only, random access to data. Because it is optimized for XSLT transformations, it provides performance benefits when used as an input mechanism to the <xref:System.Xml.Xsl.XslTransform.Transform%2A?displayProperty=fullName> method.  
  
 This method is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 The following example loads and edits an XML document before performing an XSLT transform.  
  
 [!code-vb[XslTransform.Transform2#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.cre_1.vb)]
 [!code-cs[XslTransform.Transform2#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.cre_1.cs)]
 [!code-cpp[XslTransform.Transform2#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.cre_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>An <see langword="XPathNavigator" /> object used to navigate the node. The <see langword="XPathNavigator" /> is positioned on the node from which the method was called. It is not positioned on the root of the document.</value>
      </Docs>
    </Member>
    <Member MemberName="FirstChild">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode FirstChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNode FirstChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the first child of the node.</summary>
        <value>The first child of the node. If there is no such node, <see langword="null" /> is returned.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For information about child nodes, see the [W3C DOM (Core) Level 1 specification](http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html)  
  
   
  
## Examples  
 The following example displays the title element.  
  
 [!code-cpp[Classic WebData XmlNode.FirstChild Example#1](../../add/codesnippet/CPP/p-system.xml.xmlnode.fir_1.cpp)]
 [!code-cs[Classic WebData XmlNode.FirstChild Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlnode.fir_1.cs)]
 [!code-vb[Classic WebData XmlNode.FirstChild Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlnode.fir_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The first child of the node. If there is no such node, <see langword="null" /> is returned.</returns>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get an enumerator that iterates through the child nodes in the current node.</summary>
        <returns>An &lt;xref:System.Collections.IEnumerator&gt; object that can be used to iterate through the child nodes in the current node.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Provides support for the “for each” style iteration over the nodes in the `XmlNode`.  
  
 This method is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 The following example displays all the books in the XML document.  
  
 [!code-cpp[Classic WebData XmlNode.GetEnumerator Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.get_2_1.cpp)]
 [!code-cs[Classic WebData XmlNode.GetEnumerator Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.get_2_1.cs)]
 [!code-vb[Classic WebData XmlNode.GetEnumerator Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.get_2_1.vb)]  
  
 The example uses the file, `books.xml`, as input.  
  
 [!code-xml[Classic WebData XmlNode.GetEnumerator Example#2](../../add/codesnippet/XML/m-system.xml.xmlnode.get_2_2.xml)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>An &lt;xref:System.Collections.IEnumerator&gt; object that can be used to iterate through the child nodes in the current node.</value>
      </Docs>
    </Member>
    <Member MemberName="GetNamespaceOfPrefix">
      <MemberSignature Language="C#" Value="public virtual string GetNamespaceOfPrefix (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetNamespaceOfPrefix(string prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">The prefix whose namespace URI you want to find.</param>
        <summary>Looks up the closest **xmlns** declaration for the given prefix that is in scope for the current node and returns the namespace URI in the declaration.</summary>
        <returns>The namespace URI of the specified prefix.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 The following example adds a new attribute to the XML document.  
  
 [!code-cpp[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.get_1_1.cpp)]
 [!code-vb[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.get_1_1.vb)]
 [!code-cs[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.get_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>The namespace URI of the specified prefix.</value>
      </Docs>
    </Member>
    <Member MemberName="GetPrefixOfNamespace">
      <MemberSignature Language="C#" Value="public virtual string GetPrefixOfNamespace (string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetPrefixOfNamespace(string namespaceURI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceURI">The namespace URI whose prefix you want to find.</param>
        <summary>Looks up the closest **xmlns** declaration for the given namespace URI that is in scope for the current node and returns the prefix defined in that declaration.</summary>
        <returns>The prefix for the specified namespace URI.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 The following example adds a new element to the XML document.  
  
 [!code-cs[Classic WebData XmlNode.GetPrefixOfNamespace Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.get_0_1.cs)]
 [!code-cpp[Classic WebData XmlNode.GetPrefixOfNamespace Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.get_0_1.cpp)]
 [!code-vb[Classic WebData XmlNode.GetPrefixOfNamespace Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.get_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>The prefix for the specified namespace URI.</value>
      </Docs>
    </Member>
    <Member MemberName="HasChildNodes">
      <MemberSignature Language="C#" Value="public virtual bool HasChildNodes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChildNodes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether this node has any child nodes.</summary>
        <value>
          <see langword="true" /> if the node has child nodes; otherwise, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For information about child nodes, see the [W3C DOM (Core) Level 1 specification](http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html)  
  
   
  
## Examples  
 The following example displays all the child nodes of the root element.  
  
 [!code-cs[Classic WebData XmlNode.HasChildNodes Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlnode.has_1.cs)]
 [!code-cpp[Classic WebData XmlNode.HasChildNodes Example#1](../../add/codesnippet/CPP/p-system.xml.xmlnode.has_1.cpp)]
 [!code-vb[Classic WebData XmlNode.HasChildNodes Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlnode.has_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>
          <see langword="true" /> if the node has child nodes; otherwise, <see langword="false" />.</returns>
      </Docs>
    </Member>
    <Member MemberName="InnerText">
      <MemberSignature Language="C#" Value="public virtual string InnerText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the concatenated values of the node and all its child nodes.</summary>
        <value>The concatenated values of the node and all its child nodes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting this property replaces all the child nodes with the parsed contents of the given string.  
  
 For leaf nodes, `InnerText` returns the same content as the <xref:System.Xml.XmlNode.Value%2A> property.  
  
 This property is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 The following example compares the `InnerText` and <xref:System.Xml.XmlNode.InnerXml%2A> properties.  
  
 [!code-vb[Classic WebData XmlNode.InnerText Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlnode.inn_1_1.vb)]
 [!code-cs[Classic WebData XmlNode.InnerText Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlnode.inn_1_1.cs)]
 [!code-cpp[Classic WebData XmlNode.InnerText Example#1](../../add/codesnippet/CPP/p-system.xml.xmlnode.inn_1_1.cpp)]  
  
 **Output:**  
  
```  
Display the InnerText of the element...  
some textmore text  
Display the InnerXml of the element...  
some text<child />more text  
<elem>Text containing <markup/> will have char(<) and char(>) escape  
d.</elem>  
<elem>Text containing <markup />.</elem>  
```  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The concatenated values of the node and all its child nodes.</returns>
      </Docs>
    </Member>
    <Member MemberName="InnerXml">
      <MemberSignature Language="C#" Value="public virtual string InnerXml { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerXml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the markup representing only the child nodes of this node.</summary>
        <value>The markup of the child nodes of this node.  
  
 <block subset="none" type="note">  
 <see langword="InnerXml" /> does not return default attributes.  
  
</block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Attempting to set this property from a node that cannot have child nodes, for example a Text node, throws an exception. Otherwise, setting `InnerXml` replaces the child nodes, of the node, with the parsed contents of the given string. The parsing is done in the current namespace context.  
  
 This property is a Microsoft extension to the Document Object Model (DOM).  
  
> [!NOTE]
>  `InnerXml` is not an efficient way to modify the DOM. There may be performance issues when replacing complex nodes. It is more efficient to construct nodes and use methods such as `InsertBefore`, `InsertAfter`, `AppendChild`, and `RemoveChild` to modify the Xml document.  
  
   
  
## Examples  
 The following example compares the <xref:System.Xml.XmlNode.InnerText%2A> and `InnerXml` properties.  
  
 [!code-vb[Classic WebData XmlNode.InnerText Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlnode.inn_0_1.vb)]
 [!code-cs[Classic WebData XmlNode.InnerText Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlnode.inn_0_1.cs)]
 [!code-cpp[Classic WebData XmlNode.InnerText Example#1](../../add/codesnippet/CPP/p-system.xml.xmlnode.inn_0_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Setting this property on a node that cannot have child nodes.</exception>
        <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed.</exception>
        <threadsafe />
        <returns>The markup of the child nodes of this node.  
  
 <block subset="none" type="note">  
 <see langword="InnerXml" /> does not return default attributes.  
  
</block></returns>
      </Docs>
    </Member>
    <Member MemberName="InsertAfter">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode InsertAfter (System.Xml.XmlNode newChild, System.Xml.XmlNode refChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode InsertAfter(class System.Xml.XmlNode newChild, class System.Xml.XmlNode refChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlNode" />
        <Parameter Name="refChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="newChild">The <see langword="XmlNode" /> to insert.</param>
        <param name="refChild">The <see langword="XmlNode" /> that is the reference node. The `newNode` is placed after the `refNode`.</param>
        <summary>Inserts the specified node immediately after the specified reference node.</summary>
        <returns>The node being inserted.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `refChild` is `null`, insert `newChild` at the beginning of the list of child nodes. All the contents of the `newChild` are inserted, in the same order, after `refChild`. If the `newChild` is already in the tree, it is removed from its original position and added to its target position. For more information about inserting nodes, see [Inserting Nodes into an XML Document](../Topic/Inserting%20Nodes%20into%20an%20XML%20Document.md).  
  
 If the node being inserted was created from another document, you can use <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> to import the node to the current document. The imported node can then be inserted into the current document.  
  
 This method is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 The following example adds a new node to the XML document.  
  
 [!code-cs[Classic WebData XmlNode.InsertAfter Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.ins_1_1.cs)]
 [!code-vb[Classic WebData XmlNode.InsertAfter Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.ins_1_1.vb)]
 [!code-cpp[Classic WebData XmlNode.InsertAfter Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.ins_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.  
  
 The <paramref name="newChild" /> is an ancestor of this node.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.  
  
 The <paramref name="refChild" /> is not a child of this node.  
  
 This node is read-only.</exception>
        <threadsafe />
        <value>The node being inserted.</value>
      </Docs>
    </Member>
    <Member MemberName="InsertBefore">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode InsertBefore (System.Xml.XmlNode newChild, System.Xml.XmlNode refChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode InsertBefore(class System.Xml.XmlNode newChild, class System.Xml.XmlNode refChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlNode" />
        <Parameter Name="refChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="newChild">The <see langword="XmlNode" /> to insert.</param>
        <param name="refChild">The <see langword="XmlNode" /> that is the reference node. The `newChild` is placed before this node.</param>
        <summary>Inserts the specified node immediately before the specified reference node.</summary>
        <returns>The node being inserted.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `refChild` is `null`, insert `newChild` at the end of the list of child nodes. All the contents of the `newChild` are inserted, in the same order, before `refChild`. If the `newChild` is already in the tree, it is removed from its original position and added to its target position. For more information about inserting nodes, see [Inserting Nodes into an XML Document](../Topic/Inserting%20Nodes%20into%20an%20XML%20Document.md).  
  
 If the node being inserted was created from another document, you can use <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> to import the node to the current document. The imported node can then be inserted into the current document.  
  
   
  
## Examples  
 The following example adds a new node to the XML document.  
  
 [!code-cs[Classic WebData XmlNode.InsertBefore Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.ins_0_1.cs)]
 [!code-vb[Classic WebData XmlNode.InsertBefore Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.ins_0_1.vb)]
 [!code-cpp[Classic WebData XmlNode.InsertBefore Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.ins_0_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The current node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.  
  
 The <paramref name="newChild" /> is an ancestor of this node.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.  
  
 The <paramref name="refChild" /> is not a child of this node.  
  
 This node is read-only.</exception>
        <threadsafe />
        <value>The node being inserted.</value>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the node is read-only.</summary>
        <value>
          <see langword="true" /> if the node is read-only; otherwise <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A read-only node is one whose properties, attributes, or child nodes cannot be changed. You can remove a read-only node from the tree and insert it somewhere else. For example, Entity nodes are always read-only.  
  
 This property is a Microsoft extension to the Document Object Model (DOM).  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>
          <see langword="true" /> if the node is read-only; otherwise <see langword="false" />.</returns>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlElement this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlElement Item(string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The qualified name of the element to retrieve.</param>
        <summary>Gets the first child element with the specified &lt;xref:System.Xml.XmlNode.Name%2A&gt;.</summary>
        <value>The first <see cref="T:System.Xml.XmlElement" /> that matches the specified name. It returns a null reference (<see langword="Nothing" /> in Visual Basic) if there is no match.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 The following example displays the title element.  
  
 [!code-vb[Classic WebData XmlNode.this Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlnode.ite_1.vb)]
 [!code-cs[Classic WebData XmlNode.this Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlnode.ite_1.cs)]
 [!code-cpp[Classic WebData XmlNode.this Example#1](../../add/codesnippet/CPP/p-system.xml.xmlnode.ite_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The first <see cref="T:System.Xml.XmlElement" /> that matches the specified name. It returns a null reference (<see langword="Nothing" /> in Visual Basic) if there is no match.</returns>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlElement this[string localname, string ns] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlElement Item(string, string)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localname" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localname">The local name of the element.</param>
        <param name="ns">The namespace URI of the element.</param>
        <summary>Gets the first child element with the specified &lt;xref:System.Xml.XmlNode.LocalName%2A&gt; and &lt;xref:System.Xml.XmlNode.NamespaceURI%2A&gt;.</summary>
        <value>The first <see cref="T:System.Xml.XmlElement" /> with the matching <paramref name="localname" /> and <paramref name="ns" />. . It returns a null reference (<see langword="Nothing" /> in Visual Basic) if there is no match.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is a Microsoft extension to the Document Object Model (DOM).  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The first <see cref="T:System.Xml.XmlElement" /> with the matching <paramref name="localname" /> and <paramref name="ns" />. . It returns a null reference (<see langword="Nothing" /> in Visual Basic) if there is no match.</returns>
      </Docs>
    </Member>
    <Member MemberName="LastChild">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode LastChild { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNode LastChild" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the last child of the node.</summary>
        <value>The last child of the node. If there is no such node, <see langword="null" /> is returned.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example displays the price element.  
  
 [!code-cpp[Classic WebData XmlNode.LastChild Example#1](../../add/codesnippet/CPP/p-system.xml.xmlnode.las_1.cpp)]
 [!code-cs[Classic WebData XmlNode.LastChild Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlnode.las_1.cs)]
 [!code-vb[Classic WebData XmlNode.LastChild Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlnode.las_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The last child of the node. If there is no such node, <see langword="null" /> is returned.</returns>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public abstract string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the local name of the node, when overridden in a derived class.</summary>
        <value>The name of the node with the prefix removed. For example, <see langword="LocalName" /> is book for the element \</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the node does not have a prefix, LocalName is the same as <xref:System.Xml.XmlNode.Name%2A>.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the qualified name of the node, when overridden in a derived class.</summary>
        <value>The qualified name of the node. The name returned is dependent on the &lt;xref:System.Xml.XmlNode.NodeType%2A&gt; of the node:  
  
 <list type="table">  
<listheader>  
<term> Type  
  
 </term>  
<description> Name  
  
 </description>  
</listheader>  
<item>  
<term> Attribute  
  
 </term>  
<description> The qualified name of the attribute.  
  
 </description>  
</item>  
<item>  
<term> CDATA  
  
 </term>  
<description> #cdata-section  
  
 </description>  
</item>  
<item>  
<term> Comment  
  
 </term>  
<description> #comment  
  
 </description>  
</item>  
<item>  
<term> Document  
  
 </term>  
<description> #document  
  
 </description>  
</item>  
<item>  
<term> DocumentFragment  
  
 </term>  
<description> #document-fragment  
  
 </description>  
</item>  
<item>  
<term> DocumentType  
  
 </term>  
<description> The document type name.  
  
 </description>  
</item>  
<item>  
<term> Element  
  
 </term>  
<description> The qualified name of the element.  
  
 </description>  
</item>  
<item>  
<term> Entity  
  
 </term>  
<description> The name of the entity.  
  
 </description>  
</item>  
<item>  
<term> EntityReference  
  
 </term>  
<description> The name of the entity referenced.  
  
 </description>  
</item>  
<item>  
<term> Notation  
  
 </term>  
<description> The notation name.  
  
 </description>  
</item>  
<item>  
<term> ProcessingInstruction  
  
 </term>  
<description> The target of the processing instruction.  
  
 </description>  
</item>  
<item>  
<term> Text  
  
 </term>  
<description> #text  
  
 </description>  
</item>  
<item>  
<term> Whitespace  
  
 </term>  
<description> #whitespace  
  
 </description>  
</item>  
<item>  
<term> SignificantWhitespace  
  
 </term>  
<description> #significant-whitespace  
  
 </description>  
</item>  
<item>  
<term> XmlDeclaration  
  
 </term>  
<description> #xml-declaration  
  
 </description>  
</item>  
</list></value>
        <remarks>To be added.</remarks>
        <threadsafe />
        <returns>The qualified name of the node. The name returned is dependent on the &lt;xref:System.Xml.XmlNode.NodeType%2A&gt; of the node:  
  
 <list type="table">  
<listheader>  
<term> Type  
  
 </term>  
<description> Name  
  
 </description>  
</listheader>  
<item>  
<term> Attribute  
  
 </term>  
<description> The qualified name of the attribute.  
  
 </description>  
</item>  
<item>  
<term> CDATA  
  
 </term>  
<description> #cdata-section  
  
 </description>  
</item>  
<item>  
<term> Comment  
  
 </term>  
<description> #comment  
  
 </description>  
</item>  
<item>  
<term> Document  
  
 </term>  
<description> #document  
  
 </description>  
</item>  
<item>  
<term> DocumentFragment  
  
 </term>  
<description> #document-fragment  
  
 </description>  
</item>  
<item>  
<term> DocumentType  
  
 </term>  
<description> The document type name.  
  
 </description>  
</item>  
<item>  
<term> Element  
  
 </term>  
<description> The qualified name of the element.  
  
 </description>  
</item>  
<item>  
<term> Entity  
  
 </term>  
<description> The name of the entity.  
  
 </description>  
</item>  
<item>  
<term> EntityReference  
  
 </term>  
<description> The name of the entity referenced.  
  
 </description>  
</item>  
<item>  
<term> Notation  
  
 </term>  
<description> The notation name.  
  
 </description>  
</item>  
<item>  
<term> ProcessingInstruction  
  
 </term>  
<description> The target of the processing instruction.  
  
 </description>  
</item>  
<item>  
<term> Text  
  
 </term>  
<description> #text  
  
 </description>  
</item>  
<item>  
<term> Whitespace  
  
 </term>  
<description> #whitespace  
  
 </description>  
</item>  
<item>  
<term> SignificantWhitespace  
  
 </term>  
<description> #significant-whitespace  
  
 </description>  
</item>  
<item>  
<term> XmlDeclaration  
  
 </term>  
<description> #xml-declaration  
  
 </description>  
</item>  
</list></returns>
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public virtual string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the namespace URI of this node.</summary>
        <value>The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is the namespace URI specified at creation time. For example, `NamespaceURI` is urn:samples for the element \<bk:book xmlns:bk= "urn:samples">  
  
 An attribute does not inherit its namespace from the element it is attached to. If an attribute is not explicitly given a namespace, it simply has no namespace.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.</returns>
      </Docs>
    </Member>
    <Member MemberName="NextSibling">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode NextSibling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNode NextSibling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the node immediately following this node.</summary>
        <value>The next <see langword="XmlNode" />. If there is no next node, <see langword="null" /> is returned.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example displays all the books in the XML document.  
  
 [!code-vb[Classic WebData XmlNode.NextSibling Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlnode.nex_1.vb)]
 [!code-cpp[Classic WebData XmlNode.NextSibling Example#1](../../add/codesnippet/CPP/p-system.xml.xmlnode.nex_1.cpp)]
 [!code-cs[Classic WebData XmlNode.NextSibling Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlnode.nex_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The next <see langword="XmlNode" />. If there is no next node, <see langword="null" /> is returned.</returns>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the current node, when overridden in a derived class.</summary>
        <value>One of the &lt;xref:System.Xml.XmlNodeType&gt; values.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property never returns the `XmlNodeType` EndElement, EndEntity or None.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>One of the &lt;xref:System.Xml.XmlNodeType&gt; values.</returns>
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public virtual void Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Normalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Puts all XmlText nodes in the full depth of the sub-tree underneath this XmlNode into a "normal" form where only markup (that is, tags, comments, processing instructions, CDATA sections, and entity references) separates XmlText nodes, that is, there are no adjacent XmlText nodes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to ensure that the DOM view of a document is the same as if it were saved and re-loaded, and is useful when operations (such as XPointer lookups) that depend on a particular document tree structure are to be used.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="OuterXml">
      <MemberSignature Language="C#" Value="public virtual string OuterXml { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OuterXml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the markup containing this node and all its child nodes.</summary>
        <value>The markup containing this node and all its child nodes.  
  
 <block subset="none" type="note">  
 <see langword="OuterXml" /> does not return default attributes.  
  
</block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 The following example compares output from the <xref:System.Xml.XmlNode.InnerXml%2A> and `OuterXml` properties.  
  
 [!code-cpp[Classic WebData XmlNode.OuterXml Example#1](../../add/codesnippet/CPP/p-system.xml.xmlnode.out_1.cpp)]
 [!code-vb[Classic WebData XmlNode.OuterXml Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlnode.out_1.vb)]
 [!code-cs[Classic WebData XmlNode.OuterXml Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlnode.out_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The markup containing this node and all its child nodes.  
  
 <block subset="none" type="note">  
 <see langword="OuterXml" /> does not return default attributes.  
  
</block></returns>
      </Docs>
    </Member>
    <Member MemberName="OwnerDocument">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlDocument OwnerDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDocument OwnerDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</summary>
        <value>The <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.  
  
 If the node is an <see cref="T:System.Xml.XmlDocument" /> (NodeType equals XmlNodeType.Document), this property returns <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When adding nodes to the current node, use the <xref:System.Xml.XmlDocument> returned by the OwnerDocument property to create the node.  
  
   
  
## Examples  
 See <xref:System.Xml.XmlElement.OwnerDocument%2A> (in the XmlElement class) for an example using this property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.  
  
 If the node is an <see cref="T:System.Xml.XmlDocument" /> (NodeType equals XmlNodeType.Document), this property returns <see langword="null" />.</returns>
      </Docs>
    </Member>
    <Member MemberName="ParentNode">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode ParentNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNode ParentNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parent of this node (for nodes that can have parents).</summary>
        <value>The <see langword="XmlNode" /> that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is <see langword="null" />. For all other nodes, the value returned depends on the &lt;xref:System.Xml.XmlNode.NodeType%2A&gt; of the node. The following table describes the possible return values for the <see langword="ParentNode" /> property.  
  
 <list type="table">  
<listheader>  
<term> NodeType  
  
 </term>  
<description> Return Value of ParentNode  
  
 </description>  
</listheader>  
<item>  
<term> Attribute, Document, DocumentFragment, Entity, Notation  
  
 </term>  
<description> Returns <see langword="null" />; these nodes do not have parents.  
  
 </description>  
</item>  
<item>  
<term> CDATA  
  
 </term>  
<description> Returns the element or entity reference containing the CDATA section.  
  
 </description>  
</item>  
<item>  
<term> Comment  
  
 </term>  
<description> Returns the element, entity reference, document type, or document containing the comment.  
  
 </description>  
</item>  
<item>  
<term> DocumentType  
  
 </term>  
<description> Returns the document node.  
  
 </description>  
</item>  
<item>  
<term> Element  
  
 </term>  
<description> Returns the parent node of the element. If the element is the root node in the tree, the parent is the document node.  
  
 </description>  
</item>  
<item>  
<term> EntityReference  
  
 </term>  
<description> Returns the element, attribute, or entity reference containing the entity reference.  
  
 </description>  
</item>  
<item>  
<term> ProcessingInstruction  
  
 </term>  
<description> Returns the document, element, document type, or entity reference containing the processing instruction.  
  
 </description>  
</item>  
<item>  
<term> Text  
  
 </term>  
<description> Returns the parent element, attribute, or entity reference containing the text node.  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For information about parent and child nodes, see the [W3C DOM (Core) Level 1 specification](http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html)  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The <see langword="XmlNode" /> that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is <see langword="null" />. For all other nodes, the value returned depends on the &lt;xref:System.Xml.XmlNode.NodeType%2A&gt; of the node. The following table describes the possible return values for the <see langword="ParentNode" /> property.  
  
 <list type="table">  
<listheader>  
<term> NodeType  
  
 </term>  
<description> Return Value of ParentNode  
  
 </description>  
</listheader>  
<item>  
<term> Attribute, Document, DocumentFragment, Entity, Notation  
  
 </term>  
<description> Returns <see langword="null" />; these nodes do not have parents.  
  
 </description>  
</item>  
<item>  
<term> CDATA  
  
 </term>  
<description> Returns the element or entity reference containing the CDATA section.  
  
 </description>  
</item>  
<item>  
<term> Comment  
  
 </term>  
<description> Returns the element, entity reference, document type, or document containing the comment.  
  
 </description>  
</item>  
<item>  
<term> DocumentType  
  
 </term>  
<description> Returns the document node.  
  
 </description>  
</item>  
<item>  
<term> Element  
  
 </term>  
<description> Returns the parent node of the element. If the element is the root node in the tree, the parent is the document node.  
  
 </description>  
</item>  
<item>  
<term> EntityReference  
  
 </term>  
<description> Returns the element, attribute, or entity reference containing the entity reference.  
  
 </description>  
</item>  
<item>  
<term> ProcessingInstruction  
  
 </term>  
<description> Returns the document, element, document type, or entity reference containing the processing instruction.  
  
 </description>  
</item>  
<item>  
<term> Text  
  
 </term>  
<description> Returns the parent element, attribute, or entity reference containing the text node.  
  
 </description>  
</item>  
</list></returns>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public virtual string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the namespace prefix of this node.</summary>
        <value>The namespace prefix of this node. For example, <see langword="Prefix" /> is bk for the element \</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Setting this property, when permitted, changes the <xref:System.Xml.XmlNode.Name%2A> property, which holds the qualified name, on Element and Attribute nodes. Setting this property on node types that cannot have a prefix (such as Text, Comment, EntityReference, CDATA, ProcessingInstruction, Document, and DocumentFragment) has no effect. Changing the prefix of an attribute that is known to have a default value, does not make a new attribute with the default value and the original prefix appear, since the namespace URI and local name do not change.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">This node is read-only.</exception>
        <exception cref="T:System.Xml.XmlException">The specified prefix contains an invalid character.  
  
 The specified prefix is malformed.  
  
 The specified prefix is "xml" and the namespaceURI of this node is different from "http://www.w3.org/XML/1998/namespace".  
  
 This node is an attribute and the specified prefix is "xmlns" and the namespaceURI of this node is different from "http://www.w3.org/2000/xmlns/ ".  
  
 This node is an attribute and the qualifiedName of this node is "xmlns".</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PrependChild">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode PrependChild (System.Xml.XmlNode newChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode PrependChild(class System.Xml.XmlNode newChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="newChild">The node to add. All the contents of the node to be added are moved into the specified location.</param>
        <summary>Adds the specified node to the beginning of the list of child nodes for this node.</summary>
        <returns>The node added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the `newChild` is already in the tree, it is removed from its original position and added to its target position. For more information about inserting nodes, see [Inserting Nodes into an XML Document](../Topic/Inserting%20Nodes%20into%20an%20XML%20Document.md).  
  
 If the node being inserted was created from another document, you can use <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> to import the node to the current document. The imported node can then be inserted into the current document.  
  
 This method is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 The following example adds a new node to the XML document.  
  
 [!code-cs[Classic WebData XmlNode.PrependChild Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.pre_1.cs)]
 [!code-cpp[Classic WebData XmlNode.PrependChild Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.pre_1.cpp)]
 [!code-vb[Classic WebData XmlNode.PrependChild Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.pre_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.  
  
 The <paramref name="newChild" /> is an ancestor of this node.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.  
  
 This node is read-only.</exception>
        <threadsafe />
        <value>The node added.</value>
      </Docs>
    </Member>
    <Member MemberName="PreviousSibling">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode PreviousSibling { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNode PreviousSibling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the node immediately preceding this node.</summary>
        <value>The preceding <see langword="XmlNode" />. If there is no preceding node, <see langword="null" /> is returned.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example displays all the books in the XML document.  
  
 [!code-cs[Classic WebData XmlNode.PreviousSibling Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlnode.pre_1.cs)]
 [!code-cpp[Classic WebData XmlNode.PreviousSibling Example#1](../../add/codesnippet/CPP/p-system.xml.xmlnode.pre_1.cpp)]
 [!code-vb[Classic WebData XmlNode.PreviousSibling Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlnode.pre_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>The preceding <see langword="XmlNode" />. If there is no preceding node, <see langword="null" /> is returned.</returns>
      </Docs>
    </Member>
    <Member MemberName="PreviousText">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode PreviousText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNode PreviousText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the text node that immediately precedes this node.</summary>
        <value>Returns <see cref="T:System.Xml.XmlNode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property has faster performance than the <xref:System.Xml.XmlNode.PreviousSibling%2A> property but you can use it only to get a node of type <xref:System.Xml.XmlNodeType>. To get any other type of node that that precedes this node, use the <xref:System.Xml.XmlNode.PreviousSibling%2A> property.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>Returns <see cref="T:System.Xml.XmlNode" />.</returns>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public virtual void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAll() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all the child nodes and/or attributes of the current node.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If a removed attribute is known to have a default value, an attribute immediately appears containing the default value and, if applicable, the corresponding namespace URI, local name, and prefix.  
  
 This method is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 The following example removes all child and attribute nodes from the root node.  
  
 [!code-cs[Classic WebData XmlNode.RemoveAll Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.rem_1_1.cs)]
 [!code-cpp[Classic WebData XmlNode.RemoveAll Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.rem_1_1.cpp)]
 [!code-vb[Classic WebData XmlNode.RemoveAll Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.rem_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode RemoveChild (System.Xml.XmlNode oldChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode RemoveChild(class System.Xml.XmlNode oldChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="oldChild">The node being removed.</param>
        <summary>Removes specified child node.</summary>
        <returns>The node removed.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example removes a node from the XML document.  
  
 [!code-cs[Classic WebData XmlNode.RemoveChild Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.rem_0_1.cs)]
 [!code-vb[Classic WebData XmlNode.RemoveChild Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.rem_0_1.vb)]
 [!code-cpp[Classic WebData XmlNode.RemoveChild Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.rem_0_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="oldChild" /> is not a child of this node. Or this node is read-only.</exception>
        <threadsafe />
        <value>The node removed.</value>
      </Docs>
    </Member>
    <Member MemberName="ReplaceChild">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNode ReplaceChild (System.Xml.XmlNode newChild, System.Xml.XmlNode oldChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlNode ReplaceChild(class System.Xml.XmlNode newChild, class System.Xml.XmlNode oldChild) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlNode" />
        <Parameter Name="oldChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="newChild">The new node to put in the child list.</param>
        <param name="oldChild">The node being replaced in the list.</param>
        <summary>Replaces the child node <paramref name="oldChild" /> with <paramref name="newChild" /> node.</summary>
        <returns>The node replaced.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the `newChild` is already in the tree, it is first removed.  
  
 If the `newChild` was created from another document, you can use <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> to import the node to the current document. The imported node can then be passed to the `ReplaceChild` method.  
  
   
  
## Examples  
 The following example replaces the title element in the XML document.  
  
 [!code-cpp[Classic WebData XmlNode.ReplaceChild Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.rep_1.cpp)]
 [!code-cs[Classic WebData XmlNode.ReplaceChild Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.rep_1.cs)]
 [!code-vb[Classic WebData XmlNode.ReplaceChild Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.rep_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.  
  
 The <paramref name="newChild" /> is an ancestor of this node.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.  
  
 This node is read-only.  
  
 The <paramref name="oldChild" /> is not a child of this node.</exception>
        <threadsafe />
        <value>The node replaced.</value>
      </Docs>
    </Member>
    <Member MemberName="SchemaInfo">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.IXmlSchemaInfo SchemaInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the post schema validation infoset that has been assigned to this node as a result of schema validation.</summary>
        <value>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> object containing the post schema validation infoset of this node.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The SchemaInfo property is set when this node is validatied.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> object containing the post schema validation infoset of this node.</returns>
      </Docs>
    </Member>
    <Member MemberName="SelectNodes">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNodeList SelectNodes (string xpath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlNodeList SelectNodes(string xpath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xpath">The XPath expression.</param>
        <summary>Selects a list of nodes matching the XPath expression.</summary>
        <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a collection of nodes matching the XPath query.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the XPath expression requires namespace resolution, you must use the `SelectNodes` overload which takes an <xref:System.Xml.XmlNamespaceManager> as its argument. The `XmlNamespaceManager` is used to resolve namespaces.  
  
> [!NOTE]
>  If the XPath expression does not include a prefix, it is assumed that the namespace URI is the empty namespace. If your XML includes a default namespace, you must still use the `XmlNamespaceManager` and add a prefix and namespace URI to it; otherwise, you will not get any nodes selected. For more information, see [Select Nodes Using XPath Navigation](../Topic/Select%20Nodes%20Using%20XPath%20Navigation.md).  
  
> [!NOTE]
>  A common issue when formulating XPath expressions is how to include a single quote (') or double quote (") in the expression. If you have to search for a value that includes a single quote, you must enclose the string in double quotes. If you need to search for a value that includes a double quote, you must enclose the string in single quotes.  
  
 For example, suppose you have the following XML:  
  
```  
<bookstore>  
  <book>  
    <title>'Emma'</title>  
  </book>  
</bookstore>  
```  
  
 The following Visual Basic code selects an element that contains single quotes:  
  
```  
nodeList = root.SelectNodes("//book[contains(title,""'Emma'"")]")  
```  
  
 This method is a Microsoft extension to the Document Object Model (DOM).  
  
 The <xref:System.Xml.XmlNodeList> object returned by this method will be valid while the underlying document remains unchanged. If the underlying document changes, unexpected results may be returned (no exception will be thrown).  
  
   
  
## Examples  
 The following example selects all books where the author's last name is Austen, and then changes the price of those books.  
  
 [!code-cpp[Classic WebData XmlNode.SelectNodes Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.sel_1_1.cpp)]
 [!code-cs[Classic WebData XmlNode.SelectNodes Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.sel_1_1.cs)]
 [!code-vb[Classic WebData XmlNode.SelectNodes Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.sel_1_1.vb)]  
  
 This example uses the following XML:  
  
 [!code-xml[Classic WebData XmlNode.SelectNodes Example#2](../../add/codesnippet/XML/m-system.xml.xmlnode.sel_1_2.xml)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix. See [XPath Examples](http://msdn.microsoft.com/en-us/1431789e-c545-4765-8c09-3057e07d3041).</exception>
        <threadsafe />
        <value>An <see cref="T:System.Xml.XmlNodeList" /> containing a collection of nodes matching the XPath query.</value>
      </Docs>
    </Member>
    <Member MemberName="SelectNodes">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNodeList SelectNodes (string xpath, System.Xml.XmlNamespaceManager nsmgr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlNodeList SelectNodes(string xpath, class System.Xml.XmlNamespaceManager nsmgr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
        <Parameter Name="nsmgr" Type="System.Xml.XmlNamespaceManager" />
      </Parameters>
      <Docs>
        <param name="xpath">The XPath expression. See [XPath Examples](http://msdn.microsoft.com/en-us/1431789e-c545-4765-8c09-3057e07d3041).</param>
        <param name="nsmgr">An &lt;xref:System.Xml.XmlNamespaceManager&gt; to use for resolving namespaces for prefixes in the XPath expression.</param>
        <summary>Selects a list of nodes matching the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied &lt;xref:System.Xml.XmlNamespaceManager&gt;.</summary>
        <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a collection of nodes matching the XPath query.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XPath expressions can include namespaces. Namespace resolution is supported using the `XmlNamespaceManager`. If the XPath expression includes a prefix, the prefix and namespace URI pair must be added to the `XmlNamespaceManager`.  
  
> [!NOTE]
>  If the XPath expression does not include a prefix, it is assumed that the namespace URI is the empty namespace. If your XML includes a default namespace, you must still add a prefix and namespace URI to the `XmlNamespaceManager`; otherwise, you will not get any nodes selected. For more information, see [Select Nodes Using XPath Navigation](../Topic/Select%20Nodes%20Using%20XPath%20Navigation.md).  
  
 For example, if you had the following XML:  
  
```  
<bookstore xmlns="http://www.lucernepublishing.com">  
 <book>  
   <title>Pride And Prejudice</title>  
 </book>  
</bookstore>  
```  
  
 The following C# code selects all book nodes:  
  
```  
XmlNamespaceManager nsmgr = new XmlNamespaceManager(doc.NameTable);  
nsmgr.AddNamespace("ab", "http://www.lucernepublishing.com");  
XmlNodeList nodelist = doc.SelectNodes("//ab:book", nsmgr);  
```  
  
> [!NOTE]
>  A common issue when formulating XPath expressions is how to include a single quote (') or double quote (") in the expression. If you have to search for a value that includes a single quote, you must enclose the string in double quotes. If you need to search for a value that includes a double quote, you must enclose the string in single quotes.  
  
 For example, suppose you have the following XML:  
  
```  
<bookstore xmlns="http://www.lucernepublishing.com">  
  <book>  
    <title>'Emma'</title>  
  </book>  
</bookstore>  
```  
  
 The following Visual Basic code selects an element that contains single quotes:  
  
```  
Dim nsmgr As XmlNamespaceManager = New XmlNamespaceManager(doc.NameTable)  
nsmgr.AddNamespace("ab", "http://www.lucernepublishing.com")  
nodeList = root.SelectNodes("//ab:book[contains(ab:title,""'Emma'"")]", nsmgr)  
```  
  
 This method is a Microsoft extension to the Document Object Model (DOM).  
  
 The <xref:System.Xml.XmlNodeList> object returned by this method will be valid while the underlying document remains unchanged. If the underlying document changes, unexpected results may be returned (no exception will be thrown).  
  
   
  
## Examples  
 The following example displays the values of each of the ISBN attributes. This example uses an <xref:System.Xml.XmlElement> object, which inherits from the <xref:System.Xml.XmlNode> class.  
  
 [!code-cpp[XmlNode.SelectNodes1#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.sel_2_1.cpp)]
 [!code-vb[XmlNode.SelectNodes1#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.sel_2_1.vb)]
 [!code-cs[XmlNode.SelectNodes1#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.sel_2_1.cs)]  
  
 The example uses the file, `booksort.xml`, as input.  
  
 [!code-xml[Classic WebData XmlNode.SelectNodes Example#2](../../add/codesnippet/XML/m-system.xml.xmlnode.sel_2_2.xml)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix which is not defined in the <see langword="XmlNamespaceManager" />.</exception>
        <threadsafe />
        <value>An <see cref="T:System.Xml.XmlNodeList" /> containing a collection of nodes matching the XPath query.</value>
      </Docs>
    </Member>
    <Member MemberName="SelectSingleNode">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNode SelectSingleNode (string xpath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlNode SelectSingleNode(string xpath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xpath">The XPath expression. See [XPath Examples](http://msdn.microsoft.com/en-us/1431789e-c545-4765-8c09-3057e07d3041).</param>
        <summary>Selects the first <see langword="XmlNode" /> that matches the XPath expression.</summary>
        <returns>The first <see langword="XmlNode" /> that matches the XPath query or <see langword="null" /> if no matching node is found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the XPath expression requires namespace resolution, you must use the `SelectSingleNode` overload which takes an <xref:System.Xml.XmlNamespaceManager> as its argument. The `XmlNamespaceManager` is used to resolve namespaces.  
  
> [!NOTE]
>  If the XPath expression does not include a prefix, it is assumed that the namespace URI is the empty namespace. If your XML includes a default namespace, you must still use the `XmlNamespaceManager` and add a prefix and namespace URI to it; otherwise, you will not get a selected node. For more information, see [Select Nodes Using XPath Navigation](../Topic/Select%20Nodes%20Using%20XPath%20Navigation.md).  
  
> [!NOTE]
>  A common issue when formulating XPath expressions is how to include a single quote (') or double quote (") in the expression. If you have to search for a value that includes a single quote, you must enclose the string in double quotes. If you need to search for a value that includes a double quote, you must enclose the string in single quotes.  
  
 For example, suppose you have the following XML:  
  
```  
<bookstore>  
  <book>  
    <title>'Emma'</title>  
  </book>  
</bookstore>  
```  
  
 The following Visual Basic code selects an element that contains single quotes:  
  
```  
book = root.SelectSingleNode("descendant::book[title=""'Emma'""]")  
```  
  
 This method is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 The following example changes the price of the first Jane Austen book.  
  
 [!code-cpp[Classic WebData XmlNode.SelectSingleNode Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.sel_0_1.cpp)]
 [!code-cs[Classic WebData XmlNode.SelectSingleNode Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.sel_0_1.cs)]
 [!code-vb[Classic WebData XmlNode.SelectSingleNode Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.sel_0_1.vb)]  
  
 The example uses the file, `booksort.xml`, as input.  
  
 [!code-xml[Classic WebData XmlNode.SelectSingleNode Example#2](../../add/codesnippet/XML/m-system.xml.xmlnode.sel_0_2.xml)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix.</exception>
        <threadsafe />
        <value>The first <see langword="XmlNode" /> that matches the XPath query or <see langword="null" /> if no matching node is found.</value>
      </Docs>
    </Member>
    <Member MemberName="SelectSingleNode">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNode SelectSingleNode (string xpath, System.Xml.XmlNamespaceManager nsmgr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlNode SelectSingleNode(string xpath, class System.Xml.XmlNamespaceManager nsmgr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xpath" Type="System.String" />
        <Parameter Name="nsmgr" Type="System.Xml.XmlNamespaceManager" />
      </Parameters>
      <Docs>
        <param name="xpath">The XPath expression. See [XPath Examples](http://msdn.microsoft.com/en-us/1431789e-c545-4765-8c09-3057e07d3041).</param>
        <param name="nsmgr">An &lt;xref:System.Xml.XmlNamespaceManager&gt; to use for resolving namespaces for prefixes in the XPath expression.</param>
        <summary>Selects the first <see langword="XmlNode" /> that matches the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied &lt;xref:System.Xml.XmlNamespaceManager&gt;.</summary>
        <returns>The first <see langword="XmlNode" /> that matches the XPath query or <see langword="null" /> if no matching node is found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XPath expressions can include namespaces. Namespace resolution is supported using the `XmlNamespaceManager`. If the XPath expression includes a prefix, the prefix and namespace URI pair must be added to the `XmlNamespaceManager`.  
  
> [!NOTE]
>  If the XPath expression does not include a prefix, it is assumed that the namespace URI is the empty namespace. If your XML includes a default namespace, you must still add a prefix and namespace URI to the `XmlNamespaceManager`; otherwise, you will not get a node selected. For more information, see [Select Nodes Using XPath Navigation](../Topic/Select%20Nodes%20Using%20XPath%20Navigation.md).  
  
 For example, if you had the following XML:  
  
```  
<bookstore xmlns="http://www.lucernepublishing.com">  
 <book>  
   <title>Pride And Prejudice</title>  
 </book>  
</bookstore>  
```  
  
 The following C# code selects the first book node:  
  
```  
XmlNamespaceManager nsmgr = new XmlNamespaceManager(doc.NameTable);  
nsmgr.AddNamespace("ab", "http://www.lucernepublishing.com");  
XmlNode book = doc.SelectSingleNode("//ab:book", nsmgr);  
```  
  
> [!NOTE]
>  A common issue when formulating XPath expressions is how to include a single quote (') or double quote (") in the expression. If you have to search for a value that includes a single quote, you must enclose the string in double quotes. If you need to search for a value that includes a double quote, you must enclose the string in single quotes.  
  
 For example, suppose you have the following XML:  
  
```  
<bookstore xmlns="http://www.lucernepublishing.com">  
  <book>  
    <title>'Emma'</title>  
  </book>  
</bookstore>  
```  
  
 The following Visual Basic code selects an element that contains single quotes:  
  
```  
Dim nsmgr As XmlNamespaceManager = New XmlNamespaceManager(doc.NameTable)  
nsmgr.AddNamespace("ab", "http://www.lucernepublishing.com")  
book = root.SelectSingleNode("descendant::ab:book[ab:title=""'Emma'""]", nsmgr)  
```  
  
 This method is a Microsoft extension to the Document Object Model (DOM).  
  
   
  
## Examples  
 The following example selects the book with the matching ISBN value.  
  
 [!code-cpp[XmlNode.SelectSingleNode1#1](../../add/codesnippet/CPP/8cab234d-8de2-4705-b32f-_1.cpp)]
 [!code-cs[XmlNode.SelectSingleNode1#1](../../add/codesnippet/CSharp/8cab234d-8de2-4705-b32f-_1.cs)]
 [!code-vb[XmlNode.SelectSingleNode1#1](../../add/codesnippet/VisualBasic/8cab234d-8de2-4705-b32f-_1.vb)]  
  
 The example uses the file, `booksort.xml`, as input.  
  
 [!code-xml[Classic WebData XmlNode.SelectNodes Example#2](../../add/codesnippet/XML/8cab234d-8de2-4705-b32f-_2.xml)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix which is not defined in the <see langword="XmlNamespaceManager" />.</exception>
        <threadsafe />
        <value>The first <see langword="XmlNode" /> that matches the XPath query or <see langword="null" /> if no matching node is found.</value>
      </Docs>
    </Member>
    <Member MemberName="Supports">
      <MemberSignature Language="C#" Value="public virtual bool Supports (string feature, string version);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(string feature, string version) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="feature" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="feature">The package name of the feature to test. This name is not case-sensitive.</param>
        <param name="version">The version number of the package name to test. If the version is not specified (null), supporting any version of the feature causes the method to return true.</param>
        <summary>Tests if the DOM implementation implements a specific feature.</summary>
        <returns>
          <see langword="true" /> if the feature is implemented in the specified version; otherwise, <see langword="false" />. The following table describes the combinations that return <see langword="true" />.  
  
 <list type="table">  
<listheader>  
<term> Feature  
  
 </term>  
<description> Version  
  
 </description>  
</listheader>  
<item>  
<term> XML  
  
 </term>  
<description> 1.0  
  
 </description>  
</item>  
<item>  
<term> XML  
  
 </term>  
<description> 2.0  
  
 </description>  
</item>  
</list></returns>
        <remarks>To be added.</remarks>
        <threadsafe />
        <value>
          <see langword="true" /> if the feature is implemented in the specified version; otherwise, <see langword="false" />. The following table describes the combinations that return <see langword="true" />.  
  
 <list type="table">  
<listheader>  
<term> Feature  
  
 </term>  
<description> Version  
  
 </description>  
</listheader>  
<item>  
<term> XML  
  
 </term>  
<description> 1.0  
  
 </description>  
</item>  
<item>  
<term> XML  
  
 </term>  
<description> 2.0  
  
 </description>  
</item>  
</list></value>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Xml.XmlNode.GetEnumerator%2A?displayProperty=fullName&gt;.</summary>
        <returns>Returns an enumerator for the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Xml.XmlNode> instance is cast to an <xref:System.Collections.IEnumerable> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>Returns an enumerator for the collection.</value>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>For a description of this member, see &lt;xref:System.Xml.XmlNode.Clone%2A?displayProperty=fullName&gt;.</summary>
        <returns>A copy of the node from which it is called.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Xml.XmlNode> instance is cast to an <xref:System.ICloneable> interface.  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <value>A copy of the node from which it is called.</value>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public virtual string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value of the node.</summary>
        <value>The value returned depends on the &lt;xref:System.Xml.XmlNode.NodeType%2A&gt; of the node:  
  
 </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example adds a new attribute to the XML document and sets the Value property of the new attribute.  
  
 [!code-cpp[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](../../add/codesnippet/CPP/p-system.xml.xmlnode.value_1.cpp)]
 [!code-vb[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](../../add/codesnippet/VisualBasic/p-system.xml.xmlnode.value_1.vb)]
 [!code-cs[Classic WebData XmlNode.GetNamespaceOfPrefix Example#1](../../add/codesnippet/CSharp/p-system.xml.xmlnode.value_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Setting the value of a node that is read-only.</exception>
        <exception cref="T:System.InvalidOperationException">Setting the value of a node that is not supposed to have a value (for example, an Element node).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="WriteContentTo">
      <MemberSignature Language="C#" Value="public abstract void WriteContentTo (System.Xml.XmlWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteContentTo(class System.Xml.XmlWriter w) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
        <summary>Saves all the child nodes of the node to the specified &lt;xref:System.Xml.XmlWriter&gt;, when overridden in a derived class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is a Microsoft extension to the Document Object Model (DOM). It is functionally equivalent to the <xref:System.Xml.XmlNode.InnerXml%2A> property.  
  
   
  
## Examples  
 The following example displays the contents of the root node to the console.  
  
 [!code-cpp[Classic WebData XmlNode.WriteContentTo Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.wri_0_1.cpp)]
 [!code-cs[Classic WebData XmlNode.WriteContentTo Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.wri_0_1.cs)]
 [!code-vb[Classic WebData XmlNode.WriteContentTo Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.wri_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public abstract void WriteTo (System.Xml.XmlWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteTo(class System.Xml.XmlWriter w) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="w">The <see langword="XmlWriter" /> to which you want to save.</param>
        <summary>Saves the current node to the specified &lt;xref:System.Xml.XmlWriter&gt;, when overridden in a derived class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is a Microsoft extension to the Document Object Model (DOM). It is functionally equivalent to the <xref:System.Xml.XmlNode.OuterXml%2A> property.  
  
   
  
## Examples  
 The following example displays the root node to the console.  
  
 [!code-cpp[Classic WebData XmlNode.WriteTo Example#1](../../add/codesnippet/CPP/m-system.xml.xmlnode.wri_1_1.cpp)]
 [!code-cs[Classic WebData XmlNode.WriteTo Example#1](../../add/codesnippet/CSharp/m-system.xml.xmlnode.wri_1_1.cs)]
 [!code-vb[Classic WebData XmlNode.WriteTo Example#1](../../add/codesnippet/VisualBasic/m-system.xml.xmlnode.wri_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
  </Members>
</Type>