<Type Name="InstanceContextMode" FullName="System.ServiceModel.InstanceContextMode">
  <TypeSignature Language="C#" Value="public enum InstanceContextMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed InstanceContextMode extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Specifies the number of service instances available for handling calls that are contained in incoming messages.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.ServiceModel.InstanceContext?displayProperty=fullName> manages the association between the channel and the user-defined service objects. Use the InstanceContextMode enumeration with the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName> property to specify the lifetime of the <xref:System.ServiceModel.InstanceContext> object. [!INCLUDE[indigo1](../../add/includes/indigo1-md.md)] can create a new <xref:System.ServiceModel.InstanceContext> object for every call, every session or specify that the <xref:System.ServiceModel.InstanceContext> object is bound to a single service object. For a working example, see the [Instancing](../Topic/Instancing.md).  
  
 The Single value specifies that a single <xref:System.ServiceModel.InstanceContext> object should be used for the lifetime of the service.  
  
> [!NOTE]
>  If the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> value is set to Single the result is that your service can only process one message at a time unless you also set the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> value to <xref:System.ServiceModel.ConcurrencyMode>.  
  
   
  
## Examples  
 The following code illustrates how to set the InstanceContextMode for a service class:  
  
 [!code-cs[S_ReliableSession#1](../../add/codesnippet/CSharp/t-system.servicemodel.in_1.cs)]
 [!code-vb[S_ReliableSession#1](../../add/codesnippet/VisualBasic/t-system.servicemodel.in_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
    <returns />
    <value />
  </Docs>
  <Members>
    <Member MemberName="PerCall">
      <MemberSignature Language="C#" Value="PerCall" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.InstanceContextMode PerCall = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContextMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A new T:System.ServiceModel.InstanceContext?qualifyHint=False</summary>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="PerSession">
      <MemberSignature Language="C#" Value="PerSession" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.InstanceContextMode PerSession = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContextMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A new T:System.ServiceModel.InstanceContext?qualifyHint=False</summary>
        <threadsafe />
        <returns />
        <value />
      </Docs>
    </Member>
    <Member MemberName="Single">
      <MemberSignature Language="C#" Value="Single" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.InstanceContextMode Single = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContextMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Only one T:System.ServiceModel.InstanceContext?qualifyHint=False</summary>
        <threadsafe />
        <returns />
        <value />
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  For singleton lifetime behavior (for example, if the host application calls the M:System.ServiceModel.ServiceHost.#ctor(System.Object,System.Uri[])?qualifyHint=False&autoUpgrade=True constructor and passes an object to use as the service), the service class must set P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode?qualifyHint=False&autoUpgrade=True to Single, or an exception is thrown when the service host is opened.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>