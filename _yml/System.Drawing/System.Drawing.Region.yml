### YamlMime:ManagedReference
items:
- uid: System.Drawing.Region
  id: Region
  children:
  - System.Drawing.Region.#ctor
  - System.Drawing.Region.#ctor(System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Region.#ctor(System.Drawing.Drawing2D.RegionData)
  - System.Drawing.Region.#ctor(System.Drawing.Rectangle)
  - System.Drawing.Region.#ctor(System.Drawing.RectangleF)
  - System.Drawing.Region.Clone
  - System.Drawing.Region.Complement(System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Region.Complement(System.Drawing.Rectangle)
  - System.Drawing.Region.Complement(System.Drawing.RectangleF)
  - System.Drawing.Region.Complement(System.Drawing.Region)
  - System.Drawing.Region.Dispose
  - System.Drawing.Region.Equals(System.Drawing.Region,System.Drawing.Graphics)
  - System.Drawing.Region.Exclude(System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Region.Exclude(System.Drawing.Rectangle)
  - System.Drawing.Region.Exclude(System.Drawing.RectangleF)
  - System.Drawing.Region.Exclude(System.Drawing.Region)
  - System.Drawing.Region.Finalize
  - System.Drawing.Region.FromHrgn(System.IntPtr)
  - System.Drawing.Region.GetBounds(System.Drawing.Graphics)
  - System.Drawing.Region.GetHrgn(System.Drawing.Graphics)
  - System.Drawing.Region.GetRegionData
  - System.Drawing.Region.GetRegionScans(System.Drawing.Drawing2D.Matrix)
  - System.Drawing.Region.Intersect(System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Region.Intersect(System.Drawing.Rectangle)
  - System.Drawing.Region.Intersect(System.Drawing.RectangleF)
  - System.Drawing.Region.Intersect(System.Drawing.Region)
  - System.Drawing.Region.IsEmpty(System.Drawing.Graphics)
  - System.Drawing.Region.IsInfinite(System.Drawing.Graphics)
  - System.Drawing.Region.IsVisible(System.Drawing.Point)
  - System.Drawing.Region.IsVisible(System.Drawing.PointF)
  - System.Drawing.Region.IsVisible(System.Drawing.Rectangle)
  - System.Drawing.Region.IsVisible(System.Drawing.RectangleF)
  - System.Drawing.Region.IsVisible(System.Drawing.Point,System.Drawing.Graphics)
  - System.Drawing.Region.IsVisible(System.Drawing.PointF,System.Drawing.Graphics)
  - System.Drawing.Region.IsVisible(System.Drawing.Rectangle,System.Drawing.Graphics)
  - System.Drawing.Region.IsVisible(System.Drawing.RectangleF,System.Drawing.Graphics)
  - System.Drawing.Region.IsVisible(System.Single,System.Single)
  - System.Drawing.Region.IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)
  - System.Drawing.Region.IsVisible(System.Single,System.Single,System.Drawing.Graphics)
  - System.Drawing.Region.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Drawing.Region.IsVisible(System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Region.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Graphics)
  - System.Drawing.Region.IsVisible(System.Single,System.Single,System.Single,System.Single,System.Drawing.Graphics)
  - System.Drawing.Region.MakeEmpty
  - System.Drawing.Region.MakeInfinite
  - System.Drawing.Region.ReleaseHrgn(System.IntPtr)
  - System.Drawing.Region.Transform(System.Drawing.Drawing2D.Matrix)
  - System.Drawing.Region.Translate(System.Int32,System.Int32)
  - System.Drawing.Region.Translate(System.Single,System.Single)
  - System.Drawing.Region.Union(System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Region.Union(System.Drawing.Rectangle)
  - System.Drawing.Region.Union(System.Drawing.RectangleF)
  - System.Drawing.Region.Union(System.Drawing.Region)
  - System.Drawing.Region.Xor(System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Region.Xor(System.Drawing.Rectangle)
  - System.Drawing.Region.Xor(System.Drawing.RectangleF)
  - System.Drawing.Region.Xor(System.Drawing.Region)
  langs:
  - csharp
  name: Region
  nameWithType: Region
  fullName: System.Drawing.Region
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public sealed class Region : MarshalByRefObject, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.#ctor
  id: '#ctor'
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Region()
  nameWithType: Region.Region()
  fullName: System.Drawing.Region.Region()
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Region ();
    parameters: []
  overload: System.Drawing.Region.#ctor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.#ctor(System.Drawing.Drawing2D.GraphicsPath)
  id: '#ctor(System.Drawing.Drawing2D.GraphicsPath)'
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Region(GraphicsPath)
  nameWithType: Region.Region(GraphicsPath)
  fullName: System.Drawing.Region.Region(GraphicsPath)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Region (System.Drawing.Drawing2D.GraphicsPath path);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: To be added.
  overload: System.Drawing.Region.#ctor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.#ctor(System.Drawing.Drawing2D.RegionData)
  id: '#ctor(System.Drawing.Drawing2D.RegionData)'
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Region(RegionData)
  nameWithType: Region.Region(RegionData)
  fullName: System.Drawing.Region.Region(RegionData)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Region (System.Drawing.Drawing2D.RegionData rgnData);
    parameters:
    - id: rgnData
      type: System.Drawing.Drawing2D.RegionData
      description: To be added.
  overload: System.Drawing.Region.#ctor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.#ctor(System.Drawing.Rectangle)
  id: '#ctor(System.Drawing.Rectangle)'
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Region(Rectangle)
  nameWithType: Region.Region(Rectangle)
  fullName: System.Drawing.Region.Region(Rectangle)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Region (System.Drawing.Rectangle rect);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: To be added.
  overload: System.Drawing.Region.#ctor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.#ctor(System.Drawing.RectangleF)
  id: '#ctor(System.Drawing.RectangleF)'
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Region(RectangleF)
  nameWithType: Region.Region(RectangleF)
  fullName: System.Drawing.Region.Region(RectangleF)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Region (System.Drawing.RectangleF rect);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: To be added.
  overload: System.Drawing.Region.#ctor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Clone
  id: Clone
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Clone()
  nameWithType: Region.Clone()
  fullName: System.Drawing.Region.Clone()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Drawing.Region Clone ();
    parameters: []
    return:
      type: System.Drawing.Region
      description: To be added.
  overload: System.Drawing.Region.Clone*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Complement(System.Drawing.Drawing2D.GraphicsPath)
  id: Complement(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Complement(GraphicsPath)
  nameWithType: Region.Complement(GraphicsPath)
  fullName: System.Drawing.Region.Complement(GraphicsPath)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Complement (System.Drawing.Drawing2D.GraphicsPath path);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: To be added.
  overload: System.Drawing.Region.Complement*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Complement(System.Drawing.Rectangle)
  id: Complement(System.Drawing.Rectangle)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Complement(Rectangle)
  nameWithType: Region.Complement(Rectangle)
  fullName: System.Drawing.Region.Complement(Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Complement (System.Drawing.Rectangle rect);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: To be added.
  overload: System.Drawing.Region.Complement*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Complement(System.Drawing.RectangleF)
  id: Complement(System.Drawing.RectangleF)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Complement(RectangleF)
  nameWithType: Region.Complement(RectangleF)
  fullName: System.Drawing.Region.Complement(RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Complement (System.Drawing.RectangleF rect);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: To be added.
  overload: System.Drawing.Region.Complement*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Complement(System.Drawing.Region)
  id: Complement(System.Drawing.Region)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Complement(Region)
  nameWithType: Region.Complement(Region)
  fullName: System.Drawing.Region.Complement(Region)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Complement (System.Drawing.Region region);
    parameters:
    - id: region
      type: System.Drawing.Region
      description: To be added.
  overload: System.Drawing.Region.Complement*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Dispose
  id: Dispose
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Dispose()
  nameWithType: Region.Dispose()
  fullName: System.Drawing.Region.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.Region.Dispose*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Equals(System.Drawing.Region,System.Drawing.Graphics)
  id: Equals(System.Drawing.Region,System.Drawing.Graphics)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Equals(Region,Graphics)
  nameWithType: Region.Equals(Region,Graphics)
  fullName: System.Drawing.Region.Equals(Region,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool Equals (System.Drawing.Region region, System.Drawing.Graphics g);
    parameters:
    - id: region
      type: System.Drawing.Region
      description: To be added.
    - id: g
      type: System.Drawing.Graphics
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.Equals*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Exclude(System.Drawing.Drawing2D.GraphicsPath)
  id: Exclude(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Exclude(GraphicsPath)
  nameWithType: Region.Exclude(GraphicsPath)
  fullName: System.Drawing.Region.Exclude(GraphicsPath)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Exclude (System.Drawing.Drawing2D.GraphicsPath path);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: To be added.
  overload: System.Drawing.Region.Exclude*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Exclude(System.Drawing.Rectangle)
  id: Exclude(System.Drawing.Rectangle)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Exclude(Rectangle)
  nameWithType: Region.Exclude(Rectangle)
  fullName: System.Drawing.Region.Exclude(Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Exclude (System.Drawing.Rectangle rect);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: To be added.
  overload: System.Drawing.Region.Exclude*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Exclude(System.Drawing.RectangleF)
  id: Exclude(System.Drawing.RectangleF)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Exclude(RectangleF)
  nameWithType: Region.Exclude(RectangleF)
  fullName: System.Drawing.Region.Exclude(RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Exclude (System.Drawing.RectangleF rect);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: To be added.
  overload: System.Drawing.Region.Exclude*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Exclude(System.Drawing.Region)
  id: Exclude(System.Drawing.Region)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Exclude(Region)
  nameWithType: Region.Exclude(Region)
  fullName: System.Drawing.Region.Exclude(Region)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Exclude (System.Drawing.Region region);
    parameters:
    - id: region
      type: System.Drawing.Region
      description: To be added.
  overload: System.Drawing.Region.Exclude*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Finalize
  id: Finalize
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Finalize()
  nameWithType: Region.Finalize()
  fullName: System.Drawing.Region.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: ~Region ();
    parameters: []
  overload: System.Drawing.Region.Finalize*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.FromHrgn(System.IntPtr)
  id: FromHrgn(System.IntPtr)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: FromHrgn(IntPtr)
  nameWithType: Region.FromHrgn(IntPtr)
  fullName: System.Drawing.Region.FromHrgn(IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Drawing.Region FromHrgn (IntPtr hrgn);
    parameters:
    - id: hrgn
      type: System.IntPtr
      description: To be added.
    return:
      type: System.Drawing.Region
      description: To be added.
  overload: System.Drawing.Region.FromHrgn*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.GetBounds(System.Drawing.Graphics)
  id: GetBounds(System.Drawing.Graphics)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: GetBounds(Graphics)
  nameWithType: Region.GetBounds(Graphics)
  fullName: System.Drawing.Region.GetBounds(Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Drawing.RectangleF GetBounds (System.Drawing.Graphics g);
    parameters:
    - id: g
      type: System.Drawing.Graphics
      description: To be added.
    return:
      type: System.Drawing.RectangleF
      description: To be added.
  overload: System.Drawing.Region.GetBounds*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.GetHrgn(System.Drawing.Graphics)
  id: GetHrgn(System.Drawing.Graphics)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: GetHrgn(Graphics)
  nameWithType: Region.GetHrgn(Graphics)
  fullName: System.Drawing.Region.GetHrgn(Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public IntPtr GetHrgn (System.Drawing.Graphics g);
    parameters:
    - id: g
      type: System.Drawing.Graphics
      description: To be added.
    return:
      type: System.IntPtr
      description: To be added.
  overload: System.Drawing.Region.GetHrgn*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.GetRegionData
  id: GetRegionData
  parent: System.Drawing.Region
  langs:
  - csharp
  name: GetRegionData()
  nameWithType: Region.GetRegionData()
  fullName: System.Drawing.Region.GetRegionData()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Drawing.Drawing2D.RegionData GetRegionData ();
    parameters: []
    return:
      type: System.Drawing.Drawing2D.RegionData
      description: To be added.
  overload: System.Drawing.Region.GetRegionData*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.GetRegionScans(System.Drawing.Drawing2D.Matrix)
  id: GetRegionScans(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: GetRegionScans(Matrix)
  nameWithType: Region.GetRegionScans(Matrix)
  fullName: System.Drawing.Region.GetRegionScans(Matrix)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Drawing.RectangleF[] GetRegionScans (System.Drawing.Drawing2D.Matrix matrix);
    parameters:
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: To be added.
    return:
      type: System.Drawing.RectangleF[]
      description: To be added.
  overload: System.Drawing.Region.GetRegionScans*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Intersect(System.Drawing.Drawing2D.GraphicsPath)
  id: Intersect(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Intersect(GraphicsPath)
  nameWithType: Region.Intersect(GraphicsPath)
  fullName: System.Drawing.Region.Intersect(GraphicsPath)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Intersect (System.Drawing.Drawing2D.GraphicsPath path);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: To be added.
  overload: System.Drawing.Region.Intersect*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Intersect(System.Drawing.Rectangle)
  id: Intersect(System.Drawing.Rectangle)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Intersect(Rectangle)
  nameWithType: Region.Intersect(Rectangle)
  fullName: System.Drawing.Region.Intersect(Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Intersect (System.Drawing.Rectangle rect);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: To be added.
  overload: System.Drawing.Region.Intersect*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Intersect(System.Drawing.RectangleF)
  id: Intersect(System.Drawing.RectangleF)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Intersect(RectangleF)
  nameWithType: Region.Intersect(RectangleF)
  fullName: System.Drawing.Region.Intersect(RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Intersect (System.Drawing.RectangleF rect);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: To be added.
  overload: System.Drawing.Region.Intersect*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Intersect(System.Drawing.Region)
  id: Intersect(System.Drawing.Region)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Intersect(Region)
  nameWithType: Region.Intersect(Region)
  fullName: System.Drawing.Region.Intersect(Region)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Intersect (System.Drawing.Region region);
    parameters:
    - id: region
      type: System.Drawing.Region
      description: To be added.
  overload: System.Drawing.Region.Intersect*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsEmpty(System.Drawing.Graphics)
  id: IsEmpty(System.Drawing.Graphics)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsEmpty(Graphics)
  nameWithType: Region.IsEmpty(Graphics)
  fullName: System.Drawing.Region.IsEmpty(Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsEmpty (System.Drawing.Graphics g);
    parameters:
    - id: g
      type: System.Drawing.Graphics
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsEmpty*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsInfinite(System.Drawing.Graphics)
  id: IsInfinite(System.Drawing.Graphics)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsInfinite(Graphics)
  nameWithType: Region.IsInfinite(Graphics)
  fullName: System.Drawing.Region.IsInfinite(Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsInfinite (System.Drawing.Graphics g);
    parameters:
    - id: g
      type: System.Drawing.Graphics
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsInfinite*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsVisible(System.Drawing.Point)
  id: IsVisible(System.Drawing.Point)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsVisible(Point)
  nameWithType: Region.IsVisible(Point)
  fullName: System.Drawing.Region.IsVisible(Point)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsVisible (System.Drawing.Point point);
    parameters:
    - id: point
      type: System.Drawing.Point
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsVisible*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsVisible(System.Drawing.PointF)
  id: IsVisible(System.Drawing.PointF)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsVisible(PointF)
  nameWithType: Region.IsVisible(PointF)
  fullName: System.Drawing.Region.IsVisible(PointF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsVisible (System.Drawing.PointF point);
    parameters:
    - id: point
      type: System.Drawing.PointF
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsVisible*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsVisible(System.Drawing.Rectangle)
  id: IsVisible(System.Drawing.Rectangle)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsVisible(Rectangle)
  nameWithType: Region.IsVisible(Rectangle)
  fullName: System.Drawing.Region.IsVisible(Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsVisible (System.Drawing.Rectangle rect);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsVisible*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsVisible(System.Drawing.RectangleF)
  id: IsVisible(System.Drawing.RectangleF)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsVisible(RectangleF)
  nameWithType: Region.IsVisible(RectangleF)
  fullName: System.Drawing.Region.IsVisible(RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsVisible (System.Drawing.RectangleF rect);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsVisible*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsVisible(System.Drawing.Point,System.Drawing.Graphics)
  id: IsVisible(System.Drawing.Point,System.Drawing.Graphics)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsVisible(Point,Graphics)
  nameWithType: Region.IsVisible(Point,Graphics)
  fullName: System.Drawing.Region.IsVisible(Point,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsVisible (System.Drawing.Point point, System.Drawing.Graphics g);
    parameters:
    - id: point
      type: System.Drawing.Point
      description: To be added.
    - id: g
      type: System.Drawing.Graphics
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsVisible*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsVisible(System.Drawing.PointF,System.Drawing.Graphics)
  id: IsVisible(System.Drawing.PointF,System.Drawing.Graphics)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsVisible(PointF,Graphics)
  nameWithType: Region.IsVisible(PointF,Graphics)
  fullName: System.Drawing.Region.IsVisible(PointF,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsVisible (System.Drawing.PointF point, System.Drawing.Graphics g);
    parameters:
    - id: point
      type: System.Drawing.PointF
      description: To be added.
    - id: g
      type: System.Drawing.Graphics
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsVisible*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsVisible(System.Drawing.Rectangle,System.Drawing.Graphics)
  id: IsVisible(System.Drawing.Rectangle,System.Drawing.Graphics)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsVisible(Rectangle,Graphics)
  nameWithType: Region.IsVisible(Rectangle,Graphics)
  fullName: System.Drawing.Region.IsVisible(Rectangle,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsVisible (System.Drawing.Rectangle rect, System.Drawing.Graphics g);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: To be added.
    - id: g
      type: System.Drawing.Graphics
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsVisible*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsVisible(System.Drawing.RectangleF,System.Drawing.Graphics)
  id: IsVisible(System.Drawing.RectangleF,System.Drawing.Graphics)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsVisible(RectangleF,Graphics)
  nameWithType: Region.IsVisible(RectangleF,Graphics)
  fullName: System.Drawing.Region.IsVisible(RectangleF,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsVisible (System.Drawing.RectangleF rect, System.Drawing.Graphics g);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: To be added.
    - id: g
      type: System.Drawing.Graphics
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsVisible*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsVisible(System.Single,System.Single)
  id: IsVisible(System.Single,System.Single)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsVisible(Single,Single)
  nameWithType: Region.IsVisible(Single,Single)
  fullName: System.Drawing.Region.IsVisible(Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsVisible (float x, float y);
    parameters:
    - id: x
      type: System.Single
      description: To be added.
    - id: y
      type: System.Single
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsVisible*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)
  id: IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsVisible(Int32,Int32,Graphics)
  nameWithType: Region.IsVisible(Int32,Int32,Graphics)
  fullName: System.Drawing.Region.IsVisible(Int32,Int32,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsVisible (int x, int y, System.Drawing.Graphics g);
    parameters:
    - id: x
      type: System.Int32
      description: To be added.
    - id: y
      type: System.Int32
      description: To be added.
    - id: g
      type: System.Drawing.Graphics
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsVisible*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsVisible(System.Single,System.Single,System.Drawing.Graphics)
  id: IsVisible(System.Single,System.Single,System.Drawing.Graphics)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsVisible(Single,Single,Graphics)
  nameWithType: Region.IsVisible(Single,Single,Graphics)
  fullName: System.Drawing.Region.IsVisible(Single,Single,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsVisible (float x, float y, System.Drawing.Graphics g);
    parameters:
    - id: x
      type: System.Single
      description: To be added.
    - id: y
      type: System.Single
      description: To be added.
    - id: g
      type: System.Drawing.Graphics
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsVisible*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)
  id: IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsVisible(Int32,Int32,Int32,Int32)
  nameWithType: Region.IsVisible(Int32,Int32,Int32,Int32)
  fullName: System.Drawing.Region.IsVisible(Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsVisible (int x, int y, int width, int height);
    parameters:
    - id: x
      type: System.Int32
      description: To be added.
    - id: y
      type: System.Int32
      description: To be added.
    - id: width
      type: System.Int32
      description: To be added.
    - id: height
      type: System.Int32
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsVisible*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsVisible(System.Single,System.Single,System.Single,System.Single)
  id: IsVisible(System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsVisible(Single,Single,Single,Single)
  nameWithType: Region.IsVisible(Single,Single,Single,Single)
  fullName: System.Drawing.Region.IsVisible(Single,Single,Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsVisible (float x, float y, float width, float height);
    parameters:
    - id: x
      type: System.Single
      description: To be added.
    - id: y
      type: System.Single
      description: To be added.
    - id: width
      type: System.Single
      description: To be added.
    - id: height
      type: System.Single
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsVisible*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Graphics)
  id: IsVisible(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Graphics)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsVisible(Int32,Int32,Int32,Int32,Graphics)
  nameWithType: Region.IsVisible(Int32,Int32,Int32,Int32,Graphics)
  fullName: System.Drawing.Region.IsVisible(Int32,Int32,Int32,Int32,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsVisible (int x, int y, int width, int height, System.Drawing.Graphics g);
    parameters:
    - id: x
      type: System.Int32
      description: To be added.
    - id: y
      type: System.Int32
      description: To be added.
    - id: width
      type: System.Int32
      description: To be added.
    - id: height
      type: System.Int32
      description: To be added.
    - id: g
      type: System.Drawing.Graphics
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsVisible*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.IsVisible(System.Single,System.Single,System.Single,System.Single,System.Drawing.Graphics)
  id: IsVisible(System.Single,System.Single,System.Single,System.Single,System.Drawing.Graphics)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: IsVisible(Single,Single,Single,Single,Graphics)
  nameWithType: Region.IsVisible(Single,Single,Single,Single,Graphics)
  fullName: System.Drawing.Region.IsVisible(Single,Single,Single,Single,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsVisible (float x, float y, float width, float height, System.Drawing.Graphics g);
    parameters:
    - id: x
      type: System.Single
      description: To be added.
    - id: y
      type: System.Single
      description: To be added.
    - id: width
      type: System.Single
      description: To be added.
    - id: height
      type: System.Single
      description: To be added.
    - id: g
      type: System.Drawing.Graphics
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Drawing.Region.IsVisible*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.MakeEmpty
  id: MakeEmpty
  parent: System.Drawing.Region
  langs:
  - csharp
  name: MakeEmpty()
  nameWithType: Region.MakeEmpty()
  fullName: System.Drawing.Region.MakeEmpty()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void MakeEmpty ();
    parameters: []
  overload: System.Drawing.Region.MakeEmpty*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.MakeInfinite
  id: MakeInfinite
  parent: System.Drawing.Region
  langs:
  - csharp
  name: MakeInfinite()
  nameWithType: Region.MakeInfinite()
  fullName: System.Drawing.Region.MakeInfinite()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void MakeInfinite ();
    parameters: []
  overload: System.Drawing.Region.MakeInfinite*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.ReleaseHrgn(System.IntPtr)
  id: ReleaseHrgn(System.IntPtr)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: ReleaseHrgn(IntPtr)
  nameWithType: Region.ReleaseHrgn(IntPtr)
  fullName: System.Drawing.Region.ReleaseHrgn(IntPtr)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void ReleaseHrgn (IntPtr regionHandle);
    parameters:
    - id: regionHandle
      type: System.IntPtr
      description: To be added.
  overload: System.Drawing.Region.ReleaseHrgn*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Transform(System.Drawing.Drawing2D.Matrix)
  id: Transform(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Transform(Matrix)
  nameWithType: Region.Transform(Matrix)
  fullName: System.Drawing.Region.Transform(Matrix)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Transform (System.Drawing.Drawing2D.Matrix matrix);
    parameters:
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: To be added.
  overload: System.Drawing.Region.Transform*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Translate(System.Int32,System.Int32)
  id: Translate(System.Int32,System.Int32)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Translate(Int32,Int32)
  nameWithType: Region.Translate(Int32,Int32)
  fullName: System.Drawing.Region.Translate(Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Translate (int dx, int dy);
    parameters:
    - id: dx
      type: System.Int32
      description: To be added.
    - id: dy
      type: System.Int32
      description: To be added.
  overload: System.Drawing.Region.Translate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Translate(System.Single,System.Single)
  id: Translate(System.Single,System.Single)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Translate(Single,Single)
  nameWithType: Region.Translate(Single,Single)
  fullName: System.Drawing.Region.Translate(Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Translate (float dx, float dy);
    parameters:
    - id: dx
      type: System.Single
      description: To be added.
    - id: dy
      type: System.Single
      description: To be added.
  overload: System.Drawing.Region.Translate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Union(System.Drawing.Drawing2D.GraphicsPath)
  id: Union(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Union(GraphicsPath)
  nameWithType: Region.Union(GraphicsPath)
  fullName: System.Drawing.Region.Union(GraphicsPath)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Union (System.Drawing.Drawing2D.GraphicsPath path);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: To be added.
  overload: System.Drawing.Region.Union*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Union(System.Drawing.Rectangle)
  id: Union(System.Drawing.Rectangle)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Union(Rectangle)
  nameWithType: Region.Union(Rectangle)
  fullName: System.Drawing.Region.Union(Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Union (System.Drawing.Rectangle rect);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: To be added.
  overload: System.Drawing.Region.Union*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Union(System.Drawing.RectangleF)
  id: Union(System.Drawing.RectangleF)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Union(RectangleF)
  nameWithType: Region.Union(RectangleF)
  fullName: System.Drawing.Region.Union(RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Union (System.Drawing.RectangleF rect);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: To be added.
  overload: System.Drawing.Region.Union*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Union(System.Drawing.Region)
  id: Union(System.Drawing.Region)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Union(Region)
  nameWithType: Region.Union(Region)
  fullName: System.Drawing.Region.Union(Region)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Union (System.Drawing.Region region);
    parameters:
    - id: region
      type: System.Drawing.Region
      description: To be added.
  overload: System.Drawing.Region.Union*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Xor(System.Drawing.Drawing2D.GraphicsPath)
  id: Xor(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Xor(GraphicsPath)
  nameWithType: Region.Xor(GraphicsPath)
  fullName: System.Drawing.Region.Xor(GraphicsPath)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Xor (System.Drawing.Drawing2D.GraphicsPath path);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: To be added.
  overload: System.Drawing.Region.Xor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Xor(System.Drawing.Rectangle)
  id: Xor(System.Drawing.Rectangle)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Xor(Rectangle)
  nameWithType: Region.Xor(Rectangle)
  fullName: System.Drawing.Region.Xor(Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Xor (System.Drawing.Rectangle rect);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: To be added.
  overload: System.Drawing.Region.Xor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Xor(System.Drawing.RectangleF)
  id: Xor(System.Drawing.RectangleF)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Xor(RectangleF)
  nameWithType: Region.Xor(RectangleF)
  fullName: System.Drawing.Region.Xor(RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Xor (System.Drawing.RectangleF rect);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: To be added.
  overload: System.Drawing.Region.Xor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Drawing.Region.Xor(System.Drawing.Region)
  id: Xor(System.Drawing.Region)
  parent: System.Drawing.Region
  langs:
  - csharp
  name: Xor(Region)
  nameWithType: Region.Xor(Region)
  fullName: System.Drawing.Region.Xor(Region)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Xor (System.Drawing.Region region);
    parameters:
    - id: region
      type: System.Drawing.Region
      description: To be added.
  overload: System.Drawing.Region.Xor*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Drawing.Region.#ctor
  parent: System.Drawing.Region
  isExternal: false
  name: Region()
  nameWithType: Region.Region()
  fullName: System.Drawing.Region.Region()
- uid: System.Drawing.Region.#ctor(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Region
  isExternal: false
  name: Region(GraphicsPath)
  nameWithType: Region.Region(GraphicsPath)
  fullName: System.Drawing.Region.Region(GraphicsPath)
- uid: System.Drawing.Drawing2D.GraphicsPath
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: GraphicsPath
  nameWithType: GraphicsPath
  fullName: System.Drawing.Drawing2D.GraphicsPath
- uid: System.Drawing.Region.#ctor(System.Drawing.Drawing2D.RegionData)
  parent: System.Drawing.Region
  isExternal: false
  name: Region(RegionData)
  nameWithType: Region.Region(RegionData)
  fullName: System.Drawing.Region.Region(RegionData)
- uid: System.Drawing.Drawing2D.RegionData
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: RegionData
  nameWithType: RegionData
  fullName: System.Drawing.Drawing2D.RegionData
- uid: System.Drawing.Region.#ctor(System.Drawing.Rectangle)
  parent: System.Drawing.Region
  isExternal: false
  name: Region(Rectangle)
  nameWithType: Region.Region(Rectangle)
  fullName: System.Drawing.Region.Region(Rectangle)
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.Region.#ctor(System.Drawing.RectangleF)
  parent: System.Drawing.Region
  isExternal: false
  name: Region(RectangleF)
  nameWithType: Region.Region(RectangleF)
  fullName: System.Drawing.Region.Region(RectangleF)
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF
- uid: System.Drawing.Region.Clone
  parent: System.Drawing.Region
  isExternal: false
  name: Clone()
  nameWithType: Region.Clone()
  fullName: System.Drawing.Region.Clone()
- uid: System.Drawing.Region
  parent: System.Drawing
  isExternal: false
  name: Region
  nameWithType: Region
  fullName: System.Drawing.Region
- uid: System.Drawing.Region.Complement(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Region
  isExternal: false
  name: Complement(GraphicsPath)
  nameWithType: Region.Complement(GraphicsPath)
  fullName: System.Drawing.Region.Complement(GraphicsPath)
- uid: System.Drawing.Drawing2D.GraphicsPath
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: GraphicsPath
  nameWithType: GraphicsPath
  fullName: System.Drawing.Drawing2D.GraphicsPath
- uid: System.Drawing.Region.Complement(System.Drawing.Rectangle)
  parent: System.Drawing.Region
  isExternal: false
  name: Complement(Rectangle)
  nameWithType: Region.Complement(Rectangle)
  fullName: System.Drawing.Region.Complement(Rectangle)
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.Region.Complement(System.Drawing.RectangleF)
  parent: System.Drawing.Region
  isExternal: false
  name: Complement(RectangleF)
  nameWithType: Region.Complement(RectangleF)
  fullName: System.Drawing.Region.Complement(RectangleF)
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF
- uid: System.Drawing.Region.Complement(System.Drawing.Region)
  parent: System.Drawing.Region
  isExternal: false
  name: Complement(Region)
  nameWithType: Region.Complement(Region)
  fullName: System.Drawing.Region.Complement(Region)
- uid: System.Drawing.Region
  parent: System.Drawing
  isExternal: false
  name: Region
  nameWithType: Region
  fullName: System.Drawing.Region
- uid: System.Drawing.Region.Dispose
  parent: System.Drawing.Region
  isExternal: false
  name: Dispose()
  nameWithType: Region.Dispose()
  fullName: System.Drawing.Region.Dispose()
- uid: System.Drawing.Region.Equals(System.Drawing.Region,System.Drawing.Graphics)
  parent: System.Drawing.Region
  isExternal: false
  name: Equals(Region,Graphics)
  nameWithType: Region.Equals(Region,Graphics)
  fullName: System.Drawing.Region.Equals(Region,Graphics)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Region
  parent: System.Drawing
  isExternal: false
  name: Region
  nameWithType: Region
  fullName: System.Drawing.Region
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Region.Exclude(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Region
  isExternal: false
  name: Exclude(GraphicsPath)
  nameWithType: Region.Exclude(GraphicsPath)
  fullName: System.Drawing.Region.Exclude(GraphicsPath)
- uid: System.Drawing.Drawing2D.GraphicsPath
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: GraphicsPath
  nameWithType: GraphicsPath
  fullName: System.Drawing.Drawing2D.GraphicsPath
- uid: System.Drawing.Region.Exclude(System.Drawing.Rectangle)
  parent: System.Drawing.Region
  isExternal: false
  name: Exclude(Rectangle)
  nameWithType: Region.Exclude(Rectangle)
  fullName: System.Drawing.Region.Exclude(Rectangle)
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.Region.Exclude(System.Drawing.RectangleF)
  parent: System.Drawing.Region
  isExternal: false
  name: Exclude(RectangleF)
  nameWithType: Region.Exclude(RectangleF)
  fullName: System.Drawing.Region.Exclude(RectangleF)
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF
- uid: System.Drawing.Region.Exclude(System.Drawing.Region)
  parent: System.Drawing.Region
  isExternal: false
  name: Exclude(Region)
  nameWithType: Region.Exclude(Region)
  fullName: System.Drawing.Region.Exclude(Region)
- uid: System.Drawing.Region
  parent: System.Drawing
  isExternal: false
  name: Region
  nameWithType: Region
  fullName: System.Drawing.Region
- uid: System.Drawing.Region.Finalize
  parent: System.Drawing.Region
  isExternal: false
  name: Finalize()
  nameWithType: Region.Finalize()
  fullName: System.Drawing.Region.Finalize()
- uid: System.Drawing.Region.FromHrgn(System.IntPtr)
  parent: System.Drawing.Region
  isExternal: false
  name: FromHrgn(IntPtr)
  nameWithType: Region.FromHrgn(IntPtr)
  fullName: System.Drawing.Region.FromHrgn(IntPtr)
- uid: System.Drawing.Region
  parent: System.Drawing
  isExternal: false
  name: Region
  nameWithType: Region
  fullName: System.Drawing.Region
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Drawing.Region.GetBounds(System.Drawing.Graphics)
  parent: System.Drawing.Region
  isExternal: false
  name: GetBounds(Graphics)
  nameWithType: Region.GetBounds(Graphics)
  fullName: System.Drawing.Region.GetBounds(Graphics)
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Region.GetHrgn(System.Drawing.Graphics)
  parent: System.Drawing.Region
  isExternal: false
  name: GetHrgn(Graphics)
  nameWithType: Region.GetHrgn(Graphics)
  fullName: System.Drawing.Region.GetHrgn(Graphics)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Region.GetRegionData
  parent: System.Drawing.Region
  isExternal: false
  name: GetRegionData()
  nameWithType: Region.GetRegionData()
  fullName: System.Drawing.Region.GetRegionData()
- uid: System.Drawing.Drawing2D.RegionData
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: RegionData
  nameWithType: RegionData
  fullName: System.Drawing.Drawing2D.RegionData
- uid: System.Drawing.Region.GetRegionScans(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Region
  isExternal: false
  name: GetRegionScans(Matrix)
  nameWithType: Region.GetRegionScans(Matrix)
  fullName: System.Drawing.Region.GetRegionScans(Matrix)
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF[]
- uid: System.Drawing.Drawing2D.Matrix
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: System.Drawing.Drawing2D.Matrix
- uid: System.Drawing.Region.Intersect(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Region
  isExternal: false
  name: Intersect(GraphicsPath)
  nameWithType: Region.Intersect(GraphicsPath)
  fullName: System.Drawing.Region.Intersect(GraphicsPath)
- uid: System.Drawing.Drawing2D.GraphicsPath
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: GraphicsPath
  nameWithType: GraphicsPath
  fullName: System.Drawing.Drawing2D.GraphicsPath
- uid: System.Drawing.Region.Intersect(System.Drawing.Rectangle)
  parent: System.Drawing.Region
  isExternal: false
  name: Intersect(Rectangle)
  nameWithType: Region.Intersect(Rectangle)
  fullName: System.Drawing.Region.Intersect(Rectangle)
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.Region.Intersect(System.Drawing.RectangleF)
  parent: System.Drawing.Region
  isExternal: false
  name: Intersect(RectangleF)
  nameWithType: Region.Intersect(RectangleF)
  fullName: System.Drawing.Region.Intersect(RectangleF)
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF
- uid: System.Drawing.Region.Intersect(System.Drawing.Region)
  parent: System.Drawing.Region
  isExternal: false
  name: Intersect(Region)
  nameWithType: Region.Intersect(Region)
  fullName: System.Drawing.Region.Intersect(Region)
- uid: System.Drawing.Region
  parent: System.Drawing
  isExternal: false
  name: Region
  nameWithType: Region
  fullName: System.Drawing.Region
- uid: System.Drawing.Region.IsEmpty(System.Drawing.Graphics)
  parent: System.Drawing.Region
  isExternal: false
  name: IsEmpty(Graphics)
  nameWithType: Region.IsEmpty(Graphics)
  fullName: System.Drawing.Region.IsEmpty(Graphics)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Region.IsInfinite(System.Drawing.Graphics)
  parent: System.Drawing.Region
  isExternal: false
  name: IsInfinite(Graphics)
  nameWithType: Region.IsInfinite(Graphics)
  fullName: System.Drawing.Region.IsInfinite(Graphics)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Region.IsVisible(System.Drawing.Point)
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible(Point)
  nameWithType: Region.IsVisible(Point)
  fullName: System.Drawing.Region.IsVisible(Point)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Point
  parent: System.Drawing
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Drawing.Point
- uid: System.Drawing.Region.IsVisible(System.Drawing.PointF)
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible(PointF)
  nameWithType: Region.IsVisible(PointF)
  fullName: System.Drawing.Region.IsVisible(PointF)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.PointF
  parent: System.Drawing
  isExternal: false
  name: PointF
  nameWithType: PointF
  fullName: System.Drawing.PointF
- uid: System.Drawing.Region.IsVisible(System.Drawing.Rectangle)
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible(Rectangle)
  nameWithType: Region.IsVisible(Rectangle)
  fullName: System.Drawing.Region.IsVisible(Rectangle)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.Region.IsVisible(System.Drawing.RectangleF)
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible(RectangleF)
  nameWithType: Region.IsVisible(RectangleF)
  fullName: System.Drawing.Region.IsVisible(RectangleF)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF
- uid: System.Drawing.Region.IsVisible(System.Drawing.Point,System.Drawing.Graphics)
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible(Point,Graphics)
  nameWithType: Region.IsVisible(Point,Graphics)
  fullName: System.Drawing.Region.IsVisible(Point,Graphics)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Point
  parent: System.Drawing
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Drawing.Point
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Region.IsVisible(System.Drawing.PointF,System.Drawing.Graphics)
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible(PointF,Graphics)
  nameWithType: Region.IsVisible(PointF,Graphics)
  fullName: System.Drawing.Region.IsVisible(PointF,Graphics)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.PointF
  parent: System.Drawing
  isExternal: false
  name: PointF
  nameWithType: PointF
  fullName: System.Drawing.PointF
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Region.IsVisible(System.Drawing.Rectangle,System.Drawing.Graphics)
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible(Rectangle,Graphics)
  nameWithType: Region.IsVisible(Rectangle,Graphics)
  fullName: System.Drawing.Region.IsVisible(Rectangle,Graphics)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Region.IsVisible(System.Drawing.RectangleF,System.Drawing.Graphics)
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible(RectangleF,Graphics)
  nameWithType: Region.IsVisible(RectangleF,Graphics)
  fullName: System.Drawing.Region.IsVisible(RectangleF,Graphics)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Region.IsVisible(System.Single,System.Single)
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible(Single,Single)
  nameWithType: Region.IsVisible(Single,Single)
  fullName: System.Drawing.Region.IsVisible(Single,Single)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Drawing.Region.IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible(Int32,Int32,Graphics)
  nameWithType: Region.IsVisible(Int32,Int32,Graphics)
  fullName: System.Drawing.Region.IsVisible(Int32,Int32,Graphics)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Region.IsVisible(System.Single,System.Single,System.Drawing.Graphics)
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible(Single,Single,Graphics)
  nameWithType: Region.IsVisible(Single,Single,Graphics)
  fullName: System.Drawing.Region.IsVisible(Single,Single,Graphics)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Region.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible(Int32,Int32,Int32,Int32)
  nameWithType: Region.IsVisible(Int32,Int32,Int32,Int32)
  fullName: System.Drawing.Region.IsVisible(Int32,Int32,Int32,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Drawing.Region.IsVisible(System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible(Single,Single,Single,Single)
  nameWithType: Region.IsVisible(Single,Single,Single,Single)
  fullName: System.Drawing.Region.IsVisible(Single,Single,Single,Single)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Drawing.Region.IsVisible(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Graphics)
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible(Int32,Int32,Int32,Int32,Graphics)
  nameWithType: Region.IsVisible(Int32,Int32,Int32,Int32,Graphics)
  fullName: System.Drawing.Region.IsVisible(Int32,Int32,Int32,Int32,Graphics)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Region.IsVisible(System.Single,System.Single,System.Single,System.Single,System.Drawing.Graphics)
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible(Single,Single,Single,Single,Graphics)
  nameWithType: Region.IsVisible(Single,Single,Single,Single,Graphics)
  fullName: System.Drawing.Region.IsVisible(Single,Single,Single,Single,Graphics)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Region.MakeEmpty
  parent: System.Drawing.Region
  isExternal: false
  name: MakeEmpty()
  nameWithType: Region.MakeEmpty()
  fullName: System.Drawing.Region.MakeEmpty()
- uid: System.Drawing.Region.MakeInfinite
  parent: System.Drawing.Region
  isExternal: false
  name: MakeInfinite()
  nameWithType: Region.MakeInfinite()
  fullName: System.Drawing.Region.MakeInfinite()
- uid: System.Drawing.Region.ReleaseHrgn(System.IntPtr)
  parent: System.Drawing.Region
  isExternal: false
  name: ReleaseHrgn(IntPtr)
  nameWithType: Region.ReleaseHrgn(IntPtr)
  fullName: System.Drawing.Region.ReleaseHrgn(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Drawing.Region.Transform(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Region
  isExternal: false
  name: Transform(Matrix)
  nameWithType: Region.Transform(Matrix)
  fullName: System.Drawing.Region.Transform(Matrix)
- uid: System.Drawing.Drawing2D.Matrix
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: System.Drawing.Drawing2D.Matrix
- uid: System.Drawing.Region.Translate(System.Int32,System.Int32)
  parent: System.Drawing.Region
  isExternal: false
  name: Translate(Int32,Int32)
  nameWithType: Region.Translate(Int32,Int32)
  fullName: System.Drawing.Region.Translate(Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Drawing.Region.Translate(System.Single,System.Single)
  parent: System.Drawing.Region
  isExternal: false
  name: Translate(Single,Single)
  nameWithType: Region.Translate(Single,Single)
  fullName: System.Drawing.Region.Translate(Single,Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Drawing.Region.Union(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Region
  isExternal: false
  name: Union(GraphicsPath)
  nameWithType: Region.Union(GraphicsPath)
  fullName: System.Drawing.Region.Union(GraphicsPath)
- uid: System.Drawing.Drawing2D.GraphicsPath
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: GraphicsPath
  nameWithType: GraphicsPath
  fullName: System.Drawing.Drawing2D.GraphicsPath
- uid: System.Drawing.Region.Union(System.Drawing.Rectangle)
  parent: System.Drawing.Region
  isExternal: false
  name: Union(Rectangle)
  nameWithType: Region.Union(Rectangle)
  fullName: System.Drawing.Region.Union(Rectangle)
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.Region.Union(System.Drawing.RectangleF)
  parent: System.Drawing.Region
  isExternal: false
  name: Union(RectangleF)
  nameWithType: Region.Union(RectangleF)
  fullName: System.Drawing.Region.Union(RectangleF)
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF
- uid: System.Drawing.Region.Union(System.Drawing.Region)
  parent: System.Drawing.Region
  isExternal: false
  name: Union(Region)
  nameWithType: Region.Union(Region)
  fullName: System.Drawing.Region.Union(Region)
- uid: System.Drawing.Region
  parent: System.Drawing
  isExternal: false
  name: Region
  nameWithType: Region
  fullName: System.Drawing.Region
- uid: System.Drawing.Region.Xor(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Region
  isExternal: false
  name: Xor(GraphicsPath)
  nameWithType: Region.Xor(GraphicsPath)
  fullName: System.Drawing.Region.Xor(GraphicsPath)
- uid: System.Drawing.Drawing2D.GraphicsPath
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: GraphicsPath
  nameWithType: GraphicsPath
  fullName: System.Drawing.Drawing2D.GraphicsPath
- uid: System.Drawing.Region.Xor(System.Drawing.Rectangle)
  parent: System.Drawing.Region
  isExternal: false
  name: Xor(Rectangle)
  nameWithType: Region.Xor(Rectangle)
  fullName: System.Drawing.Region.Xor(Rectangle)
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.Region.Xor(System.Drawing.RectangleF)
  parent: System.Drawing.Region
  isExternal: false
  name: Xor(RectangleF)
  nameWithType: Region.Xor(RectangleF)
  fullName: System.Drawing.Region.Xor(RectangleF)
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF
- uid: System.Drawing.Region.Xor(System.Drawing.Region)
  parent: System.Drawing.Region
  isExternal: false
  name: Xor(Region)
  nameWithType: Region.Xor(Region)
  fullName: System.Drawing.Region.Xor(Region)
- uid: System.Drawing.Region
  parent: System.Drawing
  isExternal: false
  name: Region
  nameWithType: Region
  fullName: System.Drawing.Region
- uid: System.Drawing.Region.#ctor*
  parent: System.Drawing.Region
  isExternal: false
  name: Region
  nameWithType: Region.Region
- uid: System.Drawing.Region.Clone*
  parent: System.Drawing.Region
  isExternal: false
  name: Clone
  nameWithType: Region.Clone
- uid: System.Drawing.Region.Complement*
  parent: System.Drawing.Region
  isExternal: false
  name: Complement
  nameWithType: Region.Complement
- uid: System.Drawing.Region.Dispose*
  parent: System.Drawing.Region
  isExternal: false
  name: Dispose
  nameWithType: Region.Dispose
- uid: System.Drawing.Region.Equals*
  parent: System.Drawing.Region
  isExternal: false
  name: Equals
  nameWithType: Region.Equals
- uid: System.Drawing.Region.Exclude*
  parent: System.Drawing.Region
  isExternal: false
  name: Exclude
  nameWithType: Region.Exclude
- uid: System.Drawing.Region.Finalize*
  parent: System.Drawing.Region
  isExternal: false
  name: Finalize
  nameWithType: Region.Finalize
- uid: System.Drawing.Region.FromHrgn*
  parent: System.Drawing.Region
  isExternal: false
  name: FromHrgn
  nameWithType: Region.FromHrgn
- uid: System.Drawing.Region.GetBounds*
  parent: System.Drawing.Region
  isExternal: false
  name: GetBounds
  nameWithType: Region.GetBounds
- uid: System.Drawing.Region.GetHrgn*
  parent: System.Drawing.Region
  isExternal: false
  name: GetHrgn
  nameWithType: Region.GetHrgn
- uid: System.Drawing.Region.GetRegionData*
  parent: System.Drawing.Region
  isExternal: false
  name: GetRegionData
  nameWithType: Region.GetRegionData
- uid: System.Drawing.Region.GetRegionScans*
  parent: System.Drawing.Region
  isExternal: false
  name: GetRegionScans
  nameWithType: Region.GetRegionScans
- uid: System.Drawing.Region.Intersect*
  parent: System.Drawing.Region
  isExternal: false
  name: Intersect
  nameWithType: Region.Intersect
- uid: System.Drawing.Region.IsEmpty*
  parent: System.Drawing.Region
  isExternal: false
  name: IsEmpty
  nameWithType: Region.IsEmpty
- uid: System.Drawing.Region.IsInfinite*
  parent: System.Drawing.Region
  isExternal: false
  name: IsInfinite
  nameWithType: Region.IsInfinite
- uid: System.Drawing.Region.IsVisible*
  parent: System.Drawing.Region
  isExternal: false
  name: IsVisible
  nameWithType: Region.IsVisible
- uid: System.Drawing.Region.MakeEmpty*
  parent: System.Drawing.Region
  isExternal: false
  name: MakeEmpty
  nameWithType: Region.MakeEmpty
- uid: System.Drawing.Region.MakeInfinite*
  parent: System.Drawing.Region
  isExternal: false
  name: MakeInfinite
  nameWithType: Region.MakeInfinite
- uid: System.Drawing.Region.ReleaseHrgn*
  parent: System.Drawing.Region
  isExternal: false
  name: ReleaseHrgn
  nameWithType: Region.ReleaseHrgn
- uid: System.Drawing.Region.Transform*
  parent: System.Drawing.Region
  isExternal: false
  name: Transform
  nameWithType: Region.Transform
- uid: System.Drawing.Region.Translate*
  parent: System.Drawing.Region
  isExternal: false
  name: Translate
  nameWithType: Region.Translate
- uid: System.Drawing.Region.Union*
  parent: System.Drawing.Region
  isExternal: false
  name: Union
  nameWithType: Region.Union
- uid: System.Drawing.Region.Xor*
  parent: System.Drawing.Region
  isExternal: false
  name: Xor
  nameWithType: Region.Xor
