### YamlMime:ManagedReference
items:
- uid: Microsoft.Build.Framework.ITaskFactory
  id: ITaskFactory
  children:
  - Microsoft.Build.Framework.ITaskFactory.CleanupTask(Microsoft.Build.Framework.ITask)
  - Microsoft.Build.Framework.ITaskFactory.CreateTask(Microsoft.Build.Framework.IBuildEngine)
  - Microsoft.Build.Framework.ITaskFactory.FactoryName
  - Microsoft.Build.Framework.ITaskFactory.GetTaskParameters
  - Microsoft.Build.Framework.ITaskFactory.Initialize(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)
  - Microsoft.Build.Framework.ITaskFactory.TaskType
  langs:
  - csharp
  name: ITaskFactory
  nameWithType: ITaskFactory
  fullName: Microsoft.Build.Framework.ITaskFactory
  type: Interface
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public interface ITaskFactory
  implements: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Build.Framework.ITaskFactory.CleanupTask(Microsoft.Build.Framework.ITask)
  id: CleanupTask(Microsoft.Build.Framework.ITask)
  parent: Microsoft.Build.Framework.ITaskFactory
  langs:
  - csharp
  name: CleanupTask(ITask)
  nameWithType: ITaskFactory.CleanupTask(ITask)
  fullName: Microsoft.Build.Framework.ITaskFactory.CleanupTask(ITask)
  type: Method
  assemblies:
  - Microsoft.Build.Framework
  namespace: Microsoft.Build.Framework
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void CleanupTask (Microsoft.Build.Framework.ITask task);
    parameters:
    - id: task
      type: Microsoft.Build.Framework.ITask
      description: To be added.
  overload: Microsoft.Build.Framework.ITaskFactory.CleanupTask*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Build.Framework.ITaskFactory.CreateTask(Microsoft.Build.Framework.IBuildEngine)
  id: CreateTask(Microsoft.Build.Framework.IBuildEngine)
  parent: Microsoft.Build.Framework.ITaskFactory
  langs:
  - csharp
  name: CreateTask(IBuildEngine)
  nameWithType: ITaskFactory.CreateTask(IBuildEngine)
  fullName: Microsoft.Build.Framework.ITaskFactory.CreateTask(IBuildEngine)
  type: Method
  assemblies:
  - Microsoft.Build.Framework
  namespace: Microsoft.Build.Framework
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Microsoft.Build.Framework.ITask CreateTask (Microsoft.Build.Framework.IBuildEngine taskFactoryLoggingHost);
    parameters:
    - id: taskFactoryLoggingHost
      type: Microsoft.Build.Framework.IBuildEngine
      description: To be added.
    return:
      type: Microsoft.Build.Framework.ITask
      description: To be added.
  overload: Microsoft.Build.Framework.ITaskFactory.CreateTask*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Build.Framework.ITaskFactory.FactoryName
  id: FactoryName
  parent: Microsoft.Build.Framework.ITaskFactory
  langs:
  - csharp
  name: FactoryName
  nameWithType: ITaskFactory.FactoryName
  fullName: Microsoft.Build.Framework.ITaskFactory.FactoryName
  type: Property
  assemblies:
  - Microsoft.Build.Framework
  namespace: Microsoft.Build.Framework
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public string FactoryName { get; }
    return:
      type: System.String
      description: To be added.
  overload: Microsoft.Build.Framework.ITaskFactory.FactoryName*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Build.Framework.ITaskFactory.GetTaskParameters
  id: GetTaskParameters
  parent: Microsoft.Build.Framework.ITaskFactory
  langs:
  - csharp
  name: GetTaskParameters()
  nameWithType: ITaskFactory.GetTaskParameters()
  fullName: Microsoft.Build.Framework.ITaskFactory.GetTaskParameters()
  type: Method
  assemblies:
  - Microsoft.Build.Framework
  namespace: Microsoft.Build.Framework
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Microsoft.Build.Framework.TaskPropertyInfo[] GetTaskParameters ();
    parameters: []
    return:
      type: Microsoft.Build.Framework.TaskPropertyInfo[]
      description: To be added.
  overload: Microsoft.Build.Framework.ITaskFactory.GetTaskParameters*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Build.Framework.ITaskFactory.Initialize(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)
  id: Initialize(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)
  parent: Microsoft.Build.Framework.ITaskFactory
  langs:
  - csharp
  name: Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)
  nameWithType: ITaskFactory.Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)
  fullName: Microsoft.Build.Framework.ITaskFactory.Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)
  type: Method
  assemblies:
  - Microsoft.Build.Framework
  namespace: Microsoft.Build.Framework
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool Initialize (string taskName, System.Collections.Generic.IDictionary<string,Microsoft.Build.Framework.TaskPropertyInfo> parameterGroup, string taskBody, Microsoft.Build.Framework.IBuildEngine taskFactoryLoggingHost);
    parameters:
    - id: taskName
      type: System.String
      description: To be added.
    - id: parameterGroup
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo}
      description: To be added.
    - id: taskBody
      type: System.String
      description: To be added.
    - id: taskFactoryLoggingHost
      type: Microsoft.Build.Framework.IBuildEngine
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: Microsoft.Build.Framework.ITaskFactory.Initialize*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: Microsoft.Build.Framework.ITaskFactory.TaskType
  id: TaskType
  parent: Microsoft.Build.Framework.ITaskFactory
  langs:
  - csharp
  name: TaskType
  nameWithType: ITaskFactory.TaskType
  fullName: Microsoft.Build.Framework.ITaskFactory.TaskType
  type: Property
  assemblies:
  - Microsoft.Build.Framework
  namespace: Microsoft.Build.Framework
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Type TaskType { get; }
    return:
      type: System.Type
      description: To be added.
  overload: Microsoft.Build.Framework.ITaskFactory.TaskType*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: Microsoft.Build.Framework.ITaskFactory.CleanupTask(Microsoft.Build.Framework.ITask)
  parent: Microsoft.Build.Framework.ITaskFactory
  isExternal: false
  name: CleanupTask(ITask)
  nameWithType: ITaskFactory.CleanupTask(ITask)
  fullName: Microsoft.Build.Framework.ITaskFactory.CleanupTask(ITask)
- uid: Microsoft.Build.Framework.ITask
  parent: Microsoft.Build.Framework
  isExternal: false
  name: ITask
  nameWithType: ITask
  fullName: Microsoft.Build.Framework.ITask
- uid: Microsoft.Build.Framework.ITaskFactory.CreateTask(Microsoft.Build.Framework.IBuildEngine)
  parent: Microsoft.Build.Framework.ITaskFactory
  isExternal: false
  name: CreateTask(IBuildEngine)
  nameWithType: ITaskFactory.CreateTask(IBuildEngine)
  fullName: Microsoft.Build.Framework.ITaskFactory.CreateTask(IBuildEngine)
- uid: Microsoft.Build.Framework.ITask
  parent: Microsoft.Build.Framework
  isExternal: false
  name: ITask
  nameWithType: ITask
  fullName: Microsoft.Build.Framework.ITask
- uid: Microsoft.Build.Framework.IBuildEngine
  parent: Microsoft.Build.Framework
  isExternal: false
  name: IBuildEngine
  nameWithType: IBuildEngine
  fullName: Microsoft.Build.Framework.IBuildEngine
- uid: Microsoft.Build.Framework.ITaskFactory.FactoryName
  parent: Microsoft.Build.Framework.ITaskFactory
  isExternal: false
  name: FactoryName
  nameWithType: ITaskFactory.FactoryName
  fullName: Microsoft.Build.Framework.ITaskFactory.FactoryName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Build.Framework.ITaskFactory.GetTaskParameters
  parent: Microsoft.Build.Framework.ITaskFactory
  isExternal: false
  name: GetTaskParameters()
  nameWithType: ITaskFactory.GetTaskParameters()
  fullName: Microsoft.Build.Framework.ITaskFactory.GetTaskParameters()
- uid: Microsoft.Build.Framework.TaskPropertyInfo
  parent: Microsoft.Build.Framework
  isExternal: false
  name: TaskPropertyInfo
  nameWithType: TaskPropertyInfo
  fullName: Microsoft.Build.Framework.TaskPropertyInfo[]
- uid: Microsoft.Build.Framework.ITaskFactory.Initialize(System.String,System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo},System.String,Microsoft.Build.Framework.IBuildEngine)
  parent: Microsoft.Build.Framework.ITaskFactory
  isExternal: false
  name: Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)
  nameWithType: ITaskFactory.Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)
  fullName: Microsoft.Build.Framework.ITaskFactory.Initialize(String,IDictionary<String,TaskPropertyInfo>,String,IBuildEngine)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Framework.TaskPropertyInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,TaskPropertyInfo>
  nameWithType: IDictionary<String,TaskPropertyInfo>
  fullName: System.Collections.Generic.IDictionary<System.String,Microsoft.Build.Framework.TaskPropertyInfo>
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Build.Framework.IBuildEngine
  parent: Microsoft.Build.Framework
  isExternal: false
  name: IBuildEngine
  nameWithType: IBuildEngine
  fullName: Microsoft.Build.Framework.IBuildEngine
- uid: Microsoft.Build.Framework.ITaskFactory.TaskType
  parent: Microsoft.Build.Framework.ITaskFactory
  isExternal: false
  name: TaskType
  nameWithType: ITaskFactory.TaskType
  fullName: Microsoft.Build.Framework.ITaskFactory.TaskType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.Build.Framework.ITaskFactory.CleanupTask*
  parent: Microsoft.Build.Framework.ITaskFactory
  isExternal: false
  name: CleanupTask
  nameWithType: ITaskFactory.CleanupTask
- uid: Microsoft.Build.Framework.ITaskFactory.CreateTask*
  parent: Microsoft.Build.Framework.ITaskFactory
  isExternal: false
  name: CreateTask
  nameWithType: ITaskFactory.CreateTask
- uid: Microsoft.Build.Framework.ITaskFactory.FactoryName*
  parent: Microsoft.Build.Framework.ITaskFactory
  isExternal: false
  name: FactoryName
  nameWithType: ITaskFactory.FactoryName
- uid: Microsoft.Build.Framework.ITaskFactory.GetTaskParameters*
  parent: Microsoft.Build.Framework.ITaskFactory
  isExternal: false
  name: GetTaskParameters
  nameWithType: ITaskFactory.GetTaskParameters
- uid: Microsoft.Build.Framework.ITaskFactory.Initialize*
  parent: Microsoft.Build.Framework.ITaskFactory
  isExternal: false
  name: Initialize
  nameWithType: ITaskFactory.Initialize
- uid: Microsoft.Build.Framework.ITaskFactory.TaskType*
  parent: Microsoft.Build.Framework.ITaskFactory
  isExternal: false
  name: TaskType
  nameWithType: ITaskFactory.TaskType
