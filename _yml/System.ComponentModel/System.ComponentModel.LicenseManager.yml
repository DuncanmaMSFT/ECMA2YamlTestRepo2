### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.LicenseManager
  id: LicenseManager
  children:
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  - System.ComponentModel.LicenseManager.CurrentContext
  - System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  - System.ComponentModel.LicenseManager.LockContext(System.Object)
  - System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  - System.ComponentModel.LicenseManager.UsageMode
  - System.ComponentModel.LicenseManager.Validate(System.Type)
  - System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  langs:
  - csharp
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: System.ComponentModel.LicenseManager
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public sealed class LicenseManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: To be added.
    - id: args
      type: System.Object[]
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.LicenseManager.CurrentContext
  id: CurrentContext
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.ComponentModel.LicenseContext CurrentContext { get; set; }
    return:
      type: System.ComponentModel.LicenseContext
      description: To be added.
  overload: System.ComponentModel.LicenseManager.CurrentContext*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  id: IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static bool IsLicensed (Type type);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.ComponentModel.LicenseManager.IsLicensed*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  id: IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static bool IsValid (Type type);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.ComponentModel.LicenseManager.IsValid*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  id: IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: instance
      type: System.Object
      description: To be added.
    - id: license
      type: System.ComponentModel.License
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.ComponentModel.LicenseManager.IsValid*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  id: LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void LockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: To be added.
  overload: System.ComponentModel.LicenseManager.LockContext*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  id: UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void UnlockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: To be added.
  overload: System.ComponentModel.LicenseManager.UnlockContext*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.LicenseManager.UsageMode
  id: UsageMode
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.ComponentModel.LicenseUsageMode UsageMode { get; }
    return:
      type: System.ComponentModel.LicenseUsageMode
      description: To be added.
  overload: System.ComponentModel.LicenseManager.UsageMode*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  id: Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void Validate (Type type);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
  overload: System.ComponentModel.LicenseManager.Validate*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  id: Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.ComponentModel.License Validate (Type type, object instance);
    parameters:
    - id: type
      type: System.Type
      description: To be added.
    - id: instance
      type: System.Object
      description: To be added.
    return:
      type: System.ComponentModel.License
      description: To be added.
  overload: System.ComponentModel.LicenseManager.Validate*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
- uid: System.ComponentModel.LicenseManager.CurrentContext
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ComponentModel.LicenseManager.UsageMode
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseUsageMode
  parent: System.ComponentModel
  isExternal: false
  name: LicenseUsageMode
  nameWithType: LicenseUsageMode
  fullName: System.ComponentModel.LicenseUsageMode
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ComponentModel.LicenseManager.CreateWithContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext
  nameWithType: LicenseManager.CreateWithContext
- uid: System.ComponentModel.LicenseManager.CurrentContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed
  nameWithType: LicenseManager.IsLicensed
- uid: System.ComponentModel.LicenseManager.IsValid*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid
  nameWithType: LicenseManager.IsValid
- uid: System.ComponentModel.LicenseManager.LockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext
  nameWithType: LicenseManager.LockContext
- uid: System.ComponentModel.LicenseManager.UnlockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext
  nameWithType: LicenseManager.UnlockContext
- uid: System.ComponentModel.LicenseManager.UsageMode*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseManager.Validate*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate
  nameWithType: LicenseManager.Validate
