### YamlMime:ManagedReference
items:
- uid: System.Web.Security.RoleProvider
  id: RoleProvider
  children:
  - System.Web.Security.RoleProvider.#ctor
  - System.Web.Security.RoleProvider.AddUsersToRoles(System.String[],System.String[])
  - System.Web.Security.RoleProvider.ApplicationName
  - System.Web.Security.RoleProvider.CreateRole(System.String)
  - System.Web.Security.RoleProvider.DeleteRole(System.String,System.Boolean)
  - System.Web.Security.RoleProvider.FindUsersInRole(System.String,System.String)
  - System.Web.Security.RoleProvider.GetAllRoles
  - System.Web.Security.RoleProvider.GetRolesForUser(System.String)
  - System.Web.Security.RoleProvider.GetUsersInRole(System.String)
  - System.Web.Security.RoleProvider.IsUserInRole(System.String,System.String)
  - System.Web.Security.RoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  - System.Web.Security.RoleProvider.RoleExists(System.String)
  langs:
  - csharp
  name: RoleProvider
  nameWithType: RoleProvider
  fullName: System.Web.Security.RoleProvider
  type: Class
  summary: Defines the contract that ASP.NET implements to provide role-management services using custom role providers.
  remarks: "ASP.NET role management is designed to enable you to easily use a number of different role providers for your ASP.NET applications. You can use the supplied role providers that are included with the .NET Framework, or you can implement your own provider.  \n  \n When implementing a custom role provider, you are required to inherit the RoleProvider abstract class.  \n  \n There are two primary reasons for creating a custom role provider.  \n  \n-   You need to store role information in a data source that is not supported by the role providers included with the .NET Framework, such as a FoxPro database, an Oracle database, or other data sources.  \n  \n-   You need to manage role information using a database schema that is different from the database schema used by the providers that ship with the .NET Framework. A common example of this would be role data that already exists in a SQL Server database for a company or Web site."
  syntax:
    content: >-
      [System.Runtime.CompilerServices.TypeForwardedFrom("System.Web, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public abstract class RoleProvider : System.Configuration.Provider.ProviderBase
  inheritance:
  - System.Object
  - System.Configuration.Provider.ProviderBase
  implements: []
  inheritedMembers:
  - System.Configuration.Provider.ProviderBase.Description
  - System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Configuration.Provider.ProviderBase.Name
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Security\RoleProvider.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Security/RoleProvider.xml
  version:
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Security.RoleProvider.#ctor
  id: '#ctor'
  parent: System.Web.Security.RoleProvider
  langs:
  - csharp
  name: RoleProvider()
  nameWithType: RoleProvider.RoleProvider()
  fullName: System.Web.Security.RoleProvider.RoleProvider()
  type: Constructor
  assemblies:
  - System.Web
  - System.Web.ApplicationServices
  namespace: System.Web.Security
  summary: Initializes a new instance of the <xref href="System.Web.Security.RoleProvider"></xref> class.
  remarks: You are not required to implement a constructor for a class that inherits the <xref:System.Web.Security.RoleProvider> abstract class. Initialization values for a <xref:System.Web.Security.RoleProvider> implementation are passed to the <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> method implementation.
  syntax:
    content: protected RoleProvider ();
    parameters: []
  overload: System.Web.Security.RoleProvider.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Security\RoleProvider.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Security/RoleProvider.xml
  version:
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Security.RoleProvider.AddUsersToRoles(System.String[],System.String[])
  id: AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.RoleProvider
  langs:
  - csharp
  name: AddUsersToRoles(String[],String[])
  nameWithType: RoleProvider.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.RoleProvider.AddUsersToRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  - System.Web.ApplicationServices
  namespace: System.Web.Security
  summary: Adds the specified user names to the specified roles for the configured `applicationName`.
  remarks: "AddUsersToRoles is called by the <xref:System.Web.Security.Roles> class to associate the specified users with the specified roles at the data source. Roles are added to the configured <xref:System.Web.Security.RoleProvider.ApplicationName%2A>.  \n  \n If any of the specified role names are not found for the configured `applicationName`, we recommend that your provider throw a <xref:System.Configuration.Provider.ProviderException>.  \n  \n If any of the specified user names are not associated with any of the specified role names for the configured `applicationName`, we recommend that your provider throw a <xref:System.Configuration.Provider.ProviderException>.  \n  \n If any of the specified user names is `null` or is an empty string, we recommend that your provider throw an exception.  \n  \n If any of the specified role names is `null` or is an empty string, we recommend that your provider throw an exception.  \n  \n If your data source supports transactions, we recommend that you include each add operation in a transaction and that you roll back the transaction and throw an exception if any add operation fails."
  example:
  - "The following code example shows a sample implementation of the AddUsersToRoles method.  \n  \n [!code-cs[System.Web.Security.IRoleProvider#2](~/add/codesnippet/csharp/9c87da0e-51df-48b4-8c4b-_1.cs)]\n [!code-vb[System.Web.Security.IRoleProvider#2](~/add/codesnippet/visualbasic/9c87da0e-51df-48b4-8c4b-_1.vb)]"
  syntax:
    content: public abstract void AddUsersToRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: A string array of user names to be added to the specified roles.
    - id: roleNames
      type: System.String[]
      description: A string array of the role names to add the specified user names to.
  overload: System.Web.Security.RoleProvider.AddUsersToRoles*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Security\RoleProvider.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Security/RoleProvider.xml
  version:
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Security.RoleProvider.ApplicationName
  id: ApplicationName
  parent: System.Web.Security.RoleProvider
  langs:
  - csharp
  name: ApplicationName
  nameWithType: RoleProvider.ApplicationName
  fullName: System.Web.Security.RoleProvider.ApplicationName
  type: Property
  assemblies:
  - System.Web
  - System.Web.ApplicationServices
  namespace: System.Web.Security
  summary: Gets or sets the name of the application to store and retrieve role information for.
  remarks: "The ApplicationName is used by the <xref:System.Web.Security.Roles> class to associate users and roles with different applications. This enables multiple applications to use the same database to store user and role information without running into conflicts between duplicate user names or role names. Multiple ASP.NET applications can use the same database by specifying the same value in the <xref:System.Web.Security.Roles.ApplicationName%2A> property. The <xref:System.Web.Security.Roles.ApplicationName%2A> property can be set programmatically, or it can be set declaratively in the configuration file for the Web application using the `applicationName` attribute.  \n  \n If no ApplicationName property is specified, we recommend that the <xref:System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath%2A> property value be used."
  example:
  - "The following code example shows a sample implementation of the ApplicationName property.  \n  \n [!code-cs[System.Web.Security.IRoleProvider#1](~/add/codesnippet/csharp/p-system.web.security.ro_4_1.cs)]\n [!code-vb[System.Web.Security.IRoleProvider#1](~/add/codesnippet/visualbasic/p-system.web.security.ro_4_1.vb)]"
  syntax:
    content: public abstract string ApplicationName { get; set; }
    return:
      type: System.String
      description: The name of the application to store and retrieve role information for.
  overload: System.Web.Security.RoleProvider.ApplicationName*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Security\RoleProvider.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Security/RoleProvider.xml
  version:
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Security.RoleProvider.CreateRole(System.String)
  id: CreateRole(System.String)
  parent: System.Web.Security.RoleProvider
  langs:
  - csharp
  name: CreateRole(String)
  nameWithType: RoleProvider.CreateRole(String)
  fullName: System.Web.Security.RoleProvider.CreateRole(String)
  type: Method
  assemblies:
  - System.Web
  - System.Web.ApplicationServices
  namespace: System.Web.Security
  summary: Adds a new role to the data source for the configured `applicationName`.
  remarks: "CreateRole is called by the <xref:System.Web.Security.Roles.CreateRole%2A> method of the <xref:System.Web.Security.Roles> class to add the specified role to the data source for the configured <xref:System.Web.Security.RoleProvider.ApplicationName%2A>.  \n  \n If the specified role name already exists for the configured `applicationName`, is `null`, or is an empty string, we recommend that your provider throw an exception.  \n  \n If the specified role name contains a comma, we recommend that your provider throw an exception.  \n  \n If your data source restricts the length of the role name, for example, through a fixed-length column of a table in a database, we recommend that you throw an exception if the role name exceeds the maximum length allowed by the data source."
  example:
  - "The following code example shows a sample implementation of the CreateRole method.  \n  \n [!code-cs[System.Web.Security.IRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_17_1.cs)]\n [!code-vb[System.Web.Security.IRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_17_1.vb)]"
  syntax:
    content: public abstract void CreateRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: The name of the role to create.
  overload: System.Web.Security.RoleProvider.CreateRole*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Security\RoleProvider.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Security/RoleProvider.xml
  version:
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Security.RoleProvider.DeleteRole(System.String,System.Boolean)
  id: DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.RoleProvider
  langs:
  - csharp
  name: DeleteRole(String,Boolean)
  nameWithType: RoleProvider.DeleteRole(String,Boolean)
  fullName: System.Web.Security.RoleProvider.DeleteRole(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  - System.Web.ApplicationServices
  namespace: System.Web.Security
  summary: Removes a role from the data source for the configured `applicationName`.
  remarks: "DeleteRole is called by the <xref:System.Web.Security.Roles.DeleteRole%2A> and the <xref:System.Web.Security.Roles.DeleteRole%2A> methods of the <xref:System.Web.Security.Roles> class to delete the specified role from the data source for the configured <xref:System.Web.Security.RoleProvider.ApplicationName%2A>.  \n  \n When you delete a role from the data source, ensure that you also delete any associations between a user name and the deleted role for the configured `applicationName`.  \n  \n If `throwOnPopulatedRole` is `true`, and the role identified by the `roleName` parameter has one or more members, throw a <xref:System.Configuration.Provider.ProviderException> and do not delete the role. If `throwOnPopulatedRole` is `false`, then delete the role whether it is empty or not.  \n  \n If the specified role name does not exist, is `null`, or is an empty string, we recommend that your provider throw an exception."
  example:
  - "The following code example shows a sample implementation of the DeleteRole method.  \n  \n [!code-cs[System.Web.Security.IRoleProvider#4](~/add/codesnippet/csharp/m-system.web.security.ro_23_1.cs)]\n [!code-vb[System.Web.Security.IRoleProvider#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_23_1.vb)]"
  syntax:
    content: public abstract bool DeleteRole (string roleName, bool throwOnPopulatedRole);
    parameters:
    - id: roleName
      type: System.String
      description: The name of the role to delete.
    - id: throwOnPopulatedRole
      type: System.Boolean
      description: If `true`, throw an exception if <code>roleName</code> has one or more members and do not delete <code>roleName</code>.
    return:
      type: System.Boolean
      description: '`true` if the role was successfully deleted; otherwise, `false`.'
  overload: System.Web.Security.RoleProvider.DeleteRole*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Security\RoleProvider.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Security/RoleProvider.xml
  version:
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Security.RoleProvider.FindUsersInRole(System.String,System.String)
  id: FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.RoleProvider
  langs:
  - csharp
  name: FindUsersInRole(String,String)
  nameWithType: RoleProvider.FindUsersInRole(String,String)
  fullName: System.Web.Security.RoleProvider.FindUsersInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  - System.Web.ApplicationServices
  namespace: System.Web.Security
  summary: Gets an array of user names in a role where the user name contains the specified user name to match.
  remarks: "The FindUsersInRole method is called by the <xref:System.Web.Security.Roles> class and returns a list of users in a role where the user name contains a match of the supplied `usernameToMatch` for the configured `applicationName`. Wildcard support is included based on the data source. Users are returned in alphabetical order by user name.  \n  \n We recommend that you throw a <xref:System.Configuration.Provider.ProviderException> if `roleName` does not exist in the data source."
  example:
  - "The following code example shows a sample FindUsersInRole implementation.  \n  \n [!code-cs[System.Web.Security.IRoleProvider#11](~/add/codesnippet/csharp/m-system.web.security.ro_8_1.cs)]\n [!code-vb[System.Web.Security.IRoleProvider#11](~/add/codesnippet/visualbasic/m-system.web.security.ro_8_1.vb)]"
  syntax:
    content: public abstract string[] FindUsersInRole (string roleName, string usernameToMatch);
    parameters:
    - id: roleName
      type: System.String
      description: The role to search in.
    - id: usernameToMatch
      type: System.String
      description: The user name to search for.
    return:
      type: System.String[]
      description: A string array containing the names of all the users where the user name matches <code>usernameToMatch</code> and the user is a member of the specified role.
  overload: System.Web.Security.RoleProvider.FindUsersInRole*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Security\RoleProvider.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Security/RoleProvider.xml
  version:
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Security.RoleProvider.GetAllRoles
  id: GetAllRoles
  parent: System.Web.Security.RoleProvider
  langs:
  - csharp
  name: GetAllRoles()
  nameWithType: RoleProvider.GetAllRoles()
  fullName: System.Web.Security.RoleProvider.GetAllRoles()
  type: Method
  assemblies:
  - System.Web
  - System.Web.ApplicationServices
  namespace: System.Web.Security
  summary: Gets a list of all the roles for the configured `applicationName`.
  remarks: "GetAllRoles is called by the <xref:System.Web.Security.Roles.GetAllRoles%2A> method of the <xref:System.Web.Security.Roles> class to retrieve a list of role names from the data source. Only the roles for the specified <xref:System.Web.Security.RoleProvider.ApplicationName%2A> are retrieved.  \n  \n If no roles exist for the configured `applicationName`, we recommend that your provider return a string array with no elements."
  example:
  - "The following code example shows a sample implementation of the GetAllRoles method.  \n  \n [!code-cs[System.Web.Security.IRoleProvider#5](~/add/codesnippet/csharp/m-system.web.security.ro_7_1.cs)]\n [!code-vb[System.Web.Security.IRoleProvider#5](~/add/codesnippet/visualbasic/m-system.web.security.ro_7_1.vb)]"
  syntax:
    content: public abstract string[] GetAllRoles ();
    parameters: []
    return:
      type: System.String[]
      description: A string array containing the names of all the roles stored in the data source for the configured `applicationName`.
  overload: System.Web.Security.RoleProvider.GetAllRoles*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Security\RoleProvider.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Security/RoleProvider.xml
  version:
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Security.RoleProvider.GetRolesForUser(System.String)
  id: GetRolesForUser(System.String)
  parent: System.Web.Security.RoleProvider
  langs:
  - csharp
  name: GetRolesForUser(String)
  nameWithType: RoleProvider.GetRolesForUser(String)
  fullName: System.Web.Security.RoleProvider.GetRolesForUser(String)
  type: Method
  assemblies:
  - System.Web
  - System.Web.ApplicationServices
  namespace: System.Web.Security
  summary: Gets a list of the roles that a specified user is in for the configured `applicationName`.
  remarks: "GetRolesForUser is called by the <xref:System.Web.Security.Roles.GetRolesForUser%2A> method of the <xref:System.Web.Security.Roles> class to retrieve the role names that the specified user is associated with from the data source. Only the roles for the configured <xref:System.Web.Security.RoleProvider.ApplicationName%2A> are retrieved.  \n  \n If no roles exist for the specified user for the configured `applicationName`, we recommend that your provider return a string array with no elements.  \n  \n If the specified user name is `null` or is an empty string, we recommend that your provider throw an exception."
  example:
  - "The following code example shows a sample implementation of the GetRolesForUser method.  \n  \n [!code-cs[System.Web.Security.IRoleProvider#6](~/add/codesnippet/csharp/m-system.web.security.ro_4_1.cs)]\n [!code-vb[System.Web.Security.IRoleProvider#6](~/add/codesnippet/visualbasic/m-system.web.security.ro_4_1.vb)]"
  syntax:
    content: public abstract string[] GetRolesForUser (string username);
    parameters:
    - id: username
      type: System.String
      description: The user to return a list of roles for.
    return:
      type: System.String[]
      description: A string array containing the names of all the roles that the specified user is in for the configured `applicationName`.
  overload: System.Web.Security.RoleProvider.GetRolesForUser*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Security\RoleProvider.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Security/RoleProvider.xml
  version:
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Security.RoleProvider.GetUsersInRole(System.String)
  id: GetUsersInRole(System.String)
  parent: System.Web.Security.RoleProvider
  langs:
  - csharp
  name: GetUsersInRole(String)
  nameWithType: RoleProvider.GetUsersInRole(String)
  fullName: System.Web.Security.RoleProvider.GetUsersInRole(String)
  type: Method
  assemblies:
  - System.Web
  - System.Web.ApplicationServices
  namespace: System.Web.Security
  summary: Gets a list of users in the specified role for the configured `applicationName`.
  remarks: "GetUsersInRole is called by the <xref:System.Web.Security.Roles.GetUsersInRole%2A> method of the <xref:System.Web.Security.Roles> class to retrieve the user names associated with a role from the data source. Only the roles for the configured <xref:System.Web.Security.RoleProvider.ApplicationName%2A> are retrieved.  \n  \n If the specified role name does not exist for the configured `applicationName` or if it is `null` or an empty string, we recommend that your provider throw an exception.  \n  \n If no users are associated with the specified role for the configured `applicationName`, we recommend that your provider return a string array with no elements."
  example:
  - "The following code example shows a sample implementation of the GetUsersInRole method.  \n  \n [!code-cs[System.Web.Security.IRoleProvider#7](~/add/codesnippet/csharp/m-system.web.security.ro_19_1.cs)]\n [!code-vb[System.Web.Security.IRoleProvider#7](~/add/codesnippet/visualbasic/m-system.web.security.ro_19_1.vb)]"
  syntax:
    content: public abstract string[] GetUsersInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: The name of the role to get the list of users for.
    return:
      type: System.String[]
      description: A string array containing the names of all the users who are members of the specified role for the configured `applicationName`.
  overload: System.Web.Security.RoleProvider.GetUsersInRole*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Security\RoleProvider.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Security/RoleProvider.xml
  version:
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Security.RoleProvider.IsUserInRole(System.String,System.String)
  id: IsUserInRole(System.String,System.String)
  parent: System.Web.Security.RoleProvider
  langs:
  - csharp
  name: IsUserInRole(String,String)
  nameWithType: RoleProvider.IsUserInRole(String,String)
  fullName: System.Web.Security.RoleProvider.IsUserInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  - System.Web.ApplicationServices
  namespace: System.Web.Security
  summary: Gets a value indicating whether the specified user is in the specified role for the configured `applicationName`.
  remarks: "The IsUserInRole method is called by the <xref:System.Web.Security.Roles.IsUserInRole%2A> method of the <xref:System.Web.Security.Roles> class to determine whether the current logged-on user is associated with a role from the data source for the configured <xref:System.Web.Security.Roles.ApplicationName%2A>.  \n  \n If the specified user name is `null` or is an empty string, we recommend that your provider throw an exception.  \n  \n If the specified role name is `null` or is an empty string, we recommend that your provider throw an exception."
  example:
  - "The following code example shows a sample implementation of the IsUserInRole method.  \n  \n [!code-cs[System.Web.Security.IRoleProvider#8](~/add/codesnippet/csharp/m-system.web.security.ro_27_1.cs)]\n [!code-vb[System.Web.Security.IRoleProvider#8](~/add/codesnippet/visualbasic/m-system.web.security.ro_27_1.vb)]"
  syntax:
    content: public abstract bool IsUserInRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: The user name to search for.
    - id: roleName
      type: System.String
      description: The role to search in.
    return:
      type: System.Boolean
      description: '`true` if the specified user is in the specified role for the configured `applicationName`; otherwise, `false`.'
  overload: System.Web.Security.RoleProvider.IsUserInRole*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Security\RoleProvider.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Security/RoleProvider.xml
  version:
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Security.RoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  id: RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.RoleProvider
  langs:
  - csharp
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: RoleProvider.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.RoleProvider.RemoveUsersFromRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  - System.Web.ApplicationServices
  namespace: System.Web.Security
  summary: Removes the specified user names from the specified roles for the configured `applicationName`.
  remarks: "RemoveUsersFromRoles is called by <xref:System.Web.Security.Roles.RemoveUserFromRole%2A> , <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> , <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> , and <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> methods of the <xref:System.Web.Security.Roles> class to remove the specified users from the specified roles at the data source. Only roles for the configured <xref:System.Web.Security.RoleProvider.ApplicationName%2A> are modified.  \n  \n If any of the specified role names are not found for the configured `applicationName`, we recommend that your provider throw a <xref:System.Configuration.Provider.ProviderException>.  \n  \n If any of the specified user names are not associated with any of the specified role names for the configured `applicationName`, we recommend that your provider throw a <xref:System.Configuration.Provider.ProviderException>.  \n  \n If any of the specified user names is `null` or is an empty string, we recommend that your provider throw an exception.  \n  \n If any of the specified role names is `null` or is an empty string, we recommend that your provider throw an exception.  \n  \n If your data source supports transactions, we recommend that you include each remove operation in a transaction and that you roll back the transaction and throw an exception if any remove operation fails."
  example:
  - "The following code example shows a sample implementation of the RemoveUsersFromRoles method.  \n  \n [!code-cs[System.Web.Security.IRoleProvider#9](~/add/codesnippet/csharp/a5de33b5-439f-4bfb-8008-_1.cs)]\n [!code-vb[System.Web.Security.IRoleProvider#9](~/add/codesnippet/visualbasic/a5de33b5-439f-4bfb-8008-_1.vb)]"
  syntax:
    content: public abstract void RemoveUsersFromRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: A string array of user names to be removed from the specified roles.
    - id: roleNames
      type: System.String[]
      description: A string array of role names to remove the specified user names from.
  overload: System.Web.Security.RoleProvider.RemoveUsersFromRoles*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Security\RoleProvider.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Security/RoleProvider.xml
  version:
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Security.RoleProvider.RoleExists(System.String)
  id: RoleExists(System.String)
  parent: System.Web.Security.RoleProvider
  langs:
  - csharp
  name: RoleExists(String)
  nameWithType: RoleProvider.RoleExists(String)
  fullName: System.Web.Security.RoleProvider.RoleExists(String)
  type: Method
  assemblies:
  - System.Web
  - System.Web.ApplicationServices
  namespace: System.Web.Security
  summary: Gets a value indicating whether the specified role name already exists in the role data source for the configured `applicationName`.
  remarks: "RoleExists is called by the <xref:System.Web.Security.Roles.RoleExists%2A> method of the <xref:System.Web.Security.Roles> class to determine whether a role name exists in the data source for the configured <xref:System.Web.Security.Roles.ApplicationName%2A>.  \n  \n If the specified role name is `null` or is an empty string, we recommend that your provider throw an exception."
  example:
  - "The following code example shows a sample implementation of the RoleExists method.  \n  \n [!code-cs[System.Web.Security.IRoleProvider#10](~/add/codesnippet/csharp/m-system.web.security.ro_24_1.cs)]\n [!code-vb[System.Web.Security.IRoleProvider#10](~/add/codesnippet/visualbasic/m-system.web.security.ro_24_1.vb)]"
  syntax:
    content: public abstract bool RoleExists (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: The name of the role to search for in the data source.
    return:
      type: System.Boolean
      description: '`true` if the role name already exists in the data source for the configured `applicationName`; otherwise, `false`.'
  overload: System.Web.Security.RoleProvider.RoleExists*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Security\RoleProvider.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Security/RoleProvider.xml
  version:
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: System.Configuration.Provider.ProviderBase
- uid: System.Web.Security.RoleProvider.#ctor
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: RoleProvider()
  nameWithType: RoleProvider.RoleProvider()
  fullName: System.Web.Security.RoleProvider.RoleProvider()
- uid: System.Web.Security.RoleProvider.AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: AddUsersToRoles(String[],String[])
  nameWithType: RoleProvider.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.RoleProvider.AddUsersToRoles(String[],String[])
- uid: System.String[]
  parent: System
  isExternal: false
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Security.RoleProvider.ApplicationName
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: ApplicationName
  nameWithType: RoleProvider.ApplicationName
  fullName: System.Web.Security.RoleProvider.ApplicationName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Security.RoleProvider.CreateRole(System.String)
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: CreateRole(String)
  nameWithType: RoleProvider.CreateRole(String)
  fullName: System.Web.Security.RoleProvider.CreateRole(String)
- uid: System.Web.Security.RoleProvider.DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: DeleteRole(String,Boolean)
  nameWithType: RoleProvider.DeleteRole(String,Boolean)
  fullName: System.Web.Security.RoleProvider.DeleteRole(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Security.RoleProvider.FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: FindUsersInRole(String,String)
  nameWithType: RoleProvider.FindUsersInRole(String,String)
  fullName: System.Web.Security.RoleProvider.FindUsersInRole(String,String)
- uid: System.Web.Security.RoleProvider.GetAllRoles
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: GetAllRoles()
  nameWithType: RoleProvider.GetAllRoles()
  fullName: System.Web.Security.RoleProvider.GetAllRoles()
- uid: System.Web.Security.RoleProvider.GetRolesForUser(System.String)
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: GetRolesForUser(String)
  nameWithType: RoleProvider.GetRolesForUser(String)
  fullName: System.Web.Security.RoleProvider.GetRolesForUser(String)
- uid: System.Web.Security.RoleProvider.GetUsersInRole(System.String)
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: GetUsersInRole(String)
  nameWithType: RoleProvider.GetUsersInRole(String)
  fullName: System.Web.Security.RoleProvider.GetUsersInRole(String)
- uid: System.Web.Security.RoleProvider.IsUserInRole(System.String,System.String)
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: IsUserInRole(String,String)
  nameWithType: RoleProvider.IsUserInRole(String,String)
  fullName: System.Web.Security.RoleProvider.IsUserInRole(String,String)
- uid: System.Web.Security.RoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: RoleProvider.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.RoleProvider.RemoveUsersFromRoles(String[],String[])
- uid: System.Web.Security.RoleProvider.RoleExists(System.String)
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: RoleExists(String)
  nameWithType: RoleProvider.RoleExists(String)
  fullName: System.Web.Security.RoleProvider.RoleExists(String)
- uid: System.Web.Security.RoleProvider.#ctor*
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: RoleProvider
  nameWithType: RoleProvider.RoleProvider
- uid: System.Web.Security.RoleProvider.AddUsersToRoles*
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: AddUsersToRoles
  nameWithType: RoleProvider.AddUsersToRoles
- uid: System.Web.Security.RoleProvider.ApplicationName*
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: ApplicationName
  nameWithType: RoleProvider.ApplicationName
- uid: System.Web.Security.RoleProvider.CreateRole*
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: CreateRole
  nameWithType: RoleProvider.CreateRole
- uid: System.Web.Security.RoleProvider.DeleteRole*
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: DeleteRole
  nameWithType: RoleProvider.DeleteRole
- uid: System.Web.Security.RoleProvider.FindUsersInRole*
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: FindUsersInRole
  nameWithType: RoleProvider.FindUsersInRole
- uid: System.Web.Security.RoleProvider.GetAllRoles*
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: GetAllRoles
  nameWithType: RoleProvider.GetAllRoles
- uid: System.Web.Security.RoleProvider.GetRolesForUser*
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: GetRolesForUser
  nameWithType: RoleProvider.GetRolesForUser
- uid: System.Web.Security.RoleProvider.GetUsersInRole*
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: GetUsersInRole
  nameWithType: RoleProvider.GetUsersInRole
- uid: System.Web.Security.RoleProvider.IsUserInRole*
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: IsUserInRole
  nameWithType: RoleProvider.IsUserInRole
- uid: System.Web.Security.RoleProvider.RemoveUsersFromRoles*
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: RemoveUsersFromRoles
  nameWithType: RoleProvider.RemoveUsersFromRoles
- uid: System.Web.Security.RoleProvider.RoleExists*
  parent: System.Web.Security.RoleProvider
  isExternal: false
  name: RoleExists
  nameWithType: RoleProvider.RoleExists
