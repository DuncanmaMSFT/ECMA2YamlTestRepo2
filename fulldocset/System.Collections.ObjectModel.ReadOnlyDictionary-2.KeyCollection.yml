### YamlMime:ManagedReference
items:
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  id: ReadOnlyDictionary`2.KeyCollection
  children:
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.Count
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.GetEnumerator
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot
  - System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: ReadOnlyDictionary<TKey,TValue>+KeyCollection
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection
  type: Class
  summary: Represents a read-only collection of the keys of a <xref href="stem.Collections.ObjectModel.ReadOnlyDictionary%602"></xref> object.
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))]

      public sealed class ReadOnlyDictionary<TKey,TValue>.KeyCollection : System.Collections.Generic.ICollection<TKey>, System.Collections.Generic.IEnumerable<TKey>, System.Collections.Generic.IReadOnlyCollection<TKey>, System.Collections.ICollection
    typeParameters:
    - id: TKey
      description: To be added.
    - id: TValue
      description: To be added.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<TKey>
  - System.Collections.Generic.IEnumerable<TKey>
  - System.Collections.Generic.IReadOnlyCollection<TKey>
  - System.Collections.ICollection
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyDictionary`2+KeyCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyDictionary`2+KeyCollection.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  langs:
  - csharp
  name: CopyTo(TKey[],Int32)
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Copies the elements of the collection to an array, starting at a specific array index.
  syntax:
    content: public void CopyTo (TKey[] array, int arrayIndex);
    parameters:
    - id: array
      type: TKey[]
      description: The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>arrayIndex</code> is less than 0.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.  \n  \n -or-  \n  \n The number of elements in the source collection is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.  \n  \n -or-  \n  \n Type <code>T</code> cannot be cast automatically to the type of the destination <code>array</code>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyDictionary`2+KeyCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyDictionary`2+KeyCollection.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.Count
  id: Count
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  langs:
  - csharp
  name: Count
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.Count
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets the number of elements in the collection.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of elements in the collection.
  overload: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyDictionary`2+KeyCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyDictionary`2+KeyCollection.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content: public System.Collections.Generic.IEnumerator<TKey> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{TKey}
      description: An enumerator that can be used to iterate through the collection.
  overload: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyDictionary`2+KeyCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyDictionary`2+KeyCollection.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)
  id: System#Collections#Generic#ICollection{TKey}#Add(`0)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  langs:
  - csharp
  name: ICollection<TKey>.Add(TKey)
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Add(TKey)
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Add(TKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Throws a <xref href="System.NotSupportedException"></xref> exception in all cases.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyDictionary%602.KeyCollection> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface. The <xref:System.Collections.Generic.ICollection%601> interface specifies that the <xref:System.Collections.Generic.ICollection%601.Add%2A> method should throw a <xref:System.NotSupportedException> exception if the collection that implements the interface is read-only.
  syntax:
    content: void ICollection<TKey>.Add (TKey item);
    parameters:
    - id: item
      type: TKey
      description: The object to add to the collection.
  overload: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: In all cases.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyDictionary`2+KeyCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyDictionary`2+KeyCollection.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear
  id: System#Collections#Generic#ICollection{TKey}#Clear
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  langs:
  - csharp
  name: ICollection<TKey>.Clear()
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Clear()
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Throws a <xref href="System.NotSupportedException"></xref> exception in all cases.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyDictionary%602.KeyCollection> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface. The <xref:System.Collections.Generic.ICollection%601> interface specifies that the <xref:System.Collections.Generic.ICollection%601.Clear%2A> method should throw a <xref:System.NotSupportedException> exception if the collection that implements the interface is read-only.
  syntax:
    content: void ICollection<TKey>.Clear ();
    parameters: []
  overload: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: In all cases.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyDictionary`2+KeyCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyDictionary`2+KeyCollection.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)
  id: System#Collections#Generic#ICollection{TKey}#Contains(`0)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  langs:
  - csharp
  name: ICollection<TKey>.Contains(TKey)
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Contains(TKey)
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Contains(TKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Determines whether the collection contains a specific value.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyDictionary%602.KeyCollection> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.
  syntax:
    content: bool ICollection<TKey>.Contains (TKey item);
    parameters:
    - id: item
      type: TKey
      description: The object to locate in the collection.
    return:
      type: System.Boolean
      description: '`true` if <code>item</code> is found in the collection; otherwise, `false`.'
  overload: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Contains*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyDictionary`2+KeyCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyDictionary`2+KeyCollection.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly
  id: System#Collections#Generic#ICollection{TKey}#IsReadOnly
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  langs:
  - csharp
  name: ICollection<TKey>.IsReadOnly
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.IsReadOnly
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets a value that indicates whether the dictionary is read-only.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyDictionary%602> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.
  syntax:
    content: bool System.Collections.Generic.ICollection<TKey>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` in all cases.'
  overload: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyDictionary`2+KeyCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyDictionary`2+KeyCollection.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)
  id: System#Collections#Generic#ICollection{TKey}#Remove(`0)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  langs:
  - csharp
  name: ICollection<TKey>.Remove(TKey)
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Remove(TKey)
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Remove(TKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Throws a <xref href="System.NotSupportedException"></xref> exception in all cases.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyDictionary%602.KeyCollection> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface. The <xref:System.Collections.Generic.ICollection%601> interface specifies that the <xref:System.Collections.Generic.ICollection%601.Remove%2A> method should throw a <xref:System.NotSupportedException> exception if the collection that implements the interface is read-only.
  syntax:
    content: bool ICollection<TKey>.Remove (TKey item);
    parameters:
    - id: item
      type: TKey
      description: The object to remove from the collection.
    return:
      type: System.Boolean
      description: '`true` if <code>item</code> was successfully removed from the collection; otherwise, `false`. This method also returns `false` if <code>item</code> is not found in the original collection.'
  overload: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: In all cases.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyDictionary`2+KeyCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyDictionary`2+KeyCollection.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  langs:
  - csharp
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Copies the elements of the collection to an array, starting at a specific array index.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyDictionary%602.KeyCollection> instance is cast to an <xref:System.Collections.ICollection> interface.
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than 0.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.  \n  \n -or-  \n  \n The number of elements in the source collection is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyDictionary`2+KeyCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyDictionary`2+KeyCollection.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection.IsSynchronized
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets a value that indicates whether access to the collection is synchronized (thread safe).
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyDictionary%602.KeyCollection> instance is cast to an <xref:System.Collections.ICollection> interface.
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: '`true` if access to the collection is synchronized (thread safe); otherwise, `false`.'
  overload: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyDictionary`2+KeyCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyDictionary`2+KeyCollection.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection.SyncRoot
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets an object that can be used to synchronize access to the collection.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyDictionary%602.KeyCollection> instance is cast to an <xref:System.Collections.ICollection> interface.
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the collection.
  overload: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyDictionary`2+KeyCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyDictionary`2+KeyCollection.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.IEnumerable.GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Returns an enumerator that iterates through the collection.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyDictionary%602.KeyCollection> instance is cast to an <xref:System.Collections.IEnumerable> interface.
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An enumerator that can be used to iterate through the collection.
  overload: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyDictionary`2+KeyCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyDictionary`2+KeyCollection.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: CopyTo(TKey[],Int32)
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.CopyTo(TKey[],Int32)
- uid: TKey[]
  isExternal: true
  name: TKey[]
  nameWithType: TKey[]
  fullName: TKey[]
  spec.csharp:
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.Count
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: Count
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.Count
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.Count
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.GetEnumerator
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{TKey}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<TKey>
  nameWithType: IEnumerator<TKey>
  fullName: System.Collections.Generic.IEnumerator<TKey>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<TKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: ICollection<TKey>.Add(TKey)
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Add(TKey)
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Add(TKey)
- uid: TKey
  isExternal: true
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: ICollection<TKey>.Clear()
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Clear()
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Clear()
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: ICollection<TKey>.Contains(TKey)
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Contains(TKey)
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Contains(TKey)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: ICollection<TKey>.IsReadOnly
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.IsReadOnly
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.IsReadOnly
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: ICollection<TKey>.Remove(TKey)
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Remove(TKey)
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection<TKey>.Remove(TKey)
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection.IsSynchronized
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection.IsSynchronized
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection.SyncRoot
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.ICollection.SyncRoot
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.IEnumerable.GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyDictionary<TKey,TValue>+KeyCollection.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.CopyTo*
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: CopyTo
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.CopyTo
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.Count*
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: Count
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.Count
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.GetEnumerator*
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.GetEnumerator
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Add*
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<TKey>.Add
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection<TKey>.Add
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Clear*
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<TKey>.Clear
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection<TKey>.Clear
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Contains*
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<TKey>.Contains
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection<TKey>.Contains
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#IsReadOnly*
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<TKey>.IsReadOnly
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection<TKey>.IsReadOnly
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection<TKey>#Remove*
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<TKey>.Remove
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.Generic.ICollection<TKey>.Remove
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo*
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.CopyTo
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.ICollection.SyncRoot
- uid: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ReadOnlyDictionary<TKey,TValue>+KeyCollection.System.Collections.IEnumerable.GetEnumerator
