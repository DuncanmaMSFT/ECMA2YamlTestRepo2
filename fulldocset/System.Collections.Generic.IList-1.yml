### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.IList`1
  id: IList`1
  children:
  - System.Collections.Generic.IList`1.IndexOf(`0)
  - System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  - System.Collections.Generic.IList`1.Item(System.Int32)
  - System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  langs:
  - csharp
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  type: Interface
  summary: Represents a collection of objects that can be individually accessed by index.
  remarks: The IList(T) generic interface is a descendant of the <xref:System.Collections.Generic.ICollection%601> generic interface and is the base interface of all generic lists.
  syntax:
    content: 'public interface IList<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>'
    typeParameters:
    - id: T
      description: The type of elements in the list.
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/IList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Generic.IList`1
  langs:
  - csharp
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Determines the index of a specific item in the <xref href="stem.Collections.Generic.IList%601"></xref>.
  remarks: If an object occurs multiple times in the list, the IndexOf method always returns the first instance found.
  syntax:
    content: public int IndexOf (T item);
    parameters:
    - id: item
      type: T
      description: The object to locate in the <xref href="stem.Collections.Generic.IList%601"></xref>.
    return:
      type: System.Int32
      description: The index of <code>item</code> if found in the list; otherwise, -1.
  overload: System.Collections.Generic.IList`1.IndexOf*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/IList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.Collections.Generic.IList`1
  langs:
  - csharp
  name: Insert(Int32,T)
  nameWithType: IList<T>.Insert(Int32,T)
  fullName: System.Collections.Generic.IList<T>.Insert(Int32,T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Inserts an item to the <xref href="stem.Collections.Generic.IList%601"></xref> at the specified index.
  remarks: "If `index` equals the number of items in the <xref:System.Collections.Generic.IList%601>, then `item` is appended to the list.  \n  \n In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table."
  syntax:
    content: public void Insert (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <code>item</code> should be inserted.
    - id: item
      type: T
      description: The object to insert into the <xref href="stem.Collections.Generic.IList%601"></xref>.
  overload: System.Collections.Generic.IList`1.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is not a valid index in the <xref href="stem.Collections.Generic.IList%601"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="stem.Collections.Generic.IList%601"></xref> is read-only.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/IList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Generic.IList`1
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: IList<T>.Item(Int32)
  fullName: System.Collections.Generic.IList<T>.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets or sets the element at the specified index.
  remarks: "This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality."
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get or set.
    return:
      type: T
      description: The element at the specified index.
  overload: System.Collections.Generic.IList`1.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is not a valid index in the <xref href="stem.Collections.Generic.IList%601"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The property is set and the <xref href="stem.Collections.Generic.IList%601"></xref> is read-only.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/IList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList`1
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Removes the <xref href="stem.Collections.Generic.IList%601"></xref> item at the specified index.
  remarks: In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to remove.
  overload: System.Collections.Generic.IList`1.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is not a valid index in the <xref href="stem.Collections.Generic.IList%601"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="stem.Collections.Generic.IList%601"></xref> is read-only.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/IList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: Insert(Int32,T)
  nameWithType: IList<T>.Insert(Int32,T)
  fullName: System.Collections.Generic.IList<T>.Insert(Int32,T)
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: Item(Int32)
  nameWithType: IList<T>.Item(Int32)
  fullName: System.Collections.Generic.IList<T>.Item(Int32)
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(Int32)
- uid: System.Collections.Generic.IList`1.IndexOf*
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: IndexOf
  nameWithType: IList<T>.IndexOf
- uid: System.Collections.Generic.IList`1.Insert*
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: Insert
  nameWithType: IList<T>.Insert
- uid: System.Collections.Generic.IList`1.Item*
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: Item
  nameWithType: IList<T>.Item
- uid: System.Collections.Generic.IList`1.RemoveAt*
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: RemoveAt
  nameWithType: IList<T>.RemoveAt
