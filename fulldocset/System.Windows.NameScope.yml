### YamlMime:ManagedReference
items:
- uid: System.Windows.NameScope
  id: NameScope
  children:
  - System.Windows.NameScope.#ctor
  - System.Windows.NameScope.FindName(System.String)
  - System.Windows.NameScope.GetNameScope(System.Windows.DependencyObject)
  - System.Windows.NameScope.NameScopeProperty
  - System.Windows.NameScope.RegisterName(System.String,System.Object)
  - System.Windows.NameScope.SetNameScope(System.Windows.DependencyObject,System.Windows.Markup.INameScope)
  - System.Windows.NameScope.UnregisterName(System.String)
  langs:
  - csharp
  name: NameScope
  nameWithType: NameScope
  fullName: System.Windows.NameScope
  type: Class
  summary: Implements base WPF support for the <xref href="System.Windows.Markup.INameScope"></xref> methods that store or retrieve name-object mappings into a particular XAML namescope. Adds attached property support to make it simpler to get or set XAML namescope names dynamically at the element level..
  remarks: "This class implements built-in XAML namescope support for WPF treatment of XAML. NameScope assists in creation of initial XAML namescopes based on parsing XAML, such as when instantiating styles and templates. It also supports creation of XAML namescopes by processes that occur outside of normal XAML loading of elements by the WPF XAML processor implementation.  \n  \n NameScope is generally more devoted to supplying infrastructure than for common user code scenarios that involve working with a XAML namescope. For most scenarios, the <xref:System.Windows.FrameworkElement.FindName%2A> methods exposed on <xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> are more appropriate methods to call to search for elements by XAML-defined name. The <xref:System.Windows.FrameworkElement.Name%2A> properties exposed by <xref:System.Windows.FrameworkElement> and <xref:System.Windows.FrameworkContentElement> are more appropriate properties to use to set the initial name as markup attributes.  \n  \n The various methods of NameScope are used by base elements and other classes that maintain XAML namescopes in order to support <xref:System.Windows.Markup.INameScope.RegisterName%2A> and <xref:System.Windows.Markup.INameScope.FindName%2A>. You generally use the API in the NameScope class only if you are replacing or augmenting the base element behavior for how they process XAML namescopes for root elements of a XAML page, and as part of templates (which use a separate XAML namescope from the rest of the page).  \n  \n In [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)], NameScope provides collection interface implementations such that you can access the collections of names that are held by a XAML namescope, including adding to it through calls to an <xref:System.Windows.NameScope.Add%2A> method.  \n  \n For more information on XAML namescope concepts, see [WPF XAML Namescopes](../Topic/WPF%20XAML%20Namescopes.md).  \n  \n Names in a XAML namescope must use a particular grammar that restricts the strings you might use for inputs of NameScope API. See [XamlName Grammar](../Topic/XamlName%20Grammar.md).  \n  \n<a name=\"xamlTextUsage_NameScope\"></a>   \n## XAML Text Usage"
  syntax:
    content: 'public class NameScope : System.Windows.Markup.INameScope'
  inheritance:
  - System.Object
  implements:
  - System.Windows.Markup.INameScope
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Windows\NameScope.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Windows/NameScope.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
- uid: System.Windows.NameScope.#ctor
  id: '#ctor'
  parent: System.Windows.NameScope
  langs:
  - csharp
  name: NameScope()
  nameWithType: NameScope.NameScope()
  fullName: System.Windows.NameScope.NameScope()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Initializes a new instance of the <xref href="System.Windows.NameScope"></xref> class.
  syntax:
    content: public NameScope ();
    parameters: []
  overload: System.Windows.NameScope.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Windows\NameScope.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Windows/NameScope.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
- uid: System.Windows.NameScope.FindName(System.String)
  id: FindName(System.String)
  parent: System.Windows.NameScope
  langs:
  - csharp
  name: FindName(String)
  nameWithType: NameScope.FindName(String)
  fullName: System.Windows.NameScope.FindName(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Returns the corresponding object in the XAML namescope maintained by this <xref href="System.Windows.NameScope"></xref>, based on a provided name string.
  remarks: Several base elements (<xref:System.Windows.FrameworkElement>, <xref:System.Windows.FrameworkElement>) also expose a `FindName` method with identical functionality. The base element versions perform a XAML namescope search within the conventional logical tree, working towards the root element. Once the XAML namescope is determined, that XAML namescope is queried for the requested name.
  syntax:
    content: public object FindName (string name);
    parameters:
    - id: name
      type: System.String
      description: Name portion of an existing mapping to retrieve the object portion for.
    return:
      type: System.Object
      description: The requested object that is mapped with <code>name</code>. Can return `null` if <code>name</code> was provided as `null` or empty string, or if no matching object was found.
  overload: System.Windows.NameScope.FindName*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Windows\NameScope.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Windows/NameScope.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
- uid: System.Windows.NameScope.GetNameScope(System.Windows.DependencyObject)
  id: GetNameScope(System.Windows.DependencyObject)
  parent: System.Windows.NameScope
  langs:
  - csharp
  name: GetNameScope(DependencyObject)
  nameWithType: NameScope.GetNameScope(DependencyObject)
  fullName: System.Windows.NameScope.GetNameScope(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Provides the attached property get accessor for the <xref href="stem.Windows.NameScope.NameScope%2A"></xref> attached property.
  remarks: The purpose of this method is both to implement the `get` accessor for using <xref:System.Windows.NameScope.NameScope%2A> as an attached property in XAML usage, and to provide the accessor for performing the equivalent operation in code.
  syntax:
    content: public static System.Windows.Markup.INameScope GetNameScope (System.Windows.DependencyObject dependencyObject);
    parameters:
    - id: dependencyObject
      type: System.Windows.DependencyObject
      description: The object to get the XAML namescope from.
    return:
      type: System.Windows.Markup.INameScope
      description: A XAML namescope, as an <xref href="System.Windows.Markup.INameScope"></xref> instance.
  overload: System.Windows.NameScope.GetNameScope*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>dependencyObject</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Windows\NameScope.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Windows/NameScope.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
- uid: System.Windows.NameScope.NameScopeProperty
  id: NameScopeProperty
  parent: System.Windows.NameScope
  langs:
  - csharp
  name: NameScopeProperty
  nameWithType: NameScope.NameScopeProperty
  fullName: System.Windows.NameScope.NameScopeProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Identifies the <xref href="stem.Windows.NameScope.NameScope%2A"></xref> attached property.
  syntax:
    content: public static readonly System.Windows.DependencyProperty NameScopeProperty;
    return:
      type: System.Windows.DependencyProperty
      description: To be added.
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Windows\NameScope.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Windows/NameScope.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
- uid: System.Windows.NameScope.RegisterName(System.String,System.Object)
  id: RegisterName(System.String,System.Object)
  parent: System.Windows.NameScope
  langs:
  - csharp
  name: RegisterName(String,Object)
  nameWithType: NameScope.RegisterName(String,Object)
  fullName: System.Windows.NameScope.RegisterName(String,Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Registers a new name-object pair into the current XAML namescope.
  syntax:
    content: public void RegisterName (string name, object scopedElement);
    parameters:
    - id: name
      type: System.String
      description: The name to use for mapping the given object.
    - id: scopedElement
      type: System.Object
      description: The object to be mapped to the provided name.
  overload: System.Windows.NameScope.RegisterName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> or <code>scopedElement</code> was provided as `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code> was provided as empty string  \n  \n \\- or -  \n  \n <code>name</code> provided was rejected by the parser, because it contained characters that are invalid for a XAML name  \n  \n \\- or -  \n  \n <code>name</code> provided would result in a duplicate name registration."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Windows\NameScope.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Windows/NameScope.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
- uid: System.Windows.NameScope.SetNameScope(System.Windows.DependencyObject,System.Windows.Markup.INameScope)
  id: SetNameScope(System.Windows.DependencyObject,System.Windows.Markup.INameScope)
  parent: System.Windows.NameScope
  langs:
  - csharp
  name: SetNameScope(DependencyObject,INameScope)
  nameWithType: NameScope.SetNameScope(DependencyObject,INameScope)
  fullName: System.Windows.NameScope.SetNameScope(DependencyObject,INameScope)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Provides the attached property set accessor for the <xref href="stem.Windows.NameScope.NameScope%2A"></xref> attached property.
  remarks: The purpose of this method is both to act as the `set` accessor for using <xref:System.Windows.NameScope.NameScope%2A> as an attached property in XAML usage, and to provide the accessor for performing the equivalent operation in code.
  syntax:
    content: public static void SetNameScope (System.Windows.DependencyObject dependencyObject, System.Windows.Markup.INameScope value);
    parameters:
    - id: dependencyObject
      type: System.Windows.DependencyObject
      description: Object to change XAML namescope for.
    - id: value
      type: System.Windows.Markup.INameScope
      description: The new XAML namescope, using an interface cast.
  overload: System.Windows.NameScope.SetNameScope*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>dependencyObject</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Windows\NameScope.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Windows/NameScope.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
- uid: System.Windows.NameScope.UnregisterName(System.String)
  id: UnregisterName(System.String)
  parent: System.Windows.NameScope
  langs:
  - csharp
  name: UnregisterName(String)
  nameWithType: NameScope.UnregisterName(String)
  fullName: System.Windows.NameScope.UnregisterName(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: Removes a name-object mapping from the XAML namescope.
  remarks: Before calling this method, you can use <xref:System.Windows.NameScope.FindName%2A> to determine whether a specific name-object mapping exists.
  syntax:
    content: public void UnregisterName (string name);
    parameters:
    - id: name
      type: System.String
      description: The name of the mapping to remove.
  overload: System.Windows.NameScope.UnregisterName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code> was provided as empty string.  \n  \n \\- or -  \n  \n <code>name</code> provided had not been registered."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Windows\NameScope.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Windows/NameScope.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Windows.NameScope.#ctor
  parent: System.Windows.NameScope
  isExternal: false
  name: NameScope()
  nameWithType: NameScope.NameScope()
  fullName: System.Windows.NameScope.NameScope()
- uid: System.Windows.NameScope.FindName(System.String)
  parent: System.Windows.NameScope
  isExternal: false
  name: FindName(String)
  nameWithType: NameScope.FindName(String)
  fullName: System.Windows.NameScope.FindName(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.NameScope.GetNameScope(System.Windows.DependencyObject)
  parent: System.Windows.NameScope
  isExternal: false
  name: GetNameScope(DependencyObject)
  nameWithType: NameScope.GetNameScope(DependencyObject)
  fullName: System.Windows.NameScope.GetNameScope(DependencyObject)
- uid: System.Windows.Markup.INameScope
  parent: System.Windows.Markup
  isExternal: false
  name: INameScope
  nameWithType: INameScope
  fullName: System.Windows.Markup.INameScope
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.NameScope.NameScopeProperty
  parent: System.Windows.NameScope
  isExternal: false
  name: NameScopeProperty
  nameWithType: NameScope.NameScopeProperty
  fullName: System.Windows.NameScope.NameScopeProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.NameScope.RegisterName(System.String,System.Object)
  parent: System.Windows.NameScope
  isExternal: false
  name: RegisterName(String,Object)
  nameWithType: NameScope.RegisterName(String,Object)
  fullName: System.Windows.NameScope.RegisterName(String,Object)
- uid: System.Windows.NameScope.SetNameScope(System.Windows.DependencyObject,System.Windows.Markup.INameScope)
  parent: System.Windows.NameScope
  isExternal: false
  name: SetNameScope(DependencyObject,INameScope)
  nameWithType: NameScope.SetNameScope(DependencyObject,INameScope)
  fullName: System.Windows.NameScope.SetNameScope(DependencyObject,INameScope)
- uid: System.Windows.NameScope.UnregisterName(System.String)
  parent: System.Windows.NameScope
  isExternal: false
  name: UnregisterName(String)
  nameWithType: NameScope.UnregisterName(String)
  fullName: System.Windows.NameScope.UnregisterName(String)
- uid: System.Windows.NameScope.#ctor*
  parent: System.Windows.NameScope
  isExternal: false
  name: NameScope
  nameWithType: NameScope.NameScope
- uid: System.Windows.NameScope.FindName*
  parent: System.Windows.NameScope
  isExternal: false
  name: FindName
  nameWithType: NameScope.FindName
- uid: System.Windows.NameScope.GetNameScope*
  parent: System.Windows.NameScope
  isExternal: false
  name: GetNameScope
  nameWithType: NameScope.GetNameScope
- uid: System.Windows.NameScope.RegisterName*
  parent: System.Windows.NameScope
  isExternal: false
  name: RegisterName
  nameWithType: NameScope.RegisterName
- uid: System.Windows.NameScope.SetNameScope*
  parent: System.Windows.NameScope
  isExternal: false
  name: SetNameScope
  nameWithType: NameScope.SetNameScope
- uid: System.Windows.NameScope.UnregisterName*
  parent: System.Windows.NameScope
  isExternal: false
  name: UnregisterName
  nameWithType: NameScope.UnregisterName
