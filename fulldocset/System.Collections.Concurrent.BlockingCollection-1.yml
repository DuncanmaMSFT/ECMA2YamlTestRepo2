### YamlMime:ManagedReference
items:
- uid: System.Collections.Concurrent.BlockingCollection`1
  id: BlockingCollection`1
  children:
  - System.Collections.Concurrent.BlockingCollection`1.#ctor
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  - System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  - System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  - System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  - System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.Count
  - System.Collections.Concurrent.BlockingCollection`1.Dispose
  - System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  - System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  - System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  - System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Concurrent.BlockingCollection`1.Take
  - System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.ToArray
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  langs:
  - csharp
  name: BlockingCollection<T>
  nameWithType: BlockingCollection<T>
  fullName: System.Collections.Concurrent.BlockingCollection<T>
  type: Class
  summary: Provides blocking and bounding capabilities for thread-safe collections that implement <xref href="stem.Collections.Concurrent.IProducerConsumerCollection%601"></xref>.
  remarks: "BlockingCollection(T) is a thread-safe collection class that provides the following:  \n  \n-   An implementation of the producer/consumer pattern; BlockingCollection(T) is a wrapper for the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface.  \n  \n-   Concurrent addition and removal of items from multiple threads with the <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> and  <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> methods.  \n  \n-   A bounded collection that blocks <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> and <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> operations when the collection is full or empty.  \n  \n-   Cancellation of <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> operations by using a <xref:System.Threading.CancellationToken> object in the  <xref:System.Collections.Concurrent.BlockingCollection%601.TryAdd%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A> method.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic. Also, note that the <xref:System.Collections.Concurrent.BlockingCollection%601.Dispose> method is not thread-safe. All other public and protected members of BlockingCollection(T) are thread-safe and may be used concurrently from multiple threads.  \n  \n <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> represents a collection that allows for thread-safe adding and removal of data. BlockingCollection(T) is used as a wrapper for an <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> instance, and allows removal attempts from the collection to block until data is available to be removed. Similarly, you can create a BlockingCollection(T) to enforce an upper bound on the number of data elements allowed in the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601>; addition attempts to the collection may then block until space is available to store the added items. In this manner, BlockingCollection(T) is similar to a traditional blocking queue data structure, except that the underlying data storage mechanism is abstracted away as an <xref:System.Collections.Concurrent.IProducerConsumerCollection%601>.  \n  \n BlockingCollection(T) supports bounding and blocking. Bounding means that you can set the maximum capacity of the collection. Bounding is important in certain scenarios because it enables you to control the maximum size of the collection in memory, and it prevents the producing threads from moving too far ahead of the consuming threads.Multiple threads or tasks can add items to the collection concurrently, and if the collection reaches its specified maximum capacity, the producing threads will block until an item is removed. Multiple consumers can remove items concurrently, and if the collection becomes empty, the consuming threads will block until a producer adds an item. A producing thread can call the <xref:System.Collections.Concurrent.BlockingCollection%601.CompleteAdding%2A> method to indicate that no more items will be added. Consumers monitor the <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> property to know when the collection is empty and no more items will be added.  \n  \n <xref:System.Collections.Concurrent.BlockingCollection%601.Add%2A> and <xref:System.Collections.Concurrent.BlockingCollection%601.Take%2A> operations are typically performed in a loop. You can cancel a loop by passing in a <xref:System.Threading.CancellationToken> object to the <xref:System.Collections.Concurrent.BlockingCollection%601.TryAdd%2A> or <xref:System.Collections.Concurrent.BlockingCollection%601.TryTake%2A> method, and then checking the value of the token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on each iteration. If the value is `true`, it is up to you to respond the cancellation request by cleaning up any resources and exiting the loop.  \n  \n When you create a BlockingCollection(T) object, you can specify not only the bounded capacity but also the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for BlockingCollection(T) is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.  \n  \n Do not modify the underlying collection directly. Use BlockingCollection(T) methods to add or remove elements. The BlockingCollection(T) object can become corrupted if you change the underlying collection directly."
  example:
  - "The following example shows how to add and take items concurrently from a blocking collection:  \n  \n [!code-vb[System.Collections.Concurrent.BlockingCollection#1](~/add/codesnippet/visualbasic/t-system.collections.con_4_1.vb)]\n [!code-cs[System.Collections.Concurrent.BlockingCollection#1](~/add/codesnippet/csharp/t-system.collections.con_4_1.cs)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}, Type = {m_collection}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Concurrent.SystemThreadingCollections_BlockingCollectionDebugView`1))]

      [System.Runtime.InteropServices.ComVisible(false)]

      public class BlockingCollection<T> : IDisposable, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.ICollection
    typeParameters:
    - id: T
      description: The type of elements in the collection.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.IReadOnlyCollection<T>
  - System.Collections.ICollection
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: BlockingCollection<T>()
  nameWithType: BlockingCollection<T>.BlockingCollection<T>()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection<T>()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> class without an upper-bound.
  remarks: The default underlying collection is a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object, which provides first in, first out (FIFO) behavior.
  syntax:
    content: public BlockingCollection ();
    parameters: []
  overload: System.Collections.Concurrent.BlockingCollection`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  id: '#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: BlockingCollection<T>(IProducerConsumerCollection<T>)
  nameWithType: BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> class without an upper-bound and using the provided <xref href="stem.Collections.Concurrent.IProducerConsumerCollection%601"></xref> as its underlying data store.
  syntax:
    content: public BlockingCollection (System.Collections.Concurrent.IProducerConsumerCollection<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Concurrent.IProducerConsumerCollection`1
      description: The collection to use as the underlying data store.
  overload: System.Collections.Concurrent.BlockingCollection`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>collection</code> argument is null.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: BlockingCollection<T>(Int32)
  nameWithType: BlockingCollection<T>.BlockingCollection<T>(Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection<T>(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> class with the specified upper-bound.
  remarks: The default underlying collection is a <xref:System.Collections.Concurrent.ConcurrentQueue%601>.
  syntax:
    content: public BlockingCollection (int boundedCapacity);
    parameters:
    - id: boundedCapacity
      type: System.Int32
      description: The bounded size of the collection.
  overload: System.Collections.Concurrent.BlockingCollection`1.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>boundedCapacity</code> is not a positive value.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  id: '#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: BlockingCollection<T>(IProducerConsumerCollection<T>,Int32)
  nameWithType: BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> class with the specified upper-bound and using the provided <xref href="stem.Collections.Concurrent.IProducerConsumerCollection%601"></xref> as its underlying data store.
  syntax:
    content: public BlockingCollection (System.Collections.Concurrent.IProducerConsumerCollection<T> collection, int boundedCapacity);
    parameters:
    - id: collection
      type: System.Collections.Concurrent.IProducerConsumerCollection`1
      description: The collection to use as the underlying data store.
    - id: boundedCapacity
      type: System.Int32
      description: The bounded size of the collection.
  overload: System.Collections.Concurrent.BlockingCollection`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>collection</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>boundedCapacity</code> is not a positive value.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The supplied <code>collection</code> contains more values than is permitted by <code>boundedCapacity</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: Add(T)
  nameWithType: BlockingCollection<T>.Add(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Adds the item to the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref>.
  remarks: If a bounded capacity was specified when this instance of <xref:System.Collections.Concurrent.BlockingCollection%601> was initialized, a call to Add may block until space is available to store the provided item.
  syntax:
    content: public void Add (T item);
    parameters:
    - id: item
      type: T
      description: The item to be added to the collection. The value can be a null reference.
  overload: System.Collections.Concurrent.BlockingCollection`1.Add*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"stem.Collections.Concurrent.BlockingCollection%601\"></xref> has been marked as complete with regards to additions.  \n  \n -or-  \n  \n The underlying collection didn't accept the item."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  id: Add(`0,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: Add(T,CancellationToken)
  nameWithType: BlockingCollection<T>.Add(T,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Adds the item to the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref>.
  remarks: "If a bounded capacity was specified when this instance of <xref:System.Collections.Concurrent.BlockingCollection%601> was initialized, a call to Add may block until space is available to store the provided item.  \n  \n This method can return early with an <xref:System.OperationCanceledException> if the `cancellationToken` is canceled."
  syntax:
    content: public void Add (T item, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: item
      type: T
      description: The item to be added to the collection. The value can be a null reference.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
  overload: System.Collections.Concurrent.BlockingCollection`1.Add*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: If the <xref href="System.Threading.CancellationToken"></xref> is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed or the <xref href="System.Threading.CancellationTokenSource"></xref> that owns <code>cancellationToken</code> has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"stem.Collections.Concurrent.BlockingCollection%601\"></xref> has been marked as complete with regards to additions.  \n  \n -or-  \n  \n The underlying collection didn't accept the item."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  id: AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: AddToAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Adds the specified item to any one of the specified <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances.
  remarks: If a bounded capacity was specified when all of the <xref:System.Collections.Concurrent.BlockingCollection%601> instances were initialized, a call to AddToAny may block until space is available in one of the collections to store the provided item.
  syntax:
    content: public static int AddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: The array of collections.
    - id: item
      type: T
      description: The item to be added to one of the collections.
    return:
      type: System.Int32
      description: The index of the collection in the <code>collections</code> array to which the item was added.
  overload: System.Collections.Concurrent.BlockingCollection`1.AddToAny*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: At least one of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>collections</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: At least one underlying collection didn't accept the item.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  id: AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: AddToAny(BlockingCollection<T>[],T,CancellationToken)
  nameWithType: BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Adds the specified item to any one of the specified <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances.
  remarks: If a bounded capacity was specified when all of the <xref:System.Collections.Concurrent.BlockingCollection%601> instances were initialized, a call to AddToAny may block until space is available in one of the collections to store the provided item. This method may return before the item is added to any collection if the `cancellationToken` is canceled before space is available.
  syntax:
    content: public static int AddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: The array of collections.
    - id: item
      type: T
      description: The item to be added to one of the collections.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
    return:
      type: System.Int32
      description: The index of the collection in the <code>collections</code> array to which the item was added.
  overload: System.Collections.Concurrent.BlockingCollection`1.AddToAny*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: If the <xref href="System.Threading.CancellationToken"></xref> is canceled.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: At least one underlying collection didn't accept the item.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>collections</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: At least one of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances has been disposed, or the <xref href="System.Threading.CancellationTokenSource"></xref> that created <code>cancellationToken</code> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  id: BoundedCapacity
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: BoundedCapacity
  nameWithType: BlockingCollection<T>.BoundedCapacity
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BoundedCapacity
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Gets the bounded capacity of this <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance.
  syntax:
    content: public int BoundedCapacity { get; }
    return:
      type: System.Int32
      description: The bounded capacity of this collection, or int.MaxValue if no bound was supplied.
  overload: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  id: CompleteAdding
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: CompleteAdding()
  nameWithType: BlockingCollection<T>.CompleteAdding()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CompleteAdding()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Marks the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances as not accepting any more additions.
  remarks: After a collection has been marked as complete for adding, adding to the collection is not permitted and attempts to remove from the collection will not wait when the collection is empty.
  syntax:
    content: public void CompleteAdding ();
    parameters: []
  overload: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: BlockingCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Copies all of the items in the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance to a compatible one-dimensional array, starting at the specified index of the target array.
  remarks: CopyTo represents a snapshot of the collection at a precise point in time. If other threads are adding or removing items while CopyTo is executing, then the elements returned by CopyTo might not represent the state of the collection.
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional array that is the destination of the elements copied from the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Concurrent.BlockingCollection`1.CopyTo*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>array</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>index</code> argument is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>index</code> argument is equal to or greater than the length of the <code>array</code>.  \n  \n The destination array is too small to hold all of the BlockingCcollection elements.  \n  \n The array rank doesn't match.  \n  \n The array type is incompatible with the type of the BlockingCollection elements."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.Count
  id: Count
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: Count
  nameWithType: BlockingCollection<T>.Count
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Gets the number of items contained in the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref>.
  remarks: If any method in BlockingCollection is executing while the Count property is being accessd, the return value is approximate. Count may reflect a number that is either greater than or less than the actual number of items in the BlockingCollection.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of items contained in the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref>.
  overload: System.Collections.Concurrent.BlockingCollection`1.Count*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose
  id: Dispose
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: Dispose()
  nameWithType: BlockingCollection<T>.Dispose()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Releases all resources used by the current instance of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> class.
  remarks: "The `Dispose` method is not thread-safe.  \n  \n Call `Dispose` when you are finished using the <xref:System.Collections.Concurrent.BlockingCollection%601>. The `Dispose` method leaves the <xref:System.Collections.Concurrent.BlockingCollection%601> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Collections.Concurrent.BlockingCollection%601> so the garbage collector can reclaim the memory that the <xref:System.Collections.Concurrent.BlockingCollection%601> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](../Topic/Cleaning%20Up%20Unmanaged%20Resources.md) and [Implementing a Dispose Method](../Topic/Implementing%20a%20Dispose%20Method.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Collections.Concurrent.BlockingCollection%601>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Collections.Concurrent.BlockingCollection%601> object's `Finalize` method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Collections.Concurrent.BlockingCollection`1.Dispose*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: BlockingCollection<T>.Dispose(Boolean)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Releases resources used by the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance.
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: Whether being disposed explicitly (true) or due to a finalizer (false).
  overload: System.Collections.Concurrent.BlockingCollection`1.Dispose*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  id: GetConsumingEnumerable
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: GetConsumingEnumerable()
  nameWithType: BlockingCollection<T>.GetConsumingEnumerable()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Provides a consuming <xref href="stem.Collections.Generic.IEnumerator%601"></xref> for items in the collection.
  remarks: ''
  example:
  - "The following example shows how to use the GetConsumingEnumerable method:  \n  \n [!code-vb[System.Collections.Concurrent.BlockingCollection#4](~/add/codesnippet/visualbasic/m-system.collections.con_3_1.vb)]\n [!code-cs[System.Collections.Concurrent.BlockingCollection#4](~/add/codesnippet/csharp/m-system.collections.con_3_1.cs)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<T> GetConsumingEnumerable ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: An <xref href="stem.Collections.Generic.IEnumerable%601"></xref> that removes and returns items from the collection.
  overload: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  id: GetConsumingEnumerable(System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: GetConsumingEnumerable(CancellationToken)
  nameWithType: BlockingCollection<T>.GetConsumingEnumerable(CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable(CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Provides a consuming <xref href="stem.Collections.Generic.IEnumerable%601"></xref> for items in the collection.
  remarks: This method enables client code to remove items from the collection by using a foreach loop (For Each in Visual Basic), or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> or a PLINQ query. The enumerator will continue to provide items (if any exist) until <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> returns true, and if <xref:System.Collections.Concurrent.BlockingCollection%601.IsCompleted%2A> is false the loop blocks until an item becomes available or until the <xref:System.Threading.CancellationToken> is cancelled.
  syntax:
    content: public System.Collections.Generic.IEnumerable<T> GetConsumingEnumerable (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: An <xref href="stem.Collections.Generic.IEnumerable%601"></xref> that removes and returns items from the collection.
  overload: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: If the <xref href="System.Threading.CancellationToken"></xref> is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed or the <xref href="System.Threading.CancellationTokenSource"></xref> that created <code>cancellationToken</code> has been disposed
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  id: IsAddingCompleted
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: IsAddingCompleted
  nameWithType: BlockingCollection<T>.IsAddingCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsAddingCompleted
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Gets whether this <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been marked as complete for adding.
  syntax:
    content: public bool IsAddingCompleted { get; }
    return:
      type: System.Boolean
      description: Whether this collection has been marked as complete for adding.
  overload: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  id: IsCompleted
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: IsCompleted
  nameWithType: BlockingCollection<T>.IsCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsCompleted
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Gets whether this <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been marked as complete for adding and is empty.
  syntax:
    content: public bool IsCompleted { get; }
    return:
      type: System.Boolean
      description: Whether this collection has been marked as complete for adding and is empty.
  overload: System.Collections.Concurrent.BlockingCollection`1.IsCompleted*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: BlockingCollection<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IEnumerable<T>.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Provides an <xref href="stem.Collections.Generic.IEnumerator%601"></xref> for items in the collection.
  remarks: Unlike <xref:System.Collections.Concurrent.BlockingCollection%601.GetConsumingEnumerable%2A>, IEnumerable(T).GetEnumerator returns a standard enumerator that does not modify the underlying collection. If other threads are adding or removing elements concurrently when GetEnumerator is called, then the elements returned by the enumerator might not represent the current state of the collection.
  syntax:
    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: An <xref href="stem.Collections.Generic.IEnumerator%601"></xref> for the items in the collection.
  overload: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: BlockingCollection<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Copies all of the items in the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance to a compatible one-dimensional array, starting at the specified index of the target array.
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array that is the destination of the elements copied from the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>array</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>index</code> argument is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>index</code> argument is equal to or greater than the length of the <code>array</code>, the array is multidimensional, or the type parameter for the collection cannot be cast automatically to the type of the destination array.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: BlockingCollection<T>.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.BlockingCollection<T>.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Gets a value indicating whether access to the <xref href="System.Collections.ICollection"></xref> is synchronized.
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: always returns false.
  overload: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: BlockingCollection<T>.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.BlockingCollection<T>.ICollection.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>. This property is not supported.
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: returns null.
  overload: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The SyncRoot property is not supported.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: BlockingCollection<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Provides an <xref href="System.Collections.IEnumerator"></xref> for items in the collection.
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator"></xref> for the items in the collection.
  overload: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.Take
  id: Take
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: Take()
  nameWithType: BlockingCollection<T>.Take()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Removes  an item from the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref>.
  remarks: "A call to Take may block until an item is available to be removed.  \n  \n The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>."
  syntax:
    content: public T Take ();
    parameters: []
    return:
      type: T
      description: The item removed from the collection.
  overload: System.Collections.Concurrent.BlockingCollection`1.Take*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying collection was modified outside of this <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance, or the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> is empty and the collection has been marked as complete for adding.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  id: Take(System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: Take(CancellationToken)
  nameWithType: BlockingCollection<T>.Take(CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take(CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Removes an item from the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref>.
  remarks: "A call to Take may block until an item is available to be removed or the token is canceled.  \n  \n The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>."
  syntax:
    content: public T Take (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Object that can be used to cancel the take operation.
    return:
      type: T
      description: The item removed from the collection.
  overload: System.Collections.Concurrent.BlockingCollection`1.Take*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed or the <xref href="System.Threading.CancellationTokenSource"></xref> that created the token was canceled.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying collection was modified outside of this <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance or the BlockingCollection is marked as complete for adding, or the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> is empty.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  id: TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TakeFromAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Takes an item from any one of the specified <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances.
  remarks: A call to TakeFromAny may block until an item is available to be removed.
  syntax:
    content: public static int TakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: The array of collections.
    - id: item
      type: T
      description: The item removed from one of the collections.
    return:
      type: System.Int32
      description: The index of the collection in the <code>collections</code> array from which the item was removed.
  overload: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: At least one of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>collections</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>collections</code> argument is a 0-length array or contains a null element or <xref href="stem.Collections.Concurrent.BlockingCollection%601.CompleteAdding%2A"></xref> has been called on the collection.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: At least one of the underlying collections was modified outside of its <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  id: TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TakeFromAny(BlockingCollection<T>[],T,CancellationToken)
  nameWithType: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Takes an item from any one of the specified <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances while observing the specified cancellation token.
  remarks: A call to TakeFromAny may block until an item is available to be removed. The method will return early with an OperationCanceledException if the token is canceled.
  syntax:
    content: public static int TakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: The array of collections.
    - id: item
      type: T
      description: The item removed from one of the collections.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
    return:
      type: System.Int32
      description: The index of the collection in the <code>collections</code> array from which the item was removed.
  overload: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: If the <xref href="System.Threading.CancellationToken"></xref> is canceled.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: At least one of the underlying collections was modified outside of its <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>collections</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>collections</code> argument is a 0-length array or contains a null element, or <xref href="stem.Collections.Concurrent.BlockingCollection%601.CompleteAdding%2A"></xref> has been called on the collection.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: At least one of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: ToArray()
  nameWithType: BlockingCollection<T>.ToArray()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.ToArray()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Copies the items from the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance into a new array.
  remarks: "The copied elements are not removed from the collection.  \n  \n If any method in BlockingCollection is executing while the ToArray method executes, the return value is approximate. ToArray  may include items that have already been removed, or exclude items that have already been inserted."
  syntax:
    content: public T[] ToArray ();
    parameters: []
    return:
      type: T[]
      description: An array containing copies of the elements of the collection.
  overload: System.Collections.Concurrent.BlockingCollection`1.ToArray*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  id: TryAdd(`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAdd(T)
  nameWithType: BlockingCollection<T>.TryAdd(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to add the specified item to the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref>.
  remarks: If the collection is a bounded collection, and is full, this method immediately returns false without adding the item.
  syntax:
    content: public bool TryAdd (T item);
    parameters:
    - id: item
      type: T
      description: The item to be added to the collection.
    return:
      type: System.Boolean
      description: true if <code>item</code> could be added; otherwise false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href="System.InvalidOperationException"></xref> is thrown.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAdd*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"stem.Collections.Concurrent.BlockingCollection%601\"></xref> has been marked as complete with regards to additions.  \n  \n -or-  \n  \n The underlying collection didn't accept the item."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  id: TryAdd(`0,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAdd(T,Int32)
  nameWithType: BlockingCollection<T>.TryAdd(T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to add the specified item to the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> within the specified time period.
  syntax:
    content: public bool TryAdd (T item, int millisecondsTimeout);
    parameters:
    - id: item
      type: T
      description: The item to be added to the collection.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite"></xref> (-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: true if the <code>item</code> could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href="System.InvalidOperationException"></xref> is thrown.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAdd*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"stem.Collections.Concurrent.BlockingCollection%601\"></xref> has been marked as complete with regards to additions.  \n  \n -or-  \n  \n The underlying collection didn't accept the item."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  id: TryAdd(`0,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAdd(T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryAdd(T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to add the specified item to the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref>.
  syntax:
    content: public bool TryAdd (T item, TimeSpan timeout);
    parameters:
    - id: item
      type: T
      description: The item to be added to the collection.
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan"></xref> that represents the number of milliseconds to wait, or a <xref href="System.TimeSpan"></xref> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: true if the <code>item</code> could be added to the collection within the specified time span; otherwise, false.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAdd*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href="System.Int32.MaxValue"></xref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"stem.Collections.Concurrent.BlockingCollection%601\"></xref> has been marked as complete with regards to additions.  \n  \n -or-  \n  \n The underlying collection didn't accept the item."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  id: TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAdd(T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryAdd(T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T,Int32,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to add the specified item to the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> within the specified time period, while observing a cancellation token.
  syntax:
    content: public bool TryAdd (T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: item
      type: T
      description: The item to be added to the collection.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite"></xref> (-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
    return:
      type: System.Boolean
      description: true if the <code>item</code> could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href="System.InvalidOperationException"></xref> is thrown.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAdd*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: If the <xref href="System.Threading.CancellationToken"></xref> is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed or the underlying <xref href="System.Threading.CancellationTokenSource"></xref> has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"stem.Collections.Concurrent.BlockingCollection%601\"></xref> has been marked as complete with regards to additions.  \n  \n -or-  \n  \n The underlying collection didn't accept the item."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAddToAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to add the specified item to any one of the specified <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances.
  syntax:
    content: public static int TryAddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: The array of collections.
    - id: item
      type: T
      description: The item to be added to one of the collections.
    return:
      type: System.Int32
      description: The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: At least one of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>collections</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: At least one underlying collection didn't accept the item.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAddToAny(BlockingCollection<T>[],T,Int32)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to add the specified item to any one of the specified <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances.
  syntax:
    content: public static int TryAddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, int millisecondsTimeout);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: The array of collections.
    - id: item
      type: T
      description: The item to be added to one of the collections.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite"></xref> (-1) to wait indefinitely.
    return:
      type: System.Int32
      description: The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: At least one of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>collections</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.  \n  \n -or-  \n  \n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: At least one underlying collection didn't accept the item.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAddToAny(BlockingCollection<T>[],T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to add the specified item to any one of the specified <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances while observing the specified cancellation token.
  remarks: This method can return early if the cancellationToken is cancelled before space was available for the Add operation.
  syntax:
    content: public static int TryAddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, TimeSpan timeout);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: The array of collections.
    - id: item
      type: T
      description: The item to be added to one of the collections.
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan"></xref> that represents the number of milliseconds to wait, or a <xref href="System.TimeSpan"></xref> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Int32
      description: The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: At least one of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances or the <xref href="System.Threading.CancellationTokenSource"></xref> that created <code>cancellationToken</code> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>collections</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>.  \n  \n -or-  \n  \n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: At least one underlying collection didn't accept the item.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAddToAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to add the specified item to any one of the specified <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances.
  syntax:
    content: public static int TryAddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: The array of collections.
    - id: item
      type: T
      description: The item to be added to one of the collections.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite"></xref> (-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
    return:
      type: System.Int32
      description: The index of the collection in the <code>collections</code> array to which the item was added, or -1 if the item could not be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: If the <xref href="System.Threading.CancellationToken"></xref> is canceled.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: At least one underlying collection didn't accept the item.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>collections</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.  \n  \n -or-  \n  \n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>collections</code> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: At least one of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  id: TryTake(`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTake(T)
  nameWithType: BlockingCollection<T>.TryTake(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to remove an item from the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref>.
  remarks: "If the collection is empty, this method immediately returns false.  \n  \n The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>."
  syntax:
    content: public bool TryTake (out T item);
    parameters:
    - id: item
      type: T
      description: The item to be removed from the collection.
    return:
      type: System.Boolean
      description: '`true` if an item could be removed; otherwise, `false`.'
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTake*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying collection was modified outside of this <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  id: TryTake(`0@,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTake(T,Int32)
  nameWithType: BlockingCollection<T>.TryTake(T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to remove an item from the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> in the specified time period.
  remarks: The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601>, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.
  syntax:
    content: public bool TryTake (out T item, int millisecondsTimeout);
    parameters:
    - id: item
      type: T
      description: The item to be removed from the collection.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite"></xref> (-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: '`true` if an item could be removed from the collection within the specified  time; otherwise, `false`.'
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTake*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying collection was modified outside of this <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  id: TryTake(`0@,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTake(T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryTake(T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to remove an item from the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> in the specified time period.
  remarks: The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.
  syntax:
    content: public bool TryTake (out T item, TimeSpan timeout);
    parameters:
    - id: item
      type: T
      description: The item to be removed from the collection.
    - id: timeout
      type: System.TimeSpan
      description: An object that represents the number of milliseconds to wait, or an object that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: '`true` if an item could be removed from the collection within the specified  time; otherwise, `false`.'
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTake*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.  \n  \n -or-  \n  \n <code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying collection was modified outside of this <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  id: TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTake(T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryTake(T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T,Int32,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to remove an item from the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> in the specified time period while observing a cancellation token.
  remarks: The order in which an item is removed depends on the type of collection used to create the <xref:System.Collections.Concurrent.BlockingCollection%601> instance. When you create a <xref:System.Collections.Concurrent.BlockingCollection%601> object, you can specify the type of collection to use. For example, you could specify a <xref:System.Collections.Concurrent.ConcurrentQueue%601> object for first in, first out (FIFO) behavior, or a <xref:System.Collections.Concurrent.ConcurrentStack%601> object for last in, first out (LIFO) behavior. You can use any collection class that implements the <xref:System.Collections.Concurrent.IProducerConsumerCollection%601> interface. The default collection type for <xref:System.Collections.Concurrent.BlockingCollection%601> is <xref:System.Collections.Concurrent.ConcurrentQueue%601>.
  syntax:
    content: public bool TryTake (out T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: item
      type: T
      description: The item to be removed from the collection.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite"></xref> (-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
    return:
      type: System.Boolean
      description: '`true` if an item could be removed from the collection within the specified  time; otherwise, `false`.'
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTake*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> has been canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> has been disposed or the underlying <xref href="System.Threading.CancellationTokenSource"></xref> has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying collection was modified outside this <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTakeFromAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to remove an item from any one of the specified <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances.
  remarks: A call to TryTakeFromAny may block until an item is available to be removed.
  example:
  - "The following example shows how to use the TryTakeFromAny method:  \n  \n [!code-vb[System.Collections.Concurrent.BlockingCollection#3](~/add/codesnippet/visualbasic/e18c3170-1ec0-438f-99b9-_1.vb)]\n [!code-cs[System.Collections.Concurrent.BlockingCollection#3](~/add/codesnippet/csharp/e18c3170-1ec0-438f-99b9-_1.cs)]"
  syntax:
    content: public static int TryTakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: The array of collections.
    - id: item
      type: T
      description: The item removed from one of the collections.
    return:
      type: System.Int32
      description: The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: At least one of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>collections</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>collections</code> argument is a 0-length array or contains a null element.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: At least one of the underlying collections was modified outside of its <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTakeFromAny(BlockingCollection<T>[],T,Int32)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to remove an item from any one of the specified <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances.
  remarks: A call to TryTakeFromAny may block until an item is available to be removed.
  syntax:
    content: public static int TryTakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, int millisecondsTimeout);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: The array of collections.
    - id: item
      type: T
      description: The item removed from one of the collections.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite"></xref> (-1) to wait indefinitely.
    return:
      type: System.Int32
      description: The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: At least one of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>collections</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.  \n  \n -or-  \n  \n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>collections</code> argument is a 0-length array or contains a null element.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: At least one of the underlying collections was modified outside of its <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTakeFromAny(BlockingCollection<T>[],T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to remove an item from any one of the specified <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances.
  remarks: A call to TryTakeFromAny may block until an item is available to be removed.
  syntax:
    content: public static int TryTakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, TimeSpan timeout);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: The array of collections.
    - id: item
      type: T
      description: The item removed from one of the collections.
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan"></xref> that represents the number of milliseconds to wait, or a <xref href="System.TimeSpan"></xref> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Int32
      description: The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: At least one of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>collections</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>.  \n  \n -or-  \n  \n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>collections</code> argument is a 0-length array or contains a null element.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: At least one of the underlying collections was modified outside of its <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTakeFromAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  summary: Tries to remove an item from any one of the specified <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances.
  remarks: A call to TryTakeFromAny may block until an item is available to be removed.
  syntax:
    content: public static int TryTakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: The array of collections.
    - id: item
      type: T
      description: The item removed from one of the collections.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite"></xref> (-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token to observe.
    return:
      type: System.Int32
      description: The index of the collection in the <code>collections</code> array from which the item was removed, or -1 if an item could not be removed.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: If the <xref href="System.Threading.CancellationToken"></xref> is canceled.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: At least one of the underlying collections was modified outside of its <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instance.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>collections</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.  \n  \n -or-  \n  \n The count of <code>collections</code> is greater than the maximum size of 62 for STA and 63 for MTA."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>collections</code> argument is a 0-length array or contains a null element.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: At least one of the <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> instances has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\BlockingCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/BlockingCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ObjectDisposedException
  parent: System
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.OperationCanceledException
  parent: System
  isExternal: false
  name: OperationCanceledException
  nameWithType: OperationCanceledException
  fullName: System.OperationCanceledException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: BlockingCollection<T>()
  nameWithType: BlockingCollection<T>.BlockingCollection<T>()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection<T>()
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: BlockingCollection<T>(IProducerConsumerCollection<T>)
  nameWithType: BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>)
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: IProducerConsumerCollection<T>
  nameWithType: IProducerConsumerCollection<T>
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: BlockingCollection<T>(Int32)
  nameWithType: BlockingCollection<T>.BlockingCollection<T>(Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection<T>(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: BlockingCollection<T>(IProducerConsumerCollection<T>,Int32)
  nameWithType: BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection<T>(IProducerConsumerCollection<T>,Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Add(T)
  nameWithType: BlockingCollection<T>.Add(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Add(T,CancellationToken)
  nameWithType: BlockingCollection<T>.Add(T,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T,CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: AddToAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T)
- uid: System.Collections.Concurrent.BlockingCollection{T}[]
  parent: System.Collections.Concurrent
  isExternal: false
  name: BlockingCollection<T>[]
  nameWithType: BlockingCollection<T>[]
  fullName: System.Collections.Concurrent.BlockingCollection<T>[]
  spec.csharp:
  - uid: System.Collections.Concurrent.BlockingCollection`1
    name: BlockingCollection
    nameWithType: BlockingCollection
    fullName: BlockingCollection<T>[]
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: AddToAny(BlockingCollection<T>[],T,CancellationToken)
  nameWithType: BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T,CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: BoundedCapacity
  nameWithType: BlockingCollection<T>.BoundedCapacity
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BoundedCapacity
- uid: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: CompleteAdding()
  nameWithType: BlockingCollection<T>.CompleteAdding()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CompleteAdding()
- uid: System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: BlockingCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CopyTo(T[],Int32)
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Concurrent.BlockingCollection`1.Count
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Count
  nameWithType: BlockingCollection<T>.Count
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Count
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Dispose()
  nameWithType: BlockingCollection<T>.Dispose()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose()
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: BlockingCollection<T>.Dispose(Boolean)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: GetConsumingEnumerable()
  nameWithType: BlockingCollection<T>.GetConsumingEnumerable()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable()
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: GetConsumingEnumerable(CancellationToken)
  nameWithType: BlockingCollection<T>.GetConsumingEnumerable(CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable(CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: IsAddingCompleted
  nameWithType: BlockingCollection<T>.IsAddingCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsAddingCompleted
- uid: System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: IsCompleted
  nameWithType: BlockingCollection<T>.IsCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsCompleted
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: BlockingCollection<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IEnumerable<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: BlockingCollection<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: BlockingCollection<T>.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.BlockingCollection<T>.ICollection.IsSynchronized
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: BlockingCollection<T>.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.BlockingCollection<T>.ICollection.SyncRoot
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: BlockingCollection<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Concurrent.BlockingCollection`1.Take
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Take()
  nameWithType: BlockingCollection<T>.Take()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take()
- uid: System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Take(CancellationToken)
  nameWithType: BlockingCollection<T>.Take(CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take(CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TakeFromAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TakeFromAny(BlockingCollection<T>[],T,CancellationToken)
  nameWithType: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T,CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.ToArray
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: ToArray()
  nameWithType: BlockingCollection<T>.ToArray()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.ToArray()
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAdd(T)
  nameWithType: BlockingCollection<T>.TryAdd(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAdd(T,Int32)
  nameWithType: BlockingCollection<T>.TryAdd(T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T,Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAdd(T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryAdd(T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAdd(T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryAdd(T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T,Int32,CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAddToAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAddToAny(BlockingCollection<T>[],T,Int32)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAddToAny(BlockingCollection<T>[],T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAddToAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32,CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTake(T)
  nameWithType: BlockingCollection<T>.TryTake(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTake(T,Int32)
  nameWithType: BlockingCollection<T>.TryTake(T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T,Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTake(T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryTake(T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T,TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTake(T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryTake(T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T,Int32,CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTakeFromAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTakeFromAny(BlockingCollection<T>[],T,Int32)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTakeFromAny(BlockingCollection<T>[],T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTakeFromAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32,CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: BlockingCollection<T>
  nameWithType: BlockingCollection<T>.BlockingCollection<T>
- uid: System.Collections.Concurrent.BlockingCollection`1.Add*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Add
  nameWithType: BlockingCollection<T>.Add
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: AddToAny
  nameWithType: BlockingCollection<T>.AddToAny
- uid: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: BoundedCapacity
  nameWithType: BlockingCollection<T>.BoundedCapacity
- uid: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: CompleteAdding
  nameWithType: BlockingCollection<T>.CompleteAdding
- uid: System.Collections.Concurrent.BlockingCollection`1.CopyTo*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: CopyTo
  nameWithType: BlockingCollection<T>.CopyTo
- uid: System.Collections.Concurrent.BlockingCollection`1.Count*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Count
  nameWithType: BlockingCollection<T>.Count
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Dispose
  nameWithType: BlockingCollection<T>.Dispose
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: GetConsumingEnumerable
  nameWithType: BlockingCollection<T>.GetConsumingEnumerable
- uid: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: IsAddingCompleted
  nameWithType: BlockingCollection<T>.IsAddingCompleted
- uid: System.Collections.Concurrent.BlockingCollection`1.IsCompleted*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: IsCompleted
  nameWithType: BlockingCollection<T>.IsCompleted
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType: BlockingCollection<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: BlockingCollection<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: BlockingCollection<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: BlockingCollection<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: BlockingCollection<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Concurrent.BlockingCollection`1.Take*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Take
  nameWithType: BlockingCollection<T>.Take
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TakeFromAny
  nameWithType: BlockingCollection<T>.TakeFromAny
- uid: System.Collections.Concurrent.BlockingCollection`1.ToArray*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: ToArray
  nameWithType: BlockingCollection<T>.ToArray
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAdd
  nameWithType: BlockingCollection<T>.TryAdd
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAddToAny
  nameWithType: BlockingCollection<T>.TryAddToAny
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTake
  nameWithType: BlockingCollection<T>.TryTake
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTakeFromAny
  nameWithType: BlockingCollection<T>.TryTakeFromAny
