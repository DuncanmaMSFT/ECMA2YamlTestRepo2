### YamlMime:ManagedReference
items:
- uid: System.Collections.Concurrent.BlockingCollection`1
  id: BlockingCollection`1
  children:
  - System.Collections.Concurrent.BlockingCollection`1.#ctor
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  - System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  - System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  - System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  - System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.Count
  - System.Collections.Concurrent.BlockingCollection`1.Dispose
  - System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  - System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  - System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  - System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Concurrent.BlockingCollection`1.Take
  - System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.ToArray
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  langs:
  - csharp
  name: BlockingCollection<T>
  nameWithType: BlockingCollection<T>
  fullName: System.Collections.Concurrent.BlockingCollection<T>
  type: Class
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}, Type = {m_collection}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Concurrent.SystemThreadingCollections_BlockingCollectionDebugView`1))]

      [System.Runtime.InteropServices.ComVisible(false)]

      public class BlockingCollection<T> : IDisposable, System.Collections.Generic.IEnumerable<T>, System.Collections.ICollection
    typeParameters:
    - id: T
      description: To be added.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.ICollection
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: BlockingCollection()
  nameWithType: BlockingCollection<T>.BlockingCollection()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public BlockingCollection ();
    parameters: []
  overload: System.Collections.Concurrent.BlockingCollection`1.#ctor*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  id: '#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: BlockingCollection(IProducerConsumerCollection<T>)
  nameWithType: BlockingCollection<T>.BlockingCollection(IProducerConsumerCollection<T>)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(IProducerConsumerCollection<T>)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public BlockingCollection (System.Collections.Concurrent.IProducerConsumerCollection<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Concurrent.IProducerConsumerCollection`1
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.#ctor*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: BlockingCollection(Int32)
  nameWithType: BlockingCollection<T>.BlockingCollection(Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public BlockingCollection (int boundedCapacity);
    parameters:
    - id: boundedCapacity
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.#ctor*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  id: '#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: BlockingCollection(IProducerConsumerCollection<T>,Int32)
  nameWithType: BlockingCollection<T>.BlockingCollection(IProducerConsumerCollection<T>,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(IProducerConsumerCollection<T>,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public BlockingCollection (System.Collections.Concurrent.IProducerConsumerCollection<T> collection, int boundedCapacity);
    parameters:
    - id: collection
      type: System.Collections.Concurrent.IProducerConsumerCollection`1
      description: To be added.
    - id: boundedCapacity
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.#ctor*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: Add(T)
  nameWithType: BlockingCollection<T>.Add(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public void Add (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.Add*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  id: Add(`0,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: Add(T,CancellationToken)
  nameWithType: BlockingCollection<T>.Add(T,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public void Add (T item, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.Add*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  id: AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: AddToAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int AddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: To be added.
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.AddToAny*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  id: AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: AddToAny(BlockingCollection<T>[],T,CancellationToken)
  nameWithType: BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int AddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: To be added.
    - id: item
      type: T
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.AddToAny*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  id: BoundedCapacity
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: BoundedCapacity
  nameWithType: BlockingCollection<T>.BoundedCapacity
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BoundedCapacity
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public int BoundedCapacity { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  id: CompleteAdding
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: CompleteAdding()
  nameWithType: BlockingCollection<T>.CompleteAdding()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CompleteAdding()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public void CompleteAdding ();
    parameters: []
  overload: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: BlockingCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.CopyTo*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.Count
  id: Count
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: Count
  nameWithType: BlockingCollection<T>.Count
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.Count*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose
  id: Dispose
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: Dispose()
  nameWithType: BlockingCollection<T>.Dispose()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Collections.Concurrent.BlockingCollection`1.Dispose*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: BlockingCollection<T>.Dispose(Boolean)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.Dispose*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  id: GetConsumingEnumerable
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: GetConsumingEnumerable()
  nameWithType: BlockingCollection<T>.GetConsumingEnumerable()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public System.Collections.Generic.IEnumerable<T> GetConsumingEnumerable ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  id: GetConsumingEnumerable(System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: GetConsumingEnumerable(CancellationToken)
  nameWithType: BlockingCollection<T>.GetConsumingEnumerable(CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable(CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public System.Collections.Generic.IEnumerable<T> GetConsumingEnumerable (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  id: IsAddingCompleted
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: IsAddingCompleted
  nameWithType: BlockingCollection<T>.IsAddingCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsAddingCompleted
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool IsAddingCompleted { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  id: IsCompleted
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: IsCompleted
  nameWithType: BlockingCollection<T>.IsCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsCompleted
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool IsCompleted { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.IsCompleted*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: System.Collections.Generic.IEnumerable()
  nameWithType: BlockingCollection<T>.System.Collections.Generic.IEnumerable()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.Generic.IEnumerable()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: BlockingCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: BlockingCollection<T>.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: BlockingCollection<T>.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: BlockingCollection<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.Take
  id: Take
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: Take()
  nameWithType: BlockingCollection<T>.Take()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public T Take ();
    parameters: []
    return:
      type: T
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.Take*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  id: Take(System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: Take(CancellationToken)
  nameWithType: BlockingCollection<T>.Take(CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take(CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public T Take (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.Take*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  id: TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TakeFromAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: To be added.
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  id: TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TakeFromAny(BlockingCollection<T>[],T,CancellationToken)
  nameWithType: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: To be added.
    - id: item
      type: T
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: ToArray()
  nameWithType: BlockingCollection<T>.ToArray()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.ToArray()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public T[] ToArray ();
    parameters: []
    return:
      type: T[]
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.ToArray*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  id: TryAdd(`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAdd(T)
  nameWithType: BlockingCollection<T>.TryAdd(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryAdd (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAdd*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  id: TryAdd(`0,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAdd(T,Int32)
  nameWithType: BlockingCollection<T>.TryAdd(T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryAdd (T item, int millisecondsTimeout);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: millisecondsTimeout
      type: System.Int32
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAdd*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  id: TryAdd(`0,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAdd(T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryAdd(T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryAdd (T item, TimeSpan timeout);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: timeout
      type: System.TimeSpan
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAdd*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  id: TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAdd(T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryAdd(T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T,Int32,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryAdd (T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: millisecondsTimeout
      type: System.Int32
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAdd*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAddToAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryAddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: To be added.
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAddToAny(BlockingCollection<T>[],T,Int32)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryAddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, int millisecondsTimeout);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: To be added.
    - id: item
      type: T
      description: To be added.
    - id: millisecondsTimeout
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAddToAny(BlockingCollection<T>[],T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryAddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, TimeSpan timeout);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: To be added.
    - id: item
      type: T
      description: To be added.
    - id: timeout
      type: System.TimeSpan
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryAddToAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryAddToAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: To be added.
    - id: item
      type: T
      description: To be added.
    - id: millisecondsTimeout
      type: System.Int32
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  id: TryTake(`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTake(T)
  nameWithType: BlockingCollection<T>.TryTake(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryTake (out T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTake*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  id: TryTake(`0@,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTake(T,Int32)
  nameWithType: BlockingCollection<T>.TryTake(T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryTake (out T item, int millisecondsTimeout);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: millisecondsTimeout
      type: System.Int32
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTake*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  id: TryTake(`0@,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTake(T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryTake(T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryTake (out T item, TimeSpan timeout);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: timeout
      type: System.TimeSpan
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTake*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  id: TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTake(T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryTake(T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T,Int32,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public bool TryTake (out T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: millisecondsTimeout
      type: System.Int32
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTake*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTakeFromAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryTakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: To be added.
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTakeFromAny(BlockingCollection<T>[],T,Int32)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryTakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, int millisecondsTimeout);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: To be added.
    - id: item
      type: T
      description: To be added.
    - id: millisecondsTimeout
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTakeFromAny(BlockingCollection<T>[],T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryTakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, TimeSpan timeout);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: To be added.
    - id: item
      type: T
      description: To be added.
    - id: timeout
      type: System.TimeSpan
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny*
  exceptions: []
  version:
  - netframework-40
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  name: TryTakeFromAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Concurrent
  syntax:
    content: public static int TryTakeFromAny (System.Collections.Concurrent.BlockingCollection<T>[] collections, out T item, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection{T}[]
      description: To be added.
    - id: item
      type: T
      description: To be added.
    - id: millisecondsTimeout
      type: System.Int32
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny*
  exceptions: []
  version:
  - netframework-40
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: BlockingCollection()
  nameWithType: BlockingCollection<T>.BlockingCollection()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection()
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: BlockingCollection(IProducerConsumerCollection<T>)
  nameWithType: BlockingCollection<T>.BlockingCollection(IProducerConsumerCollection<T>)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(IProducerConsumerCollection<T>)
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: IProducerConsumerCollection<T>
  nameWithType: IProducerConsumerCollection<T>
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: BlockingCollection(Int32)
  nameWithType: BlockingCollection<T>.BlockingCollection(Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: BlockingCollection(IProducerConsumerCollection<T>,Int32)
  nameWithType: BlockingCollection<T>.BlockingCollection(IProducerConsumerCollection<T>,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(IProducerConsumerCollection<T>,Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Add(T)
  nameWithType: BlockingCollection<T>.Add(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Add(T,CancellationToken)
  nameWithType: BlockingCollection<T>.Add(T,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T,CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: AddToAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T)
- uid: System.Collections.Concurrent.BlockingCollection{T}[]
  parent: System.Collections.Concurrent
  isExternal: false
  name: BlockingCollection<T>[]
  nameWithType: BlockingCollection<T>[]
  fullName: System.Collections.Concurrent.BlockingCollection<T>[]
  spec.csharp:
  - uid: System.Collections.Concurrent.BlockingCollection`1
    name: BlockingCollection
    nameWithType: BlockingCollection
    fullName: BlockingCollection<T>[]
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: AddToAny(BlockingCollection<T>[],T,CancellationToken)
  nameWithType: BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(BlockingCollection<T>[],T,CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: BoundedCapacity
  nameWithType: BlockingCollection<T>.BoundedCapacity
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BoundedCapacity
- uid: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: CompleteAdding()
  nameWithType: BlockingCollection<T>.CompleteAdding()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CompleteAdding()
- uid: System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: BlockingCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CopyTo(T[],Int32)
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Concurrent.BlockingCollection`1.Count
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Count
  nameWithType: BlockingCollection<T>.Count
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Count
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Dispose()
  nameWithType: BlockingCollection<T>.Dispose()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose()
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: BlockingCollection<T>.Dispose(Boolean)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: GetConsumingEnumerable()
  nameWithType: BlockingCollection<T>.GetConsumingEnumerable()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable()
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: GetConsumingEnumerable(CancellationToken)
  nameWithType: BlockingCollection<T>.GetConsumingEnumerable(CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable(CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: IsAddingCompleted
  nameWithType: BlockingCollection<T>.IsAddingCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsAddingCompleted
- uid: System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: IsCompleted
  nameWithType: BlockingCollection<T>.IsCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsCompleted
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable()
  nameWithType: BlockingCollection<T>.System.Collections.Generic.IEnumerable()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.Generic.IEnumerable()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: BlockingCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: BlockingCollection<T>.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: BlockingCollection<T>.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: BlockingCollection<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Concurrent.BlockingCollection`1.Take
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Take()
  nameWithType: BlockingCollection<T>.Take()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take()
- uid: System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Take(CancellationToken)
  nameWithType: BlockingCollection<T>.Take(CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take(CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TakeFromAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TakeFromAny(BlockingCollection<T>[],T,CancellationToken)
  nameWithType: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[],T,CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.ToArray
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: ToArray()
  nameWithType: BlockingCollection<T>.ToArray()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.ToArray()
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAdd(T)
  nameWithType: BlockingCollection<T>.TryAdd(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAdd(T,Int32)
  nameWithType: BlockingCollection<T>.TryAdd(T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T,Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAdd(T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryAdd(T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAdd(T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryAdd(T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T,Int32,CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAddToAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAddToAny(BlockingCollection<T>[],T,Int32)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAddToAny(BlockingCollection<T>[],T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAddToAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[],T,Int32,CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTake(T)
  nameWithType: BlockingCollection<T>.TryTake(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTake(T,Int32)
  nameWithType: BlockingCollection<T>.TryTake(T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T,Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTake(T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryTake(T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T,TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTake(T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryTake(T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(T,Int32,CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTakeFromAny(BlockingCollection<T>[],T)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTakeFromAny(BlockingCollection<T>[],T,Int32)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTakeFromAny(BlockingCollection<T>[],T,TimeSpan)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTakeFromAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32,CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[],T,Int32,CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: BlockingCollection<T>
  nameWithType: BlockingCollection<T>.BlockingCollection<T>
- uid: System.Collections.Concurrent.BlockingCollection`1.Add*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Add
  nameWithType: BlockingCollection<T>.Add
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: AddToAny
  nameWithType: BlockingCollection<T>.AddToAny
- uid: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: BoundedCapacity
  nameWithType: BlockingCollection<T>.BoundedCapacity
- uid: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: CompleteAdding
  nameWithType: BlockingCollection<T>.CompleteAdding
- uid: System.Collections.Concurrent.BlockingCollection`1.CopyTo*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: CopyTo
  nameWithType: BlockingCollection<T>.CopyTo
- uid: System.Collections.Concurrent.BlockingCollection`1.Count*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Count
  nameWithType: BlockingCollection<T>.Count
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Dispose
  nameWithType: BlockingCollection<T>.Dispose
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: GetConsumingEnumerable
  nameWithType: BlockingCollection<T>.GetConsumingEnumerable
- uid: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: IsAddingCompleted
  nameWithType: BlockingCollection<T>.IsAddingCompleted
- uid: System.Collections.Concurrent.BlockingCollection`1.IsCompleted*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: IsCompleted
  nameWithType: BlockingCollection<T>.IsCompleted
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType: BlockingCollection<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: BlockingCollection<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: BlockingCollection<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: BlockingCollection<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: BlockingCollection<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Concurrent.BlockingCollection`1.Take*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: Take
  nameWithType: BlockingCollection<T>.Take
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TakeFromAny
  nameWithType: BlockingCollection<T>.TakeFromAny
- uid: System.Collections.Concurrent.BlockingCollection`1.ToArray*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: ToArray
  nameWithType: BlockingCollection<T>.ToArray
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAdd
  nameWithType: BlockingCollection<T>.TryAdd
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryAddToAny
  nameWithType: BlockingCollection<T>.TryAddToAny
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTake
  nameWithType: BlockingCollection<T>.TryTake
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny*
  parent: System.Collections.Concurrent.BlockingCollection`1
  isExternal: false
  name: TryTakeFromAny
  nameWithType: BlockingCollection<T>.TryTakeFromAny
