### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.ServiceContractAttribute
  id: ServiceContractAttribute
  children:
  - System.ServiceModel.ServiceContractAttribute.#ctor
  - System.ServiceModel.ServiceContractAttribute.CallbackContract
  - System.ServiceModel.ServiceContractAttribute.ConfigurationName
  - System.ServiceModel.ServiceContractAttribute.HasProtectionLevel
  - System.ServiceModel.ServiceContractAttribute.Name
  - System.ServiceModel.ServiceContractAttribute.Namespace
  - System.ServiceModel.ServiceContractAttribute.ProtectionLevel
  - System.ServiceModel.ServiceContractAttribute.SessionMode
  langs:
  - csharp
  name: ServiceContractAttribute
  nameWithType: ServiceContractAttribute
  fullName: System.ServiceModel.ServiceContractAttribute
  type: Class
  summary: Indicates that an interface or a class defines a service contract in a [!INCLUDE[indigo1](~/add/includes/indigo1-md.md)] application.
  remarks: "Use the ServiceContractAttribute attribute on an interface (or class) to define a service contract. Then use the <xref:System.ServiceModel.OperationContractAttribute> attribute on one or more of the class (or interface) methods to define the contract's service operations. When the service contract is implemented and combined with a [Bindings](../Topic/Windows%20Communication%20Foundation%20Bindings.md) and an <xref:System.ServiceModel.EndpointAddress> object, the service contract is exposed for use by clients. For an overview of the process using simple examples, see [Getting Started Tutorial](../Topic/Getting%20Started%20Tutorial1.md). For more information about creating service contracts, see [Designing and Implementing Services](../Topic/Designing%20and%20Implementing%20Services.md).  \n  \n The information expressed by a ServiceContractAttribute and its interface is loosely related to the Web Services Description Language (WSDL) `<portType>` element. A service contract is used on the service side to specify what the serviceâ€™s endpoint exposes to callers. It is also used on the client side to specify the contract of the endpoint with which the client communicates and, in the case of duplex contracts, to specify the callback contract (using the <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> property) that the client must implement in order to participate in a duplex conversation.  \n  \n> [!NOTE]\n>  An interface or class that is decorated with ServiceContractAttribute must also have at least one method marked with the <xref:System.ServiceModel.OperationContractAttribute> attribute to expose any functionality. See the Examples section for a code example of the simplest use of the two attributes to define and implement a service.  \n  \n Use the ServiceContractAttribute properties to modify the service contract.  \n  \n-   The <xref:System.ServiceModel.ServiceContractAttribute.ConfigurationName%2A> property specifies the name of the service element in the configuration file to use.  \n  \n-   The <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> and <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> properties control the name and namespace of the contract in the WSDL `<portType>` element.  \n  \n-   The <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A> property specifies whether the contract requires a binding that supports sessions.  \n  \n-   The <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A> property specifies the return contract in a two-way (duplex) conversation.  \n  \n-   The <xref:System.ServiceModel.ServiceContractAttribute.HasProtectionLevel%2A> and <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> properties indicate whether all messages supporting the contract have a explicit <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> value, and if so, what that level is.  \n  \n Services implement service contracts, which represent the data exchange that a service type supports. A service class can implement a service contract (by implementing an interface marked with ServiceContractAttribute that has methods marked with <xref:System.ServiceModel.OperationContractAttribute>) or it can be marked with the ServiceContractAttribute and apply the <xref:System.ServiceModel.OperationContractAttribute> attribute to its own methods. (If a class implements an interface marked with ServiceContractAttribute, it cannot be itself marked with ServiceContractAttribute.) Methods on service types that are marked with the <xref:System.ServiceModel.OperationContractAttribute> are treated as part of a default service contract specified by the service type itself. For details about service operations, see <xref:System.ServiceModel.OperationContractAttribute>.  \n  \n By default, the <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> and <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> properties are the name of the contract type and `http://tempuri.org`, respectively, and <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A> is <xref:System.Net.Security.ProtectionLevel?displayProperty=fullName>. It is recommended that service contracts explicitly set their names, namespaces, and protection levels using these properties. Doing so accomplishes two goals. First, it builds a contract that is not directly connected to the managed type information, enabling you to refactor your managed code and namespaces without breaking the contract as it is expressed in WSDL. Second, explicitly requiring a certain level of protection on the contract itself enables the runtime to validate whether the binding configuration supports that level of security, preventing poor configuration from exposing sensitive information. For more information about protection levels, see [Understanding Protection Level](../Topic/Understanding%20Protection%20Level.md).  \n  \n To expose a service for use by client applications, create a host application to register your service endpoint with [!INCLUDE[indigo1](~/add/includes/indigo1-md.md)]. You can host [!INCLUDE[indigo2](~/add/includes/indigo2-md.md)] services using Windows Activation Services (WAS), in console applications, Windows Service applications, ASP.NET applications, Windows Forms applications, or any other kind of application domain.  \n  \n Hosting in the WAS is very similar to creating an ASP.NET application. For details, see [How to: Host a WCF Service in IIS](../Topic/How%20to:%20Host%20a%20WCF%20Service%20in%20IIS.md).  \n  \n Clients either use the service contract interface (the interface marked with ServiceContractAttribute) to create a channel to the service or they use the client objects (which combine the type information of the service contract interface with the <xref:System.ServiceModel.ClientBase%601> class) to communicate with your service. For details on client channels to services, see the <xref:System.ServiceModel.ChannelFactory%601> class and [WCF Client Overview](../Topic/WCF%20Client%20Overview.md).  \n  \n Using a ServiceContractAttribute class or interface to inherit from another ServiceContractAttribute class or interface extends the parent contract. For example, if an `IChildContract` interface is marked with ServiceContractAttribute and inherited from another service contract interface, `IParentContract`, the `IChildContract` service contract contains the methods of both `IParentContract` and `IChildContract`. Extending contracts (whether on classes or interfaces) is very similar to extending managed classes and interfaces.  \n  \n The most flexible approach to creating services is to define service contract interfaces first and then have your service class implement that interface. (This is also the simplest way to build your services if you must implement service contracts that have been defined by others.) Building services directly by marking a class with ServiceContractAttribute and its methods with <xref:System.ServiceModel.OperationContractAttribute> works when the service exposes only one contract (but that contract can be exposed by more than one endpoint).  \n  \n Use the <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A>property to indicate another service contract that, when bound together with the original service contract, define a message exchange that can flow in two ways independently. For details, see <xref:System.ServiceModel.ServiceContractAttribute.CallbackContract%2A>."
  example:
  - "The following code example shows how to apply the ServiceContractAttribute to an interface to define a service contract with one service method, indicated by the <xref:System.ServiceModel.OperationContractAttribute>. In this case, the protection level required of bindings for all messages is <xref:System.Net.Security.ProtectionLevel?displayProperty=fullName>.  \n  \n The code example then implements that contract on the `SampleService` class.  \n  \n [!code-vb[ServiceContractAttribute#1](~/add/codesnippet/visualbasic/servicecontractattribute.client/services.vb#1)]\n [!code-cs[ServiceContractAttribute#1](~/add/codesnippet/csharp/servicecontractattribute.client/services.cs#1)]  \n  \n The following code example shows a simple configuration file for the preceding service that creates one endpoint.  \n  \n [!CODE [ServiceContractAttribute#2](../CodeSnippet/VS_Snippets_CFX/servicecontractattribute#2)]  \n  \n The following code example shows a simple client that invokes the preceding `SampleService`.  \n  \n [!code-cs[ServiceContractAttribute#3](~/add/codesnippet/csharp/servicecontractattribute.client/client.cs#3)]\n [!code-vb[ServiceContractAttribute#3](~/add/codesnippet/visualbasic/servicecontractattribute.client/client.vb#3)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple=false, Inherited=false)]

      public sealed class ServiceContractAttribute : Attribute
  inheritance:
  - System.Object
  - System.Attribute
  implements: []
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.GetHashCode
  - System.Attribute.IsDefaultAttribute
  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.Match(System.Object)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Attribute.TypeId
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ServiceModel\ServiceContractAttribute.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ServiceModel/ServiceContractAttribute.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ServiceModel.ServiceContractAttribute.#ctor
  id: '#ctor'
  parent: System.ServiceModel.ServiceContractAttribute
  langs:
  - csharp
  name: ServiceContractAttribute()
  nameWithType: ServiceContractAttribute.ServiceContractAttribute()
  fullName: System.ServiceModel.ServiceContractAttribute.ServiceContractAttribute()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: Initializes a new instance of the <xref href="System.ServiceModel.ServiceContractAttribute"></xref> class.
  remarks: The constructor creates an instance of the attribute with no session requirements, no callback contract, and the default name and namespace.
  syntax:
    content: public ServiceContractAttribute ();
    parameters: []
  overload: System.ServiceModel.ServiceContractAttribute.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ServiceModel\ServiceContractAttribute.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ServiceModel/ServiceContractAttribute.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ServiceModel.ServiceContractAttribute.CallbackContract
  id: CallbackContract
  parent: System.ServiceModel.ServiceContractAttribute
  langs:
  - csharp
  name: CallbackContract
  nameWithType: ServiceContractAttribute.CallbackContract
  fullName: System.ServiceModel.ServiceContractAttribute.CallbackContract
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: Gets or sets the type of callback contract when the contract is a duplex contract.
  remarks: "Specify an interface in the CallbackContract property that represents the required opposite contract in a two-way (or duplex) message exchange. This enables client applications to listen for inbound operation calls that the server-side service application can send independently of client activity. Callback contracts that have one-way operations represent calls from the service that the client can handle.  \n  \n> [!NOTE]\n>  The <xref:System.ServiceModel.ServiceContractAttribute> attribute is ignored on callback contracts. To configure runtime behavior of callback objects, use the <xref:System.ServiceModel.CallbackBehaviorAttribute?displayProperty=fullName>."
  example:
  - "The following code example shows a service that specifies a callback contract, which indicates that a service of type `IDuplexHello` must have a correspondent that implements a service of type `IHelloCallbackContract`. In addition, `IHelloCallbackContract` implements a one-way callback method, enabling the service to call the client without waiting for a reply to support a distributed, event-driven client.  \n  \n [!code-cs[SCA.CallbackContract#1](~/add/codesnippet/csharp/sca.callbackcontract.client/services.cs#1)]\n [!code-vb[SCA.CallbackContract#1](~/add/codesnippet/visualbasic/sca.callbackcontract.client/services.vb#1)]"
  syntax:
    content: public Type CallbackContract { get; set; }
    return:
      type: System.Type
      description: A <xref href="System.Type"></xref> that indicates the callback contract. The default is `null`.
  overload: System.ServiceModel.ServiceContractAttribute.CallbackContract*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ServiceModel\ServiceContractAttribute.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ServiceModel/ServiceContractAttribute.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ServiceModel.ServiceContractAttribute.ConfigurationName
  id: ConfigurationName
  parent: System.ServiceModel.ServiceContractAttribute
  langs:
  - csharp
  name: ConfigurationName
  nameWithType: ServiceContractAttribute.ConfigurationName
  fullName: System.ServiceModel.ServiceContractAttribute.ConfigurationName
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: Gets or sets the name used to locate the service in an application configuration file.
  remarks: To set the value by which the configuration system locates a contract value in the configuration file, see <xref:System.ServiceModel.ServiceBehaviorAttribute.ConfigurationName%2A>.
  syntax:
    content: public string ConfigurationName { get; set; }
    return:
      type: System.String
      description: The name used to locate the service element in an application configuration file. The default is the name of the service implementation class.
  overload: System.ServiceModel.ServiceContractAttribute.ConfigurationName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The value is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value is an empty string.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ServiceModel\ServiceContractAttribute.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ServiceModel/ServiceContractAttribute.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ServiceModel.ServiceContractAttribute.HasProtectionLevel
  id: HasProtectionLevel
  parent: System.ServiceModel.ServiceContractAttribute
  langs:
  - csharp
  name: HasProtectionLevel
  nameWithType: ServiceContractAttribute.HasProtectionLevel
  fullName: System.ServiceModel.ServiceContractAttribute.HasProtectionLevel
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: Gets a value that indicates whether the member has a protection level assigned.
  remarks: The HasProtectionLevel property indicates whether a protection level value other than `false` has been set for the contract.
  syntax:
    content: public bool HasProtectionLevel { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A"></xref> property is not <xref href="System.Net.Security.ProtectionLevel"></xref>; otherwise, `false`. The default is `false`.'
  overload: System.ServiceModel.ServiceContractAttribute.HasProtectionLevel*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ServiceModel\ServiceContractAttribute.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ServiceModel/ServiceContractAttribute.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ServiceModel.ServiceContractAttribute.Name
  id: Name
  parent: System.ServiceModel.ServiceContractAttribute
  langs:
  - csharp
  name: Name
  nameWithType: ServiceContractAttribute.Name
  fullName: System.ServiceModel.ServiceContractAttribute.Name
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: Gets or sets the name for the `<portType>` element in Web Services Description Language (WSDL).
  remarks: Use the Name and the <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> properties to control the name and namespace of the `<portType>` element in WSDL.
  example:
  - "The following code example shows how to use the Name and <xref:System.ServiceModel.ServiceContractAttribute.Namespace%2A> properties of the <xref:System.ServiceModel.ServiceContractAttribute> to set the corresponding values in WSDL.  \n  \n [!code-cs[SCA.Names#1](~/add/codesnippet/csharp/sca.names.client/services.cs#1)]\n [!code-vb[SCA.Names#1](~/add/codesnippet/visualbasic/sca.names.client/services.vb#1)]  \n  \n The following code example shows an [!INCLUDE[indigo1](~/add/includes/indigo1-md.md)] client for the preceding service that imported WSDL using the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../Topic/ServiceModel%20Metadata%20Utility%20Tool%20\\(Svcutil.exe\\).md). This client uses a `HelloWorldProxy` client rather than a `SampleServiceProxy` client (as is the case with the sample in the Example section of <xref:System.ServiceModel.ServiceContractAttribute>).  \n  \n [!code-vb[SCA.Names#3](~/add/codesnippet/visualbasic/sca.names.client/client.vb#3)]\n [!code-cs[SCA.Names#3](~/add/codesnippet/csharp/sca.names.client/client.cs#3)]"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: The default value is the name of the class or interface to which the <xref href="System.ServiceModel.ServiceContractAttribute"></xref> is applied.
  overload: System.ServiceModel.ServiceContractAttribute.Name*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The value is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value is an empty string.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ServiceModel\ServiceContractAttribute.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ServiceModel/ServiceContractAttribute.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ServiceModel.ServiceContractAttribute.Namespace
  id: Namespace
  parent: System.ServiceModel.ServiceContractAttribute
  langs:
  - csharp
  name: Namespace
  nameWithType: ServiceContractAttribute.Namespace
  fullName: System.ServiceModel.ServiceContractAttribute.Namespace
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: Gets or sets the namespace of the `<portType>` element in Web Services Description Language (WSDL).
  remarks: ''
  example:
  - "The following code example shows how to use the <xref:System.ServiceModel.ServiceContractAttribute.Name%2A> and Namespace properties of the <xref:System.ServiceModel.ServiceContractAttribute> to set the corresponding values in WSDL.  \n  \n [!code-cs[SCA.Names#1](~/add/codesnippet/csharp/sca.names.client/services.cs#1)]\n [!code-vb[SCA.Names#1](~/add/codesnippet/visualbasic/sca.names.client/services.vb#1)]  \n  \n The following code example shows an [!INCLUDE[indigo1](~/add/includes/indigo1-md.md)] client for the preceding service that imported WSDL using the [ServiceModel Metadata Utility Tool (Svcutil.exe)](../Topic/ServiceModel%20Metadata%20Utility%20Tool%20\\(Svcutil.exe\\).md). This client uses a `HelloWorldClient` client rather than a `SampleServiceClient` client (as is the case with the sample in the Example section of <xref:System.ServiceModel.ServiceContractAttribute>).  \n  \n [!code-vb[SCA.Names#3](~/add/codesnippet/visualbasic/sca.names.client/client.vb#3)]\n [!code-cs[SCA.Names#3](~/add/codesnippet/csharp/sca.names.client/client.cs#3)]"
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: The WSDL namespace of the `<portType>` element. The default value is "http://tempuri.org".
  overload: System.ServiceModel.ServiceContractAttribute.Namespace*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ServiceModel\ServiceContractAttribute.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ServiceModel/ServiceContractAttribute.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ServiceModel.ServiceContractAttribute.ProtectionLevel
  id: ProtectionLevel
  parent: System.ServiceModel.ServiceContractAttribute
  langs:
  - csharp
  name: ProtectionLevel
  nameWithType: ServiceContractAttribute.ProtectionLevel
  fullName: System.ServiceModel.ServiceContractAttribute.ProtectionLevel
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: Specifies whether the binding for the contract must support the value of the ProtectionLevel property.
  remarks: "Use the ProtectionLevel property to specify the degree to which the contract binding requires encryption, digital signatures, or both for endpoints that expose the contract. The value set here is the default value for all operation messages including faults.  \n  \n It is important to remember that the protection behavior at runtime is the combination of the protection-level values set on the following properties. These properties have a hierarchical structure. Setting the outermost value establishes the default setting for all narrower scopes unless a different value for a narrower scope is explicitly set. In this case, the outer value remains the default for all narrower scopes with the exception of that specifically set.  \n  \n For example, if ProtectionLevel is set to <xref:System.Net.Security.ProtectionLevel?displayProperty=fullName> and no other narrower scopes have protection level settings, all messages in an operation contract are encrypted and signed. If, however, one of those operations has the <xref:System.ServiceModel.OperationContractAttribute> set to <xref:System.Net.Security.ProtectionLevel?displayProperty=fullName>, then the messages for that operation are signed but all other messages in the contract are encrypted and signed.  \n  \n For details about protection levels and their assumptions and scopes, see [Understanding Protection Level](../Topic/Understanding%20Protection%20Level.md).  \n  \n The scopes at which these values are set are:  \n  \n ProtectionLevel  \n  \n <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=fullName>  \n  \n <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=fullName>  \n  \n <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=fullName>  \n  \n The <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=fullName> property on <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=fullName>.  \n  \n The <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=fullName> property on <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=fullName>.  \n  \n When there is no protection level explicitly specified on the contract and the underlying binding supports security (whether at the transport or message level), the effective protection level for the whole contract is <xref:System.Net.Security.ProtectionLevel?displayProperty=fullName>. If the binding does not support security (such as <xref:System.ServiceModel.BasicHttpBinding>), the effective <xref:System.Net.Security.ProtectionLevel?displayProperty=fullName> is <xref:System.Net.Security.ProtectionLevel?displayProperty=fullName> for the whole contract. The result is that depending upon the endpoint binding, clients can require different message or transport level security protection even when the contract specifies <xref:System.Net.Security.ProtectionLevel?displayProperty=fullName>."
  syntax:
    content: public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }
    return:
      type: System.Net.Security.ProtectionLevel
      description: One of the <xref href="System.Net.Security.ProtectionLevel"></xref> values. The default is <xref href="System.Net.Security.ProtectionLevel"></xref>.
  overload: System.ServiceModel.ServiceContractAttribute.ProtectionLevel*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value is not one of the <xref href="System.Net.Security.ProtectionLevel"></xref> values.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ServiceModel\ServiceContractAttribute.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ServiceModel/ServiceContractAttribute.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ServiceModel.ServiceContractAttribute.SessionMode
  id: SessionMode
  parent: System.ServiceModel.ServiceContractAttribute
  langs:
  - csharp
  name: SessionMode
  nameWithType: ServiceContractAttribute.SessionMode
  fullName: System.ServiceModel.ServiceContractAttribute.SessionMode
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: Gets or sets whether sessions are allowed, not allowed or required.
  remarks: "Use the SessionMode property to require bindings that support sessions between endpoints. A session is a way of correlating a set of messages exchanged between two or more endpoints. If your service supports channel sessions, you can then use the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> property to specify the relationship between instances your service contract implementation and the channel session. If a binding does not support sessions, an exception is thrown.  \n  \n For example, if the SessionMode property is set to <xref:System.ServiceModel.SessionMode?displayProperty=fullName> and the <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A> property is set to <xref:System.ServiceModel.InstanceContextMode>, clients can use the same connection to make repeated calls to the same service object.  \n  \n For more information about sessions and service instances, see [Using Sessions](../Topic/Using%20Sessions.md) and [Sessions, Instancing, and Concurrency](../Topic/Sessions,%20Instancing,%20and%20Concurrency.md).  \n  \n> [!NOTE]\n>  A channel that supports sessions supports the default association of a service instance with a particular session. However, different session implementations support different features in addition to session-based instancing control. [!INCLUDE[indigo2](~/add/includes/indigo2-md.md)] provides four types of sessions that you can use to provide sessionful application behavior; each type of session provides additional behavior specific to the type of session it is.  \n  \n1.  The <xref:System.ServiceModel.Channels.SecurityBindingElement?displayProperty=fullName> supports security sessions, in which both ends of communication have agreed upon an encryption and/or digital signature process; all messages are correlated with that specific secure conversation. For more information, see [Securing Services](../Topic/Securing%20Services.md). For example, the <xref:System.ServiceModel.WSHttpBinding?displayProperty=fullName>, which contains support for both security sessions and reliable sessions, by default uses only a secure session which encrypts and digitally signs messages.  \n  \n2.  The <xref:System.ServiceModel.NetTcpBinding?displayProperty=fullName> supports the sessions exposed by the TCP/IP connections to ensure that all messages are correlated by the connection session at the socket level.  \n  \n3.  The <xref:System.ServiceModel.Channels.ReliableSessionBindingElement?displayProperty=fullName>, which implements the WS-ReliableMessaging specification, provides support for reliable sessions in which messages are delivered in order and exactly once, enabling confidence even when messages travel across multiple nodes during the conversation. For more information, see [Reliable Sessions](../Topic/Reliable%20Sessions.md).  \n  \n4.  The <xref:System.ServiceModel.NetMsmqBinding?displayProperty=fullName> provides MSMQ datagram sessions. For more information, see [Queues in WCF](../Topic/Queues%20in%20Windows%20Communication%20Foundation.md).  \n  \n Remember that setting the SessionMode property does not specify the type of session the contract requires, only that it requires one."
  example:
  - "The following service contract requires that configured bindings use sessions when interacting with `SampleDuplexHello` service implementations.  \n  \n [!code-cs[SCA.Session#1](~/add/codesnippet/csharp/sca.session.client/services.cs#1)]\n [!code-vb[SCA.Session#1](~/add/codesnippet/visualbasic/sca.session.client/services.vb#1)]"
  syntax:
    content: public System.ServiceModel.SessionMode SessionMode { get; set; }
    return:
      type: System.ServiceModel.SessionMode
      description: A <xref href="System.ServiceModel.SessionMode"></xref> that indicates whether sessions are allowed, not allowed, or required.
  overload: System.ServiceModel.ServiceContractAttribute.SessionMode*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value is not one of the <xref href="System.ServiceModel.SessionMode"></xref> values.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ServiceModel\ServiceContractAttribute.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ServiceModel/ServiceContractAttribute.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ServiceModel.ServiceContractAttribute.#ctor
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: ServiceContractAttribute()
  nameWithType: ServiceContractAttribute.ServiceContractAttribute()
  fullName: System.ServiceModel.ServiceContractAttribute.ServiceContractAttribute()
- uid: System.ServiceModel.ServiceContractAttribute.CallbackContract
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: CallbackContract
  nameWithType: ServiceContractAttribute.CallbackContract
  fullName: System.ServiceModel.ServiceContractAttribute.CallbackContract
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ServiceModel.ServiceContractAttribute.ConfigurationName
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: ConfigurationName
  nameWithType: ServiceContractAttribute.ConfigurationName
  fullName: System.ServiceModel.ServiceContractAttribute.ConfigurationName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceModel.ServiceContractAttribute.HasProtectionLevel
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: HasProtectionLevel
  nameWithType: ServiceContractAttribute.HasProtectionLevel
  fullName: System.ServiceModel.ServiceContractAttribute.HasProtectionLevel
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.ServiceContractAttribute.Name
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: Name
  nameWithType: ServiceContractAttribute.Name
  fullName: System.ServiceModel.ServiceContractAttribute.Name
- uid: System.ServiceModel.ServiceContractAttribute.Namespace
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: Namespace
  nameWithType: ServiceContractAttribute.Namespace
  fullName: System.ServiceModel.ServiceContractAttribute.Namespace
- uid: System.ServiceModel.ServiceContractAttribute.ProtectionLevel
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: ProtectionLevel
  nameWithType: ServiceContractAttribute.ProtectionLevel
  fullName: System.ServiceModel.ServiceContractAttribute.ProtectionLevel
- uid: System.Net.Security.ProtectionLevel
  parent: System.Net.Security
  isExternal: false
  name: ProtectionLevel
  nameWithType: ProtectionLevel
  fullName: System.Net.Security.ProtectionLevel
- uid: System.ServiceModel.ServiceContractAttribute.SessionMode
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: SessionMode
  nameWithType: ServiceContractAttribute.SessionMode
  fullName: System.ServiceModel.ServiceContractAttribute.SessionMode
- uid: System.ServiceModel.SessionMode
  parent: System.ServiceModel
  isExternal: false
  name: SessionMode
  nameWithType: SessionMode
  fullName: System.ServiceModel.SessionMode
- uid: System.ServiceModel.ServiceContractAttribute.#ctor*
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: ServiceContractAttribute
  nameWithType: ServiceContractAttribute.ServiceContractAttribute
- uid: System.ServiceModel.ServiceContractAttribute.CallbackContract*
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: CallbackContract
  nameWithType: ServiceContractAttribute.CallbackContract
- uid: System.ServiceModel.ServiceContractAttribute.ConfigurationName*
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: ConfigurationName
  nameWithType: ServiceContractAttribute.ConfigurationName
- uid: System.ServiceModel.ServiceContractAttribute.HasProtectionLevel*
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: HasProtectionLevel
  nameWithType: ServiceContractAttribute.HasProtectionLevel
- uid: System.ServiceModel.ServiceContractAttribute.Name*
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: Name
  nameWithType: ServiceContractAttribute.Name
- uid: System.ServiceModel.ServiceContractAttribute.Namespace*
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: Namespace
  nameWithType: ServiceContractAttribute.Namespace
- uid: System.ServiceModel.ServiceContractAttribute.ProtectionLevel*
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: ProtectionLevel
  nameWithType: ServiceContractAttribute.ProtectionLevel
- uid: System.ServiceModel.ServiceContractAttribute.SessionMode*
  parent: System.ServiceModel.ServiceContractAttribute
  isExternal: false
  name: SessionMode
  nameWithType: ServiceContractAttribute.SessionMode
