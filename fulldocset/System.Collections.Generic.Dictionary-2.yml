### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.Dictionary`2
  id: Dictionary`2
  children:
  - System.Collections.Generic.Dictionary`2.#ctor
  - System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  - System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.Dictionary`2.#ctor(System.Int32)
  - System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.Dictionary`2.Add(`0,`1)
  - System.Collections.Generic.Dictionary`2.Clear
  - System.Collections.Generic.Dictionary`2.Comparer
  - System.Collections.Generic.Dictionary`2.ContainsKey(`0)
  - System.Collections.Generic.Dictionary`2.ContainsValue(`1)
  - System.Collections.Generic.Dictionary`2.Count
  - System.Collections.Generic.Dictionary`2.GetEnumerator
  - System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.Dictionary`2.Item(`0)
  - System.Collections.Generic.Dictionary`2.Keys
  - System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
  - System.Collections.Generic.Dictionary`2.Remove(`0)
  - System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  - System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  - System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  - System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  - System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  - System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  - System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  - System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
  - System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
  - System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize
  - System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly
  - System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
  - System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys
  - System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
  - System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values
  - System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
  - System.Collections.Generic.Dictionary`2.Values
  langs:
  - csharp
  name: Dictionary<TKey,TValue>
  nameWithType: Dictionary<TKey,TValue>
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>
  type: Class
  summary: "Represents a collection of keys and values.  \n  \n To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/dictionary.cs#d3599058f8d79be0)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/dictionary.cs#d3599058f8d79be0). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The Dictionary(TKey, generic class provides a mapping from a set of keys to a set of values. Each addition to the dictionary consists of a value and its associated key. Retrieving a value by using its key is very fast, close to O(1), because the Dictionary(TKey, class is implemented as a hash table.  \n  \n> [!NOTE]\n>  The speed of retrieval depends on the quality of the hashing algorithm of the type specified for `TKey`.  \n  \n As long as an object is used as a key in the Dictionary(TKey,, it must not change in any way that affects its hash value. Every key in a Dictionary(TKey, must be unique according to the dictionary's equality comparer. A key cannot be `null`, but a value can be, if the value type `TValue` is a reference type.  \n  \n Dictionary(TKey, requires an equality implementation to determine whether keys are equal. You can specify an implementation of the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface by using a constructor that accepts a `comparer` parameter; if you do not specify an implementation, the default generic equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> is used. If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=fullName> generic interface, the default equality comparer uses that implementation.  \n  \n> [!NOTE]\n>  For example, you can use the case-insensitive string comparers provided by the <xref:System.StringComparer> class to create dictionaries with case-insensitive string keys.  \n  \n The capacity of a Dictionary(TKey, is the number of elements the Dictionary(TKey, can hold. As elements are added to a Dictionary(TKey,, the capacity is automatically increased as required by reallocating the internal array.  \n  \n For very large Dictionary(TKey, objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.  \n  \n For purposes of enumeration, each item in the dictionary is treated as a <xref:System.Collections.Generic.KeyValuePair%602> structure representing a value and its key. The order in which the items are returned is undefined.  \n  \n The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) returns an object of the type of the elements in the collection. Since the Dictionary(TKey, is a collection of keys and values, the element type is not the type of the key or the type of the value. Instead, the element type is a <xref:System.Collections.Generic.KeyValuePair%602> of the key type and the value type. For example:  \n  \n [!code-cpp[Generic.Dictionary#11](~/add/codesnippet/cpp/t-system.collections.gen_6_1.cpp)]\n [!code-vb[Generic.Dictionary#11](~/add/codesnippet/visualbasic/t-system.collections.gen_6_1.vb)]\n [!code-cs[Generic.Dictionary#11](~/add/codesnippet/csharp/t-system.collections.gen_6_1.cs)]  \n  \n The `foreach` statement is a wrapper around the enumerator, which allows only reading from the collection, not writing to it.  \n  \n> [!NOTE]\n>  Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method."
  example:
  - "The following code example creates an empty Dictionary(TKey, of strings with string keys and uses the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to add some elements. The example demonstrates that the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.  \n  \n The example uses the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.  \n  \n The example shows how to use the <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and it shows how to use the <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> method to test whether a key exists before calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method.  \n  \n The example shows how to enumerate the keys and values in the dictionary and how to enumerate the keys and values alone using the <xref:System.Collections.Generic.Dictionary%602.Keys%2A> property and the <xref:System.Collections.Generic.Dictionary%602.Values%2A> property.  \n  \n Finally, the example demonstrates the <xref:System.Collections.Generic.Dictionary%602.Remove%2A> method.  \n  \n [!code-cpp[Generic.Dictionary#1](~/add/codesnippet/cpp/t-system.collections.gen_6_2.cpp)]\n [!code-cs[Generic.Dictionary#1](~/add/codesnippet/csharp/t-system.collections.gen_6_2.cs)]\n [!code-vb[Generic.Dictionary#1](~/add/codesnippet/visualbasic/t-system.collections.gen_6_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_DictionaryDebugView`2))]

      [System.Runtime.InteropServices.ComVisible(false)]

      public class Dictionary<TKey,TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IDictionary<TKey,TValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>, System.Collections.IDictionary, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
    typeParameters:
    - id: TKey
      description: The type of the keys in the dictionary.
    - id: TValue
      description: The type of the values in the dictionary.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  - System.Collections.Generic.IDictionary<TKey,TValue>
  - System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  - System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  - System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>
  - System.Collections.IDictionary
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: Dictionary<TKey,TValue>()
  nameWithType: Dictionary<TKey,TValue>.Dictionary<TKey,TValue>()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Dictionary<TKey,TValue>()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.Dictionary%602"></xref> class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.
  remarks: "Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the default equality comparer.  \n  \n <xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>. If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=fullName> generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface by using a constructor that accepts a `comparer` parameter.  \n  \n> [!NOTE]\n>  If you can estimate the size of the collection, using a constructor that specifies the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Dictionary%602>.  \n  \n This constructor is an O(1) operation."
  example:
  - "The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings with string keys and uses the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to add some elements. The example demonstrates that the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.  \n  \n This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class.  \n  \n [!code-cpp[Generic.Dictionary#2](~/add/codesnippet/cpp/m-system.collections.gen_23_1.cpp)]\n [!code-cs[Generic.Dictionary#2](~/add/codesnippet/csharp/m-system.collections.gen_23_1.cs)]\n [!code-vb[Generic.Dictionary#2](~/add/codesnippet/visualbasic/m-system.collections.gen_23_1.vb)]"
  syntax:
    content: public Dictionary ();
    parameters: []
  overload: System.Collections.Generic.Dictionary`2.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1})'
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: Dictionary<TKey,TValue>(IDictionary<TKey,TValue>)
  nameWithType: Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(IDictionary<TKey,TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(IDictionary<TKey,TValue>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.Dictionary%602"></xref> class that contains elements copied from the specified <xref href="stem.Collections.Generic.IDictionary%602"></xref> and uses the default equality comparer for the key type.
  remarks: "Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the default equality comparer; likewise, every key in the source `dictionary` must also be unique according to the default equality comparer.  \n  \n The initial capacity of the new <xref:System.Collections.Generic.Dictionary%602> is large enough to contain all the elements in `dictionary`.  \n  \n <xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>. If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=fullName> generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface by using a constructor that accepts a `comparer` parameter.  \n  \n This constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`."
  example:
  - "The following code example shows how to use the <xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor to initialize a <xref:System.Collections.Generic.Dictionary%602> with sorted content from another dictionary. The code example creates a <xref:System.Collections.Generic.SortedDictionary%602> and populates it with data in random order, then passes the <xref:System.Collections.Generic.SortedDictionary%602> to the <xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor, creating a <xref:System.Collections.Generic.Dictionary%602> that is sorted. This is useful if you need to build a sorted dictionary that at some point becomes static; copying the data from a <xref:System.Collections.Generic.SortedDictionary%602> to a <xref:System.Collections.Generic.Dictionary%602> improves retrieval speed.  \n  \n [!code-cs[Generic.Dictionary.ctor_IDic#1](~/add/codesnippet/csharp/06345b5d-2c5f-46ab-8797-_1.cs)]\n [!code-vb[Generic.Dictionary.ctor_IDic#1](~/add/codesnippet/visualbasic/06345b5d-2c5f-46ab-8797-_1.vb)]"
  syntax:
    content: public Dictionary (System.Collections.Generic.IDictionary<TKey,TValue> dictionary);
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary`2
      description: The <xref href="stem.Collections.Generic.IDictionary%602"></xref> whose elements are copied to the new <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  overload: System.Collections.Generic.Dictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>dictionary</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>dictionary</code> contains one or more duplicate keys.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: Dictionary<TKey,TValue>(IEqualityComparer<TKey>)
  nameWithType: Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(IEqualityComparer<TKey>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(IEqualityComparer<TKey>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.Dictionary%602"></xref> class that is empty, has the default initial capacity, and uses the specified <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref>.
  remarks: "Use this constructor with the case-insensitive string comparers provided by the <xref:System.StringComparer> class to create dictionaries with case-insensitive string keys.  \n  \n Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the specified comparer.  \n  \n <xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal. If `comparer` is `null`, this constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>. If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=fullName> generic interface, the default equality comparer uses that implementation.  \n  \n> [!NOTE]\n>  If you can estimate the size of the collection, using a constructor that specifies the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Dictionary%602>.  \n  \n This constructor is an O(1) operation."
  example:
  - "The following code example creates a <xref:System.Collections.Generic.Dictionary%602> with a case-insensitive equality comparer for the current culture. The example adds four elements, some with lower-case keys and some with upper-case keys. The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message. Finally, the example displays the elements in the dictionary.  \n  \n [!code-vb[Generic.Dictionary.ctor_IEqC#1](~/add/codesnippet/visualbasic/3d52a6d9-5580-49c2-945a-_1.vb)]\n [!code-cs[Generic.Dictionary.ctor_IEqC#1](~/add/codesnippet/csharp/3d52a6d9-5580-49c2-945a-_1.cs)]"
  syntax:
    content: public Dictionary (System.Collections.Generic.IEqualityComparer<TKey> comparer);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: The <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> implementation to use when comparing keys, or `null` to use the default <xref href="stem.Collections.Generic.EqualityComparer%601"></xref> for the type of the key.
  overload: System.Collections.Generic.Dictionary`2.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: Dictionary<TKey,TValue>(Int32)
  nameWithType: Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(Int32)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.Dictionary%602"></xref> class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.
  remarks: "Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the default equality comparer.  \n  \n The capacity of a <xref:System.Collections.Generic.Dictionary%602> is the number of elements that can be added to the <xref:System.Collections.Generic.Dictionary%602> before resizing is necessary. As elements are added to a <xref:System.Collections.Generic.Dictionary%602>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Dictionary%602>.  \n  \n <xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>. If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=fullName> generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface by using a constructor that accepts a `comparer` parameter.  \n  \n This constructor is an O(1) operation."
  example:
  - "The following code example creates a dictionary with an initial capacity of 4 and populates it with 4 entries.  \n  \n [!code-cs[Generic.Dictionary.ctor_Int32#1](~/add/codesnippet/csharp/m-system.collections.gen_3_1.cs)]\n [!code-vb[Generic.Dictionary.ctor_Int32#1](~/add/codesnippet/visualbasic/m-system.collections.gen_3_1.vb)]"
  syntax:
    content: public Dictionary (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the <xref href="stem.Collections.Generic.Dictionary%602"></xref> can contain.
  overload: System.Collections.Generic.Dictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>capacity</code> is less than 0.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: Dictionary<TKey,TValue>(IDictionary<TKey,TValue>,IEqualityComparer<TKey>)
  nameWithType: Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(IDictionary<TKey,TValue>,IEqualityComparer<TKey>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(IDictionary<TKey,TValue>,IEqualityComparer<TKey>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.Dictionary%602"></xref> class that contains elements copied from the specified <xref href="stem.Collections.Generic.IDictionary%602"></xref> and uses the specified <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref>.
  remarks: "Use this constructor with the case-insensitive string comparers provided by the <xref:System.StringComparer> class to create dictionaries with case-insensitive string keys.  \n  \n Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the specified comparer; likewise, every key in the source `dictionary` must also be unique according to the specified comparer.  \n  \n> [!NOTE]\n>  For example, duplicate keys can occur if `comparer` is one of the case-insensitive string comparers provided by the <xref:System.StringComparer> class and `dictionary` does not use a case-insensitive comparer key.  \n  \n The initial capacity of the new <xref:System.Collections.Generic.Dictionary%602> is large enough to contain all the elements in `dictionary`.  \n  \n <xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal. If `comparer` is `null`, this constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>. If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=fullName> generic interface, the default equality comparer uses that implementation.  \n  \n This constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`."
  example:
  - "The following code example shows how to use the Dictionary(TKey, constructor to initialize a <xref:System.Collections.Generic.Dictionary%602> with case-insensitive sorted content from another dictionary. The code example creates a <xref:System.Collections.Generic.SortedDictionary%602> with a case-insensitive comparer and populates it with data in random order, then passes the <xref:System.Collections.Generic.SortedDictionary%602> to the Dictionary(TKey, constructor, along with a case-insensitive equality comparer, creating a <xref:System.Collections.Generic.Dictionary%602> that is sorted. This is useful if you need to build a sorted dictionary that at some point becomes static; copying the data from a <xref:System.Collections.Generic.SortedDictionary%602> to a <xref:System.Collections.Generic.Dictionary%602> improves retrieval speed.  \n  \n> [!NOTE]\n>  When you create a new dictionary with a case-insensitive comparer and populate it with entries from a dictionary that uses a case-sensitive comparer, as in this example, an exception occurs if the input dictionary has keys that differ only by case.  \n  \n [!code-vb[Generic.Dictionary.ctor_IDicIEqC#1](~/add/codesnippet/visualbasic/bb87ac2c-30fe-4f1c-8d2c-_1.vb)]\n [!code-cs[Generic.Dictionary.ctor_IDicIEqC#1](~/add/codesnippet/csharp/bb87ac2c-30fe-4f1c-8d2c-_1.cs)]"
  syntax:
    content: public Dictionary (System.Collections.Generic.IDictionary<TKey,TValue> dictionary, System.Collections.Generic.IEqualityComparer<TKey> comparer);
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary`2
      description: The <xref href="stem.Collections.Generic.IDictionary%602"></xref> whose elements are copied to the new <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: The <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> implementation to use when comparing keys, or `null` to use the default <xref href="stem.Collections.Generic.EqualityComparer%601"></xref> for the type of the key.
  overload: System.Collections.Generic.Dictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>dictionary</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>dictionary</code> contains one or more duplicate keys.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: Dictionary<TKey,TValue>(Int32,IEqualityComparer<TKey>)
  nameWithType: Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(Int32,IEqualityComparer<TKey>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(Int32,IEqualityComparer<TKey>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.Dictionary%602"></xref> class that is empty, has the specified initial capacity, and uses the specified <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref>.
  remarks: "Use this constructor with the case-insensitive string comparers provided by the <xref:System.StringComparer> class to create dictionaries with case-insensitive string keys.  \n  \n Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the specified comparer.  \n  \n The capacity of a <xref:System.Collections.Generic.Dictionary%602> is the number of elements that can be added to the <xref:System.Collections.Generic.Dictionary%602> before resizing is necessary. As elements are added to a <xref:System.Collections.Generic.Dictionary%602>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Dictionary%602>.  \n  \n <xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal. If `comparer` is `null`, this constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>. If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=fullName> generic interface, the default equality comparer uses that implementation.  \n  \n This constructor is an O(1) operation."
  example:
  - "The following code example creates a <xref:System.Collections.Generic.Dictionary%602> with an initial capacity of 5 and a case-insensitive equality comparer for the current culture. The example adds four elements, some with lower-case keys and some with upper-case keys. The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message. Finally, the example displays the elements in the dictionary.  \n  \n [!code-cs[Generic.Dictionary.ctor_Int32IEqC#1](~/add/codesnippet/csharp/9847a566-11b6-4334-96a2-_1.cs)]\n [!code-vb[Generic.Dictionary.ctor_Int32IEqC#1](~/add/codesnippet/visualbasic/9847a566-11b6-4334-96a2-_1.vb)]"
  syntax:
    content: public Dictionary (int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the <xref href="stem.Collections.Generic.Dictionary%602"></xref> can contain.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: The <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> implementation to use when comparing keys, or `null` to use the default <xref href="stem.Collections.Generic.EqualityComparer%601"></xref> for the type of the key.
  overload: System.Collections.Generic.Dictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>capacity</code> is less than 0.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: Dictionary<TKey,TValue>(SerializationInfo,StreamingContext)
  nameWithType: Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.Dictionary%602"></xref> class with serialized data.
  remarks: This constructor is called during deserialization to reconstitute an object transmitted over a stream. For more information, see [XML and SOAP Serialization](../Topic/XML%20and%20SOAP%20Serialization.md).
  syntax:
    content: protected Dictionary (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: A <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object containing the information required to serialize the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: A <xref href="System.Runtime.Serialization.StreamingContext"></xref> structure containing the source and destination of the serialized stream associated with the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  overload: System.Collections.Generic.Dictionary`2.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: Add(TKey,TValue)
  nameWithType: Dictionary<TKey,TValue>.Add(TKey,TValue)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Add(TKey,TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Adds the specified key and value to the dictionary.
  remarks: "You can also use the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.Dictionary%602>; for example, `myCollection[myKey] = myValue` (in Visual Basic, `myCollection(myKey) = myValue`). However, if the specified key already exists in the <xref:System.Collections.Generic.Dictionary%602>, setting the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property overwrites the old value. In contrast, the Addmethod throws an exception if a value with the specified key already exists.  \n  \n If the <xref:System.Collections.Generic.Dictionary%602.Count%2A> property value already equals the capacity, the capacity of the <xref:System.Collections.Generic.Dictionary%602> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \n  \n A key cannot be `null`, but a value can be, if `TValue` is a reference type.  \n  \n If <xref:System.Collections.Generic.Dictionary%602.Count%2A> is less than the capacity, this method approaches an O(1) operation. If the capacity must be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>."
  example:
  - "The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings with string keys and uses the Add method to add some elements. The example demonstrates that the Add method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.  \n  \n This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class.  \n  \n [!code-cpp[Generic.Dictionary#2](~/add/codesnippet/cpp/m-system.collections.gen_55_1.cpp)]\n [!code-cs[Generic.Dictionary#2](~/add/codesnippet/csharp/m-system.collections.gen_55_1.cs)]\n [!code-vb[Generic.Dictionary#2](~/add/codesnippet/visualbasic/m-system.collections.gen_55_1.vb)]"
  syntax:
    content: public void Add (TKey key, TValue value);
    parameters:
    - id: key
      type: TKey
      description: The key of the element to add.
    - id: value
      type: TValue
      description: The value of the element to add. The value can be `null` for reference types.
  overload: System.Collections.Generic.Dictionary`2.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An element with the same key already exists in the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.Clear
  id: Clear
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: Clear()
  nameWithType: Dictionary<TKey,TValue>.Clear()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Removes all keys and values from the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  remarks: "The <xref:System.Collections.Generic.Dictionary%602.Count%2A> property is set to 0, and references to other objects from elements of the collection are also released. The capacity remains unchanged.  \n  \n This method is an O(`n`) operation, where `n` is the capacity of the dictionary."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Generic.Dictionary`2.Clear*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.Comparer
  id: Comparer
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: Comparer
  nameWithType: Dictionary<TKey,TValue>.Comparer
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Comparer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets the <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> that is used to determine equality of keys for the dictionary.
  remarks: "<xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal. You can specify an implementation of the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface by using a constructor that accepts a `comparer` parameter; if you do not specify one, the default generic equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> is used.  \n  \n Getting the value of this property is an O(1) operation."
  syntax:
    content: public System.Collections.Generic.IEqualityComparer<TKey> Comparer { get; }
    return:
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: The <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> generic interface implementation that is used to determine equality of keys for the current <xref href="stem.Collections.Generic.Dictionary%602"></xref> and to provide hash values for the keys.
  overload: System.Collections.Generic.Dictionary`2.Comparer*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: ContainsKey(TKey)
  nameWithType: Dictionary<TKey,TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ContainsKey(TKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Determines whether the <xref href="stem.Collections.Generic.Dictionary%602"></xref> contains the specified key.
  remarks: This method approaches an O(1) operation.
  example:
  - "The following code example shows how to use the ContainsKey method to test whether a key exists prior to calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method. It also shows how to use the <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A> method to retrieve values, which is an efficient way to retrieve values when a program frequently tries keys that are not in the dictionary. Finally, it shows the least efficient way to test whether keys exist, by using the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property (the indexer in C#).  \n  \n This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class (`openWith` is the name of the Dictionary used in this example).  \n  \n [!code-cpp[Generic.Dictionary#6](~/add/codesnippet/cpp/m-system.collections.gen_4_1.cpp)]\n [!code-cs[Generic.Dictionary#6](~/add/codesnippet/csharp/m-system.collections.gen_4_1.cs)]\n [!code-vb[Generic.Dictionary#6](~/add/codesnippet/visualbasic/m-system.collections.gen_4_1.vb)]  \n[!code-cpp[Generic.Dictionary#5](~/add/codesnippet/cpp/m-system.collections.gen_4_2.cpp)]\n[!code-cs[Generic.Dictionary#5](~/add/codesnippet/csharp/m-system.collections.gen_4_2.cs)]\n[!code-vb[Generic.Dictionary#5](~/add/codesnippet/visualbasic/m-system.collections.gen_4_2.vb)]  \n[!code-cpp[Generic.Dictionary#4](~/add/codesnippet/cpp/m-system.collections.gen_4_3.cpp)]\n[!code-cs[Generic.Dictionary#4](~/add/codesnippet/csharp/m-system.collections.gen_4_3.cs)]\n[!code-vb[Generic.Dictionary#4](~/add/codesnippet/visualbasic/m-system.collections.gen_4_3.vb)]"
  syntax:
    content: public bool ContainsKey (TKey key);
    parameters:
    - id: key
      type: TKey
      description: The key to locate in the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.Dictionary%602"></xref> contains an element with the specified key; otherwise, `false`.'
  overload: System.Collections.Generic.Dictionary`2.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
  id: ContainsValue(`1)
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: ContainsValue(TValue)
  nameWithType: Dictionary<TKey,TValue>.ContainsValue(TValue)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ContainsValue(TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Determines whether the <xref href="stem.Collections.Generic.Dictionary%602"></xref> contains a specific value.
  remarks: "This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `TValue`, the type of values in the dictionary.  \n  \n This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.Dictionary%602.Count%2A>. That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>."
  syntax:
    content: public bool ContainsValue (TValue value);
    parameters:
    - id: value
      type: TValue
      description: The value to locate in the <xref href="stem.Collections.Generic.Dictionary%602"></xref>. The value can be `null` for reference types.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.Dictionary%602"></xref> contains an element with the specified value; otherwise, `false`.'
  overload: System.Collections.Generic.Dictionary`2.ContainsValue*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.Count
  id: Count
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: Count
  nameWithType: Dictionary<TKey,TValue>.Count
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets the number of key/value pairs contained in the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  remarks: "The capacity of a <xref:System.Collections.Generic.Dictionary%602> is the number of elements that the <xref:System.Collections.Generic.Dictionary%602> can store. The Count property is the number of elements that are actually in the <xref:System.Collections.Generic.Dictionary%602>.  \n  \n The capacity is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  \n  \n Getting the value of this property is an O(1) operation."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of key/value pairs contained in the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  overload: System.Collections.Generic.Dictionary`2.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Dictionary<TKey,TValue>.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  remarks: "For purposes of enumeration, each item is a <xref:System.Collections.Generic.KeyValuePair%602> structure representing a value and its key.  \n  \n The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A>.  \n  \n> [!NOTE]\n>  For better performance, the enumerator returned by this property does not throw an exception if it is positioned before the first element or after the last element and the <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> property is accessed; the value of the <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> property is undefined.  \n  \n The <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> property returns the same element until the <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> method is called. <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: public System.Collections.Generic.Dictionary<TKey,TValue>.Enumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary`2.Enumerator
      description: A <xref href="stem.Collections.Generic.Dictionary%602.Enumerator"></xref> structure for the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  overload: System.Collections.Generic.Dictionary`2.GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Dictionary<TKey,TValue>.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Implements the <xref href="System.Runtime.Serialization.ISerializable"></xref> interface and returns the data needed to serialize the <xref href="stem.Collections.Generic.Dictionary%602"></xref> instance.
  remarks: This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>.
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: A <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object that contains the information required to serialize the <xref href="stem.Collections.Generic.Dictionary%602"></xref> instance.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: A <xref href="System.Runtime.Serialization.StreamingContext"></xref> structure that contains the source and destination of the serialized stream associated with the <xref href="stem.Collections.Generic.Dictionary%602"></xref> instance.
  overload: System.Collections.Generic.Dictionary`2.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>info</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: Item(TKey)
  nameWithType: Dictionary<TKey,TValue>.Item(TKey)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Item(TKey)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets or sets the value associated with the specified key.
  remarks: "This property provides the ability to access a specific element in the collection by using the following C# syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).  \n  \n You can also use the Item property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.Dictionary%602>. When you set the property value, if the key is in the <xref:System.Collections.Generic.Dictionary%602>, the value associated with that key is replaced by the assigned value. If the key is not in the <xref:System.Collections.Generic.Dictionary%602>, the key and value are added to the dictionary. In contrast, the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method does not modify existing elements.  \n  \n A key cannot be `null`, but a value can be, if the value type `TValue` is a reference type.  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  \n  \n Getting or setting the value of this property approaches an O(1) operation."
  example:
  - "The following code example uses the Item property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.  \n  \n The example also shows how to use the <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary.  \n  \n This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class. `openWith` is the name of the Dictionary used in this example.  \n  \n [!code-cpp[Generic.Dictionary#2](~/add/codesnippet/cpp/p-system.collections.gen_6_1.cpp)]\n [!code-cs[Generic.Dictionary#2](~/add/codesnippet/csharp/p-system.collections.gen_6_1.cs)]\n [!code-vb[Generic.Dictionary#2](~/add/codesnippet/visualbasic/p-system.collections.gen_6_1.vb)]  \n[!code-cpp[Generic.Dictionary#3](~/add/codesnippet/cpp/p-system.collections.gen_6_2.cpp)]\n[!code-cs[Generic.Dictionary#3](~/add/codesnippet/csharp/p-system.collections.gen_6_2.cs)]\n[!code-vb[Generic.Dictionary#3](~/add/codesnippet/visualbasic/p-system.collections.gen_6_2.vb)]  \n[!code-cpp[Generic.Dictionary#4](~/add/codesnippet/cpp/p-system.collections.gen_6_3.cpp)]\n[!code-cs[Generic.Dictionary#4](~/add/codesnippet/csharp/p-system.collections.gen_6_3.cs)]\n[!code-vb[Generic.Dictionary#4](~/add/codesnippet/visualbasic/p-system.collections.gen_6_3.vb)]  \n[!code-cpp[Generic.Dictionary#5](~/add/codesnippet/cpp/p-system.collections.gen_6_4.cpp)]\n[!code-cs[Generic.Dictionary#5](~/add/codesnippet/csharp/p-system.collections.gen_6_4.cs)]\n[!code-vb[Generic.Dictionary#5](~/add/codesnippet/visualbasic/p-system.collections.gen_6_4.vb)]"
  syntax:
    content: public TValue this[TKey key] { get; set; }
    parameters:
    - id: key
      type: TKey
      description: The key of the value to get or set.
    return:
      type: TValue
      description: The value associated with the specified key. If the specified key is not found, a get operation throws a <xref href="System.Collections.Generic.KeyNotFoundException"></xref>, and a set operation creates a new element with the specified key.
  overload: System.Collections.Generic.Dictionary`2.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: The property is retrieved and <code>key</code> does not exist in the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.Keys
  id: Keys
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: Keys
  nameWithType: Dictionary<TKey,TValue>.Keys
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets a collection containing the keys in the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  remarks: "The order of the keys in the <xref:System.Collections.Generic.Dictionary%602.KeyCollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.Generic.Dictionary%602.ValueCollection> returned by the <xref:System.Collections.Generic.Dictionary%602.Values%2A> property.  \n  \n The returned <xref:System.Collections.Generic.Dictionary%602.KeyCollection> is not a static copy; instead, the <xref:System.Collections.Generic.Dictionary%602.KeyCollection> refers back to the keys in the original <xref:System.Collections.Generic.Dictionary%602>. Therefore, changes to the <xref:System.Collections.Generic.Dictionary%602> continue to be reflected in the <xref:System.Collections.Generic.Dictionary%602.KeyCollection>.  \n  \n Getting the value of this property is an O(1) operation."
  example:
  - "The following code example shows how to enumerate the keys in the dictionary using the Keys property, and how to enumerate the keys and values in the dictionary.  \n  \n This code is part of a larger example that can be compiled and executed (`openWith` is the name of the Dictionary used in this example). See <xref:System.Collections.Generic.Dictionary%602>.  \n  \n [!code-cpp[Generic.Dictionary#9](~/add/codesnippet/cpp/p-system.collections.gen_22_1.cpp)]\n [!code-cs[Generic.Dictionary#9](~/add/codesnippet/csharp/p-system.collections.gen_22_1.cs)]\n [!code-vb[Generic.Dictionary#9](~/add/codesnippet/visualbasic/p-system.collections.gen_22_1.vb)]  \n[!code-cpp[Generic.Dictionary#7](~/add/codesnippet/cpp/p-system.collections.gen_22_2.cpp)]\n[!code-cs[Generic.Dictionary#7](~/add/codesnippet/csharp/p-system.collections.gen_22_2.cs)]\n[!code-vb[Generic.Dictionary#7](~/add/codesnippet/visualbasic/p-system.collections.gen_22_2.vb)]"
  syntax:
    content: public System.Collections.Generic.Dictionary<TKey,TValue>.KeyCollection Keys { get; }
    return:
      type: System.Collections.Generic.Dictionary`2.KeyCollection
      description: A <xref href="stem.Collections.Generic.Dictionary%602.KeyCollection"></xref> containing the keys in the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  overload: System.Collections.Generic.Dictionary`2.Keys*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
  id: OnDeserialization(System.Object)
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: OnDeserialization(Object)
  nameWithType: Dictionary<TKey,TValue>.OnDeserialization(Object)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Implements the <xref href="System.Runtime.Serialization.ISerializable"></xref> interface and raises the deserialization event when the deserialization is complete.
  remarks: This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>.
  syntax:
    content: public virtual void OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: The source of the deserialization event.
  overload: System.Collections.Generic.Dictionary`2.OnDeserialization*
  exceptions:
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: The <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object associated with the current <xref href="stem.Collections.Generic.Dictionary%602"></xref> instance is invalid.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: Remove(TKey)
  nameWithType: Dictionary<TKey,TValue>.Remove(TKey)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Remove(TKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Removes the value with the specified key from the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  remarks: "If the <xref:System.Collections.Generic.Dictionary%602> does not contain an element with the specified key, the <xref:System.Collections.Generic.Dictionary%602> remains unchanged. No exception is thrown.  \n  \n This method approaches an O(1) operation."
  example:
  - "The following code example shows how to remove a key/value pair from a dictionary using the Remove method.  \n  \n This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class (`openWith` is the name of the Dictionary used in this example).  \n  \n [!code-cpp[Generic.Dictionary#10](~/add/codesnippet/cpp/m-system.collections.gen_26_1.cpp)]\n [!code-cs[Generic.Dictionary#10](~/add/codesnippet/csharp/m-system.collections.gen_26_1.cs)]\n [!code-vb[Generic.Dictionary#10](~/add/codesnippet/visualbasic/m-system.collections.gen_26_1.vb)]"
  syntax:
    content: public bool Remove (TKey key);
    parameters:
    - id: key
      type: TKey
      description: The key of the element to remove.
    return:
      type: System.Boolean
      description: '`true` if the element is successfully found and removed; otherwise, `false`.  This method returns `false` if <code>key</code> is not found in the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.'
  overload: System.Collections.Generic.Dictionary`2.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)
  nameWithType: Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: void ICollection<KeyValuePair<TKey,TValue>>.Add (System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair);
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair`2
      description: To be added.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Add*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)
  nameWithType: Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: bool ICollection<KeyValuePair<TKey,TValue>>.Contains (System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair);
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair`2
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Contains*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[],Int32)
  nameWithType: Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[],Int32)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: void ICollection<KeyValuePair<TKey,TValue>>.CopyTo (System.Collections.Generic.KeyValuePair<TKey,TValue>[] array, int index);
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{TKey,TValue}[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#CopyTo*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly
  nameWithType: Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)
  nameWithType: Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: bool ICollection<KeyValuePair<TKey,TValue>>.Remove (System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair);
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair`2
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Remove*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  id: System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: IDictionary<TKey,TValue>.Keys
  nameWithType: Dictionary<TKey,TValue>.IDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary<TKey,TValue>.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: System.Collections.Generic.ICollection<TKey> System.Collections.Generic.IDictionary<TKey,TValue>.Keys { get; }
    return:
      type: System.Collections.Generic.ICollection{TKey}
      description: To be added.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary<TKey,TValue>#Keys*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  id: System#Collections#Generic#IDictionary{TKey,TValue}#Values
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: IDictionary<TKey,TValue>.Values
  nameWithType: Dictionary<TKey,TValue>.IDictionary<TKey,TValue>.Values
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary<TKey,TValue>.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: System.Collections.Generic.ICollection<TValue> System.Collections.Generic.IDictionary<TKey,TValue>.Values { get; }
    return:
      type: System.Collections.Generic.ICollection{TValue}
      description: To be added.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary<TKey,TValue>#Values*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()
  nameWithType: Dictionary<TKey,TValue>.IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>> IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{TKey,TValue}}
      description: To be added.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable<System#Collections#Generic#KeyValuePair<TKey,TValue>>#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: IReadOnlyDictionary<TKey,TValue>.Keys
  nameWithType: Dictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get; }
    return:
      type: System.Collections.Generic.IEnumerable{TKey}
      description: To be added.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary<TKey,TValue>#Keys*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: IReadOnlyDictionary<TKey,TValue>.Values
  nameWithType: Dictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  syntax:
    content: System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get; }
    return:
      type: System.Collections.Generic.IEnumerable{TValue}
      description: To be added.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary<TKey,TValue>#Values*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: Dictionary<TKey,TValue>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Copies the elements of the <xref href="stem.Collections.Generic.ICollection%601"></xref> to an array, starting at the specified array index.
  remarks: "Each element copied from a <xref:System.Collections.Generic.Dictionary%602> is a <xref:System.Collections.Generic.KeyValuePair%602> structure representing a value and its key.  \n  \n> [!NOTE]\n>  If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the nongeneric implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw an <xref:System.InvalidCastException>, whereas the generic implementations throw an <xref:System.ArgumentException>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>."
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array that is the destination of the elements copied from <xref href="stem.Collections.Generic.ICollection%601"></xref>. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than 0.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.  \n  \n -or-  \n  \n <code>array</code> does not have zero-based indexing.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"stem.Collections.Generic.ICollection%601\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.  \n  \n -or-  \n  \n The type of the source <xref href=\"stem.Collections.Generic.ICollection%601\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: Dictionary<TKey,TValue>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe).
  remarks: "Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which can cause the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock the object before accessing the collection.  \n  \n Getting the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: '`true` if access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe); otherwise, `false`.  In the default implementation of <xref href="stem.Collections.Generic.Dictionary%602"></xref>, this property always returns `false`.'
  overload: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: Dictionary<TKey,TValue>.ICollection.SyncRoot
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>.
  remarks: "Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock the object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.  \n  \n```c#  \nICollection ic = ...;  \nlock (ic.SyncRoot) {  \n   // Access the collection.  \n}  \n```  \n  \n```vb#  \nDim ic As ICollection = ...  \nSyncLock ic.SyncRoot  \n   ' Access the collection.  \nEnd SyncLock  \n```  \n  \n```cpp#  \nICollection^ ic = ...;  \ntry {  \n   Monitor::Enter(ic->SyncRoot);  \n   // Access the collection.  \n}  \nfinally {  \n   Monitor::Exit(ic->SyncRoot);  \n}  \n```  \n  \n Getting the value of this property is an O(1) operation."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  id: System#Collections#IDictionary#Add(System.Object,System.Object)
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: IDictionary.Add(Object,Object)
  nameWithType: Dictionary<TKey,TValue>.IDictionary.Add(Object,Object)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Adds the specified key and value to the dictionary.
  remarks: "You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method throws an exception if the specified key already exists.  \n  \n If <xref:System.Collections.Generic.Dictionary%602.Count%2A> is less than the capacity, this method approaches an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>."
  example:
  - "The following code example shows how to access the <xref:System.Collections.Generic.Dictionary%602> class through the <xref:System.Collections.IDictionary?displayProperty=fullName> interface. The code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings with string keys and uses the IDictionary.Add method to add some elements. The example demonstrates that the IDictionary.Add method throws an <xref:System.ArgumentException> when attempting to add a duplicate key, or when a key or value of the wrong data type is supplied.  \n  \n The code example demonstrates the use of several other members of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.  \n  \n [!code-cs[Generic.Dictionary.IDictionary#1](~/add/codesnippet/csharp/156f6ebb-9a9f-44b2-8f9b-_1.cs)]\n [!code-vb[Generic.Dictionary.IDictionary#1](~/add/codesnippet/visualbasic/156f6ebb-9a9f-44b2-8f9b-_1.vb)]"
  syntax:
    content: void IDictionary.Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: The object to use as the key.
    - id: value
      type: System.Object
      description: The object to use as the value.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <xref href=\"stem.Collections.Generic.Dictionary%602\"></xref>.  \n  \n -or-  \n  \n <code>value</code> is of a type that is not assignable to <code>TValue</code>, the type of values in the <xref href=\"stem.Collections.Generic.Dictionary%602\"></xref>.  \n  \n -or-  \n  \n A value with the same key already exists in the <xref href=\"stem.Collections.Generic.Dictionary%602\"></xref>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
  id: System#Collections#IDictionary#Contains(System.Object)
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: IDictionary.Contains(Object)
  nameWithType: Dictionary<TKey,TValue>.IDictionary.Contains(Object)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Determines whether the <xref href="System.Collections.IDictionary"></xref> contains an element with the specified key.
  remarks: "This method returns `false` if `key` is of a type that is not assignable to the key type `TKey` of the <xref:System.Collections.Generic.Dictionary%602>.  \n  \n This method approaches an O(1) operation."
  example:
  - "The following code example shows how to use the IDictionary.Contains method of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface with a <xref:System.Collections.Generic.Dictionary%602>. The example demonstrates that the method returns `false` if a key of the wrong data type is supplied.  \n  \n The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.  \n  \n [!code-cs[Generic.Dictionary.IDictionary#31](~/add/codesnippet/csharp/afcc80dd-2182-4450-a976-_1.cs)]\n [!code-vb[Generic.Dictionary.IDictionary#31](~/add/codesnippet/visualbasic/afcc80dd-2182-4450-a976-_1.vb)]  \n[!code-cs[Generic.Dictionary.IDictionary#6](~/add/codesnippet/csharp/afcc80dd-2182-4450-a976-_2.cs)]\n[!code-vb[Generic.Dictionary.IDictionary#6](~/add/codesnippet/visualbasic/afcc80dd-2182-4450-a976-_2.vb)]  \n[!code-cs[Generic.Dictionary.IDictionary#32](~/add/codesnippet/csharp/afcc80dd-2182-4450-a976-_3.cs)]\n[!code-vb[Generic.Dictionary.IDictionary#32](~/add/codesnippet/visualbasic/afcc80dd-2182-4450-a976-_3.vb)]"
  syntax:
    content: bool IDictionary.Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: The key to locate in the <xref href="System.Collections.IDictionary"></xref>.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Collections.IDictionary"></xref> contains an element with the specified key; otherwise, `false`.'
  overload: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
  id: System#Collections#IDictionary#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: IDictionary.GetEnumerator()
  nameWithType: Dictionary<TKey,TValue>.IDictionary.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Returns an <xref href="System.Collections.IDictionaryEnumerator"></xref> for the <xref href="System.Collections.IDictionary"></xref>.
  remarks: "For purposes of enumeration, each item is a <xref:System.Collections.Generic.KeyValuePair%602> structure representing a value and its key.  \n  \n The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IDictionaryEnumerator.Entry%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IDictionaryEnumerator.Entry%2A>.  \n  \n The <xref:System.Collections.IDictionaryEnumerator.Entry%2A> property returns the same element until either the <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> method is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined. To set <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example shows how to enumerate the key/value pairs in the dictionary by using the `foreach` statement (`For Each` in Visual Basic, `for each` in C++), which hides the use of the enumerator. In particular, note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=fullName> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.  \n  \n The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.  \n  \n [!code-cs[Generic.Dictionary.IDictionary#31](~/add/codesnippet/csharp/fabac81a-db70-4788-a642-_1.cs)]\n [!code-vb[Generic.Dictionary.IDictionary#31](~/add/codesnippet/visualbasic/fabac81a-db70-4788-a642-_1.vb)]  \n[!code-cs[Generic.Dictionary.IDictionary#7](~/add/codesnippet/csharp/fabac81a-db70-4788-a642-_2.cs)]\n[!code-vb[Generic.Dictionary.IDictionary#7](~/add/codesnippet/visualbasic/fabac81a-db70-4788-a642-_2.vb)]  \n[!code-cs[Generic.Dictionary.IDictionary#32](~/add/codesnippet/csharp/fabac81a-db70-4788-a642-_3.cs)]\n[!code-vb[Generic.Dictionary.IDictionary#32](~/add/codesnippet/visualbasic/fabac81a-db70-4788-a642-_3.vb)]"
  syntax:
    content: System.Collections.IDictionaryEnumerator IDictionary.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: An <xref href="System.Collections.IDictionaryEnumerator"></xref> for the <xref href="System.Collections.IDictionary"></xref>.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: IDictionary.IsFixedSize
  nameWithType: Dictionary<TKey,TValue>.IDictionary.IsFixedSize
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether the <xref href="System.Collections.IDictionary"></xref> has a fixed size.
  remarks: "A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \n  \n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \n  \n Getting the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.IDictionary.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Collections.IDictionary"></xref> has a fixed size; otherwise, `false`.  In the default implementation of <xref href="stem.Collections.Generic.Dictionary%602"></xref>, this property always returns `false`.'
  overload: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly
  id: System#Collections#IDictionary#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: IDictionary.IsReadOnly
  nameWithType: Dictionary<TKey,TValue>.IDictionary.IsReadOnly
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether the <xref href="System.Collections.IDictionary"></xref> is read-only.
  remarks: "A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Getting the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.IDictionary.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Collections.IDictionary"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href="stem.Collections.Generic.Dictionary%602"></xref>, this property always returns `false`.'
  overload: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
  id: System#Collections#IDictionary#Item(System.Object)
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: IDictionary.Item(Object)
  nameWithType: Dictionary<TKey,TValue>.IDictionary.Item(Object)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets or sets the value with the specified key.
  remarks: "This property provides the ability to access a specific value in the collection by using the following C# syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).  \n  \n You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection[\"myNonexistentKey\"] = myValue`. However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.  \n  \n The C# language uses the [this](../Topic/this%20\\(C%23%20Reference\\).md) keyword to define the indexers instead of implementing the IDictionary.Item property. Visual Basic implements IDictionary.Item as a default property, which provides the same indexing functionality.  \n  \n Getting or setting the value of this property approaches an O(1) operation."
  example:
  - "The following code example shows how to use the IDictionary.Item property (the indexer in C#) of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface with a <xref:System.Collections.Generic.Dictionary%602>, and ways the property differs from the <xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=fullName> property.  \n  \n The example shows that, like the <xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=fullName> property, the IDictionary.Item property can change the value associated with an existing key and can be used to add a new key/value pair if the specified key is not in the dictionary. The example also shows that unlike the <xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=fullName> property, the IDictionary.Item property does not throw an exception if `key` is not in the dictionary, returning a null reference instead. Finally, the example demonstrates that getting the IDictionary.Item property returns a null reference if `key` is not the correct data type, and that setting the property throws an exception if `key` is not the correct data type.  \n  \n The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.  \n  \n [!code-cs[Generic.Dictionary.IDictionary#31](~/add/codesnippet/csharp/2ac6677a-db3a-495f-b9d3-_1.cs)]\n [!code-vb[Generic.Dictionary.IDictionary#31](~/add/codesnippet/visualbasic/2ac6677a-db3a-495f-b9d3-_1.vb)]  \n[!code-cs[Generic.Dictionary.IDictionary#3](~/add/codesnippet/csharp/2ac6677a-db3a-495f-b9d3-_2.cs)]\n[!code-vb[Generic.Dictionary.IDictionary#3](~/add/codesnippet/visualbasic/2ac6677a-db3a-495f-b9d3-_2.vb)]  \n[!code-cs[Generic.Dictionary.IDictionary#4](~/add/codesnippet/csharp/2ac6677a-db3a-495f-b9d3-_3.cs)]\n[!code-vb[Generic.Dictionary.IDictionary#4](~/add/codesnippet/visualbasic/2ac6677a-db3a-495f-b9d3-_3.vb)]  \n[!code-cs[Generic.Dictionary.IDictionary#32](~/add/codesnippet/csharp/2ac6677a-db3a-495f-b9d3-_4.cs)]\n[!code-vb[Generic.Dictionary.IDictionary#32](~/add/codesnippet/visualbasic/2ac6677a-db3a-495f-b9d3-_4.vb)]"
  syntax:
    content: object System.Collections.IDictionary.Item[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: The key of the value to get.
    return:
      type: System.Object
      description: The value associated with the specified key, or `null` if <code>key</code> is not in the dictionary or <code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A value is being assigned, and <code>key</code> is of a type that is not assignable to the key type <code>TKey</code> of the <xref href=\"stem.Collections.Generic.Dictionary%602\"></xref>.  \n  \n -or-  \n  \n A value is being assigned, and <code>value</code> is of a type that is not assignable to the value type <code>TValue</code> of the <xref href=\"stem.Collections.Generic.Dictionary%602\"></xref>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys
  id: System#Collections#IDictionary#Keys
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: IDictionary.Keys
  nameWithType: Dictionary<TKey,TValue>.IDictionary.Keys
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets an <xref href="System.Collections.ICollection"></xref> containing the keys of the <xref href="System.Collections.IDictionary"></xref>.
  remarks: "The order of the keys in the returned <xref:System.Collections.ICollection> is unspecified, but it is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property.  \n  \n Getting the value of this property is an O(1) operation."
  example:
  - "The following code example shows how to use the IDictionary.Keys property of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface with a <xref:System.Collections.Generic.Dictionary%602>, to list the keys in the dictionary. The example also shows how to enumerate the key/value pairs in the dictionary; note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=fullName> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.  \n  \n The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.  \n  \n [!code-cs[Generic.Dictionary.IDictionary#31](~/add/codesnippet/csharp/fb6406df-91e9-47d7-9a63-_1.cs)]\n [!code-vb[Generic.Dictionary.IDictionary#31](~/add/codesnippet/visualbasic/fb6406df-91e9-47d7-9a63-_1.vb)]  \n[!code-cs[Generic.Dictionary.IDictionary#9](~/add/codesnippet/csharp/fb6406df-91e9-47d7-9a63-_2.cs)]\n[!code-vb[Generic.Dictionary.IDictionary#9](~/add/codesnippet/visualbasic/fb6406df-91e9-47d7-9a63-_2.vb)]  \n[!code-cs[Generic.Dictionary.IDictionary#7](~/add/codesnippet/csharp/fb6406df-91e9-47d7-9a63-_3.cs)]\n[!code-vb[Generic.Dictionary.IDictionary#7](~/add/codesnippet/visualbasic/fb6406df-91e9-47d7-9a63-_3.vb)]  \n[!code-cs[Generic.Dictionary.IDictionary#32](~/add/codesnippet/csharp/fb6406df-91e9-47d7-9a63-_4.cs)]\n[!code-vb[Generic.Dictionary.IDictionary#32](~/add/codesnippet/visualbasic/fb6406df-91e9-47d7-9a63-_4.vb)]"
  syntax:
    content: System.Collections.ICollection System.Collections.IDictionary.Keys { get; }
    return:
      type: System.Collections.ICollection
      description: An <xref href="System.Collections.ICollection"></xref> containing the keys of the <xref href="System.Collections.IDictionary"></xref>.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
  id: System#Collections#IDictionary#Remove(System.Object)
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: IDictionary.Remove(Object)
  nameWithType: Dictionary<TKey,TValue>.IDictionary.Remove(Object)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Removes the element with the specified key from the <xref href="System.Collections.IDictionary"></xref>.
  remarks: This method approaches an O(1) operation.
  example:
  - "The following code example shows how to use the IDictionary.Remove of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface with a <xref:System.Collections.Generic.Dictionary%602>.  \n  \n The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.  \n  \n [!code-cs[Generic.Dictionary.IDictionary#31](~/add/codesnippet/csharp/f916ab44-b2f0-44be-9c1a-_1.cs)]\n [!code-vb[Generic.Dictionary.IDictionary#31](~/add/codesnippet/visualbasic/f916ab44-b2f0-44be-9c1a-_1.vb)]  \n[!code-cs[Generic.Dictionary.IDictionary#10](~/add/codesnippet/csharp/f916ab44-b2f0-44be-9c1a-_2.cs)]\n[!code-vb[Generic.Dictionary.IDictionary#10](~/add/codesnippet/visualbasic/f916ab44-b2f0-44be-9c1a-_2.vb)]  \n[!code-cs[Generic.Dictionary.IDictionary#32](~/add/codesnippet/csharp/f916ab44-b2f0-44be-9c1a-_3.cs)]\n[!code-vb[Generic.Dictionary.IDictionary#32](~/add/codesnippet/visualbasic/f916ab44-b2f0-44be-9c1a-_3.vb)]"
  syntax:
    content: void IDictionary.Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: The key of the element to remove.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values
  id: System#Collections#IDictionary#Values
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: IDictionary.Values
  nameWithType: Dictionary<TKey,TValue>.IDictionary.Values
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets an <xref href="System.Collections.ICollection"></xref> containing the values in the <xref href="System.Collections.IDictionary"></xref>.
  remarks: "The order of the values in the returned <xref:System.Collections.ICollection> is unspecified, but it is guaranteed to be the same order as the corresponding keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Keys%2A> property.  \n  \n Getting the value of this property is an O(1) operation."
  example:
  - "The following code example shows how to use the IDictionary.Values property of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface with a <xref:System.Collections.Generic.Dictionary%602>, to list the values in the dictionary. The example also shows how to enumerate the key/value pairs in the dictionary; note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=fullName> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.  \n  \n The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.  \n  \n [!code-cs[Generic.Dictionary.IDictionary#31](~/add/codesnippet/csharp/a62f4fbf-b8cb-4b78-b3dc-_1.cs)]\n [!code-vb[Generic.Dictionary.IDictionary#31](~/add/codesnippet/visualbasic/a62f4fbf-b8cb-4b78-b3dc-_1.vb)]  \n[!code-cs[Generic.Dictionary.IDictionary#8](~/add/codesnippet/csharp/a62f4fbf-b8cb-4b78-b3dc-_2.cs)]\n[!code-vb[Generic.Dictionary.IDictionary#8](~/add/codesnippet/visualbasic/a62f4fbf-b8cb-4b78-b3dc-_2.vb)]  \n[!code-cs[Generic.Dictionary.IDictionary#7](~/add/codesnippet/csharp/a62f4fbf-b8cb-4b78-b3dc-_3.cs)]\n[!code-vb[Generic.Dictionary.IDictionary#7](~/add/codesnippet/visualbasic/a62f4fbf-b8cb-4b78-b3dc-_3.vb)]  \n[!code-cs[Generic.Dictionary.IDictionary#32](~/add/codesnippet/csharp/a62f4fbf-b8cb-4b78-b3dc-_4.cs)]\n[!code-vb[Generic.Dictionary.IDictionary#32](~/add/codesnippet/visualbasic/a62f4fbf-b8cb-4b78-b3dc-_4.vb)]"
  syntax:
    content: System.Collections.ICollection System.Collections.IDictionary.Values { get; }
    return:
      type: System.Collections.ICollection
      description: An <xref href="System.Collections.ICollection"></xref> containing the values in the <xref href="System.Collections.IDictionary"></xref>.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: Dictionary<TKey,TValue>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the collection.
  remarks: "For purposes of enumeration, each item is a <xref:System.Collections.Generic.KeyValuePair%602> structure representing a value and its key.  \n  \n The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n> [!NOTE]\n>  For better performance, the enumerator returned by this property does not throw an exception if it is positioned before the first element or after the last element and the <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> property is accessed; the value of the <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> property is undefined.  \n  \n The <xref:System.Collections.IEnumerator.Current%2A> property returns the same element until either the <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> method is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator"></xref> that can be used to iterate through the collection.
  overload: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: TryGetValue(TKey,TValue)
  nameWithType: Dictionary<TKey,TValue>.TryGetValue(TKey,TValue)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.TryGetValue(TKey,TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets the value associated with the specified key.
  remarks: "This method combines the functionality of the <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property.  \n  \n If the key is not found, then the `value` parameter gets the appropriate default value for the type `TValue`; for example, 0 (zero) for integer types, `false` for Boolean types, and `null` for reference types.  \n  \n Use the TryGetValue method if your code frequently attempts to access keys that are not in the dictionary. Using this method is more efficient than catching the <xref:System.Collections.Generic.KeyNotFoundException> thrown by the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property.  \n  \n This method approaches an O(1) operation."
  example:
  - "The example shows how to use the TryGetValue method as a more efficient way to retrieve values in a program that frequently tries keys that are not in the dictionary. For contrast, the example also shows how the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property (the indexer in C#) throws exceptions when attempting to retrieve nonexistent keys.  \n  \n This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class (`openWith` is the name of the Dictionary used in this example).  \n  \n [!code-cpp[Generic.Dictionary#5](~/add/codesnippet/cpp/m-system.collections.gen_6_1.cpp)]\n [!code-cs[Generic.Dictionary#5](~/add/codesnippet/csharp/m-system.collections.gen_6_1.cs)]\n [!code-vb[Generic.Dictionary#5](~/add/codesnippet/visualbasic/m-system.collections.gen_6_1.vb)]  \n[!code-cpp[Generic.Dictionary#4](~/add/codesnippet/cpp/m-system.collections.gen_6_2.cpp)]\n[!code-cs[Generic.Dictionary#4](~/add/codesnippet/csharp/m-system.collections.gen_6_2.cs)]\n[!code-vb[Generic.Dictionary#4](~/add/codesnippet/visualbasic/m-system.collections.gen_6_2.vb)]"
  syntax:
    content: public bool TryGetValue (TKey key, out TValue value);
    parameters:
    - id: key
      type: TKey
      description: The key of the value to get.
    - id: value
      type: TValue
      description: When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <code>value</code> parameter. This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.Dictionary%602"></xref> contains an element with the specified key; otherwise, `false`.'
  overload: System.Collections.Generic.Dictionary`2.TryGetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.Values
  id: Values
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  name: Values
  nameWithType: Dictionary<TKey,TValue>.Values
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets a collection containing the values in the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  remarks: "The order of the values in the <xref:System.Collections.Generic.Dictionary%602.ValueCollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.Generic.Dictionary%602.KeyCollection> returned by the <xref:System.Collections.Generic.Dictionary%602.Keys%2A> property.  \n  \n The returned <xref:System.Collections.Generic.Dictionary%602.ValueCollection> is not a static copy; instead, the <xref:System.Collections.Generic.Dictionary%602.ValueCollection> refers back to the values in the original <xref:System.Collections.Generic.Dictionary%602>. Therefore, changes to the <xref:System.Collections.Generic.Dictionary%602> continue to be reflected in the <xref:System.Collections.Generic.Dictionary%602.ValueCollection>.  \n  \n Getting the value of this property is an O(1) operation."
  example:
  - "This code example shows how to enumerate the values in the dictionary using the Values property, and how to enumerate the keys and values in the dictionary.  \n  \n This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class (`openWith` is the name of the Dictionary used in this example).  \n  \n [!code-cpp[Generic.Dictionary#8](~/add/codesnippet/cpp/p-system.collections.gen_10_1.cpp)]\n [!code-cs[Generic.Dictionary#8](~/add/codesnippet/csharp/p-system.collections.gen_10_1.cs)]\n [!code-vb[Generic.Dictionary#8](~/add/codesnippet/visualbasic/p-system.collections.gen_10_1.vb)]  \n[!code-cpp[Generic.Dictionary#7](~/add/codesnippet/cpp/p-system.collections.gen_10_2.cpp)]\n[!code-cs[Generic.Dictionary#7](~/add/codesnippet/csharp/p-system.collections.gen_10_2.cs)]\n[!code-vb[Generic.Dictionary#7](~/add/codesnippet/visualbasic/p-system.collections.gen_10_2.vb)]"
  syntax:
    content: public System.Collections.Generic.Dictionary<TKey,TValue>.ValueCollection Values { get; }
    return:
      type: System.Collections.Generic.Dictionary`2.ValueCollection
      description: A <xref href="stem.Collections.Generic.Dictionary%602.ValueCollection"></xref> containing the values in the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  overload: System.Collections.Generic.Dictionary`2.Values*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Collections.Generic.KeyNotFoundException
  parent: System.Collections.Generic
  isExternal: false
  name: KeyNotFoundException
  nameWithType: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
- uid: System.Runtime.Serialization.SerializationException
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationException
  nameWithType: SerializationException
  fullName: System.Runtime.Serialization.SerializationException
- uid: System.Collections.Generic.Dictionary`2.#ctor
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Dictionary<TKey,TValue>()
  nameWithType: Dictionary<TKey,TValue>.Dictionary<TKey,TValue>()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Dictionary<TKey,TValue>()
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Dictionary<TKey,TValue>(IDictionary<TKey,TValue>)
  nameWithType: Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(IDictionary<TKey,TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(IDictionary<TKey,TValue>)
- uid: System.Collections.Generic.IDictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: IDictionary<TKey,TValue>
  nameWithType: IDictionary<TKey,TValue>
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Dictionary<TKey,TValue>(IEqualityComparer<TKey>)
  nameWithType: Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(IEqualityComparer<TKey>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(IEqualityComparer<TKey>)
- uid: System.Collections.Generic.IEqualityComparer{TKey}
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: IEqualityComparer<TKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Int32)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Dictionary<TKey,TValue>(Int32)
  nameWithType: Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(Int32)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Dictionary<TKey,TValue>(IDictionary<TKey,TValue>,IEqualityComparer<TKey>)
  nameWithType: Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(IDictionary<TKey,TValue>,IEqualityComparer<TKey>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(IDictionary<TKey,TValue>,IEqualityComparer<TKey>)
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Dictionary<TKey,TValue>(Int32,IEqualityComparer<TKey>)
  nameWithType: Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(Int32,IEqualityComparer<TKey>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(Int32,IEqualityComparer<TKey>)
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Dictionary<TKey,TValue>(SerializationInfo,StreamingContext)
  nameWithType: Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Dictionary<TKey,TValue>(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Collections.Generic.Dictionary`2.Add(`0,`1)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Add(TKey,TValue)
  nameWithType: Dictionary<TKey,TValue>.Add(TKey,TValue)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Add(TKey,TValue)
- uid: TKey
  isExternal: true
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  isExternal: true
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Collections.Generic.Dictionary`2.Clear
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Clear()
  nameWithType: Dictionary<TKey,TValue>.Clear()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Clear()
- uid: System.Collections.Generic.Dictionary`2.Comparer
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Comparer
  nameWithType: Dictionary<TKey,TValue>.Comparer
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Comparer
- uid: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: ContainsKey(TKey)
  nameWithType: Dictionary<TKey,TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ContainsKey(TKey)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: ContainsValue(TValue)
  nameWithType: Dictionary<TKey,TValue>.ContainsValue(TValue)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ContainsValue(TValue)
- uid: System.Collections.Generic.Dictionary`2.Count
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Count
  nameWithType: Dictionary<TKey,TValue>.Count
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Count
- uid: System.Collections.Generic.Dictionary`2.GetEnumerator
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: GetEnumerator()
  nameWithType: Dictionary<TKey,TValue>.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.GetEnumerator()
- uid: System.Collections.Generic.Dictionary`2.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: Dictionary<TKey,TValue>+Enumerator
  nameWithType: Dictionary<TKey,TValue>+Enumerator
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+Enumerator
- uid: System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Dictionary<TKey,TValue>.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Collections.Generic.Dictionary`2.Item(`0)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Item(TKey)
  nameWithType: Dictionary<TKey,TValue>.Item(TKey)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Item(TKey)
- uid: System.Collections.Generic.Dictionary`2.Keys
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Keys
  nameWithType: Dictionary<TKey,TValue>.Keys
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.Dictionary`2.KeyCollection
  parent: System.Collections.Generic
  isExternal: false
  name: Dictionary<TKey,TValue>+KeyCollection
  nameWithType: Dictionary<TKey,TValue>+KeyCollection
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+KeyCollection
- uid: System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: OnDeserialization(Object)
  nameWithType: Dictionary<TKey,TValue>.OnDeserialization(Object)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.OnDeserialization(Object)
- uid: System.Collections.Generic.Dictionary`2.Remove(`0)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Remove(TKey)
  nameWithType: Dictionary<TKey,TValue>.Remove(TKey)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Remove(TKey)
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)
  nameWithType: Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)
- uid: System.Collections.Generic.KeyValuePair`2
  parent: System.Collections.Generic
  isExternal: false
  name: KeyValuePair<TKey,TValue>
  nameWithType: KeyValuePair<TKey,TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)
  nameWithType: Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[],Int32)
  nameWithType: Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[],Int32)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[],Int32)
- uid: System.Collections.Generic.KeyValuePair{TKey,TValue}[]
  parent: System.Collections.Generic
  isExternal: false
  name: KeyValuePair<TKey,TValue>[]
  nameWithType: KeyValuePair<TKey,TValue>[]
  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>[]
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<TKey,TValue>[]
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly
  nameWithType: Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)
  nameWithType: Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Keys
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: IDictionary<TKey,TValue>.Keys
  nameWithType: Dictionary<TKey,TValue>.IDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.ICollection{TKey}
  parent: System.Collections.Generic
  isExternal: false
  name: ICollection<TKey>
  nameWithType: ICollection<TKey>
  fullName: System.Collections.Generic.ICollection<TKey>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<TKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Values
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: IDictionary<TKey,TValue>.Values
  nameWithType: Dictionary<TKey,TValue>.IDictionary<TKey,TValue>.Values
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.ICollection{TValue}
  parent: System.Collections.Generic
  isExternal: false
  name: ICollection<TValue>
  nameWithType: ICollection<TValue>
  fullName: System.Collections.Generic.ICollection<TValue>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<TValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()
  nameWithType: Dictionary<TKey,TValue>.IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{TKey,TValue}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<KeyValuePair<TKey,TValue>>
  nameWithType: IEnumerator<KeyValuePair<TKey,TValue>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<TKey,TValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: IReadOnlyDictionary<TKey,TValue>.Keys
  nameWithType: Dictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.IEnumerable{TKey}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TKey>
  nameWithType: IEnumerable<TKey>
  fullName: System.Collections.Generic.IEnumerable<TKey>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: IReadOnlyDictionary<TKey,TValue>.Values
  nameWithType: Dictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.IEnumerable{TValue}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TValue>
  nameWithType: IEnumerable<TValue>
  fullName: System.Collections.Generic.IEnumerable<TValue>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: Dictionary<TKey,TValue>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: Dictionary<TKey,TValue>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection.IsSynchronized
- uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: Dictionary<TKey,TValue>.ICollection.SyncRoot
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.ICollection.SyncRoot
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: IDictionary.Add(Object,Object)
  nameWithType: Dictionary<TKey,TValue>.IDictionary.Add(Object,Object)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.Add(Object,Object)
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: IDictionary.Contains(Object)
  nameWithType: Dictionary<TKey,TValue>.IDictionary.Contains(Object)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.Contains(Object)
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: IDictionary.GetEnumerator()
  nameWithType: Dictionary<TKey,TValue>.IDictionary.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: IDictionary.IsFixedSize
  nameWithType: Dictionary<TKey,TValue>.IDictionary.IsFixedSize
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.IsFixedSize
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: IDictionary.IsReadOnly
  nameWithType: Dictionary<TKey,TValue>.IDictionary.IsReadOnly
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.IsReadOnly
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: IDictionary.Item(Object)
  nameWithType: Dictionary<TKey,TValue>.IDictionary.Item(Object)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.Item(Object)
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: IDictionary.Keys
  nameWithType: Dictionary<TKey,TValue>.IDictionary.Keys
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: IDictionary.Remove(Object)
  nameWithType: Dictionary<TKey,TValue>.IDictionary.Remove(Object)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.Remove(Object)
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: IDictionary.Values
  nameWithType: Dictionary<TKey,TValue>.IDictionary.Values
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IDictionary.Values
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: Dictionary<TKey,TValue>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: TryGetValue(TKey,TValue)
  nameWithType: Dictionary<TKey,TValue>.TryGetValue(TKey,TValue)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.TryGetValue(TKey,TValue)
- uid: System.Collections.Generic.Dictionary`2.Values
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Values
  nameWithType: Dictionary<TKey,TValue>.Values
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.Dictionary`2.ValueCollection
  parent: System.Collections.Generic
  isExternal: false
  name: Dictionary<TKey,TValue>+ValueCollection
  nameWithType: Dictionary<TKey,TValue>+ValueCollection
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection
- uid: System.Collections.Generic.Dictionary`2.#ctor*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Dictionary<TKey,TValue>
  nameWithType: Dictionary<TKey,TValue>.Dictionary<TKey,TValue>
- uid: System.Collections.Generic.Dictionary`2.Add*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Add
  nameWithType: Dictionary<TKey,TValue>.Add
- uid: System.Collections.Generic.Dictionary`2.Clear*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Clear
  nameWithType: Dictionary<TKey,TValue>.Clear
- uid: System.Collections.Generic.Dictionary`2.Comparer*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Comparer
  nameWithType: Dictionary<TKey,TValue>.Comparer
- uid: System.Collections.Generic.Dictionary`2.ContainsKey*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: ContainsKey
  nameWithType: Dictionary<TKey,TValue>.ContainsKey
- uid: System.Collections.Generic.Dictionary`2.ContainsValue*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: ContainsValue
  nameWithType: Dictionary<TKey,TValue>.ContainsValue
- uid: System.Collections.Generic.Dictionary`2.Count*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Count
  nameWithType: Dictionary<TKey,TValue>.Count
- uid: System.Collections.Generic.Dictionary`2.GetEnumerator*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: GetEnumerator
  nameWithType: Dictionary<TKey,TValue>.GetEnumerator
- uid: System.Collections.Generic.Dictionary`2.GetObjectData*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: GetObjectData
  nameWithType: Dictionary<TKey,TValue>.GetObjectData
- uid: System.Collections.Generic.Dictionary`2.Item*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Item
  nameWithType: Dictionary<TKey,TValue>.Item
- uid: System.Collections.Generic.Dictionary`2.Keys*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Keys
  nameWithType: Dictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.Dictionary`2.OnDeserialization*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: OnDeserialization
  nameWithType: Dictionary<TKey,TValue>.OnDeserialization
- uid: System.Collections.Generic.Dictionary`2.Remove*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Remove
  nameWithType: Dictionary<TKey,TValue>.Remove
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Add*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
  nameWithType: Dictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Contains*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
  nameWithType: Dictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#CopyTo*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
  nameWithType: Dictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#IsReadOnly*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  nameWithType: Dictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Remove*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
  nameWithType: Dictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary<TKey,TValue>#Keys*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.Generic.IDictionary<TKey,TValue>.Keys
  nameWithType: Dictionary<TKey,TValue>.System.Collections.Generic.IDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary<TKey,TValue>#Values*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.Generic.IDictionary<TKey,TValue>.Values
  nameWithType: Dictionary<TKey,TValue>.System.Collections.Generic.IDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable<System#Collections#Generic#KeyValuePair<TKey,TValue>>#GetEnumerator*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
  nameWithType: Dictionary<TKey,TValue>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary<TKey,TValue>#Keys*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  nameWithType: Dictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary<TKey,TValue>#Values*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  nameWithType: Dictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: Dictionary<TKey,TValue>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: Dictionary<TKey,TValue>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: Dictionary<TKey,TValue>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.IDictionary.Add
  nameWithType: Dictionary<TKey,TValue>.System.Collections.IDictionary.Add
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.IDictionary.Contains
  nameWithType: Dictionary<TKey,TValue>.System.Collections.IDictionary.Contains
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.IDictionary.GetEnumerator
  nameWithType: Dictionary<TKey,TValue>.System.Collections.IDictionary.GetEnumerator
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: Dictionary<TKey,TValue>.System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: Dictionary<TKey,TValue>.System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.IDictionary.Item
  nameWithType: Dictionary<TKey,TValue>.System.Collections.IDictionary.Item
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.IDictionary.Keys
  nameWithType: Dictionary<TKey,TValue>.System.Collections.IDictionary.Keys
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.IDictionary.Remove
  nameWithType: Dictionary<TKey,TValue>.System.Collections.IDictionary.Remove
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.IDictionary.Values
  nameWithType: Dictionary<TKey,TValue>.System.Collections.IDictionary.Values
- uid: System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Dictionary<TKey,TValue>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Generic.Dictionary`2.TryGetValue*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: TryGetValue
  nameWithType: Dictionary<TKey,TValue>.TryGetValue
- uid: System.Collections.Generic.Dictionary`2.Values*
  parent: System.Collections.Generic.Dictionary`2
  isExternal: false
  name: Values
  nameWithType: Dictionary<TKey,TValue>.Values
