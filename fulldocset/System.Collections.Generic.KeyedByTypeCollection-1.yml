### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.KeyedByTypeCollection`1
  id: KeyedByTypeCollection`1
  children:
  - System.Collections.Generic.KeyedByTypeCollection`1.#ctor
  - System.Collections.Generic.KeyedByTypeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.KeyedByTypeCollection`1.Find``1
  - System.Collections.Generic.KeyedByTypeCollection`1.FindAll``1
  - System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem(`0)
  - System.Collections.Generic.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)
  - System.Collections.Generic.KeyedByTypeCollection`1.Remove``1
  - System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll``1
  - System.Collections.Generic.KeyedByTypeCollection`1.SetItem(System.Int32,`0)
  langs:
  - csharp
  name: KeyedByTypeCollection<TItem>
  nameWithType: KeyedByTypeCollection<TItem>
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>
  type: Class
  summary: Provides a collection whose items are types that serve as keys.
  remarks: Only one object of each type is allowed in the collection because the type is the key and each key must be unique. But you can find objects of different types.
  syntax:
    content: 'public class KeyedByTypeCollection<TItem> : System.Collections.ObjectModel.KeyedCollection<Type,TItem>'
    typeParameters:
    - id: TItem
      description: The item types contained in the collection that also serve as the keys for the collection.
  inheritance:
  - System.Object
  - System.Collections.ObjectModel.Collection`1
  - System.Collections.ObjectModel.KeyedCollection`2
  implements: []
  inheritedMembers:
  - System.Collections.ObjectModel.Collection`1.Add(`0)
  - System.Collections.ObjectModel.Collection`1.Clear
  - System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
  - System.Collections.ObjectModel.Collection`1.Count
  - System.Collections.ObjectModel.Collection`1.GetEnumerator
  - System.Collections.ObjectModel.Collection`1.IndexOf(`0)
  - System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
  - System.Collections.ObjectModel.Collection`1.Item(System.Int32)
  - System.Collections.ObjectModel.Collection`1.Items
  - System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
  - System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)
  - System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)
  - System.Collections.ObjectModel.KeyedCollection`2.ClearItems
  - System.Collections.ObjectModel.KeyedCollection`2.Comparer
  - System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)
  - System.Collections.ObjectModel.KeyedCollection`2.Dictionary
  - System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)
  - System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)
  - System.Collections.ObjectModel.KeyedCollection`2.Item(`0)
  - System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)
  - System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)
  - System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\KeyedByTypeCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/KeyedByTypeCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.KeyedByTypeCollection`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: KeyedByTypeCollection<TItem>()
  nameWithType: KeyedByTypeCollection<TItem>.KeyedByTypeCollection<TItem>()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.KeyedByTypeCollection<TItem>()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.KeyedByTypeCollection%601"></xref> class.
  syntax:
    content: public KeyedByTypeCollection ();
    parameters: []
  overload: System.Collections.Generic.KeyedByTypeCollection`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\KeyedByTypeCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/KeyedByTypeCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.KeyedByTypeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: KeyedByTypeCollection<TItem>(IEnumerable<TItem>)
  nameWithType: KeyedByTypeCollection<TItem>.KeyedByTypeCollection<TItem>(IEnumerable<TItem>)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.KeyedByTypeCollection<TItem>(IEnumerable<TItem>)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.KeyedByTypeCollection%601"></xref> class for a specified enumeration of objects.
  syntax:
    content: public KeyedByTypeCollection (System.Collections.Generic.IEnumerable<TItem> items);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{TItem}
      description: The <xref href="stem.Collections.Generic.IEnumerable%601"></xref> of generic type <xref href="System.Object"></xref> used to initialize the collection.
  overload: System.Collections.Generic.KeyedByTypeCollection`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>items</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\KeyedByTypeCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/KeyedByTypeCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.KeyedByTypeCollection`1.Find``1
  id: Find``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: Find<T>()
  nameWithType: KeyedByTypeCollection<TItem>.Find<T>()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.Find<T>()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Returns the first item in the collection of a specified type.
  syntax:
    content: public T Find<T> ();
    parameters: []
    return:
      type: T
      description: 'The object of type <code>T</code> if it is a reference type and the value of type <code>T</code> if it is a value type. The default value of the type is returned if no object of type <code>T</code> is contained in the collection: `null` if it is a reference type and 0 if it is a value type.'
  overload: System.Collections.Generic.KeyedByTypeCollection`1.Find<T>*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\KeyedByTypeCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/KeyedByTypeCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.KeyedByTypeCollection`1.FindAll``1
  id: FindAll``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: FindAll<T>()
  nameWithType: KeyedByTypeCollection<TItem>.FindAll<T>()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.FindAll<T>()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Returns a collection of objects of type <code>T</code> that are contained in the <xref href="stem.Collections.Generic.KeyedByTypeCollection%601"></xref>.
  syntax:
    content: public System.Collections.ObjectModel.Collection<T> FindAll<T> ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection`1
      description: A <xref href="stem.Collections.ObjectModel.Collection%601"></xref> of type <code>T</code> that contains the objects of type <code>T</code> from the original collection.
  overload: System.Collections.Generic.KeyedByTypeCollection`1.FindAll<T>*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\KeyedByTypeCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/KeyedByTypeCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem(`0)
  id: GetKeyForItem(`0)
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: GetKeyForItem(TItem)
  nameWithType: KeyedByTypeCollection<TItem>.GetKeyForItem(TItem)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.GetKeyForItem(TItem)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets the type of an item contained in the collection.
  syntax:
    content: protected override Type GetKeyForItem (TItem item);
    parameters:
    - id: item
      type: TItem
      description: The item in the collection whose type is to be retrieved.
    return:
      type: System.Type
      description: The type of the specified <code>item</code> in the collection.
  overload: System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>item</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\KeyedByTypeCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/KeyedByTypeCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)
  id: InsertItem(System.Int32,`0)
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: InsertItem(Int32,TItem)
  nameWithType: KeyedByTypeCollection<TItem>.InsertItem(Int32,TItem)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.InsertItem(Int32,TItem)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Inserts an element into the collection at a specific location.
  syntax:
    content: protected override void InsertItem (int index, TItem item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <code>item</code> should be inserted.
    - id: item
      type: TItem
      description: The object to insert into the collection.
  overload: System.Collections.Generic.KeyedByTypeCollection`1.InsertItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>item</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\KeyedByTypeCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/KeyedByTypeCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.KeyedByTypeCollection`1.Remove``1
  id: Remove``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: Remove<T>()
  nameWithType: KeyedByTypeCollection<TItem>.Remove<T>()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.Remove<T>()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Removes an object of a specified type from the collection.
  syntax:
    content: public T Remove<T> ();
    parameters: []
    return:
      type: T
      description: The object removed from the collection.
  overload: System.Collections.Generic.KeyedByTypeCollection`1.Remove<T>*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\KeyedByTypeCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/KeyedByTypeCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll``1
  id: RemoveAll``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: RemoveAll<T>()
  nameWithType: KeyedByTypeCollection<TItem>.RemoveAll<T>()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.RemoveAll<T>()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Removes all of the elements of a specified type from the collection.
  syntax:
    content: public System.Collections.ObjectModel.Collection<T> RemoveAll<T> ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection`1
      description: The <xref href="stem.Collections.ObjectModel.Collection%601"></xref> that contains the objects of type <code>T</code> from the original collection.
  overload: System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll<T>*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\KeyedByTypeCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/KeyedByTypeCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.KeyedByTypeCollection`1.SetItem(System.Int32,`0)
  id: SetItem(System.Int32,`0)
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: SetItem(Int32,TItem)
  nameWithType: KeyedByTypeCollection<TItem>.SetItem(Int32,TItem)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.SetItem(Int32,TItem)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Replaces the item at the specified index with a new object.
  syntax:
    content: protected override void SetItem (int index, TItem item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the <code>item</code> to be replaced.
    - id: item
      type: TItem
      description: The object to add to the collection.
  overload: System.Collections.Generic.KeyedByTypeCollection`1.SetItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>item</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\KeyedByTypeCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/KeyedByTypeCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: System.Collections.ObjectModel.KeyedCollection<System.Type,TItem>
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Collections.Generic.KeyedByTypeCollection`1.#ctor
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: KeyedByTypeCollection<TItem>()
  nameWithType: KeyedByTypeCollection<TItem>.KeyedByTypeCollection<TItem>()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.KeyedByTypeCollection<TItem>()
- uid: System.Collections.Generic.KeyedByTypeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: KeyedByTypeCollection<TItem>(IEnumerable<TItem>)
  nameWithType: KeyedByTypeCollection<TItem>.KeyedByTypeCollection<TItem>(IEnumerable<TItem>)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.KeyedByTypeCollection<TItem>(IEnumerable<TItem>)
- uid: System.Collections.Generic.IEnumerable{TItem}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TItem>
  nameWithType: IEnumerable<TItem>
  fullName: System.Collections.Generic.IEnumerable<TItem>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TItem
    name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.KeyedByTypeCollection`1.Find``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: Find<T>()
  nameWithType: KeyedByTypeCollection<TItem>.Find<T>()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.Find<T>()
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.KeyedByTypeCollection`1.FindAll``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: FindAll<T>()
  nameWithType: KeyedByTypeCollection<TItem>.FindAll<T>()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.FindAll<T>()
- uid: System.Collections.ObjectModel.Collection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
- uid: System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem(`0)
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: GetKeyForItem(TItem)
  nameWithType: KeyedByTypeCollection<TItem>.GetKeyForItem(TItem)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.GetKeyForItem(TItem)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: TItem
  isExternal: true
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: System.Collections.Generic.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: InsertItem(Int32,TItem)
  nameWithType: KeyedByTypeCollection<TItem>.InsertItem(Int32,TItem)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.InsertItem(Int32,TItem)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.KeyedByTypeCollection`1.Remove``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: Remove<T>()
  nameWithType: KeyedByTypeCollection<TItem>.Remove<T>()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.Remove<T>()
- uid: System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: RemoveAll<T>()
  nameWithType: KeyedByTypeCollection<TItem>.RemoveAll<T>()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.RemoveAll<T>()
- uid: System.Collections.Generic.KeyedByTypeCollection`1.SetItem(System.Int32,`0)
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: SetItem(Int32,TItem)
  nameWithType: KeyedByTypeCollection<TItem>.SetItem(Int32,TItem)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.SetItem(Int32,TItem)
- uid: System.Collections.Generic.KeyedByTypeCollection`1.#ctor*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: KeyedByTypeCollection<TItem>
  nameWithType: KeyedByTypeCollection<TItem>.KeyedByTypeCollection<TItem>
- uid: System.Collections.Generic.KeyedByTypeCollection`1.Find<T>*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: Find<T>
  nameWithType: KeyedByTypeCollection<TItem>.Find<T>
- uid: System.Collections.Generic.KeyedByTypeCollection`1.FindAll<T>*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: FindAll<T>
  nameWithType: KeyedByTypeCollection<TItem>.FindAll<T>
- uid: System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: GetKeyForItem
  nameWithType: KeyedByTypeCollection<TItem>.GetKeyForItem
- uid: System.Collections.Generic.KeyedByTypeCollection`1.InsertItem*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: InsertItem
  nameWithType: KeyedByTypeCollection<TItem>.InsertItem
- uid: System.Collections.Generic.KeyedByTypeCollection`1.Remove<T>*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: Remove<T>
  nameWithType: KeyedByTypeCollection<TItem>.Remove<T>
- uid: System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll<T>*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: RemoveAll<T>
  nameWithType: KeyedByTypeCollection<TItem>.RemoveAll<T>
- uid: System.Collections.Generic.KeyedByTypeCollection`1.SetItem*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: SetItem
  nameWithType: KeyedByTypeCollection<TItem>.SetItem
