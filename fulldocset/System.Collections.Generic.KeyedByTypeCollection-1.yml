### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.KeyedByTypeCollection`1
  id: KeyedByTypeCollection`1
  children:
  - System.Collections.Generic.KeyedByTypeCollection`1.#ctor
  - System.Collections.Generic.KeyedByTypeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.KeyedByTypeCollection`1.Find``1
  - System.Collections.Generic.KeyedByTypeCollection`1.FindAll``1
  - System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem(`0)
  - System.Collections.Generic.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)
  - System.Collections.Generic.KeyedByTypeCollection`1.Remove``1
  - System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll``1
  - System.Collections.Generic.KeyedByTypeCollection`1.SetItem(System.Int32,`0)
  langs:
  - csharp
  name: KeyedByTypeCollection<TItem>
  nameWithType: KeyedByTypeCollection<TItem>
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>
  type: Class
  syntax:
    content: 'public class KeyedByTypeCollection<TItem> : System.Collections.ObjectModel.KeyedCollection<Type,TItem>'
    typeParameters:
    - id: TItem
      description: To be added.
  inheritance:
  - System.Object
  - System.Collections.ObjectModel.Collection`1
  - System.Collections.ObjectModel.KeyedCollection`2
  implements: []
  inheritedMembers:
  - System.Collections.ObjectModel.Collection`1.Add(`0)
  - System.Collections.ObjectModel.Collection`1.Clear
  - System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
  - System.Collections.ObjectModel.Collection`1.Count
  - System.Collections.ObjectModel.Collection`1.GetEnumerator
  - System.Collections.ObjectModel.Collection`1.IndexOf(`0)
  - System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
  - System.Collections.ObjectModel.Collection`1.Item(System.Int32)
  - System.Collections.ObjectModel.Collection`1.Items
  - System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
  - System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)
  - System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)
  - System.Collections.ObjectModel.KeyedCollection`2.ClearItems
  - System.Collections.ObjectModel.KeyedCollection`2.Comparer
  - System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)
  - System.Collections.ObjectModel.KeyedCollection`2.Dictionary
  - System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)
  - System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)
  - System.Collections.ObjectModel.KeyedCollection`2.Item(`0)
  - System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)
  - System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)
  - System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.KeyedByTypeCollection`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: KeyedByTypeCollection()
  nameWithType: KeyedByTypeCollection<TItem>.KeyedByTypeCollection()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.KeyedByTypeCollection()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public KeyedByTypeCollection ();
    parameters: []
  overload: System.Collections.Generic.KeyedByTypeCollection`1.#ctor*
  exceptions: []
  version:
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.KeyedByTypeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: KeyedByTypeCollection(IEnumerable<TItem>)
  nameWithType: KeyedByTypeCollection<TItem>.KeyedByTypeCollection(IEnumerable<TItem>)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.KeyedByTypeCollection(IEnumerable<TItem>)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public KeyedByTypeCollection (System.Collections.Generic.IEnumerable<TItem> items);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{TItem}
      description: To be added.
  overload: System.Collections.Generic.KeyedByTypeCollection`1.#ctor*
  exceptions: []
  version:
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.KeyedByTypeCollection`1.Find``1
  id: Find``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: Find()
  nameWithType: KeyedByTypeCollection<TItem>.Find()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.Find()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public T Find<T> ();
    parameters: []
    return:
      type: T
      description: To be added.
  overload: System.Collections.Generic.KeyedByTypeCollection`1.Find<T>*
  exceptions: []
  version:
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.KeyedByTypeCollection`1.FindAll``1
  id: FindAll``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: FindAll()
  nameWithType: KeyedByTypeCollection<TItem>.FindAll()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.FindAll()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.ObjectModel.Collection<T> FindAll<T> ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection`1
      description: To be added.
  overload: System.Collections.Generic.KeyedByTypeCollection`1.FindAll<T>*
  exceptions: []
  version:
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem(`0)
  id: GetKeyForItem(`0)
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: GetKeyForItem(TItem)
  nameWithType: KeyedByTypeCollection<TItem>.GetKeyForItem(TItem)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.GetKeyForItem(TItem)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: protected override Type GetKeyForItem (TItem item);
    parameters:
    - id: item
      type: TItem
      description: To be added.
    return:
      type: System.Type
      description: To be added.
  overload: System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem*
  exceptions: []
  version:
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)
  id: InsertItem(System.Int32,`0)
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: InsertItem(Int32,TItem)
  nameWithType: KeyedByTypeCollection<TItem>.InsertItem(Int32,TItem)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.InsertItem(Int32,TItem)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: protected override void InsertItem (int index, TItem item);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: item
      type: TItem
      description: To be added.
  overload: System.Collections.Generic.KeyedByTypeCollection`1.InsertItem*
  exceptions: []
  version:
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.KeyedByTypeCollection`1.Remove``1
  id: Remove``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: Remove()
  nameWithType: KeyedByTypeCollection<TItem>.Remove()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.Remove()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public T Remove<T> ();
    parameters: []
    return:
      type: T
      description: To be added.
  overload: System.Collections.Generic.KeyedByTypeCollection`1.Remove<T>*
  exceptions: []
  version:
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll``1
  id: RemoveAll``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: RemoveAll()
  nameWithType: KeyedByTypeCollection<TItem>.RemoveAll()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.RemoveAll()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.ObjectModel.Collection<T> RemoveAll<T> ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection`1
      description: To be added.
  overload: System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll<T>*
  exceptions: []
  version:
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.KeyedByTypeCollection`1.SetItem(System.Int32,`0)
  id: SetItem(System.Int32,`0)
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  langs:
  - csharp
  name: SetItem(Int32,TItem)
  nameWithType: KeyedByTypeCollection<TItem>.SetItem(Int32,TItem)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.SetItem(Int32,TItem)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  syntax:
    content: protected override void SetItem (int index, TItem item);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: item
      type: TItem
      description: To be added.
  overload: System.Collections.Generic.KeyedByTypeCollection`1.SetItem*
  exceptions: []
  version:
  - netframework-30
  - netframework-35
  - netframework-40
references:
- uid: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: System.Collections.ObjectModel.KeyedCollection<System.Type,TItem>
- uid: System.Collections.Generic.KeyedByTypeCollection`1.#ctor
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: KeyedByTypeCollection()
  nameWithType: KeyedByTypeCollection<TItem>.KeyedByTypeCollection()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.KeyedByTypeCollection()
- uid: System.Collections.Generic.KeyedByTypeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: KeyedByTypeCollection(IEnumerable<TItem>)
  nameWithType: KeyedByTypeCollection<TItem>.KeyedByTypeCollection(IEnumerable<TItem>)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.KeyedByTypeCollection(IEnumerable<TItem>)
- uid: System.Collections.Generic.IEnumerable{TItem}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TItem>
  nameWithType: IEnumerable<TItem>
  fullName: System.Collections.Generic.IEnumerable<TItem>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TItem
    name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.KeyedByTypeCollection`1.Find``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: Find()
  nameWithType: KeyedByTypeCollection<TItem>.Find()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.Find()
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.KeyedByTypeCollection`1.FindAll``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: FindAll()
  nameWithType: KeyedByTypeCollection<TItem>.FindAll()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.FindAll()
- uid: System.Collections.ObjectModel.Collection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
- uid: System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem(`0)
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: GetKeyForItem(TItem)
  nameWithType: KeyedByTypeCollection<TItem>.GetKeyForItem(TItem)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.GetKeyForItem(TItem)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: TItem
  isExternal: true
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: System.Collections.Generic.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: InsertItem(Int32,TItem)
  nameWithType: KeyedByTypeCollection<TItem>.InsertItem(Int32,TItem)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.InsertItem(Int32,TItem)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.KeyedByTypeCollection`1.Remove``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: Remove()
  nameWithType: KeyedByTypeCollection<TItem>.Remove()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.Remove()
- uid: System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll``1
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: RemoveAll()
  nameWithType: KeyedByTypeCollection<TItem>.RemoveAll()
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.RemoveAll()
- uid: System.Collections.Generic.KeyedByTypeCollection`1.SetItem(System.Int32,`0)
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: SetItem(Int32,TItem)
  nameWithType: KeyedByTypeCollection<TItem>.SetItem(Int32,TItem)
  fullName: System.Collections.Generic.KeyedByTypeCollection<TItem>.SetItem(Int32,TItem)
- uid: System.Collections.Generic.KeyedByTypeCollection`1.#ctor*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: KeyedByTypeCollection<TItem>
  nameWithType: KeyedByTypeCollection<TItem>.KeyedByTypeCollection<TItem>
- uid: System.Collections.Generic.KeyedByTypeCollection`1.Find<T>*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: Find<T>
  nameWithType: KeyedByTypeCollection<TItem>.Find<T>
- uid: System.Collections.Generic.KeyedByTypeCollection`1.FindAll<T>*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: FindAll<T>
  nameWithType: KeyedByTypeCollection<TItem>.FindAll<T>
- uid: System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: GetKeyForItem
  nameWithType: KeyedByTypeCollection<TItem>.GetKeyForItem
- uid: System.Collections.Generic.KeyedByTypeCollection`1.InsertItem*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: InsertItem
  nameWithType: KeyedByTypeCollection<TItem>.InsertItem
- uid: System.Collections.Generic.KeyedByTypeCollection`1.Remove<T>*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: Remove<T>
  nameWithType: KeyedByTypeCollection<TItem>.Remove<T>
- uid: System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll<T>*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: RemoveAll<T>
  nameWithType: KeyedByTypeCollection<TItem>.RemoveAll<T>
- uid: System.Collections.Generic.KeyedByTypeCollection`1.SetItem*
  parent: System.Collections.Generic.KeyedByTypeCollection`1
  isExternal: false
  name: SetItem
  nameWithType: KeyedByTypeCollection<TItem>.SetItem
