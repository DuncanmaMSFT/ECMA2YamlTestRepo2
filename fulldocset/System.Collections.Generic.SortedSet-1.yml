### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.SortedSet`1
  id: SortedSet`1
  children:
  - System.Collections.Generic.SortedSet`1.#ctor
  - System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.SortedSet`1.Add(`0)
  - System.Collections.Generic.SortedSet`1.Clear
  - System.Collections.Generic.SortedSet`1.Comparer
  - System.Collections.Generic.SortedSet`1.Contains(`0)
  - System.Collections.Generic.SortedSet`1.CopyTo(`0[])
  - System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)
  - System.Collections.Generic.SortedSet`1.Count
  - System.Collections.Generic.SortedSet`1.CreateSetComparer
  - System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.GetEnumerator
  - System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)
  - System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.Max
  - System.Collections.Generic.SortedSet`1.Min
  - System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)
  - System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.Remove(`0)
  - System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})
  - System.Collections.Generic.SortedSet`1.Reverse
  - System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  langs:
  - csharp
  name: SortedSet<T>
  nameWithType: SortedSet<T>
  fullName: System.Collections.Generic.SortedSet<T>
  type: Class
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.SortedSetDebugView`1))]

      public class SortedSet<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.ISet<T>, System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
    typeParameters:
    - id: T
      description: To be added.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.ISet<T>
  - System.Collections.ICollection
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: SortedSet<T>()
  nameWithType: SortedSet<T>.SortedSet<T>()
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public SortedSet ();
    parameters: []
  overload: System.Collections.Generic.SortedSet`1.#ctor*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: SortedSet<T>(IComparer<T>)
  nameWithType: SortedSet<T>.SortedSet<T>(IComparer<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(IComparer<T>)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public SortedSet (System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.#ctor*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: SortedSet<T>(IEnumerable<T>)
  nameWithType: SortedSet<T>.SortedSet<T>(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(IEnumerable<T>)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public SortedSet (System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.#ctor*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: SortedSet<T>(IEnumerable<T>,IComparer<T>)
  nameWithType: SortedSet<T>.SortedSet<T>(IEnumerable<T>,IComparer<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(IEnumerable<T>,IComparer<T>)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public SortedSet (System.Collections.Generic.IEnumerable<T> collection, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.#ctor*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: SortedSet<T>(SerializationInfo,StreamingContext)
  nameWithType: SortedSet<T>.SortedSet<T>(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: protected SortedSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: To be added.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.#ctor*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Add(T)
  nameWithType: SortedSet<T>.Add(T)
  fullName: System.Collections.Generic.SortedSet<T>.Add(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool Add (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.Add*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.Clear
  id: Clear
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Clear()
  nameWithType: SortedSet<T>.Clear()
  fullName: System.Collections.Generic.SortedSet<T>.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.Generic.SortedSet`1.Clear*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.Comparer
  id: Comparer
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Comparer
  nameWithType: SortedSet<T>.Comparer
  fullName: System.Collections.Generic.SortedSet<T>.Comparer
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.IComparer<T> Comparer { get; }
    return:
      type: System.Collections.Generic.IComparer`1
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.Comparer*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: SortedSet<T>.Contains(T)
  fullName: System.Collections.Generic.SortedSet<T>.Contains(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public virtual bool Contains (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.Contains*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: CopyTo(T[])
  nameWithType: SortedSet<T>.CopyTo(T[])
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[])
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.CopyTo*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: SortedSet<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.CopyTo*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)
  id: CopyTo(`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: CopyTo(T[],Int32,Int32)
  nameWithType: SortedSet<T>.CopyTo(T[],Int32,Int32)
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo (T[] array, int index, int count);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.CopyTo*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.Count
  id: Count
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Count
  nameWithType: SortedSet<T>.Count
  fullName: System.Collections.Generic.SortedSet<T>.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.Count*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.CreateSetComparer
  id: CreateSetComparer
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: CreateSetComparer()
  nameWithType: SortedSet<T>.CreateSetComparer()
  fullName: System.Collections.Generic.SortedSet<T>.CreateSetComparer()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public static System.Collections.Generic.IEqualityComparer<System.Collections.Generic.SortedSet<T>> CreateSetComparer ();
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer{System.Collections.Generic.SortedSet{T}}
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.CreateSetComparer*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})
  id: CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: CreateSetComparer(IEqualityComparer<T>)
  nameWithType: SortedSet<T>.CreateSetComparer(IEqualityComparer<T>)
  fullName: System.Collections.Generic.SortedSet<T>.CreateSetComparer(IEqualityComparer<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public static System.Collections.Generic.IEqualityComparer<System.Collections.Generic.SortedSet<T>> CreateSetComparer (System.Collections.Generic.IEqualityComparer<T> memberEqualityComparer);
    parameters:
    - id: memberEqualityComparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: To be added.
    return:
      type: System.Collections.Generic.IEqualityComparer{System.Collections.Generic.SortedSet{T}}
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.CreateSetComparer*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: ExceptWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.ExceptWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void ExceptWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.ExceptWith*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SortedSet<T>.GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.SortedSet<T>.Enumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.SortedSet`1.Enumerator
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.GetEnumerator*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SortedSet<T>.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.SortedSet<T>.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: To be added.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.GetObjectData*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)
  id: GetViewBetween(`0,`0)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: GetViewBetween(T,T)
  nameWithType: SortedSet<T>.GetViewBetween(T,T)
  fullName: System.Collections.Generic.SortedSet<T>.GetViewBetween(T,T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public virtual System.Collections.Generic.SortedSet<T> GetViewBetween (T lowerValue, T upperValue);
    parameters:
    - id: lowerValue
      type: T
      description: To be added.
    - id: upperValue
      type: T
      description: To be added.
    return:
      type: System.Collections.Generic.SortedSet`1
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.GetViewBetween*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  id: IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IntersectWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IntersectWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public virtual void IntersectWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.IntersectWith*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsProperSubsetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool IsProperSubsetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.IsProperSubsetOf*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsProperSupersetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool IsProperSupersetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.IsProperSupersetOf*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsSubsetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool IsSubsetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.IsSubsetOf*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsSupersetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool IsSupersetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.IsSupersetOf*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.Max
  id: Max
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Max
  nameWithType: SortedSet<T>.Max
  fullName: System.Collections.Generic.SortedSet<T>.Max
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public T Max { get; }
    return:
      type: T
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.Max*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.Min
  id: Min
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Min
  nameWithType: SortedSet<T>.Min
  fullName: System.Collections.Generic.SortedSet<T>.Min
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public T Min { get; }
    return:
      type: T
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.Min*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)
  id: OnDeserialization(System.Object)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: OnDeserialization(Object)
  nameWithType: SortedSet<T>.OnDeserialization(Object)
  fullName: System.Collections.Generic.SortedSet<T>.OnDeserialization(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: protected virtual void OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.OnDeserialization*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  id: Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Overlaps(IEnumerable<T>)
  nameWithType: SortedSet<T>.Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.Overlaps(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool Overlaps (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.Overlaps*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Remove(T)
  nameWithType: SortedSet<T>.Remove(T)
  fullName: System.Collections.Generic.SortedSet<T>.Remove(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool Remove (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.Remove*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})
  id: RemoveWhere(System.Predicate{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: RemoveWhere(Predicate<T>)
  nameWithType: SortedSet<T>.RemoveWhere(Predicate<T>)
  fullName: System.Collections.Generic.SortedSet<T>.RemoveWhere(Predicate<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public int RemoveWhere (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.RemoveWhere*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.Reverse
  id: Reverse
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Reverse()
  nameWithType: SortedSet<T>.Reverse()
  fullName: System.Collections.Generic.SortedSet<T>.Reverse()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.IEnumerable<T> Reverse ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.Reverse*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  id: SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: SetEquals(IEnumerable<T>)
  nameWithType: SortedSet<T>.SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SetEquals(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool SetEquals (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.SetEquals*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SymmetricExceptWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void SymmetricExceptWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.SymmetricExceptWith*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: ICollection<T>.Add(T)
  nameWithType: SortedSet<T>.ICollection<T>.Add(T)
  fullName: System.Collections.Generic.SortedSet<T>.ICollection<T>.Add(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: void ICollection<T>.Add (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection<T>#Add*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: ICollection<T>.IsReadOnly
  nameWithType: SortedSet<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.SortedSet<T>.ICollection<T>.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: SortedSet<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.IEnumerable<T>.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: SortedSet<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.SortedSet<T>.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: SortedSet<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.SortedSet<T>.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: SortedSet<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.SortedSet<T>.ICollection.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: SortedSet<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IDeserializationCallback.OnDeserialization(Object)
  nameWithType: SortedSet<T>.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Collections.Generic.SortedSet<T>.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SortedSet<T>.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.SortedSet<T>.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: To be added.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  id: UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: UnionWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.UnionWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void UnionWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Generic.SortedSet`1.UnionWith*
  exceptions: []
  version:
  - netframework-4.0
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Collections.Generic.SortedSet`1.#ctor
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SortedSet<T>()
  nameWithType: SortedSet<T>.SortedSet<T>()
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>()
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SortedSet<T>(IComparer<T>)
  nameWithType: SortedSet<T>.SortedSet<T>(IComparer<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(IComparer<T>)
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SortedSet<T>(IEnumerable<T>)
  nameWithType: SortedSet<T>.SortedSet<T>(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SortedSet<T>(IEnumerable<T>,IComparer<T>)
  nameWithType: SortedSet<T>.SortedSet<T>(IEnumerable<T>,IComparer<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(IEnumerable<T>,IComparer<T>)
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SortedSet<T>(SerializationInfo,StreamingContext)
  nameWithType: SortedSet<T>.SortedSet<T>(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Collections.Generic.SortedSet`1.Add(`0)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Add(T)
  nameWithType: SortedSet<T>.Add(T)
  fullName: System.Collections.Generic.SortedSet<T>.Add(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.SortedSet`1.Clear
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Clear()
  nameWithType: SortedSet<T>.Clear()
  fullName: System.Collections.Generic.SortedSet<T>.Clear()
- uid: System.Collections.Generic.SortedSet`1.Comparer
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Comparer
  nameWithType: SortedSet<T>.Comparer
  fullName: System.Collections.Generic.SortedSet<T>.Comparer
- uid: System.Collections.Generic.SortedSet`1.Contains(`0)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Contains(T)
  nameWithType: SortedSet<T>.Contains(T)
  fullName: System.Collections.Generic.SortedSet<T>.Contains(T)
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[])
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: CopyTo(T[])
  nameWithType: SortedSet<T>.CopyTo(T[])
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[])
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: SortedSet<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[],Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: CopyTo(T[],Int32,Int32)
  nameWithType: SortedSet<T>.CopyTo(T[],Int32,Int32)
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[],Int32,Int32)
- uid: System.Collections.Generic.SortedSet`1.Count
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Count
  nameWithType: SortedSet<T>.Count
  fullName: System.Collections.Generic.SortedSet<T>.Count
- uid: System.Collections.Generic.SortedSet`1.CreateSetComparer
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: CreateSetComparer()
  nameWithType: SortedSet<T>.CreateSetComparer()
  fullName: System.Collections.Generic.SortedSet<T>.CreateSetComparer()
- uid: System.Collections.Generic.IEqualityComparer{System.Collections.Generic.SortedSet{T}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<SortedSet<T>>
  nameWithType: IEqualityComparer<SortedSet<T>>
  fullName: System.Collections.Generic.IEqualityComparer<System.Collections.Generic.SortedSet<T>>
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: IEqualityComparer<System.Collections.Generic.SortedSet<T>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    nameWithType: SortedSet
    fullName: SortedSet<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: CreateSetComparer(IEqualityComparer<T>)
  nameWithType: SortedSet<T>.CreateSetComparer(IEqualityComparer<T>)
  fullName: System.Collections.Generic.SortedSet<T>.CreateSetComparer(IEqualityComparer<T>)
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
- uid: System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ExceptWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.ExceptWith(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.GetEnumerator
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: SortedSet<T>.GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.GetEnumerator()
- uid: System.Collections.Generic.SortedSet`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: SortedSet<T>+Enumerator
  nameWithType: SortedSet<T>+Enumerator
  fullName: System.Collections.Generic.SortedSet<T>+Enumerator
- uid: System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SortedSet<T>.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.SortedSet<T>.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: GetViewBetween(T,T)
  nameWithType: SortedSet<T>.GetViewBetween(T,T)
  fullName: System.Collections.Generic.SortedSet<T>.GetViewBetween(T,T)
- uid: System.Collections.Generic.SortedSet`1
  parent: System.Collections.Generic
  isExternal: false
  name: SortedSet<T>
  nameWithType: SortedSet<T>
  fullName: System.Collections.Generic.SortedSet<T>
- uid: System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IntersectWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IntersectWith(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsProperSubsetOf(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsProperSupersetOf(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsSubsetOf(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsSupersetOf(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.Max
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Max
  nameWithType: SortedSet<T>.Max
  fullName: System.Collections.Generic.SortedSet<T>.Max
- uid: System.Collections.Generic.SortedSet`1.Min
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Min
  nameWithType: SortedSet<T>.Min
  fullName: System.Collections.Generic.SortedSet<T>.Min
- uid: System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: OnDeserialization(Object)
  nameWithType: SortedSet<T>.OnDeserialization(Object)
  fullName: System.Collections.Generic.SortedSet<T>.OnDeserialization(Object)
- uid: System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Overlaps(IEnumerable<T>)
  nameWithType: SortedSet<T>.Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.Overlaps(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.Remove(`0)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Remove(T)
  nameWithType: SortedSet<T>.Remove(T)
  fullName: System.Collections.Generic.SortedSet<T>.Remove(T)
- uid: System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: RemoveWhere(Predicate<T>)
  nameWithType: SortedSet<T>.RemoveWhere(Predicate<T>)
  fullName: System.Collections.Generic.SortedSet<T>.RemoveWhere(Predicate<T>)
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Collections.Generic.SortedSet`1.Reverse
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Reverse()
  nameWithType: SortedSet<T>.Reverse()
  fullName: System.Collections.Generic.SortedSet<T>.Reverse()
- uid: System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SetEquals(IEnumerable<T>)
  nameWithType: SortedSet<T>.SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SetEquals(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SymmetricExceptWith(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ICollection<T>.Add(T)
  nameWithType: SortedSet<T>.ICollection<T>.Add(T)
  fullName: System.Collections.Generic.SortedSet<T>.ICollection<T>.Add(T)
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ICollection<T>.IsReadOnly
  nameWithType: SortedSet<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.SortedSet<T>.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: SortedSet<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.IEnumerable<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: SortedSet<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.SortedSet<T>.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: SortedSet<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.SortedSet<T>.ICollection.IsSynchronized
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: SortedSet<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.SortedSet<T>.ICollection.SyncRoot
- uid: System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: SortedSet<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IDeserializationCallback.OnDeserialization(Object)
  nameWithType: SortedSet<T>.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Collections.Generic.SortedSet<T>.IDeserializationCallback.OnDeserialization(Object)
- uid: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SortedSet<T>.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.SortedSet<T>.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: UnionWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.UnionWith(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.#ctor*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SortedSet<T>
  nameWithType: SortedSet<T>.SortedSet<T>
- uid: System.Collections.Generic.SortedSet`1.Add*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Add
  nameWithType: SortedSet<T>.Add
- uid: System.Collections.Generic.SortedSet`1.Clear*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Clear
  nameWithType: SortedSet<T>.Clear
- uid: System.Collections.Generic.SortedSet`1.Comparer*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Comparer
  nameWithType: SortedSet<T>.Comparer
- uid: System.Collections.Generic.SortedSet`1.Contains*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Contains
  nameWithType: SortedSet<T>.Contains
- uid: System.Collections.Generic.SortedSet`1.CopyTo*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: CopyTo
  nameWithType: SortedSet<T>.CopyTo
- uid: System.Collections.Generic.SortedSet`1.Count*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Count
  nameWithType: SortedSet<T>.Count
- uid: System.Collections.Generic.SortedSet`1.CreateSetComparer*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: CreateSetComparer
  nameWithType: SortedSet<T>.CreateSetComparer
- uid: System.Collections.Generic.SortedSet`1.ExceptWith*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ExceptWith
  nameWithType: SortedSet<T>.ExceptWith
- uid: System.Collections.Generic.SortedSet`1.GetEnumerator*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: GetEnumerator
  nameWithType: SortedSet<T>.GetEnumerator
- uid: System.Collections.Generic.SortedSet`1.GetObjectData*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: GetObjectData
  nameWithType: SortedSet<T>.GetObjectData
- uid: System.Collections.Generic.SortedSet`1.GetViewBetween*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: GetViewBetween
  nameWithType: SortedSet<T>.GetViewBetween
- uid: System.Collections.Generic.SortedSet`1.IntersectWith*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IntersectWith
  nameWithType: SortedSet<T>.IntersectWith
- uid: System.Collections.Generic.SortedSet`1.IsProperSubsetOf*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsProperSubsetOf
  nameWithType: SortedSet<T>.IsProperSubsetOf
- uid: System.Collections.Generic.SortedSet`1.IsProperSupersetOf*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsProperSupersetOf
  nameWithType: SortedSet<T>.IsProperSupersetOf
- uid: System.Collections.Generic.SortedSet`1.IsSubsetOf*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsSubsetOf
  nameWithType: SortedSet<T>.IsSubsetOf
- uid: System.Collections.Generic.SortedSet`1.IsSupersetOf*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsSupersetOf
  nameWithType: SortedSet<T>.IsSupersetOf
- uid: System.Collections.Generic.SortedSet`1.Max*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Max
  nameWithType: SortedSet<T>.Max
- uid: System.Collections.Generic.SortedSet`1.Min*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Min
  nameWithType: SortedSet<T>.Min
- uid: System.Collections.Generic.SortedSet`1.OnDeserialization*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: OnDeserialization
  nameWithType: SortedSet<T>.OnDeserialization
- uid: System.Collections.Generic.SortedSet`1.Overlaps*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Overlaps
  nameWithType: SortedSet<T>.Overlaps
- uid: System.Collections.Generic.SortedSet`1.Remove*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Remove
  nameWithType: SortedSet<T>.Remove
- uid: System.Collections.Generic.SortedSet`1.RemoveWhere*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: RemoveWhere
  nameWithType: SortedSet<T>.RemoveWhere
- uid: System.Collections.Generic.SortedSet`1.Reverse*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Reverse
  nameWithType: SortedSet<T>.Reverse
- uid: System.Collections.Generic.SortedSet`1.SetEquals*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SetEquals
  nameWithType: SortedSet<T>.SetEquals
- uid: System.Collections.Generic.SortedSet`1.SymmetricExceptWith*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SymmetricExceptWith
  nameWithType: SortedSet<T>.SymmetricExceptWith
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection<T>#Add*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Add
  nameWithType: SortedSet<T>.System.Collections.Generic.ICollection<T>.Add
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType: SortedSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType: SortedSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: SortedSet<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SortedSet<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SortedSet<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SortedSet<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: SortedSet<T>.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
- uid: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: SortedSet<T>.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Collections.Generic.SortedSet`1.UnionWith*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: UnionWith
  nameWithType: SortedSet<T>.UnionWith
