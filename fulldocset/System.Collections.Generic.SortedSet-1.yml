### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.SortedSet`1
  id: SortedSet`1
  children:
  - System.Collections.Generic.SortedSet`1.#ctor
  - System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.SortedSet`1.Add(`0)
  - System.Collections.Generic.SortedSet`1.Clear
  - System.Collections.Generic.SortedSet`1.Comparer
  - System.Collections.Generic.SortedSet`1.Contains(`0)
  - System.Collections.Generic.SortedSet`1.CopyTo(`0[])
  - System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)
  - System.Collections.Generic.SortedSet`1.Count
  - System.Collections.Generic.SortedSet`1.CreateSetComparer
  - System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.GetEnumerator
  - System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)
  - System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.Max
  - System.Collections.Generic.SortedSet`1.Min
  - System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)
  - System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.Remove(`0)
  - System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})
  - System.Collections.Generic.SortedSet`1.Reverse
  - System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  langs:
  - csharp
  name: SortedSet<T>
  nameWithType: SortedSet<T>
  fullName: System.Collections.Generic.SortedSet<T>
  type: Class
  summary: Represents a collection of objects that is maintained in sorted order.
  remarks: "A SortedSet(T) object maintains a sorted order without affecting performance as elements are inserted and deleted. Duplicate elements are not allowed. Changing the sort values of existing items is not supported and may lead to unexpected behavior.  \n  \n For a thread safe alternative to SortedSet(T), see <xref:System.Collections.Immutable.ImmutableSortedSet%601>"
  example:
  - "The following example demonstrates a SortedSet(T) class that is created with the constructor that takes an <xref:System.Collections.Generic.IComparer%601> as a parameter. This comparer (`ByFileExtension`) is used to sort a list of file names by their extensions.  \n  \n This example demonstrates how to create a sorted set of media file names, remove unwanted elements, view a range of elements, and compare the set with another sorted set.  \n  \n [!code-vb[System.Collections.Generic.SortedSet#1](~/add/codesnippet/visualbasic/t-system.collections.gen_18_1.vb)]\n [!code-cs[System.Collections.Generic.SortedSet#1](~/add/codesnippet/csharp/t-system.collections.gen_18_1.cs)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.SortedSetDebugView`1))]

      public class SortedSet<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.ISet<T>, System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
    typeParameters:
    - id: T
      description: The type of elements in the set.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.IReadOnlyCollection<T>
  - System.Collections.Generic.ISet<T>
  - System.Collections.ICollection
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: SortedSet<T>()
  nameWithType: SortedSet<T>.SortedSet<T>()
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.SortedSet%601"></xref> class.
  syntax:
    content: public SortedSet ();
    parameters: []
  overload: System.Collections.Generic.SortedSet`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: SortedSet<T>(IComparer<T>)
  nameWithType: SortedSet<T>.SortedSet<T>(IComparer<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(IComparer<T>)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.SortedSet%601"></xref> class that uses a specified comparer.
  remarks: If `comparer` does not implement <xref:System.IComparable%601>, you must specify an <xref:System.Collections.Generic.IComparer%601> object to be used.
  example:
  - "The following example defines a comparer (`ByFileExtension`) that is used to construct a sorted set that sorts file names by their extensions. This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedSet%601> class.  \n  \n [!code-vb[System.Collections.Generic.SortedSet#2](~/add/codesnippet/visualbasic/753d537b-a46d-4fc1-9b83-_1.vb)]\n [!code-cs[System.Collections.Generic.SortedSet#2](~/add/codesnippet/csharp/753d537b-a46d-4fc1-9b83-_1.cs)]  \n[!code-vb[System.Collections.Generic.SortedSet#9](~/add/codesnippet/visualbasic/753d537b-a46d-4fc1-9b83-_2.vb)]\n[!code-cs[System.Collections.Generic.SortedSet#9](~/add/codesnippet/csharp/753d537b-a46d-4fc1-9b83-_2.cs)]"
  syntax:
    content: public SortedSet (System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: The default comparer to use for comparing objects.
  overload: System.Collections.Generic.SortedSet`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>comparer</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: SortedSet<T>(IEnumerable<T>)
  nameWithType: SortedSet<T>.SortedSet<T>(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(IEnumerable<T>)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.SortedSet%601"></xref> class that contains elements copied from a specified enumerable collection.
  remarks: "Duplicate elements in the enumerable collection are not copied into the new instance of the <xref:System.Collections.Generic.SortedSet%601> class, and no exceptions are thrown.  \n  \n This constructor is an O(`n` log `n`) operation, where `n` is the number of elements in the `collection` parameter."
  syntax:
    content: public SortedSet (System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: The enumerable collection to be copied.
  overload: System.Collections.Generic.SortedSet`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: SortedSet<T>(IEnumerable<T>,IComparer<T>)
  nameWithType: SortedSet<T>.SortedSet<T>(IEnumerable<T>,IComparer<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(IEnumerable<T>,IComparer<T>)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.SortedSet%601"></xref> class that contains elements copied from a specified enumerable collection and that uses a specified comparer.
  syntax:
    content: public SortedSet (System.Collections.Generic.IEnumerable<T> collection, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: The enumerable collection to be copied.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: The default comparer to use for comparing objects.
  overload: System.Collections.Generic.SortedSet`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>collection</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: SortedSet<T>(SerializationInfo,StreamingContext)
  nameWithType: SortedSet<T>.SortedSet<T>(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.SortedSet%601"></xref> class that contains serialized data.
  remarks: This constructor is called during deserialization to reconstitute an object that is transmitted over a stream.
  syntax:
    content: protected SortedSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The object that contains the information that is required to serialize the <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The structure that contains the source and destination of the serialized stream associated with the <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
  overload: System.Collections.Generic.SortedSet`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Add(T)
  nameWithType: SortedSet<T>.Add(T)
  fullName: System.Collections.Generic.SortedSet<T>.Add(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Adds an element to the set and returns a value that indicates if it was successfully added.
  remarks: "The <xref:System.Collections.Generic.SortedSet%601> class does not accept duplicate elements. If `item` is already in the set, this method returns `false` and does not throw an exception.  \n  \n If <xref:System.Collections.Generic.SortedSet%601.Count%2A> already equals the capacity of the <xref:System.Collections.Generic.SortedSet%601> object, the capacity is automatically adjusted to accommodate the new item."
  example:
  - "The following example adds elements to a sorted set. This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedSet%601> class.  \n  \n [!code-vb[System.Collections.Generic.SortedSet#3](~/add/codesnippet/visualbasic/m-system.collections.gen_27_1.vb)]\n [!code-cs[System.Collections.Generic.SortedSet#3](~/add/codesnippet/csharp/m-system.collections.gen_27_1.cs)]"
  syntax:
    content: public bool Add (T item);
    parameters:
    - id: item
      type: T
      description: The element to add to the set.
    return:
      type: System.Boolean
      description: '`true` if <code>item</code> is added to the set; otherwise, `false`.'
  overload: System.Collections.Generic.SortedSet`1.Add*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.Clear
  id: Clear
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Clear()
  nameWithType: SortedSet<T>.Clear()
  fullName: System.Collections.Generic.SortedSet<T>.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Removes all elements from the set.
  remarks: This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedSet%601.Count%2A>.
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.Generic.SortedSet`1.Clear*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.Comparer
  id: Comparer
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Comparer
  nameWithType: SortedSet<T>.Comparer
  fullName: System.Collections.Generic.SortedSet<T>.Comparer
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets the <xref href="stem.Collections.Generic.IComparer%601"></xref> object that is used to order the values in the <xref href="stem.Collections.Generic.SortedSet%601"></xref>.
  remarks: "The returned comparer can be either the default comparer of the type for a <xref:System.Collections.Generic.SortedSet%601>, or the comparer used for its constructor.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public System.Collections.Generic.IComparer<T> Comparer { get; }
    return:
      type: System.Collections.Generic.IComparer`1
      description: The comparer that is used to order the values in the <xref href="stem.Collections.Generic.SortedSet%601"></xref>.
  overload: System.Collections.Generic.SortedSet`1.Comparer*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: SortedSet<T>.Contains(T)
  fullName: System.Collections.Generic.SortedSet<T>.Contains(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Determines whether the set contains a specific element.
  remarks: This method is an O(ln n) operation.
  syntax:
    content: public virtual bool Contains (T item);
    parameters:
    - id: item
      type: T
      description: The element to locate in the set.
    return:
      type: System.Boolean
      description: '`true` if the set contains <code>item</code>; otherwise, `false`.'
  overload: System.Collections.Generic.SortedSet`1.Contains*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: CopyTo(T[])
  nameWithType: SortedSet<T>.CopyTo(T[])
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[])
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Copies the complete <xref href="stem.Collections.Generic.SortedSet%601"></xref> to a compatible one-dimensional array, starting at the beginning of the target array.
  remarks: The indexing of `array` must be zero-based.
  syntax:
    content: public void CopyTo (T[] array);
    parameters:
    - id: array
      type: T[]
      description: A one-dimensional array that is the destination of the elements copied from the <xref href="stem.Collections.Generic.SortedSet%601"></xref>.
  overload: System.Collections.Generic.SortedSet`1.CopyTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source <xref href="stem.Collections.Generic.SortedSet%601"></xref> exceeds the number of elements that the destination array can contain.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: SortedSet<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Copies the complete <xref href="stem.Collections.Generic.SortedSet%601"></xref> to a compatible one-dimensional array, starting at the specified array index.
  remarks: This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedSet%601.Count%2A>.
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: A one-dimensional array that is the destination of the elements copied from the <xref href="stem.Collections.Generic.SortedSet%601"></xref>. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Generic.SortedSet`1.CopyTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source array is greater than the available space from <code>index</code> to the end of the destination array.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)
  id: CopyTo(`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: CopyTo(T[],Int32,Int32)
  nameWithType: SortedSet<T>.CopyTo(T[],Int32,Int32)
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Copies a specified number of elements from <xref href="stem.Collections.Generic.SortedSet%601"></xref> to a compatible one-dimensional array, starting at the specified array index.
  remarks: This method is an O(`n`) operation, where `n` is `count`.
  syntax:
    content: public void CopyTo (T[] array, int index, int count);
    parameters:
    - id: array
      type: T[]
      description: A one-dimensional array that is the destination of the elements copied from the <xref href="stem.Collections.Generic.SortedSet%601"></xref>. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
    - id: count
      type: System.Int32
      description: The number of elements to copy.
  overload: System.Collections.Generic.SortedSet`1.CopyTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source array is greater than the available space from <code>index</code> to the end of the destination array.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>count</code> is less than zero."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.Count
  id: Count
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Count
  nameWithType: SortedSet<T>.Count
  fullName: System.Collections.Generic.SortedSet<T>.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets the number of elements in the <xref href="stem.Collections.Generic.SortedSet%601"></xref>.
  remarks: Retrieving the value of this property is an O(1) operation.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of elements in the <xref href="stem.Collections.Generic.SortedSet%601"></xref>.
  overload: System.Collections.Generic.SortedSet`1.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.CreateSetComparer
  id: CreateSetComparer
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: CreateSetComparer()
  nameWithType: SortedSet<T>.CreateSetComparer()
  fullName: System.Collections.Generic.SortedSet<T>.CreateSetComparer()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Returns an <xref href="System.Collections.IEqualityComparer"></xref> object that can be used to create a collection that contains individual sets.
  remarks: "The <xref:System.Collections.IEqualityComparer> object checks for equality at only one level; however, you can chain together comparers at additional levels to perform deeper equality testing.  \n  \n Calling this method is an O(1) operation."
  syntax:
    content: public static System.Collections.Generic.IEqualityComparer<System.Collections.Generic.SortedSet<T>> CreateSetComparer ();
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer{System.Collections.Generic.SortedSet{T}}
      description: A comparer for creating a collection of sets.
  overload: System.Collections.Generic.SortedSet`1.CreateSetComparer*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})
  id: CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: CreateSetComparer(IEqualityComparer<T>)
  nameWithType: SortedSet<T>.CreateSetComparer(IEqualityComparer<T>)
  fullName: System.Collections.Generic.SortedSet<T>.CreateSetComparer(IEqualityComparer<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Returns an <xref href="System.Collections.IEqualityComparer"></xref> object, according to a specified comparer, that can be used to create a collection that contains individual sets.
  remarks: "The `memberEqualityComparer` and the current <xref:System.Collections.Generic.SortedSet%601> must have the same definition of equality.  \n  \n You can use the comparer returned by this method in the <xref:System.Collections.Generic.SortedSet%601.%23ctor%28System.Collections.Generic.IEnumerable%7B%600%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=fullName> constructor to create a hash table of individual sets."
  example:
  - "The following example uses the CreateSetComparer method to create a set of sets. This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedSet%601> class.  \n  \n [!code-vb[System.Collections.Generic.SortedSet#7](~/add/codesnippet/visualbasic/f319c51a-7cdd-4afb-88e4-_1.vb)]\n [!code-cs[System.Collections.Generic.SortedSet#7](~/add/codesnippet/csharp/f319c51a-7cdd-4afb-88e4-_1.cs)]"
  syntax:
    content: public static System.Collections.Generic.IEqualityComparer<System.Collections.Generic.SortedSet<T>> CreateSetComparer (System.Collections.Generic.IEqualityComparer<T> memberEqualityComparer);
    parameters:
    - id: memberEqualityComparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: The comparer to use for creating the returned comparer.
    return:
      type: System.Collections.Generic.IEqualityComparer{System.Collections.Generic.SortedSet{T}}
      description: A comparer for creating a collection of sets.
  overload: System.Collections.Generic.SortedSet`1.CreateSetComparer*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: ExceptWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.ExceptWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Removes all elements that are in a specified collection from the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
  remarks: "This method removes any element in the current <xref:System.Collections.Generic.SortedSet%601> that is also in `other`. Duplicate values in `other` are ignored.  \n  \n This method is an O(`n`) operation, where `n` is the number of elements in the `other` parameter."
  example:
  - "The following example removes elements from a sorted set that are duplicated in another sorted set. This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedSet%601> class.  \n  \n [!code-vb[System.Collections.Generic.SortedSet#6](~/add/codesnippet/visualbasic/00128b97-336a-403c-807c-_1.vb)]\n [!code-cs[System.Collections.Generic.SortedSet#6](~/add/codesnippet/csharp/00128b97-336a-403c-807c-_1.cs)]"
  syntax:
    content: public void ExceptWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection of items to remove from the <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
  overload: System.Collections.Generic.SortedSet`1.ExceptWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SortedSet<T>.GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the <xref href="stem.Collections.Generic.SortedSet%601"></xref>.
  remarks: "Any changes to the <xref:System.Collections.Generic.SortedSet%601> will invalidate the enumerator.  \n  \n This method is an O(log n) operation."
  syntax:
    content: public System.Collections.Generic.SortedSet<T>.Enumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.SortedSet`1.Enumerator
      description: An enumerator that iterates through the <xref href="stem.Collections.Generic.SortedSet%601"></xref> in sorted order.
  overload: System.Collections.Generic.SortedSet`1.GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SortedSet<T>.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.SortedSet<T>.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Implements the <xref href="System.Runtime.Serialization.ISerializable"></xref> interface and returns the data that you must have to serialize a <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
  remarks: Calling this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedSet%601.Count%2A>.
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: A <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object that contains the information that is required to serialize the <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: A <xref href="System.Runtime.Serialization.StreamingContext"></xref> structure that contains the source and destination of the serialized stream associated with the <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
  overload: System.Collections.Generic.SortedSet`1.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>info</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)
  id: GetViewBetween(`0,`0)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: GetViewBetween(T,T)
  nameWithType: SortedSet<T>.GetViewBetween(T,T)
  fullName: System.Collections.Generic.SortedSet<T>.GetViewBetween(T,T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Returns a view of a subset in a <xref href="stem.Collections.Generic.SortedSet%601"></xref>.
  remarks: This method returns a view of the range of elements that fall between `lowerValue` and `upperValue`, as defined by the comparer. This method does not copy elements from the <xref:System.Collections.Generic.SortedSet%601>, but provides a window into the underlying <xref:System.Collections.Generic.SortedSet%601> itself. You can make changes in both the view and in the underlying <xref:System.Collections.Generic.SortedSet%601>.
  example:
  - "The following example uses the GetViewBetween method to list only the AVI files from a sorted set of media file names. The comparer evaluates file names according to their extensions. The `lowerValue` is \"AVI\" and the `upperValue` is only one value higher, \"AVJ\", to get the view of all AVI files. This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedSet%601> class.  \n  \n [!code-vb[System.Collections.Generic.SortedSet#5](~/add/codesnippet/visualbasic/m-system.collections.gen_63_1.vb)]\n [!code-cs[System.Collections.Generic.SortedSet#5](~/add/codesnippet/csharp/m-system.collections.gen_63_1.cs)]"
  syntax:
    content: public virtual System.Collections.Generic.SortedSet<T> GetViewBetween (T lowerValue, T upperValue);
    parameters:
    - id: lowerValue
      type: T
      description: The lowest desired value in the view.
    - id: upperValue
      type: T
      description: The highest desired value in the view.
    return:
      type: System.Collections.Generic.SortedSet`1
      description: A subset view that contains only the values in the specified range.
  overload: System.Collections.Generic.SortedSet`1.GetViewBetween*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>lowerValue</code> is more than <code>upperValue</code> according to the comparer.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: A tried operation on the view was outside the range specified by <code>lowerValue</code> and <code>upperValue</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  id: IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IntersectWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IntersectWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Modifies the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object so that it contains only elements that are also in a specified collection.
  remarks: "This method ignores any duplicate elements in `other`.  \n  \n If the collection represented by the `other` parameter is a <xref:System.Collections.Generic.SortedSet%601> collection with the same equality comparer as the current <xref:System.Collections.Generic.SortedSet%601> object, this method is an O(`n`) operation. Otherwise, this method is an O(`n` + `m`) operation, where `n` is <xref:System.Collections.Generic.SortedSet%601.Count%2A> and `m` is the number of elements in `other`."
  syntax:
    content: public virtual void IntersectWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
  overload: System.Collections.Generic.SortedSet`1.IntersectWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsProperSubsetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Determines whether a <xref href="stem.Collections.Generic.SortedSet%601"></xref> object is a proper subset of the specified collection.
  remarks: "An empty set is a proper subset of any other collection. Therefore, this method returns `true` if the collection represented by the current <xref:System.Collections.Generic.SortedSet%601> object is empty unless the `other` parameter is also an empty set.  \n  \n This method always returns `false` if <xref:System.Collections.Generic.SortedSet%601.Count%2A> is greater than or equal to the number of elements in `other`.  \n  \n If the collection represented by `other` is a <xref:System.Collections.Generic.SortedSet%601> collection with the same equality comparer as the current <xref:System.Collections.Generic.SortedSet%601> object, then this method is an O(`n`) operation. Otherwise, this method is an O(`n` + `m`) operation, where `n` is <xref:System.Collections.Generic.SortedSet%601.Count%2A> and `m` is the number of elements in `other`."
  syntax:
    content: public bool IsProperSubsetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.SortedSet%601"></xref> object is a proper subset of <code>other</code>; otherwise, `false`.'
  overload: System.Collections.Generic.SortedSet`1.IsProperSubsetOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsProperSupersetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Determines whether a <xref href="stem.Collections.Generic.SortedSet%601"></xref> object is a proper superset of the specified collection.
  remarks: "An empty set is a proper superset of any other collection. Therefore, this method returns `true` if the collection represented by the `other` parameter is empty unless the current <xref:System.Collections.Generic.SortedSet%601> collection is also empty.  \n  \n This method always returns `false` if <xref:System.Collections.Generic.SortedSet%601.Count%2A> is less than or equal to the number of elements in `other`.  \n  \n If the collection represented by `other` is a <xref:System.Collections.Generic.SortedSet%601> collection with the same equality comparer as the current <xref:System.Collections.Generic.SortedSet%601> object, this method is an O(`n`) operation. Otherwise, this method is an O(`n` + `m`) operation, where `n` is the number of elements in `other` and `m` is <xref:System.Collections.Generic.SortedSet%601.Count%2A>."
  syntax:
    content: public bool IsProperSupersetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.SortedSet%601"></xref> object is a proper superset of <code>other</code>; otherwise, `false`.'
  overload: System.Collections.Generic.SortedSet`1.IsProperSupersetOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsSubsetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Determines whether a <xref href="stem.Collections.Generic.SortedSet%601"></xref> object is a subset of the specified collection.
  remarks: "An empty set is a subset of any other collection, including an empty set; therefore, this method returns `true` if the collection represented by the current <xref:System.Collections.Generic.SortedSet%601> object is empty, even if the `other` parameter is an empty set.  \n  \n This method always returns `false` if <xref:System.Collections.Generic.SortedSet%601.Count%2A> is greater than the number of elements in `other`.  \n  \n If the collection represented by `other` is a <xref:System.Collections.Generic.SortedSet%601> collection with the same equality comparer as the current <xref:System.Collections.Generic.SortedSet%601> object, this method is an O(`n`) operation. Otherwise, this method is an O(`n` + `m`) operation, where `n` is <xref:System.Collections.Generic.SortedSet%601.Count%2A> and `m` is the number of elements in `other`."
  syntax:
    content: public bool IsSubsetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object is a subset of <code>other</code>; otherwise, `false`.'
  overload: System.Collections.Generic.SortedSet`1.IsSubsetOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsSupersetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Determines whether a <xref href="stem.Collections.Generic.SortedSet%601"></xref> object is a superset of the specified collection.
  remarks: "All collections, including the empty set, are supersets of the empty set. Therefore, this method returns `true` if the collection represented by the `other` parameter is empty, even if the current <xref:System.Collections.Generic.SortedSet%601> object is empty.  \n  \n This method always returns `false` if <xref:System.Collections.Generic.SortedSet%601.Count%2A> is less than the number of elements in `other`.  \n  \n If the collection represented by `other` is a <xref:System.Collections.Generic.SortedSet%601> collection with the same equality comparer as the current <xref:System.Collections.Generic.SortedSet%601> object, this method is an O(`n`) operation. Otherwise, this method is an O(`n` + `m`) operation, where `n` is the number of elements in `other` and `m` is <xref:System.Collections.Generic.SortedSet%601.Count%2A>."
  syntax:
    content: public bool IsSupersetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.SortedSet%601"></xref> object is a superset of <code>other</code>; otherwise, `false`.'
  overload: System.Collections.Generic.SortedSet`1.IsSupersetOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.Max
  id: Max
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Max
  nameWithType: SortedSet<T>.Max
  fullName: System.Collections.Generic.SortedSet<T>.Max
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets the maximum value in the <xref href="stem.Collections.Generic.SortedSet%601"></xref>, as defined by the comparer.
  syntax:
    content: public T Max { get; }
    return:
      type: T
      description: The maximum value in the set.
  overload: System.Collections.Generic.SortedSet`1.Max*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.Min
  id: Min
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Min
  nameWithType: SortedSet<T>.Min
  fullName: System.Collections.Generic.SortedSet<T>.Min
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets the minimum value in the <xref href="stem.Collections.Generic.SortedSet%601"></xref>, as defined by the comparer.
  syntax:
    content: public T Min { get; }
    return:
      type: T
      description: The minimum value in the set.
  overload: System.Collections.Generic.SortedSet`1.Min*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)
  id: OnDeserialization(System.Object)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: OnDeserialization(Object)
  nameWithType: SortedSet<T>.OnDeserialization(Object)
  fullName: System.Collections.Generic.SortedSet<T>.OnDeserialization(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Implements the <xref href="System.Runtime.Serialization.ISerializable"></xref> interface, and raises the deserialization event when the deserialization is completed.
  remarks: Calling this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedSet%601.Count%2A>.
  syntax:
    content: protected virtual void OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: The source of the deserialization event.
  overload: System.Collections.Generic.SortedSet`1.OnDeserialization*
  exceptions:
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: The <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object associated with the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object is invalid.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  id: Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Overlaps(IEnumerable<T>)
  nameWithType: SortedSet<T>.Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.Overlaps(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Determines whether the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object and a specified collection share common elements.
  remarks: "Any duplicate elements in `other` are ignored.  \n  \n This method is an O(`n`) operation, where `n` is the number of elements in `other`."
  syntax:
    content: public bool Overlaps (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.SortedSet%601"></xref> object and <code>other</code> share at least one common element; otherwise, `false`.'
  overload: System.Collections.Generic.SortedSet`1.Overlaps*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Remove(T)
  nameWithType: SortedSet<T>.Remove(T)
  fullName: System.Collections.Generic.SortedSet<T>.Remove(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Removes a specified item from the <xref href="stem.Collections.Generic.SortedSet%601"></xref>.
  remarks: "If the <xref:System.Collections.Generic.SortedSet%601> object does not contain the specified element, the object remains unchanged and no exception is thrown.  \n  \n `item` can be `null` for reference types.  \n  \n This method is an O(log n) operation."
  syntax:
    content: public bool Remove (T item);
    parameters:
    - id: item
      type: T
      description: The element to remove.
    return:
      type: System.Boolean
      description: '`true` if the element is found and successfully removed; otherwise, `false`.'
  overload: System.Collections.Generic.SortedSet`1.Remove*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})
  id: RemoveWhere(System.Predicate{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: RemoveWhere(Predicate<T>)
  nameWithType: SortedSet<T>.RemoveWhere(Predicate<T>)
  fullName: System.Collections.Generic.SortedSet<T>.RemoveWhere(Predicate<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Removes all elements that match the conditions defined by the specified predicate from a <xref href="stem.Collections.Generic.SortedSet%601"></xref>.
  remarks: "`match` must not modify the <xref:System.Collections.Generic.SortedSet%601>. Doing so can cause unexpected results.  \n  \n Calling this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedSet%601.Count%2A>."
  example:
  - "The following example removes unwanted elements from a sorted set. This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedSet%601> class.  \n  \n [!code-vb[System.Collections.Generic.SortedSet#4](~/add/codesnippet/visualbasic/m-system.collections.gen_85_1.vb)]\n [!code-cs[System.Collections.Generic.SortedSet#4](~/add/codesnippet/csharp/m-system.collections.gen_85_1.cs)]  \n[!code-vb[System.Collections.Generic.SortedSet#8](~/add/codesnippet/visualbasic/m-system.collections.gen_85_2.vb)]\n[!code-cs[System.Collections.Generic.SortedSet#8](~/add/codesnippet/csharp/m-system.collections.gen_85_2.cs)]"
  syntax:
    content: public int RemoveWhere (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: The delegate that defines the conditions of the elements to remove.
    return:
      type: System.Int32
      description: The number of elements that were removed from the <xref href="stem.Collections.Generic.SortedSet%601"></xref> collection..
  overload: System.Collections.Generic.SortedSet`1.RemoveWhere*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>match</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.Reverse
  id: Reverse
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: Reverse()
  nameWithType: SortedSet<T>.Reverse()
  fullName: System.Collections.Generic.SortedSet<T>.Reverse()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Returns an <xref href="stem.Collections.Generic.IEnumerable%601"></xref> that iterates over the <xref href="stem.Collections.Generic.SortedSet%601"></xref> in reverse order.
  syntax:
    content: public System.Collections.Generic.IEnumerable<T> Reverse ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable`1
      description: An enumerator that iterates over the <xref href="stem.Collections.Generic.SortedSet%601"></xref> in reverse order.
  overload: System.Collections.Generic.SortedSet`1.Reverse*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  id: SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: SetEquals(IEnumerable<T>)
  nameWithType: SortedSet<T>.SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SetEquals(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Determines whether the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object and the specified collection contain the same elements.
  remarks: "This method ignores the order of elements and any duplicate elements in `other`.  \n  \n If the collection represented by `other` is a <xref:System.Collections.Generic.SortedSet%601> collection with the same equality comparer as the current <xref:System.Collections.Generic.SortedSet%601> object, this method is an O(log`n`) operation. Otherwise, this method is an O(`n` + `m`) operation, where `n` is the number of elements in `other` and `m` is <xref:System.Collections.Generic.SortedSet%601.Count%2A>."
  syntax:
    content: public bool SetEquals (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object is equal to <code>other</code>; otherwise, false.'
  overload: System.Collections.Generic.SortedSet`1.SetEquals*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SymmetricExceptWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Modifies the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object so that it contains only elements that are present either in the current object or in the specified collection, but not both.
  remarks: "Any duplicate elements in `other` are ignored.  \n  \n If the `other` parameter is a <xref:System.Collections.Generic.SortedSet%601> collection with the same equality comparer as the current <xref:System.Collections.Generic.SortedSet%601> object, this method is an O(n log `m`) operation. Otherwise, this method is an O(`n` log `m`) + O(`n` log `n`) operation, where `n` is the number of elements in `other` and `m` is <xref:System.Collections.Generic.SortedSet%601.Count%2A>."
  syntax:
    content: public void SymmetricExceptWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
  overload: System.Collections.Generic.SortedSet`1.SymmetricExceptWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: ICollection<T>.Add(T)
  nameWithType: SortedSet<T>.ICollection<T>.Add(T)
  fullName: System.Collections.Generic.SortedSet<T>.ICollection<T>.Add(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Adds an item to an <xref href="stem.Collections.Generic.ICollection%601"></xref> object.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.Generic.SortedSet%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.  \n  \n If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation. If the capacity must be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.List%601.Count%2A>."
  syntax:
    content: void ICollection<T>.Add (T item);
    parameters:
    - id: item
      type: T
      description: The object to add to the <xref href="stem.Collections.Generic.ICollection%601"></xref> object.
  overload: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection<T>#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="stem.Collections.Generic.ICollection%601"></xref> is read-only.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: ICollection<T>.IsReadOnly
  nameWithType: SortedSet<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.SortedSet<T>.ICollection<T>.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets a value that indicates whether a <xref href="System.Collections.ICollection"></xref> is read-only.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.Generic.SortedSet%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.  \n  \n A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Getting the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the collection is read-only; otherwise, `false`.'
  overload: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: SortedSet<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.IEnumerable<T>.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through a collection.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.Generic.SortedSet%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.
  syntax:
    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: An enumerator that can be used to iterate through the collection.
  overload: System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: SortedSet<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.SortedSet<T>.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Copies the complete <xref href="stem.Collections.Generic.SortedSet%601"></xref> to a compatible one-dimensional array, starting at the specified array index.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.Generic.SortedSet%601> instance is cast to an <xref:System.Collections.ICollection> interface.
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: A one-dimensional array that is the destination of the elements copied from the <xref href="stem.Collections.Generic.SortedSet%601"></xref>. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source array is greater than the available space from <code>index</code> to the end of the destination array.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: SortedSet<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.SortedSet<T>.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets a value that indicates whether access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe).
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.Generic.SortedSet%601> instance is cast to an <xref:System.Collections.ICollection> interface.
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: '`true` if access to the <xref href="System.Collections.ICollection"></xref> is synchronized; otherwise, `false`.'
  overload: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: SortedSet<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.SortedSet<T>.ICollection.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.Generic.SortedSet%601> instance is cast to an <xref:System.Collections.ICollection> interface.  \n  \n This method is an O(1) operation."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>. In the default implementation of <xref href="stem.Collections.Generic.Dictionary%602.KeyCollection"></xref>, this property always returns the current instance.
  overload: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: SortedSet<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through a collection.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.Generic.SortedSet%601> instance is cast to an <xref:System.Collections.IEnumerable> interface.  \n  \n This method is an O(1) operation."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An enumerator that can be used to iterate through the collection.
  overload: System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: IDeserializationCallback.OnDeserialization(Object)
  nameWithType: SortedSet<T>.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Collections.Generic.SortedSet<T>.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Implements the <xref href="System.Runtime.Serialization.IDeserializationCallback"></xref> interface, and raises the deserialization event when the deserialization is completed.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.Generic.SortedSet%601> instance is cast to an <xref:System.Runtime.Serialization.IDeserializationCallback> interface.
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: The source of the deserialization event.
  overload: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions:
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: The <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object associated with the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> instance is invalid.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SortedSet<T>.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.SortedSet<T>.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Implements the <xref href="System.Runtime.Serialization.ISerializable"></xref> interface, and returns the data that you need to serialize the <xref href="stem.Collections.Generic.SortedSet%601"></xref> instance.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.Generic.SortedSet%601> instance is cast to an <xref:System.Runtime.Serialization.ISerializable> interface.
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: A <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object that contains the information that is required to serialize the <xref href="stem.Collections.Generic.SortedSet%601"></xref> instance.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: A <xref href="System.Runtime.Serialization.StreamingContext"></xref> structure that contains the source and destination of the serialized stream associated with the <xref href="stem.Collections.Generic.SortedSet%601"></xref> instance.
  overload: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>info</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  id: UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  langs:
  - csharp
  name: UnionWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.UnionWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Modifies the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object so that it contains all elements that are present in either the current object or the specified collection.
  remarks: Any duplicate elements in `other` are ignored.
  syntax:
    content: public void UnionWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.SortedSet%601"></xref> object.
  overload: System.Collections.Generic.SortedSet`1.UnionWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SortedSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SortedSet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Runtime.Serialization.SerializationException
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationException
  nameWithType: SerializationException
  fullName: System.Runtime.Serialization.SerializationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Collections.Generic.SortedSet`1.#ctor
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SortedSet<T>()
  nameWithType: SortedSet<T>.SortedSet<T>()
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>()
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SortedSet<T>(IComparer<T>)
  nameWithType: SortedSet<T>.SortedSet<T>(IComparer<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(IComparer<T>)
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SortedSet<T>(IEnumerable<T>)
  nameWithType: SortedSet<T>.SortedSet<T>(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SortedSet<T>(IEnumerable<T>,IComparer<T>)
  nameWithType: SortedSet<T>.SortedSet<T>(IEnumerable<T>,IComparer<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(IEnumerable<T>,IComparer<T>)
- uid: System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SortedSet<T>(SerializationInfo,StreamingContext)
  nameWithType: SortedSet<T>.SortedSet<T>(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.SortedSet<T>.SortedSet<T>(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Collections.Generic.SortedSet`1.Add(`0)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Add(T)
  nameWithType: SortedSet<T>.Add(T)
  fullName: System.Collections.Generic.SortedSet<T>.Add(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.SortedSet`1.Clear
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Clear()
  nameWithType: SortedSet<T>.Clear()
  fullName: System.Collections.Generic.SortedSet<T>.Clear()
- uid: System.Collections.Generic.SortedSet`1.Comparer
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Comparer
  nameWithType: SortedSet<T>.Comparer
  fullName: System.Collections.Generic.SortedSet<T>.Comparer
- uid: System.Collections.Generic.SortedSet`1.Contains(`0)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Contains(T)
  nameWithType: SortedSet<T>.Contains(T)
  fullName: System.Collections.Generic.SortedSet<T>.Contains(T)
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[])
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: CopyTo(T[])
  nameWithType: SortedSet<T>.CopyTo(T[])
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[])
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: SortedSet<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[],Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: CopyTo(T[],Int32,Int32)
  nameWithType: SortedSet<T>.CopyTo(T[],Int32,Int32)
  fullName: System.Collections.Generic.SortedSet<T>.CopyTo(T[],Int32,Int32)
- uid: System.Collections.Generic.SortedSet`1.Count
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Count
  nameWithType: SortedSet<T>.Count
  fullName: System.Collections.Generic.SortedSet<T>.Count
- uid: System.Collections.Generic.SortedSet`1.CreateSetComparer
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: CreateSetComparer()
  nameWithType: SortedSet<T>.CreateSetComparer()
  fullName: System.Collections.Generic.SortedSet<T>.CreateSetComparer()
- uid: System.Collections.Generic.IEqualityComparer{System.Collections.Generic.SortedSet{T}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<SortedSet<T>>
  nameWithType: IEqualityComparer<SortedSet<T>>
  fullName: System.Collections.Generic.IEqualityComparer<System.Collections.Generic.SortedSet<T>>
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: IEqualityComparer<System.Collections.Generic.SortedSet<T>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.SortedSet`1
    name: SortedSet
    nameWithType: SortedSet
    fullName: SortedSet<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: CreateSetComparer(IEqualityComparer<T>)
  nameWithType: SortedSet<T>.CreateSetComparer(IEqualityComparer<T>)
  fullName: System.Collections.Generic.SortedSet<T>.CreateSetComparer(IEqualityComparer<T>)
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
- uid: System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ExceptWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.ExceptWith(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.GetEnumerator
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: SortedSet<T>.GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.GetEnumerator()
- uid: System.Collections.Generic.SortedSet`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: SortedSet<T>+Enumerator
  nameWithType: SortedSet<T>+Enumerator
  fullName: System.Collections.Generic.SortedSet<T>+Enumerator
- uid: System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SortedSet<T>.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.SortedSet<T>.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: GetViewBetween(T,T)
  nameWithType: SortedSet<T>.GetViewBetween(T,T)
  fullName: System.Collections.Generic.SortedSet<T>.GetViewBetween(T,T)
- uid: System.Collections.Generic.SortedSet`1
  parent: System.Collections.Generic
  isExternal: false
  name: SortedSet<T>
  nameWithType: SortedSet<T>
  fullName: System.Collections.Generic.SortedSet<T>
- uid: System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IntersectWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IntersectWith(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsProperSubsetOf(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsProperSupersetOf(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsSubsetOf(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: SortedSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.IsSupersetOf(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.Max
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Max
  nameWithType: SortedSet<T>.Max
  fullName: System.Collections.Generic.SortedSet<T>.Max
- uid: System.Collections.Generic.SortedSet`1.Min
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Min
  nameWithType: SortedSet<T>.Min
  fullName: System.Collections.Generic.SortedSet<T>.Min
- uid: System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: OnDeserialization(Object)
  nameWithType: SortedSet<T>.OnDeserialization(Object)
  fullName: System.Collections.Generic.SortedSet<T>.OnDeserialization(Object)
- uid: System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Overlaps(IEnumerable<T>)
  nameWithType: SortedSet<T>.Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.Overlaps(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.Remove(`0)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Remove(T)
  nameWithType: SortedSet<T>.Remove(T)
  fullName: System.Collections.Generic.SortedSet<T>.Remove(T)
- uid: System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: RemoveWhere(Predicate<T>)
  nameWithType: SortedSet<T>.RemoveWhere(Predicate<T>)
  fullName: System.Collections.Generic.SortedSet<T>.RemoveWhere(Predicate<T>)
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Collections.Generic.SortedSet`1.Reverse
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Reverse()
  nameWithType: SortedSet<T>.Reverse()
  fullName: System.Collections.Generic.SortedSet<T>.Reverse()
- uid: System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SetEquals(IEnumerable<T>)
  nameWithType: SortedSet<T>.SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SetEquals(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.SymmetricExceptWith(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ICollection<T>.Add(T)
  nameWithType: SortedSet<T>.ICollection<T>.Add(T)
  fullName: System.Collections.Generic.SortedSet<T>.ICollection<T>.Add(T)
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ICollection<T>.IsReadOnly
  nameWithType: SortedSet<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.SortedSet<T>.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: SortedSet<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.IEnumerable<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: SortedSet<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.SortedSet<T>.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: SortedSet<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.SortedSet<T>.ICollection.IsSynchronized
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: SortedSet<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.SortedSet<T>.ICollection.SyncRoot
- uid: System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: SortedSet<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.SortedSet<T>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IDeserializationCallback.OnDeserialization(Object)
  nameWithType: SortedSet<T>.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Collections.Generic.SortedSet<T>.IDeserializationCallback.OnDeserialization(Object)
- uid: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SortedSet<T>.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.SortedSet<T>.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: UnionWith(IEnumerable<T>)
  nameWithType: SortedSet<T>.UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.SortedSet<T>.UnionWith(IEnumerable<T>)
- uid: System.Collections.Generic.SortedSet`1.#ctor*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SortedSet<T>
  nameWithType: SortedSet<T>.SortedSet<T>
- uid: System.Collections.Generic.SortedSet`1.Add*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Add
  nameWithType: SortedSet<T>.Add
- uid: System.Collections.Generic.SortedSet`1.Clear*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Clear
  nameWithType: SortedSet<T>.Clear
- uid: System.Collections.Generic.SortedSet`1.Comparer*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Comparer
  nameWithType: SortedSet<T>.Comparer
- uid: System.Collections.Generic.SortedSet`1.Contains*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Contains
  nameWithType: SortedSet<T>.Contains
- uid: System.Collections.Generic.SortedSet`1.CopyTo*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: CopyTo
  nameWithType: SortedSet<T>.CopyTo
- uid: System.Collections.Generic.SortedSet`1.Count*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Count
  nameWithType: SortedSet<T>.Count
- uid: System.Collections.Generic.SortedSet`1.CreateSetComparer*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: CreateSetComparer
  nameWithType: SortedSet<T>.CreateSetComparer
- uid: System.Collections.Generic.SortedSet`1.ExceptWith*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: ExceptWith
  nameWithType: SortedSet<T>.ExceptWith
- uid: System.Collections.Generic.SortedSet`1.GetEnumerator*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: GetEnumerator
  nameWithType: SortedSet<T>.GetEnumerator
- uid: System.Collections.Generic.SortedSet`1.GetObjectData*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: GetObjectData
  nameWithType: SortedSet<T>.GetObjectData
- uid: System.Collections.Generic.SortedSet`1.GetViewBetween*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: GetViewBetween
  nameWithType: SortedSet<T>.GetViewBetween
- uid: System.Collections.Generic.SortedSet`1.IntersectWith*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IntersectWith
  nameWithType: SortedSet<T>.IntersectWith
- uid: System.Collections.Generic.SortedSet`1.IsProperSubsetOf*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsProperSubsetOf
  nameWithType: SortedSet<T>.IsProperSubsetOf
- uid: System.Collections.Generic.SortedSet`1.IsProperSupersetOf*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsProperSupersetOf
  nameWithType: SortedSet<T>.IsProperSupersetOf
- uid: System.Collections.Generic.SortedSet`1.IsSubsetOf*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsSubsetOf
  nameWithType: SortedSet<T>.IsSubsetOf
- uid: System.Collections.Generic.SortedSet`1.IsSupersetOf*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: IsSupersetOf
  nameWithType: SortedSet<T>.IsSupersetOf
- uid: System.Collections.Generic.SortedSet`1.Max*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Max
  nameWithType: SortedSet<T>.Max
- uid: System.Collections.Generic.SortedSet`1.Min*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Min
  nameWithType: SortedSet<T>.Min
- uid: System.Collections.Generic.SortedSet`1.OnDeserialization*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: OnDeserialization
  nameWithType: SortedSet<T>.OnDeserialization
- uid: System.Collections.Generic.SortedSet`1.Overlaps*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Overlaps
  nameWithType: SortedSet<T>.Overlaps
- uid: System.Collections.Generic.SortedSet`1.Remove*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Remove
  nameWithType: SortedSet<T>.Remove
- uid: System.Collections.Generic.SortedSet`1.RemoveWhere*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: RemoveWhere
  nameWithType: SortedSet<T>.RemoveWhere
- uid: System.Collections.Generic.SortedSet`1.Reverse*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: Reverse
  nameWithType: SortedSet<T>.Reverse
- uid: System.Collections.Generic.SortedSet`1.SetEquals*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SetEquals
  nameWithType: SortedSet<T>.SetEquals
- uid: System.Collections.Generic.SortedSet`1.SymmetricExceptWith*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: SymmetricExceptWith
  nameWithType: SortedSet<T>.SymmetricExceptWith
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection<T>#Add*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Add
  nameWithType: SortedSet<T>.System.Collections.Generic.ICollection<T>.Add
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType: SortedSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType: SortedSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: SortedSet<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SortedSet<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SortedSet<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SortedSet<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: SortedSet<T>.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
- uid: System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: SortedSet<T>.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Collections.Generic.SortedSet`1.UnionWith*
  parent: System.Collections.Generic.SortedSet`1
  isExternal: false
  name: UnionWith
  nameWithType: SortedSet<T>.UnionWith
