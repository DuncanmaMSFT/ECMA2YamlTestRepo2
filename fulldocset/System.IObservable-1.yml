### YamlMime:ManagedReference
items:
- uid: System.IObservable`1
  id: IObservable`1
  children:
  - System.IObservable`1.Subscribe(System.IObserver{`0})
  langs:
  - csharp
  name: IObservable<T>
  nameWithType: IObservable<T>
  fullName: System.IObservable<T>
  type: Interface
  summary: Defines a provider for push-based notification.
  remarks: "The <xref:System.IObserver%601> and IObservable(T) interfaces provide a generalized mechanism for push-based notification, also known as the observer design pattern. The IObservable(T) interface represents the class that sends notifications (the provider); the <xref:System.IObserver%601> interface represents the class that receives them (the observer). `T` represents the class that provides the notification information. In some push-based notifications, the <xref:System.IObserver%601> implementation and `T` can represent the same type.  \n  \n The provider must implement a single method, <xref:System.IObservable%601.Subscribe%2A>, that indicates that an observer wants to receive push-based notifications. Callers to the method pass an instance of the observer. The method returns an <xref:System.IDisposable> implementation that enables observers to cancel notifications at any time before the provider has stopped sending them.  \n  \n At any given time, a given provider may have zero, one, or multiple observers. The provider is responsible for storing references to observers and ensuring that they are valid before it sends notifications. The IObservable(T) interface does not make any assumptions about the number of observers or the order in which notifications are sent.  \n  \n The provider sends the following three kinds of notifications to the observer by calling <xref:System.IObserver%601> methods:  \n  \n-   The current data. The provider can call the <xref:System.IObserver%601.OnNext%2A?displayProperty=fullName> method to pass the observer a `T` object that has current data, changed data, or fresh data.  \n  \n-   An error condition. The provider can call the <xref:System.IObserver%601.OnError%2A?displayProperty=fullName> method to notify the observer that some error condition has occurred.  \n  \n-   No further data. The provider can call the <xref:System.IObserver%601.OnCompleted%2A?displayProperty=fullName> method to notify the observer that it has finished sending notifications."
  example:
  - "The following example illustrates the observer design pattern. It defines a `Location` class that contains latitude and longitude information.  \n  \n [!code-vb[System.IObserver.Class#5](~/add/codesnippet/visualbasic/locationtracker/provider.vb#5)]\n [!code-cs[System.IObserver.Class#5](~/add/codesnippet/csharp/locationtrackercs/provider.cs#5)]  \n  \n The `LocationTracker` class provides the IObservable(T) implementation. Its `TrackLocation` method is passed a nullable `Location` object that contains the latitude and longitude data. If the `Location` value is not `null`, the `TrackLocation` method calls the <xref:System.IObserver%601.OnNext%2A> method of each observer.  \n  \n [!code-vb[System.IObserver.Class#6](~/add/codesnippet/visualbasic/locationtracker/provider.vb#6)]\n [!code-cs[System.IObserver.Class#6](~/add/codesnippet/csharp/locationtrackercs/provider.cs#6)]  \n  \n If the `Location` value is `null`, the `TrackLocation` method instantiates a `LocationUnknownException` object, which is shown in the following example. It then calls each observer's <xref:System.IObserver%601.OnError%2A> method and passes it the `LocationUnknownException` object. Note that `LocationUnknownException` derives from <xref:System.Exception>, but does not add any new members.  \n  \n [!code-vb[System.IObserver.Class#7](~/add/codesnippet/visualbasic/locationtracker/provider.vb#7)]\n [!code-cs[System.IObserver.Class#7](~/add/codesnippet/csharp/locationtrackercs/provider.cs#7)]  \n  \n Observers register to receive notifications from a `TrackLocation` object by calling its <xref:System.IObservable%601.Subscribe%2A?displayProperty=fullName> method, which assigns a reference to the observer object to a private generic <xref:System.Collections.Generic.List%601> object. The method returns an `Unsubscriber` object, which is an <xref:System.IDisposable> implementation that enables observers to stop receiving notifications. The `LocationTracker` class also includes an `EndTransmission` method. When no further location data is available, the method calls each observer's <xref:System.IObserver%601.OnCompleted%2A> method and then clears the internal list of observers.  \n  \n In this example, the `LocationReporter` class provides the <xref:System.IObserver%601> implementation. It displays information about the current location to the console. Its constructor includes a `name` parameter, which enables the `LocationReporter` instance to identify itself in its string output. It also includes a `Subscribe` method, which wraps a call to the provider's <xref:System.IObservable%601.Subscribe%2A> method. This allows the method to assign the returned <xref:System.IDisposable> reference to a private variable. The `LocationReporter` class also includes an `Unsubscribe` method, which calls the <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> method of the object that is returned by the <xref:System.IObservable%601.Subscribe%2A?displayProperty=fullName> method. The following code defines the `LocationReporter` class.  \n  \n [!code-cs[System.IObserver.Class#8](~/add/codesnippet/csharp/locationtrackercs/observer.cs#8)]\n [!code-vb[System.IObserver.Class#8](~/add/codesnippet/visualbasic/locationtracker/observer.vb#8)]  \n  \n The following code then instantiates the provider and the observer.  \n  \n [!code-vb[System.IObserver.Class#9](~/add/codesnippet/visualbasic/locationtracker/module1.vb#9)]\n [!code-cs[System.IObserver.Class#9](~/add/codesnippet/csharp/locationtrackercs/program.cs#9)]"
  syntax:
    content: public interface IObservable<out T>
    typeParameters:
    - id: T
      description: The object that provides notification information.
  implements: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\IObservable`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/IObservable`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.IObservable`1.Subscribe(System.IObserver{`0})
  id: Subscribe(System.IObserver{`0})
  parent: System.IObservable`1
  langs:
  - csharp
  name: Subscribe(IObserver<T>)
  nameWithType: IObservable<T>.Subscribe(IObserver<T>)
  fullName: System.IObservable<T>.Subscribe(IObserver<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Notifies the provider that an observer is to receive notifications.
  remarks: "The Subscribe method must be called to register an observer for push-based notifications. A typical implementation of the Subscribe method does the following:  \n  \n-   It stores a reference to the observer in a collection object, such as a <xref:System.Collections.Generic.List%601> object.  \n  \n-   It returns a reference to an <xref:System.IDisposable> interface. This enables observers to unsubscribe (that is, to stop receiving notifications) before the provider has finished sending them and called the subscriber's <xref:System.IObserver%601.OnCompleted%2A> method.  \n  \n At any given time, a particular instance of an <xref:System.IObservable%601> implementation is responsible for handling all subscriptions and notifying all subscribers. Unless the documentation for a particular <xref:System.IObservable%601> implementation indicates otherwise, observers should make no assumptions about the <xref:System.IObservable%601> implementation, such as the order of notifications that multiple observers will receive."
  example:
  - "The following example illustrates the Subscribe method for an application that reports latitude and longitude information. It defines an <xref:System.Collections.Generic.IList%601> collection object that stores references to all observers. It also returns a private class named `Unsubscriber` that implements the <xref:System.IDisposable> interface and enables subscribers to stop receiving event notifications.  See the Example section of the <xref:System.IObservable%601> topic for the complete example.  \n  \n [!code-vb[System.IObserver.Class#13](~/add/codesnippet/visualbasic/locationtracker/provider.vb#13)]\n [!code-cs[System.IObserver.Class#13](~/add/codesnippet/csharp/locationtrackercs/provider.cs#13)]"
  syntax:
    content: public IDisposable Subscribe (IObserver<out T> observer);
    parameters:
    - id: observer
      type: System.IObserver`1
      description: The object that is to receive notifications.
    return:
      type: System.IDisposable
      description: A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them.
  overload: System.IObservable`1.Subscribe*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\IObservable`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/IObservable`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.IObservable`1.Subscribe(System.IObserver{`0})
  parent: System.IObservable`1
  isExternal: false
  name: Subscribe(IObserver<T>)
  nameWithType: IObservable<T>.Subscribe(IObserver<T>)
  fullName: System.IObservable<T>.Subscribe(IObserver<T>)
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.IObserver`1
  parent: System
  isExternal: false
  name: IObserver<T>
  nameWithType: IObserver<T>
  fullName: System.IObserver<T>
- uid: System.IObservable`1.Subscribe*
  parent: System.IObservable`1
  isExternal: false
  name: Subscribe
  nameWithType: IObservable<T>.Subscribe
