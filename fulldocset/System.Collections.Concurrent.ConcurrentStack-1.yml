### YamlMime:ManagedReference
items:
- uid: System.Collections.Concurrent.ConcurrentStack`1
  id: ConcurrentStack`1
  children:
  - System.Collections.Concurrent.ConcurrentStack`1.#ctor
  - System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Concurrent.ConcurrentStack`1.Clear
  - System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.ConcurrentStack`1.Count
  - System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator
  - System.Collections.Concurrent.ConcurrentStack`1.IsEmpty
  - System.Collections.Concurrent.ConcurrentStack`1.Push(`0)
  - System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])
  - System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Concurrent.ConcurrentStack`1.ToArray
  - System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)
  - System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)
  - System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])
  - System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)
  langs:
  - csharp
  name: ConcurrentStack<T>
  nameWithType: ConcurrentStack<T>
  fullName: System.Collections.Concurrent.ConcurrentStack<T>
  type: Class
  summary: Represents a thread-safe last in-first out (LIFO) collection.
  remarks: "> [!NOTE]\n>  ConcurrentStack(T) implements the <xref:System.Collections.Generic.IReadOnlyCollection%601> interface starting with the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)]; in previous versions of the .NET Framework, the ConcurrentStack(T) class did not implement this interface.  \n  \n ConcurrentStack(T) provides a few main operations:  \n  \n-   <xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A> inserts an element at the top of the ConcurrentStack(T).  \n  \n-   <xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A> removes an element from the top of the ConcurrentStack(T), or returns `false` if the item cannot be removed.  \n  \n-   <xref:System.Collections.Concurrent.ConcurrentStack%601.TryPeek%2A> returns an element that is at the top of the ConcurrentStack(T) but does not remove it from the ConcurrentStack(T).  \n  \n-   The <xref:System.Collections.Concurrent.ConcurrentStack%601.TryPopRange%2A> and <xref:System.Collections.Concurrent.ConcurrentStack%601.PushRange%2A> methods provide efficient pushing and popping of multiple elements in a single operation."
  example:
  - "The following example shows how to use a ConcurrentStack(T) to push and pop individual items:  \n  \n [!code-vb[System.Collections.Concurrent.ConcurrentStack#2](~/add/codesnippet/visualbasic/t-system.collections.con_6_1.vb)]\n [!code-cs[System.Collections.Concurrent.ConcurrentStack#2](~/add/codesnippet/csharp/t-system.collections.con_6_1.cs)]  \n  \n The following example shows how to use a ConcurrentStack(T) to push and pop ranges of items:  \n  \n [!code-vb[System.Collections.Concurrent.ConcurrentStack#1](~/add/codesnippet/visualbasic/t-system.collections.con_6_2.vb)]\n [!code-cs[System.Collections.Concurrent.ConcurrentStack#1](~/add/codesnippet/csharp/t-system.collections.con_6_2.cs)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Concurrent.SystemCollectionsConcurrent_ProducerConsumerCollectionDebugView`1))]

      public class ConcurrentStack<T> : System.Collections.Concurrent.IProducerConsumerCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>
    typeParameters:
    - id: T
      description: The type of the elements contained in the stack.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Concurrent.IProducerConsumerCollection<T>
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.IReadOnlyCollection<T>
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: ConcurrentStack<T>()
  nameWithType: ConcurrentStack<T>.ConcurrentStack<T>()
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ConcurrentStack<T>()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> class.
  syntax:
    content: public ConcurrentStack ();
    parameters: []
  overload: System.Collections.Concurrent.ConcurrentStack`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: ConcurrentStack<T>(IEnumerable<T>)
  nameWithType: ConcurrentStack<T>.ConcurrentStack<T>(IEnumerable<T>)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ConcurrentStack<T>(IEnumerable<T>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> class that contains elements copied from the specified collection
  syntax:
    content: public ConcurrentStack (System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: The collection whose elements are copied to the new <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>.
  overload: System.Collections.Concurrent.ConcurrentStack`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>collection</code> argument is null.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.Clear
  id: Clear
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: Clear()
  nameWithType: ConcurrentStack<T>.Clear()
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Removes all objects from the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>.
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Concurrent.ConcurrentStack`1.Clear*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: ConcurrentStack<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Copies the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> elements to an existing one-dimensional <xref href="System.Array"></xref>, starting at the specified array index.
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Concurrent.ConcurrentStack`1.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is a null reference (Nothing in Visual Basic).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>index</code> is equal to or greater than the length of the <code>array</code> -or- The number of elements in the source <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.Count
  id: Count
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: Count
  nameWithType: ConcurrentStack<T>.Count
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets the number of elements contained in the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>.
  remarks: For determining whether the collection contains any items, use of the <xref:System.Collections.Concurrent.ConcurrentStack%601.IsEmpty%2A> property is recommended rather than retrieving the number of items from the Count property and comparing it to 0.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of elements contained in the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>.
  overload: System.Collections.Concurrent.ConcurrentStack`1.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ConcurrentStack<T>.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Returns an enumerator that iterates through the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>.
  remarks: The enumeration represents a moment-in-time snapshot of the contents of the stack. It does not reflect any updates to the collection after GetEnumerator was called. The enumerator is safe to use concurrently with reads from and writes to the stack. The enumerator returns items in LIFO (last-in, first-out) order.
  syntax:
    content: public System.Collections.Generic.IEnumerator<T> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: An enumerator for the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>.
  overload: System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.IsEmpty
  id: IsEmpty
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: IsEmpty
  nameWithType: ConcurrentStack<T>.IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.IsEmpty
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets a value that indicates whether the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> is empty.
  remarks: "For determining whether the collection contains any items, use of this property is recommended rather than retrieving the number of items from the <xref:System.Collections.Concurrent.ConcurrentStack%601.Count%2A> property and comparing it to 0. However, as this collection is intended to be accessed concurrently, it may be the case that another thread will modify the collection after IsEmpty returns, thus invalidating the result.  \n  \n For a code example, see <xref:System.Collections.Concurrent.ConcurrentStack%601>."
  syntax:
    content: public bool IsEmpty { get; }
    return:
      type: System.Boolean
      description: true if the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> is empty; otherwise, false.
  overload: System.Collections.Concurrent.ConcurrentStack`1.IsEmpty*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.Push(`0)
  id: Push(`0)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: Push(T)
  nameWithType: ConcurrentStack<T>.Push(T)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Push(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Inserts an object at the top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>.
  syntax:
    content: public void Push (T item);
    parameters:
    - id: item
      type: T
      description: The object to push onto the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>. The value can be a null reference (Nothing in Visual Basic) for reference types.
  overload: System.Collections.Concurrent.ConcurrentStack`1.Push*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])
  id: PushRange(`0[])
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: PushRange(T[])
  nameWithType: ConcurrentStack<T>.PushRange(T[])
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.PushRange(T[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Inserts multiple objects at the top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> atomically.
  remarks: "When adding multiple items to the stack, using PushRange is a more efficient mechanism than using <xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A> one item at a time. Additionally, PushRange guarantees that all of the elements will be added atomically, meaning that no other threads will be able to inject elements between the elements being pushed. Items at lower indices in the `items` array will be pushed before items at higher indices.  \n  \n For a code example, see <xref:System.Collections.Concurrent.ConcurrentStack%601>."
  syntax:
    content: public void PushRange (T[] items);
    parameters:
    - id: items
      type: T[]
      description: The objects to push onto the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>.
  overload: System.Collections.Concurrent.ConcurrentStack`1.PushRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>items</code> is a null reference (Nothing in Visual Basic).
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)
  id: PushRange(`0[],System.Int32,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: PushRange(T[],Int32,Int32)
  nameWithType: ConcurrentStack<T>.PushRange(T[],Int32,Int32)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.PushRange(T[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Inserts multiple objects at the top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> atomically.
  remarks: "When adding multiple items to the stack, using PushRange is a more efficient mechanism than using <xref:System.Collections.Concurrent.ConcurrentStack%601.Push%2A> one item at a time. Additionally, PushRange guarantees that all of the elements will be added atomically, meaning that no other threads will be able to inject elements between the elements being pushed. Items at lower indices in the `items` array will be pushed before items at higher indices.  \n  \n For a code example, see <xref:System.Collections.Concurrent.ConcurrentStack%601>."
  syntax:
    content: public void PushRange (T[] items, int startIndex, int count);
    parameters:
    - id: items
      type: T[]
      description: The objects to push onto the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>.
    - id: startIndex
      type: System.Int32
      description: The zero-based offset in <code>items</code> at which to begin inserting elements onto the top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>.
    - id: count
      type: System.Int32
      description: The number of elements to be inserted onto the top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>.
  overload: System.Collections.Concurrent.ConcurrentStack`1.PushRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>items</code> is a null reference (Nothing in Visual Basic).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> or <code>count</code> is negative. Or <code>startIndex</code> is greater than or equal to the length of <code>items</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>startIndex</code> + <code>count</code> is greater than the length of <code>items</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  id: System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: IProducerConsumerCollection<T>.TryAdd(T)
  nameWithType: ConcurrentStack<T>.IProducerConsumerCollection<T>.TryAdd(T)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.IProducerConsumerCollection<T>.TryAdd(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Attempts to add an object to the <xref href="stem.Collections.Concurrent.IProducerConsumerCollection%601"></xref>.
  remarks: For <xref:System.Collections.Concurrent.ConcurrentStack%601>, this operation will always insert the object onto the top of the <xref:System.Collections.Concurrent.ConcurrentStack%601> and return true.
  syntax:
    content: bool IProducerConsumerCollection<T>.TryAdd (T item);
    parameters:
    - id: item
      type: T
      description: The object to add to the <xref href="stem.Collections.Concurrent.IProducerConsumerCollection%601"></xref>. The value can be a null reference (Nothing in Visual Basic) for reference types.
    return:
      type: System.Boolean
      description: true if the object was added successfully; otherwise, false.
  overload: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection<T>#TryAdd*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  id: System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: IProducerConsumerCollection<T>.TryTake(T)
  nameWithType: ConcurrentStack<T>.IProducerConsumerCollection<T>.TryTake(T)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.IProducerConsumerCollection<T>.TryTake(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Attempts to remove and return an object from the <xref href="stem.Collections.Concurrent.IProducerConsumerCollection%601"></xref>.
  remarks: For <xref:System.Collections.Concurrent.ConcurrentStack%601>, this operation will attempt to pop the object at the top of the <xref:System.Collections.Concurrent.ConcurrentStack%601>.
  syntax:
    content: bool IProducerConsumerCollection<T>.TryTake (out T item);
    parameters:
    - id: item
      type: T
      description: When this method returns, if the operation was successful, <code>item</code> contains the object removed. If no object was available to be removed, the value is unspecified.
    return:
      type: System.Boolean
      description: true if an element was removed and returned succesfully; otherwise, false.
  overload: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection<T>#TryTake*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: ConcurrentStack<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Copies the elements of the <xref href="System.Collections.ICollection"></xref> to an <xref href="System.Array"></xref>, starting at a particular <xref href="System.Array"></xref> index.
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is a null reference (Nothing in Visual Basic).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>array</code> is multidimensional. -or- <code>array</code> does not have zero-based indexing. -or- <code>index</code> is equal to or greater than the length of the <code>array</code> -or- The number of elements in the source <xref href="System.Collections.ICollection"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>. -or- The type of the source <xref href="System.Collections.ICollection"></xref> cannot be cast automatically to the type of the destination <code>array</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: ConcurrentStack<T>.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets a value indicating whether access to the <xref href="System.Collections.ICollection"></xref> is synchronized with the SyncRoot.
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: true if access to the <xref href="System.Collections.ICollection"></xref> is synchronized with the SyncRoot; otherwise, false. For <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>, this property always returns false.
  overload: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: ConcurrentStack<T>.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>. This property is not supported.
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: Returns null (Nothing in Visual Basic).
  overload: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The SyncRoot property is not supported
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: ConcurrentStack<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Returns an enumerator that iterates through a collection.
  remarks: The enumeration represents a moment-in-time snapshot of the contents of the stack. It does not reflect any updates to the collection after <xref:System.Collections.Concurrent.ConcurrentStack%601.GetEnumerator%2A> was called. The enumerator is safe to use concurrently with reads from and writes to the stack.
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator"></xref> that can be used to iterate through the collection.
  overload: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: ToArray()
  nameWithType: ConcurrentStack<T>.ToArray()
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Copies the items stored in the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> to a new array.
  syntax:
    content: public T[] ToArray ();
    parameters: []
    return:
      type: T[]
      description: A new array containing a snapshot of elements copied from the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>.
  overload: System.Collections.Concurrent.ConcurrentStack`1.ToArray*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)
  id: TryPeek(`0@)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: TryPeek(T)
  nameWithType: ConcurrentStack<T>.TryPeek(T)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPeek(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Attempts to return an object from the top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> without removing it.
  syntax:
    content: public bool TryPeek (out T result);
    parameters:
    - id: result
      type: T
      description: When this method returns, <code>result</code> contains an object from the top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>or an unspecified value if the operation failed.
    return:
      type: System.Boolean
      description: true if and object was returned successfully; otherwise, false.
  overload: System.Collections.Concurrent.ConcurrentStack`1.TryPeek*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)
  id: TryPop(`0@)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: TryPop(T)
  nameWithType: ConcurrentStack<T>.TryPop(T)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPop(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Attempts to pop and return the object at the top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>.
  remarks: For a code example, see <xref:System.Collections.Concurrent.ConcurrentStack%601>.
  syntax:
    content: public bool TryPop (out T result);
    parameters:
    - id: result
      type: T
      description: When this method returns, if the operation was successful, <code>result</code> contains the object removed. If no object was available to be removed, the value is unspecified.
    return:
      type: System.Boolean
      description: true if an element was removed and returned from the top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> successfully; otherwise, false.
  overload: System.Collections.Concurrent.ConcurrentStack`1.TryPop*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])
  id: TryPopRange(`0[])
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: TryPopRange(T[])
  nameWithType: ConcurrentStack<T>.TryPopRange(T[])
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPopRange(T[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Attempts to pop and return multiple objects from the top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> atomically.
  remarks: "When popping multiple items, if there is little contention on the stack, using `TryPopRange` can be more efficient than using <xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A> once per item to be removed. Nodes fill the `items` array with the first item to be popped at the startIndex, the second item to be popped at startIndex + 1, and so on.  \n  \n For a code example, see <xref:System.Collections.Concurrent.ConcurrentStack%601>."
  syntax:
    content: public int TryPopRange (T[] items);
    parameters:
    - id: items
      type: T[]
      description: The <xref href="System.Array"></xref> to which objects popped from the top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> will be added.
    return:
      type: System.Int32
      description: The number of objects successfully popped from the top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> and inserted in <code>items</code>.
  overload: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>items</code> is a null argument (Nothing in Visual Basic).
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)
  id: TryPopRange(`0[],System.Int32,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  langs:
  - csharp
  name: TryPopRange(T[],Int32,Int32)
  nameWithType: ConcurrentStack<T>.TryPopRange(T[],Int32,Int32)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPopRange(T[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Attempts to pop and return multiple objects from the top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> atomically.
  remarks: When popping multiple items, if there is little contention on the stack, using TryPopRange can be more efficient than using <xref:System.Collections.Concurrent.ConcurrentStack%601.TryPop%2A> once per item to be removed. Nodes fill the `items` array with the first item to be popped at the startIndex, the second item to be popped at startIndex + 1, and so on.
  syntax:
    content: public int TryPopRange (T[] items, int startIndex, int count);
    parameters:
    - id: items
      type: T[]
      description: The <xref href="System.Array"></xref> to which objects popped from the top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> will be added.
    - id: startIndex
      type: System.Int32
      description: The zero-based offset in <code>items</code> at which to begin inserting elements from the top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref>.
    - id: count
      type: System.Int32
      description: The number of elements to be popped from top of the <xref href="stem.Collections.Concurrent.ConcurrentStack%601"></xref> and inserted into <code>items</code>.
    return:
      type: System.Int32
      description: The number of objects successfully popped from the top of the stack and inserted in <code>items</code>.
  overload: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>items</code> is a null reference (Nothing in Visual Basic).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>startIndex</code> or <code>count</code> is negative. Or <code>startIndex</code> is greater than or equal to the length of <code>items</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>startIndex</code> + <code>count</code> is greater than the length of <code>items</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentStack`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentStack`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Collections.Concurrent.ConcurrentStack`1.#ctor
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: ConcurrentStack<T>()
  nameWithType: ConcurrentStack<T>.ConcurrentStack<T>()
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ConcurrentStack<T>()
- uid: System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: ConcurrentStack<T>(IEnumerable<T>)
  nameWithType: ConcurrentStack<T>.ConcurrentStack<T>(IEnumerable<T>)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ConcurrentStack<T>(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Concurrent.ConcurrentStack`1.Clear
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: Clear()
  nameWithType: ConcurrentStack<T>.Clear()
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Clear()
- uid: System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: ConcurrentStack<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.CopyTo(T[],Int32)
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.ConcurrentStack`1.Count
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: Count
  nameWithType: ConcurrentStack<T>.Count
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Count
- uid: System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: ConcurrentStack<T>.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Concurrent.ConcurrentStack`1.IsEmpty
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: IsEmpty
  nameWithType: ConcurrentStack<T>.IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.IsEmpty
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentStack`1.Push(`0)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: Push(T)
  nameWithType: ConcurrentStack<T>.Push(T)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.Push(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: PushRange(T[])
  nameWithType: ConcurrentStack<T>.PushRange(T[])
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.PushRange(T[])
- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: PushRange(T[],Int32,Int32)
  nameWithType: ConcurrentStack<T>.PushRange(T[],Int32,Int32)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.PushRange(T[],Int32,Int32)
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: IProducerConsumerCollection<T>.TryAdd(T)
  nameWithType: ConcurrentStack<T>.IProducerConsumerCollection<T>.TryAdd(T)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.IProducerConsumerCollection<T>.TryAdd(T)
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: IProducerConsumerCollection<T>.TryTake(T)
  nameWithType: ConcurrentStack<T>.IProducerConsumerCollection<T>.TryTake(T)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.IProducerConsumerCollection<T>.TryTake(T)
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: ConcurrentStack<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: ConcurrentStack<T>.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ICollection.IsSynchronized
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: ConcurrentStack<T>.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ICollection.SyncRoot
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: ConcurrentStack<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Concurrent.ConcurrentStack`1.ToArray
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: ToArray()
  nameWithType: ConcurrentStack<T>.ToArray()
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.ToArray()
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: TryPeek(T)
  nameWithType: ConcurrentStack<T>.TryPeek(T)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPeek(T)
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: TryPop(T)
  nameWithType: ConcurrentStack<T>.TryPop(T)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPop(T)
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: TryPopRange(T[])
  nameWithType: ConcurrentStack<T>.TryPopRange(T[])
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPopRange(T[])
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: TryPopRange(T[],Int32,Int32)
  nameWithType: ConcurrentStack<T>.TryPopRange(T[],Int32,Int32)
  fullName: System.Collections.Concurrent.ConcurrentStack<T>.TryPopRange(T[],Int32,Int32)
- uid: System.Collections.Concurrent.ConcurrentStack`1.#ctor*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: ConcurrentStack<T>
  nameWithType: ConcurrentStack<T>.ConcurrentStack<T>
- uid: System.Collections.Concurrent.ConcurrentStack`1.Clear*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: Clear
  nameWithType: ConcurrentStack<T>.Clear
- uid: System.Collections.Concurrent.ConcurrentStack`1.CopyTo*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: CopyTo
  nameWithType: ConcurrentStack<T>.CopyTo
- uid: System.Collections.Concurrent.ConcurrentStack`1.Count*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: Count
  nameWithType: ConcurrentStack<T>.Count
- uid: System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: GetEnumerator
  nameWithType: ConcurrentStack<T>.GetEnumerator
- uid: System.Collections.Concurrent.ConcurrentStack`1.IsEmpty*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: IsEmpty
  nameWithType: ConcurrentStack<T>.IsEmpty
- uid: System.Collections.Concurrent.ConcurrentStack`1.Push*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: Push
  nameWithType: ConcurrentStack<T>.Push
- uid: System.Collections.Concurrent.ConcurrentStack`1.PushRange*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: PushRange
  nameWithType: ConcurrentStack<T>.PushRange
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection<T>#TryAdd*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd
  nameWithType: ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection<T>#TryTake*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake
  nameWithType: ConcurrentStack<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: ConcurrentStack<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ConcurrentStack<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ConcurrentStack<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ConcurrentStack<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Concurrent.ConcurrentStack`1.ToArray*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: ToArray
  nameWithType: ConcurrentStack<T>.ToArray
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPeek*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: TryPeek
  nameWithType: ConcurrentStack<T>.TryPeek
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPop*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: TryPop
  nameWithType: ConcurrentStack<T>.TryPop
- uid: System.Collections.Concurrent.ConcurrentStack`1.TryPopRange*
  parent: System.Collections.Concurrent.ConcurrentStack`1
  isExternal: false
  name: TryPopRange
  nameWithType: ConcurrentStack<T>.TryPopRange
