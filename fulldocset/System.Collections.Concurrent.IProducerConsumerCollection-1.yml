### YamlMime:ManagedReference
items:
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1
  id: IProducerConsumerCollection`1
  children:
  - System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
  - System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
  - System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
  langs:
  - csharp
  name: IProducerConsumerCollection<T>
  nameWithType: IProducerConsumerCollection<T>
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>
  type: Interface
  summary: Defines methods to manipulate thread-safe collections intended for producer/consumer usage. This interface provides a unified representation for producer/consumer collections so that higher level abstractions such as <xref href="stem.Collections.Concurrent.BlockingCollection%601"></xref> can use the collection as the underlying storage mechanism.
  remarks: For more information, see [Thread-Safe Collections](../Topic/Thread-Safe%20Collections.md) and [BlockingCollection Overview](../Topic/BlockingCollection%20Overview.md).
  example:
  - "The following example shows a stack data structure that implements IProducerConsumerCollection(T).  \n  \n [!code-vb[System.Collections.Concurrent.IProducerConsumerCollection#1](~/add/codesnippet/visualbasic/t-system.collections.con_2_1.vb)]\n [!code-cs[System.Collections.Concurrent.IProducerConsumerCollection#1](~/add/codesnippet/csharp/t-system.collections.con_2_1.cs)]"
  syntax:
    content: 'public interface IProducerConsumerCollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.ICollection'
    typeParameters:
    - id: T
      description: Specifies the type of elements in the collection.
  implements:
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.ICollection
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\IProducerConsumerCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/IProducerConsumerCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: IProducerConsumerCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Copies the elements of the <xref href="stem.Collections.Concurrent.IProducerConsumerCollection%601"></xref> to an <xref href="System.Array"></xref>, starting at a specified index.
  remarks: The method provides a snapshot of the underlying collection. It is possible for other threads to add or remove items immediately after the copy is made.
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: "The one-dimensional <xref href=\"System.Array\"></xref> that is the destination of the elements copied from the <xref href=\"stem.Collections.Concurrent.IProducerConsumerCollection%601\"></xref>.  \n  \n The array must have zero-based indexing."
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is a null reference (Nothing in Visual Basic).
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>index</code> is equal to or greater than the length of the <code>array</code> -or- The number of elements in the collection is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\IProducerConsumerCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/IProducerConsumerCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  name: ToArray()
  nameWithType: IProducerConsumerCollection<T>.ToArray()
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Copies the elements contained in the <xref href="stem.Collections.Concurrent.IProducerConsumerCollection%601"></xref> to a new array.
  remarks: The method provides a snapshot of the underlying collection. It is possible for other threads to add or remove items immediately after the array is made.
  syntax:
    content: public T[] ToArray ();
    parameters: []
    return:
      type: T[]
      description: A new array containing the elements copied from the <xref href="stem.Collections.Concurrent.IProducerConsumerCollection%601"></xref>.
  overload: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\IProducerConsumerCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/IProducerConsumerCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
  id: TryAdd(`0)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  name: TryAdd(T)
  nameWithType: IProducerConsumerCollection<T>.TryAdd(T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Attempts to add an object to the <xref href="stem.Collections.Concurrent.IProducerConsumerCollection%601"></xref>.
  syntax:
    content: public bool TryAdd (T item);
    parameters:
    - id: item
      type: T
      description: The object to add to the <xref href="stem.Collections.Concurrent.IProducerConsumerCollection%601"></xref>.
    return:
      type: System.Boolean
      description: true if the object was added successfully; otherwise, false.
  overload: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>item</code> was invalid for this collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\IProducerConsumerCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/IProducerConsumerCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
  id: TryTake(`0@)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  name: TryTake(T)
  nameWithType: IProducerConsumerCollection<T>.TryTake(T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Attempts to remove and return an object from the <xref href="stem.Collections.Concurrent.IProducerConsumerCollection%601"></xref>.
  syntax:
    content: public bool TryTake (out T item);
    parameters:
    - id: item
      type: T
      description: When this method returns, if the object was removed and returned successfully, <code>item</code> contains the removed object. If no object was available to be removed, the value is unspecified.
    return:
      type: System.Boolean
      description: true if an object was removed and returned successfully; otherwise, false.
  overload: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\IProducerConsumerCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/IProducerConsumerCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: IProducerConsumerCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.CopyTo(T[],Int32)
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: ToArray()
  nameWithType: IProducerConsumerCollection<T>.ToArray()
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.ToArray()
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: TryAdd(T)
  nameWithType: IProducerConsumerCollection<T>.TryAdd(T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: TryTake(T)
  nameWithType: IProducerConsumerCollection<T>.TryTake(T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(T)
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo*
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: CopyTo
  nameWithType: IProducerConsumerCollection<T>.CopyTo
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray*
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: ToArray
  nameWithType: IProducerConsumerCollection<T>.ToArray
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd*
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: TryAdd
  nameWithType: IProducerConsumerCollection<T>.TryAdd
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake*
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: TryTake
  nameWithType: IProducerConsumerCollection<T>.TryTake
