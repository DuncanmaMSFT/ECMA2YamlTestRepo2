### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.ICollection`1
  id: ICollection`1
  children:
  - System.Collections.Generic.ICollection`1.Add(`0)
  - System.Collections.Generic.ICollection`1.Clear
  - System.Collections.Generic.ICollection`1.Contains(`0)
  - System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.ICollection`1.Count
  - System.Collections.Generic.ICollection`1.IsReadOnly
  - System.Collections.Generic.ICollection`1.Remove(`0)
  langs:
  - csharp
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  type: Interface
  summary: Defines methods to manipulate generic collections.
  remarks: "The ICollection(T) interface is the base interface for classes in the <xref:System.Collections.Generic?displayProperty=fullName> namespace.  \n  \n The ICollection(T) interface extends <xref:System.Collections.Generic.IEnumerable%601>; <xref:System.Collections.Generic.IDictionary%602> and <xref:System.Collections.Generic.IList%601> are more specialized interfaces that extend ICollection(T). A <xref:System.Collections.Generic.IDictionary%602> implementation is a collection of key/value pairs, like the <xref:System.Collections.Generic.Dictionary%602> class. A <xref:System.Collections.Generic.IList%601> implementation is a collection of values, and its members can be accessed by index, like the <xref:System.Collections.Generic.List%601> class.  \n  \n If neither the <xref:System.Collections.Generic.IDictionary%602> interface nor the <xref:System.Collections.Generic.IList%601> interface meet the requirements of the required collection, derive the new collection class from the ICollection(T) interface instead for more flexibility."
  example:
  - "The following example implements the ICollection(T) interface to create a collection of custom `Box` objects named `BoxCollection`. Each `Box` has height, length, and width properties, which are used to define equality. Equality can be defined as all dimensions being the same or the volume being the same. The `Box` class implements the <xref:System.IEquatable%601> interface to define the default equality as the dimensions being the same.  \n  \n The `BoxCollection` class implements the <xref:System.Collections.Generic.ICollection%601.Contains%2A> method to use the default equality to determine whether a `Box` is in the collection. This method is used by the <xref:System.Collections.Generic.ICollection%601.Add%2A> method so that each `Box` added to the collection has a unique set of dimensions. The `BoxCollection` class also provides an overload of the  <xref:System.Collections.Generic.ICollection%601.Contains%2A> method that takes a specified <xref:System.Collections.Generic.EqualityComparer%601> object, such as `BoxSameDimensions` and `BoxSameVol` classes in the example.  \n  \n This example also implements an <xref:System.Collections.Generic.IEnumerator%601> interface for the `BoxCollection` class so that the collection can be enumerated.  \n  \n [!code-cs[System.Collections.Generic.BoxExamples#1](~/add/codesnippet/csharp/t-system.collections.gen_7_1.cs)]\n [!code-vb[System.Collections.Generic.BoxExamples#1](~/add/codesnippet/visualbasic/t-system.collections.gen_7_1.vb)]"
  syntax:
    content: 'public interface ICollection<T> : System.Collections.Generic.IEnumerable<T>'
    typeParameters:
    - id: T
      description: The type of the elements in the collection.
  implements:
  - System.Collections.Generic.IEnumerable<T>
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ICollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ICollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Adds an item to the <xref href="stem.Collections.Generic.ICollection%601"></xref>.
  syntax:
    content: public void Add (T item);
    parameters:
    - id: item
      type: T
      description: The object to add to the <xref href="stem.Collections.Generic.ICollection%601"></xref>.
  overload: System.Collections.Generic.ICollection`1.Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="stem.Collections.Generic.ICollection%601"></xref> is read-only.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ICollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ICollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ICollection`1.Clear
  id: Clear
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Removes all items from the <xref href="stem.Collections.Generic.ICollection%601"></xref>.
  remarks: <xref:System.Collections.Generic.ICollection%601.Count%2A> must be set to 0, and references to other objects from elements of the collection must be released.
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Generic.ICollection`1.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="stem.Collections.Generic.ICollection%601"></xref> is read-only.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ICollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ICollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Determines whether the <xref href="stem.Collections.Generic.ICollection%601"></xref> contains a specific value.
  remarks: Implementations can vary in how they determine equality of objects; for example, <xref:System.Collections.Generic.List%601> uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName>, whereas <xref:System.Collections.Generic.Dictionary%602> allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.
  syntax:
    content: public bool Contains (T item);
    parameters:
    - id: item
      type: T
      description: The object to locate in the <xref href="stem.Collections.Generic.ICollection%601"></xref>.
    return:
      type: System.Boolean
      description: '`true` if <code>item</code> is found in the <xref href="stem.Collections.Generic.ICollection%601"></xref>; otherwise, `false`.'
  overload: System.Collections.Generic.ICollection`1.Contains*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ICollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ICollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: ICollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Copies the elements of the <xref href="stem.Collections.Generic.ICollection%601"></xref> to an <xref href="System.Array"></xref>, starting at a particular <xref href="System.Array"></xref> index.
  syntax:
    content: public void CopyTo (T[] array, int arrayIndex);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="stem.Collections.Generic.ICollection%601"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Generic.ICollection`1.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>arrayIndex</code> is less than 0.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source <xref href="stem.Collections.Generic.ICollection%601"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ICollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ICollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ICollection`1.Count
  id: Count
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets the number of elements contained in the <xref href="stem.Collections.Generic.ICollection%601"></xref>.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of elements contained in the <xref href="stem.Collections.Generic.ICollection%601"></xref>.
  overload: System.Collections.Generic.ICollection`1.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ICollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ICollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether the <xref href="stem.Collections.Generic.ICollection%601"></xref> is read-only.
  remarks: A collection that is read-only does not allow the addition or removal of elements after the collection is created. Note that read-only in this context does not indicate whether individual elements of the collection can be modified, since the <xref:System.Collections.Generic.ICollection%601> interface only supports addition and removal operations. For example, the IsReadOnly property of an array that is cast or converted to an <xref:System.Collections.Generic.ICollection%601> object returns `true`, even though individual array elements can be modified.
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.ICollection%601"></xref> is read-only; otherwise, `false`.'
  overload: System.Collections.Generic.ICollection`1.IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ICollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ICollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Removes the first occurrence of a specific object from the <xref href="stem.Collections.Generic.ICollection%601"></xref>.
  remarks: "Implementations can vary in how they determine equality of objects; for example, <xref:System.Collections.Generic.List%601> uses <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName>, whereas, <xref:System.Collections.Generic.Dictionary%602> allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.  \n  \n In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table."
  syntax:
    content: public bool Remove (T item);
    parameters:
    - id: item
      type: T
      description: The object to remove from the <xref href="stem.Collections.Generic.ICollection%601"></xref>.
    return:
      type: System.Boolean
      description: '`true` if <code>item</code> was successfully removed from the <xref href="stem.Collections.Generic.ICollection%601"></xref>; otherwise, `false`. This method also returns `false` if <code>item</code> is not found in the original <xref href="stem.Collections.Generic.ICollection%601"></xref>.'
  overload: System.Collections.Generic.ICollection`1.Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="stem.Collections.Generic.ICollection%601"></xref> is read-only.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ICollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ICollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.ICollection`1.Clear
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: ICollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[],Int32)
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
- uid: System.Collections.Generic.ICollection`1.Add*
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Add
  nameWithType: ICollection<T>.Add
- uid: System.Collections.Generic.ICollection`1.Clear*
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Clear
  nameWithType: ICollection<T>.Clear
- uid: System.Collections.Generic.ICollection`1.Contains*
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Contains
  nameWithType: ICollection<T>.Contains
- uid: System.Collections.Generic.ICollection`1.CopyTo*
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: CopyTo
  nameWithType: ICollection<T>.CopyTo
- uid: System.Collections.Generic.ICollection`1.Count*
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Count
  nameWithType: ICollection<T>.Count
- uid: System.Collections.Generic.ICollection`1.IsReadOnly*
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.ICollection`1.Remove*
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Remove
  nameWithType: ICollection<T>.Remove
