### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.TaskExtensions
  id: TaskExtensions
  children:
  - System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})
  - System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})
  langs:
  - csharp
  name: TaskExtensions
  nameWithType: TaskExtensions
  fullName: System.Threading.Tasks.TaskExtensions
  type: Class
  summary: Provides a set of static (Shared in Visual Basic) methods for working with specific kinds of <xref href="System.Threading.Tasks.Task"></xref> instances.
  syntax:
    content: public static class TaskExtensions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\TaskExtensions.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/TaskExtensions.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})
  id: Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.TaskExtensions
  langs:
  - csharp
  name: Unwrap(Task<Task>)
  nameWithType: TaskExtensions.Unwrap(Task<Task>)
  fullName: System.Threading.Tasks.TaskExtensions.Unwrap(Task<Task>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Threading.Tasks
  summary: Creates a proxy <xref href="System.Threading.Tasks.Task"></xref> that represents the asynchronous operation of a <xref href="stem.Threading.Tasks.TaskScheduler.TryExecuteTaskInline%2A"></xref>.
  remarks: It is often useful to be able to return a Task from a <xref:System.Threading.Tasks.Task%601>, where the inner Task represents work done as part of the outer <xref:System.Threading.Tasks.Task%601>. However, doing so results in a `Task<Task>` (C#) or `Task (Of Task)` (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior. Unwrap solves this problem by creating a proxy Task that represents the entire asynchronous operation of such a task.
  example:
  - "The following example shows how to unwrap a task:  \n  \n [!code-vb[System.Threading.Tasks.TaskExtensions#01](~/add/codesnippet/visualbasic/f20f4d67-d950-411a-add4-_1.vb)]\n [!code-cs[System.Threading.Tasks.TaskExtensions#01](~/add/codesnippet/csharp/f20f4d67-d950-411a-add4-_1.cs)]"
  syntax:
    content: public static System.Threading.Tasks.Task Unwrap (this System.Threading.Tasks.Task<System.Threading.Tasks.Task> task);
    parameters:
    - id: task
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
      description: The `Task<Task>` (C#) or `Task (Of Task)` (Visual Basic) to unwrap.
    return:
      type: System.Threading.Tasks.Task
      description: A Task that represents the asynchronous operation of the provided `System.Threading.Tasks.Task(Of Task)`.
  overload: System.Threading.Tasks.TaskExtensions.Unwrap*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The exception that is thrown if the <code>task</code> argument is null.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\TaskExtensions.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/TaskExtensions.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})
  id: Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.TaskExtensions
  langs:
  - csharp
  name: Unwrap<TResult>(Task<Task<TResult>>)
  nameWithType: TaskExtensions.Unwrap<TResult>(Task<Task<TResult>>)
  fullName: System.Threading.Tasks.TaskExtensions.Unwrap<TResult>(Task<Task<TResult>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Threading.Tasks
  summary: Creates a proxy <xref href="System.Threading.Tasks.Task"></xref> that represents the asynchronous operation of a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic).
  remarks: It is often useful to be able to return a <xref:System.Threading.Tasks.Task> from a <xref:System.Threading.Tasks.Task>, where the inner <xref:System.Threading.Tasks.Task> represents work done as part of the outer <xref:System.Threading.Tasks.Task>. However, doing so results in a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic), which, if not dealt with carefully, could produce unexpected behavior. Unwrap solves this problem by creating a proxy <xref:System.Threading.Tasks.Task%601> that represents the entire asynchronous operation of such a `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic).
  syntax:
    content: public static System.Threading.Tasks.Task<TResult> Unwrap<TResult> (this System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>> task);
    parameters:
    - id: task
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{TResult}}
      description: The `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic) to unwrap.
    return:
      type: System.Threading.Tasks.Task`1
      description: A <xref href="System.Threading.Tasks.Task"></xref> that represents the asynchronous operation of the provided `Task<Task<T>>` (C#) or `Task (Of Task(Of T))` (Visual Basic).
  overload: System.Threading.Tasks.TaskExtensions.Unwrap<TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The exception that is thrown if the <code>task</code> argument is null.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\TaskExtensions.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/TaskExtensions.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.TaskExtensions
  isExternal: false
  name: Unwrap(Task<Task>)
  nameWithType: TaskExtensions.Unwrap(Task<Task>)
  fullName: System.Threading.Tasks.TaskExtensions.Unwrap(Task<Task>)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Task>
  nameWithType: Task<Task>
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Threading.Tasks.Task>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.TaskExtensions
  isExternal: false
  name: Unwrap<TResult>(Task<Task<TResult>>)
  nameWithType: TaskExtensions.Unwrap<TResult>(Task<Task<TResult>>)
  fullName: System.Threading.Tasks.TaskExtensions.Unwrap<TResult>(Task<Task<TResult>>)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task{TResult}}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Task<TResult>>
  nameWithType: Task<Task<TResult>>
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Threading.Tasks.Task<TResult>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskExtensions.Unwrap*
  parent: System.Threading.Tasks.TaskExtensions
  isExternal: false
  name: Unwrap
  nameWithType: TaskExtensions.Unwrap
- uid: System.Threading.Tasks.TaskExtensions.Unwrap<TResult>*
  parent: System.Threading.Tasks.TaskExtensions
  isExternal: false
  name: Unwrap<TResult>
  nameWithType: TaskExtensions.Unwrap<TResult>
