### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.Parallel
  id: Parallel
  children:
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.Invoke(System.Action[])
  - System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  langs:
  - csharp
  name: Parallel
  nameWithType: Parallel
  fullName: System.Threading.Tasks.Parallel
  type: Class
  summary: Provides support for parallel loops and regions.
  remarks: The Parallel class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.
  example:
  - "This example demonstrates several approaches to implementing a parallel loop using multiple language constructs.  \n  \n [!code-vb[System.Threading.Tasks.Parallel#07](~/add/codesnippet/visualbasic/t-system.threading.tasks_1_1.vb)]\n [!code-cs[System.Threading.Tasks.Parallel#07](~/add/codesnippet/csharp/t-system.threading.tasks_1_1.cs)]"
  syntax:
    content: public static class Parallel
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int32,Int32,Action<Int32,ParallelLoopState>)
  nameWithType: Parallel.For(Int32,Int32,Action<Int32,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,Action<Int32,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  remarks: "The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with two arguments:  \n  \n-   An <xref:System.Int32> value that represents the iteration count.  \n  \n-   A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely. The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code.  \n  \n Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to execute. However, all iterations before the current one will still have to be executed if they haven't already.  \n  \n Therefore, calling <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.  \n  \n If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed. However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.  \n  \n If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations."
  example:
  - "The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=fullName> method is called. As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=fullName> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=fullName> method.  \n  \n [!code-cs[System.Threading.Tasks.ParallelLoopState#2](~/add/codesnippet/csharp/23d1267c-f208-4c8f-9353-_1.cs)]\n [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/add/codesnippet/visualbasic/23d1267c-f208-4c8f-9353-_1.vb)]  \n  \n Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=fullName> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=fullName> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=fullName> method. If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=fullName> property and, if it is greater than the current iteration's index value, returns immediately."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action<int,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A  structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>body</code> argument is `null`.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  id: For(System.Int32,System.Int32,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int32,Int32,Action<Int32>)
  nameWithType: Parallel.For(Int32,Int32,Action<Int32>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,Action<Int32>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel.
  remarks: "The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int32>) as a parameter.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations."
  example:
  - "The following example uses the For method for 100 invocations of a delegate that generates random byte values and computes their sum.  \n  \n [!code-vb[System.Threading.Tasks.Parallel.For#1](~/add/codesnippet/visualbasic/08251bbd-6afb-4a6a-8357-_1.vb)]\n [!code-cs[System.Threading.Tasks.Parallel.For#1](~/add/codesnippet/csharp/08251bbd-6afb-4a6a-8357-_1.cs)]"
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action<int> body);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int32}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>body</code> argument is `null`.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int64,Int64,Action<Int64,ParallelLoopState>)
  nameWithType: Parallel.For(Int64,Int64,Action<Int64,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,Action<Int64,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  remarks: "The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.  \n  \n Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don’t have to be executed, but all iterations before the current one do.  \n  \n Therefore, calling Break is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.  \n  \n If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed. However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.  \n  \n If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action<long,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A <xref href="System.Threading.Tasks.ParallelLoopResult"></xref> structure that contains information on what portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>body</code> argument is `null`.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  id: For(System.Int64,System.Int64,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int64,Int64,Action<Int64>)
  nameWithType: Parallel.For(Int64,Int64,Action<Int64>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,Action<Int64>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.
  remarks: "The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int64>) as a parameter.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action<long> body);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>body</code> argument is `null`.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int32,Int32,ParallelOptions,Action<Int32,ParallelLoopState>)
  nameWithType: Parallel.For(Int32,Int32,ParallelOptions,Action<Int32,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,ParallelOptions,Action<Int32,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  remarks: "The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int32>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action<int,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int32,Int32,ParallelOptions,Action<Int32>)
  nameWithType: Parallel.For(Int32,Int32,ParallelOptions,Action<Int32>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,ParallelOptions,Action<Int32>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.
  remarks: "The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int32>) as a parameter.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations."
  example:
  - "The following example shows how to cancel a parallel loop:  \n  \n [!code-vb[System.Threading.Tasks.Parallel#05](~/add/codesnippet/visualbasic/789e8c99-e45e-4bd9-99b9-_1.vb)]\n [!code-cs[System.Threading.Tasks.Parallel#05](~/add/codesnippet/csharp/789e8c99-e45e-4bd9-99b9-_1.cs)]"
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action<int> body);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int32}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A  structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int64,Int64,ParallelOptions,Action<Int64,ParallelLoopState>)
  nameWithType: Parallel.For(Int64,Int64,ParallelOptions,Action<Int64,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,ParallelOptions,Action<Int64,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  remarks: "The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations."
  example:
  - "The following example shows how to use the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method with a <xref:System.Threading.Tasks.ParallelOptions> object:  \n  \n [!code-cs[System.Threading.Tasks.Parallel#03](~/add/codesnippet/csharp/ed9ad7ed-5ee9-4e9d-8b57-_1.cs)]\n [!code-vb[System.Threading.Tasks.Parallel#03](~/add/codesnippet/visualbasic/ed9ad7ed-5ee9-4e9d-8b57-_1.vb)]"
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action<long,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For(Int64,Int64,ParallelOptions,Action<Int64>)
  nameWithType: Parallel.For(Int64,Int64,ParallelOptions,Action<Int64>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,ParallelOptions,Action<Int64>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.
  remarks: "Supports 64-bit indexes. The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int64>) as a parameter.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations."
  example:
  - "The following example shows how to use <xref:System.Threading.Tasks.ParallelOptions> to specify a custom task scheduler:  \n  \n [!code-cs[System.Threading.Tasks.Parallel#06](~/add/codesnippet/csharp/234c3869-666f-4db3-b820-_1.cs)]\n [!code-vb[System.Threading.Tasks.Parallel#06](~/add/codesnippet/visualbasic/234c3869-666f-4db3-b820-_1.vb)]"
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action<long> body);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For<TLocal>(Int32,Int32,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For<TLocal>(Int32,Int32,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(Int32,Int32,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  remarks: "The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.  \n  \n For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](../Topic/How%20to:%20Write%20a%20Parallel.For%20Loop%20with%20Thread-Local%20Variables.md)."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For<TLocal> (int fromInclusive, int toExclusive, Func<TLocal> localInit, Func<int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: localInit
      type: System.Func{TLocal}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{TLocal}
      description: The delegate that performs a final action on the local state of each task.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A  structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For<TLocal>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For<TLocal>(Int64,Int64,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For<TLocal>(Int64,Int64,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(Int64,Int64,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  remarks: "The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.  \n  \n For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](../Topic/How%20to:%20Write%20a%20Parallel.For%20Loop%20with%20Thread-Local%20Variables.md)."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For<TLocal> (long fromInclusive, long toExclusive, Func<TLocal> localInit, Func<long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: localInit
      type: System.Func{TLocal}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{TLocal}
      description: The delegate that performs a final action on the local state of each task.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For<TLocal>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For<TLocal>(Int32,Int32,ParallelOptions,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For<TLocal>(Int32,Int32,ParallelOptions,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(Int32,Int32,ParallelOptions,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  remarks: "The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations."
  example:
  - "The following example uses thread-local variables to compute the sum of the results of many lengthy operations. This example limits the degree of parallelism to four.  \n  \n [!code-cs[System.Threading.Tasks.Parallel#04](~/add/codesnippet/csharp/2ff46462-8dd3-4bbf-bd0e-_1.cs)]\n [!code-vb[System.Threading.Tasks.Parallel#04](~/add/codesnippet/visualbasic/2ff46462-8dd3-4bbf-bd0e-_1.vb)]"
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For<TLocal> (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{TLocal}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{TLocal}
      description: The delegate that performs a final action on the local state of each task.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For<TLocal>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: For<TLocal>(Int64,Int64,ParallelOptions,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For<TLocal>(Int64,Int64,ParallelOptions,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(Int64,Int64,ParallelOptions,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  remarks: "The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  \n  \n The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads. These initial states are passed to the first `body` invocations on each thread. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each thread's local state. This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult For<TLocal> (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{TLocal}
      description: The function delegate that returns the initial state of the local data for each thread.
    - id: body
      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{TLocal}
      description: The delegate that performs a final action on the local state of each thread.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.For<TLocal>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource>(OrderablePartitioner<TSource>,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach<TSource>(OrderablePartitioner<TSource>,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(OrderablePartitioner<TSource>,Action<TSource,ParallelLoopState,Int64>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href="stem.Collections.Concurrent.OrderablePartitioner%601"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  remarks: 'This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md) and [How to: Implement Dynamic Partitions](../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md).'
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.OrderablePartitioner<TSource> source, Action<TSource,System.Threading.Tasks.ParallelLoopState,long> body);
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: The orderable partitioner that contains the original data source.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"stem.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A\"></xref> property in the <code>source</code> orderable partitioner returns `false`.  \n  \n -or-  \n  \n The <xref href=\"stem.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A\"></xref> property in the source orderable partitioner returns `false`.  \n  \n -or-  \n  \n Any methods in the source orderable partitioner return `null`."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource>(Partitioner<TSource>,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(Partitioner<TSource>,Action<TSource,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href="System.Collections.Concurrent.Partitioner"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  remarks: 'This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md) and [How to: Implement Dynamic Partitions](../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md).'
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.Partitioner<TSource> source, Action<TSource,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner`1
      description: The partitioner that contains the original data source.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"stem.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A\"></xref> property in the <code>source</code> partitioner returns `false`.  \n  \n -or-  \n  \n A method in the <code>source</code> partitioner returns `null`.  \n  \n -or-  \n  \n The <xref href=\"stem.Collections.Concurrent.Partitioner%601.GetPartitions%2A\"></xref> method in the <code>source</code> partitioner does not return the correct number of partitions."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource>(Partitioner<TSource>,Action<TSource>)
  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(Partitioner<TSource>,Action<TSource>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href="System.Collections.Concurrent.Partitioner"></xref> in which iterations may run in parallel.
  remarks: 'This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The ForEach(TSource) method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md) and [How to: Implement Dynamic Partitions](../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md).'
  example:
  - "The following example shows how to implement a range partitioner for use with ForEach(TSource):  \n  \n [!code-vb[System.Threading.Tasks.Parallel_RangePartitioners#01](~/add/codesnippet/visualbasic/5df6feab-1cd7-4f93-8a98-_1.vb)]\n [!code-cs[System.Threading.Tasks.Parallel_RangePartitioners#01](~/add/codesnippet/csharp/5df6feab-1cd7-4f93-8a98-_1.cs)]"
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.Partitioner<TSource> source, Action<TSource> body);
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner`1
      description: The partitioner that contains the original data source.
    - id: body
      type: System.Action{TSource}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is  `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"stem.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A\"></xref> property in the <code>source</code> partitioner returns `false`.  \n  \n -or-  \n  \n The exception that is thrown when any methods in the <code>source</code> partitioner return `null`.  \n  \n -or-  \n  \n The <xref href=\"stem.Collections.Concurrent.Partitioner%601.GetPartitions%2A\"></xref> method in the <code>source</code> partitioner does not return the correct number of partitions."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource>(IEnumerable<TSource>,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(IEnumerable<TSource>,Action<TSource,ParallelLoopState,Int64>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with 64-bit indexes on an <xref href="System.Collections.IEnumerable"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  remarks: 'The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element''s index (<xref:System.Int64>).'
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, Action<TSource,System.Threading.Tasks.ParallelLoopState,long> body);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An enumerable data source.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource>(IEnumerable<TSource>,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(IEnumerable<TSource>,Action<TSource,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href="System.Collections.IEnumerable"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  remarks: 'The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.'
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, Action<TSource,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An enumerable data source.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource>(IEnumerable<TSource>,Action<TSource>)
  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(IEnumerable<TSource>,Action<TSource>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href="System.Collections.IEnumerable"></xref> in which iterations may run in parallel.
  remarks: The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the current element as a parameter.
  example:
  - "The following example uses the ForEach(TSource) method to count the number of vowels and non-whitespace characters in a text file. In this case, the <xref:System.Threading.Tasks.ParallelLoopResult> value returned by the method is ignored. Note that, because operations can run in parallel, you must ensure that incrementing the counter variables is an atomic operation, and that multiple threads do not attempt to access the counter variables simultaneously. For this purpose, the example uses the `lock` statement (in C#) and the `SyncLock` statement (in Visual Basic).  \n  \n [!code-cs[System.Threading.Tasks.Parallel.ForEach#1](~/add/codesnippet/csharp/bcd402db-5f77-4caa-893c-_1.cs)]\n [!code-vb[System.Threading.Tasks.Parallel.ForEach#1](~/add/codesnippet/visualbasic/bcd402db-5f77-4caa-893c-_1.vb)]"
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, Action<TSource> body);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An enumerable data source.
    - id: body
      type: System.Action{TSource}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource>(OrderablePartitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach<TSource>(OrderablePartitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(OrderablePartitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href="stem.Collections.Concurrent.OrderablePartitioner%601"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  remarks: 'This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName>method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md) and [How to: Implement Dynamic Partitions](../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md).'
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.OrderablePartitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource,System.Threading.Tasks.ParallelLoopState,long> body);
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: The orderable partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is  `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"stem.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A\"></xref> property in the <code>source</code> orderable partitioner returns `false`.  \n  \n -or-  \n  \n The <xref href=\"stem.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A\"></xref> property in the <code>source</code> orderable partitioner returns `false`.  \n  \n -or-  \n  \n The exception that is thrown when any methods in the <code>source</code> orderable partitioner return `null`."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource>(Partitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(Partitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href="System.Collections.Concurrent.Partitioner"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  remarks: 'This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md) and [How to: Implement Dynamic Partitions](../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md).'
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.Partitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner`1
      description: The partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A  structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"stem.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A\"></xref> property in the <code>source</code> partitioner returns `false`.  \n  \n -or-  \n  \n The exception that is thrown when any methods in the <code>source</code> partitioner return `null`."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource>(Partitioner<TSource>,ParallelOptions,Action<TSource>)
  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>,ParallelOptions,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(Partitioner<TSource>,ParallelOptions,Action<TSource>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href="System.Collections.Concurrent.Partitioner"></xref> in which iterations may run in parallel and loop options can be configured.
  remarks: 'This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md) and [How to: Implement Dynamic Partitions](../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md).'
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.Partitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource> body);
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner`1
      description: The partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{TSource}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"stem.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A\"></xref> property in the <code>source</code> partitioner returns `false`.  \n  \n -or-  \n  \n The exception that is thrown when any methods in the <code>source</code> partitioner return `null`."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with 64-bit indexes on an <xref href="System.Collections.IEnumerable"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  remarks: 'The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element''s index (<xref:System.Int64>).'
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource,System.Threading.Tasks.ParallelLoopState,long> body);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href="System.Collections.IEnumerable"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  remarks: 'The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.'
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource,System.Threading.Tasks.ParallelLoopState> body);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource>)
  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href="System.Collections.IEnumerable"></xref> in which iterations may run in parallel and loop options can be configured.
  remarks: The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the current element as a parameter.
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource> body);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{TSource}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource>*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource,TLocal>(OrderablePartitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on a <xref href="stem.Collections.Concurrent.OrderablePartitioner%601"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  remarks: "This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md) and [How to: Implement Dynamic Partitions](../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md).  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Concurrent.OrderablePartitioner<TSource> source, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: The orderable partitioner that contains the original data source.
    - id: localInit
      type: System.Func{TLocal}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{TLocal}
      description: The delegate that performs a final action on the local state of each task.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="stem.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A"></xref> property in the <code>source</code><xref href="System.Collections.Concurrent.Partitioner"></xref> returns `false` or the partitioner returns `null` partitions.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource,TLocal>(Partitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on a <xref href="System.Collections.Concurrent.Partitioner"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  remarks: "This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The ForEach(TSource, method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md) and [How to: Implement Dynamic Partitions](../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md).  \n  \n The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Concurrent.Partitioner<TSource> source, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner`1
      description: The partitioner that contains the original data source.
    - id: localInit
      type: System.Func{TLocal}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{TLocal}
      description: The delegate that performs a final action on the local state of each task.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="stem.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A"></xref> property in the <code>source</code><xref href="System.Collections.Concurrent.Partitioner"></xref> returns `false` or the partitioner returns `null` partitions.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource,TLocal>(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on an <xref href="System.Collections.IEnumerable"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  remarks: "The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Generic.IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An enumerable data source.
    - id: localInit
      type: System.Func{TLocal}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{TLocal}
      description: The delegate that performs a final action on the local state of each task.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource,TLocal>(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on an <xref href="System.Collections.IEnumerable"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  remarks: "The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."
  example:
  - "The following example shows how to use a <xref:System.Threading.Tasks.Parallel.ForEach%2A> method with local state:  \n  \n [!code-vb[System.Threading.Tasks.Parallel#02](~/add/codesnippet/visualbasic/b552c7a5-f19c-4a2c-aad1-_1.vb)]\n [!code-cs[System.Threading.Tasks.Parallel#02](~/add/codesnippet/csharp/b552c7a5-f19c-4a2c-aad1-_1.cs)]"
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Generic.IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An enumerable data source.
    - id: localInit
      type: System.Func{TLocal}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{TLocal}
      description: The delegate that performs a final action on the local state of each task.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource,TLocal>(OrderablePartitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <xref href="stem.Collections.Concurrent.OrderablePartitioner%601"></xref> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.
  remarks: "This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The ForEach(TSource, method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md) and [How to: Implement Dynamic Partitions](../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md).  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Concurrent.OrderablePartitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: The orderable partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{TLocal}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{TLocal}
      description: The delegate that performs a final action on the local state of each task.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> or <code>localFinally</code> argument is `null`."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="stem.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A"></xref> property in the <code>source</code><xref href="System.Collections.Concurrent.Partitioner"></xref> returns `false` or the partitioner returns `null` partitions.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource,TLocal>(Partitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation  with thread-local data on a <xref href="System.Collections.Concurrent.Partitioner"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  remarks: "This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The ForEach(TSource, method expects custom partitioners to support dynamic partitioning. This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning. Partitioners must support dynamic partitions.  For more information, see [Custom Partitioners for PLINQ and TPL](../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md) and [How to: Implement Dynamic Partitions](../Topic/How%20to:%20Implement%20Dynamic%20Partitions.md).  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Concurrent.Partitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner`1
      description: The partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{TLocal}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{TLocal}
      description: The delegate that performs a final action on the local state of each task.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="stem.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A"></xref> property in the <code>source</code><xref href="System.Collections.Concurrent.Partitioner"></xref> returns `false` or the partitioner returns `null` partitions.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource,TLocal>(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data and 64-bit indexes on an <xref href="System.Collections.IEnumerable"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  remarks: "The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{TLocal}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{TLocal}
      description: The delegate that performs a final action on the local state of each task.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: ForEach<TSource,TLocal>(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on an <xref href="System.Collections.IEnumerable"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated..
  remarks: "The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."
  syntax:
    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{TLocal}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{TLocal}
      description: The delegate that performs a final action on the local state of each task.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  overload: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.Invoke(System.Action[])
  id: Invoke(System.Action[])
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: Invoke(Action[])
  nameWithType: Parallel.Invoke(Action[])
  fullName: System.Threading.Tasks.Parallel.Invoke(Action[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes each of the provided actions, possibly in parallel.
  remarks: "This method can be used to execute a set of operations, potentially in parallel.  \n  \n No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.  \n  \n For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](../Topic/How%20to:%20Use%20Parallel.Invoke%20to%20Execute%20Parallel%20Operations.md)."
  example:
  - "This example demonstrates how to use the Invokemethod with other methods, anonymous delegates, and lambda expressions.  \n  \n [!code-cs[System.Threading.Tasks.Parallel#01](~/add/codesnippet/csharp/m-system.threading.tasks_0_1.cs)]\n [!code-vb[System.Threading.Tasks.Parallel#01](~/add/codesnippet/visualbasic/m-system.threading.tasks_0_1.vb)]"
  syntax:
    content: public static void Invoke (Action[] actions);
    parameters:
    - id: actions
      type: System.Action[]
      description: An array of <xref href="System.Action"></xref> to execute.
  overload: System.Threading.Tasks.Parallel.Invoke*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>actions</code> argument is `null`.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that is thrown when any action in the <code>actions</code> array throws an exception.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>actions</code> array contains a `null` element.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  id: Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  name: Invoke(ParallelOptions,Action[])
  nameWithType: Parallel.Invoke(ParallelOptions,Action[])
  fullName: System.Threading.Tasks.Parallel.Invoke(ParallelOptions,Action[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.
  remarks: "This method can be used to execute a set of operations, potentially in parallel. The cancellation token passed in with the <xref:System.Threading.Tasks.ParallelOptions> structure enables the caller to cancel the entire operation. For more information, see [Cancellation in Managed Threads](../Topic/Cancellation%20in%20Managed%20Threads.md).  \n  \n No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.  \n  \n For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](../Topic/How%20to:%20Use%20Parallel.Invoke%20to%20Execute%20Parallel%20Operations.md)."
  syntax:
    content: public static void Invoke (System.Threading.Tasks.ParallelOptions parallelOptions, Action[] actions);
    parameters:
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: actions
      type: System.Action[]
      description: An array of actions to execute.
  overload: System.Threading.Tasks.Parallel.Invoke*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> is set.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>actions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that is thrown when any action in the <code>actions</code> array throws an exception.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>actions</code> array contains a `null` element.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> associated with the <xref href="System.Threading.CancellationToken"></xref> in the <code>parallelOptions</code> has been disposed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Threading.Tasks\Parallel.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Threading.Tasks/Parallel.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.AggregateException
  parent: System
  isExternal: false
  name: AggregateException
  nameWithType: AggregateException
  fullName: System.AggregateException
- uid: System.OperationCanceledException
  parent: System
  isExternal: false
  name: OperationCanceledException
  nameWithType: OperationCanceledException
  fullName: System.OperationCanceledException
- uid: System.ObjectDisposedException
  parent: System
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int32,Int32,Action<Int32,ParallelLoopState>)
  nameWithType: Parallel.For(Int32,Int32,Action<Int32,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,Action<Int32,ParallelLoopState>)
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  nameWithType: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
  parent: System
  isExternal: false
  name: Action<Int32,ParallelLoopState>
  nameWithType: Action<Int32,ParallelLoopState>
  fullName: System.Action<System.Int32,System.Threading.Tasks.ParallelLoopState>
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: Action<System.Int32,System.Threading.Tasks.ParallelLoopState>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    nameWithType: ParallelLoopState
    fullName: ParallelLoopState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int32,Int32,Action<Int32>)
  nameWithType: Parallel.For(Int32,Int32,Action<Int32>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,Action<Int32>)
- uid: System.Action{System.Int32}
  parent: System
  isExternal: false
  name: Action<Int32>
  nameWithType: Action<Int32>
  fullName: System.Action<System.Int32>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: Action<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int64,Int64,Action<Int64,ParallelLoopState>)
  nameWithType: Parallel.For(Int64,Int64,Action<Int64,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,Action<Int64,ParallelLoopState>)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
  parent: System
  isExternal: false
  name: Action<Int64,ParallelLoopState>
  nameWithType: Action<Int64,ParallelLoopState>
  fullName: System.Action<System.Int64,System.Threading.Tasks.ParallelLoopState>
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: Action<System.Int64,System.Threading.Tasks.ParallelLoopState>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    nameWithType: ParallelLoopState
    fullName: ParallelLoopState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int64,Int64,Action<Int64>)
  nameWithType: Parallel.For(Int64,Int64,Action<Int64>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,Action<Int64>)
- uid: System.Action{System.Int64}
  parent: System
  isExternal: false
  name: Action<Int64>
  nameWithType: Action<Int64>
  fullName: System.Action<System.Int64>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: Action<System.Int64>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int32,Int32,ParallelOptions,Action<Int32,ParallelLoopState>)
  nameWithType: Parallel.For(Int32,Int32,ParallelOptions,Action<Int32,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,ParallelOptions,Action<Int32,ParallelLoopState>)
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  nameWithType: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int32,Int32,ParallelOptions,Action<Int32>)
  nameWithType: Parallel.For(Int32,Int32,ParallelOptions,Action<Int32>)
  fullName: System.Threading.Tasks.Parallel.For(Int32,Int32,ParallelOptions,Action<Int32>)
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int64,Int64,ParallelOptions,Action<Int64,ParallelLoopState>)
  nameWithType: Parallel.For(Int64,Int64,ParallelOptions,Action<Int64,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,ParallelOptions,Action<Int64,ParallelLoopState>)
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For(Int64,Int64,ParallelOptions,Action<Int64>)
  nameWithType: Parallel.For(Int64,Int64,ParallelOptions,Action<Int64>)
  fullName: System.Threading.Tasks.Parallel.For(Int64,Int64,ParallelOptions,Action<Int64>)
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For<TLocal>(Int32,Int32,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For<TLocal>(Int32,Int32,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(Int32,Int32,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Func{TLocal}
  parent: System
  isExternal: false
  name: Func<TLocal>
  nameWithType: Func<TLocal>
  fullName: System.Func<TLocal>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<TLocal>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TLocal
    name: TLocal
    nameWithType: TLocal
    fullName: TLocal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
  parent: System
  isExternal: false
  name: Func<Int32,ParallelLoopState,TLocal,TLocal>
  nameWithType: Func<Int32,ParallelLoopState,TLocal,TLocal>
  fullName: System.Func<System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: Func<System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    nameWithType: ParallelLoopState
    fullName: ParallelLoopState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TLocal
    name: TLocal
    nameWithType: TLocal
    fullName: TLocal
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TLocal
    name: TLocal
    nameWithType: TLocal
    fullName: TLocal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Action{TLocal}
  parent: System
  isExternal: false
  name: Action<TLocal>
  nameWithType: Action<TLocal>
  fullName: System.Action<TLocal>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: Action<TLocal>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TLocal
    name: TLocal
    nameWithType: TLocal
    fullName: TLocal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For<TLocal>(Int64,Int64,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For<TLocal>(Int64,Int64,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(Int64,Int64,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
  parent: System
  isExternal: false
  name: Func<Int64,ParallelLoopState,TLocal,TLocal>
  nameWithType: Func<Int64,ParallelLoopState,TLocal,TLocal>
  fullName: System.Func<System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: Func<System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    nameWithType: ParallelLoopState
    fullName: ParallelLoopState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TLocal
    name: TLocal
    nameWithType: TLocal
    fullName: TLocal
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TLocal
    name: TLocal
    nameWithType: TLocal
    fullName: TLocal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For<TLocal>(Int32,Int32,ParallelOptions,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For<TLocal>(Int32,Int32,ParallelOptions,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(Int32,Int32,ParallelOptions,Func<TLocal>,Func<Int32,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For<TLocal>(Int64,Int64,ParallelOptions,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.For<TLocal>(Int64,Int64,ParallelOptions,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(Int64,Int64,ParallelOptions,Func<TLocal>,Func<Int64,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource>(OrderablePartitioner<TSource>,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach<TSource>(OrderablePartitioner<TSource>,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(OrderablePartitioner<TSource>,Action<TSource,ParallelLoopState,Int64>)
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: OrderablePartitioner<TSource>
  nameWithType: OrderablePartitioner<TSource>
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
- uid: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}
  parent: System
  isExternal: false
  name: Action<TSource,ParallelLoopState,Int64>
  nameWithType: Action<TSource,ParallelLoopState,Int64>
  fullName: System.Action<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64>
  spec.csharp:
  - uid: System.Action`3
    name: Action
    nameWithType: Action
    fullName: Action<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    nameWithType: ParallelLoopState
    fullName: ParallelLoopState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource>(Partitioner<TSource>,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(Partitioner<TSource>,Action<TSource,ParallelLoopState>)
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: Partitioner<TSource>
  nameWithType: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
- uid: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}
  parent: System
  isExternal: false
  name: Action<TSource,ParallelLoopState>
  nameWithType: Action<TSource,ParallelLoopState>
  fullName: System.Action<TSource,System.Threading.Tasks.ParallelLoopState>
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: Action<TSource,System.Threading.Tasks.ParallelLoopState>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    nameWithType: ParallelLoopState
    fullName: ParallelLoopState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource>(Partitioner<TSource>,Action<TSource>)
  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(Partitioner<TSource>,Action<TSource>)
- uid: System.Action{TSource}
  parent: System
  isExternal: false
  name: Action<TSource>
  nameWithType: Action<TSource>
  fullName: System.Action<TSource>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: Action<TSource>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource>(IEnumerable<TSource>,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(IEnumerable<TSource>,Action<TSource,ParallelLoopState,Int64>)
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TSource>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource>(IEnumerable<TSource>,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(IEnumerable<TSource>,Action<TSource,ParallelLoopState>)
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource>(IEnumerable<TSource>,Action<TSource>)
  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(IEnumerable<TSource>,Action<TSource>)
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource>(OrderablePartitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach<TSource>(OrderablePartitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(OrderablePartitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource>(Partitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(Partitioner<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource>(Partitioner<TSource>,ParallelOptions,Action<TSource>)
  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>,ParallelOptions,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(Partitioner<TSource>,ParallelOptions,Action<TSource>)
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState,Int64>)
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource,ParallelLoopState>)
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource>)
  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(IEnumerable<TSource>,ParallelOptions,Action<TSource>)
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource,TLocal>(OrderablePartitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
- uid: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}
  parent: System
  isExternal: false
  name: Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>
  nameWithType: Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>
  fullName: System.Func<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal>
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    nameWithType: ParallelLoopState
    fullName: ParallelLoopState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TLocal
    name: TLocal
    nameWithType: TLocal
    fullName: TLocal
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TLocal
    name: TLocal
    nameWithType: TLocal
    fullName: TLocal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource,TLocal>(Partitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}
  parent: System
  isExternal: false
  name: Func<TSource,ParallelLoopState,TLocal,TLocal>
  nameWithType: Func<TSource,ParallelLoopState,TLocal,TLocal>
  fullName: System.Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    nameWithType: ParallelLoopState
    fullName: ParallelLoopState
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TLocal
    name: TLocal
    nameWithType: TLocal
    fullName: TLocal
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TLocal
    name: TLocal
    nameWithType: TLocal
    fullName: TLocal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource,TLocal>(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource,TLocal>(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource,TLocal>(OrderablePartitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource,TLocal>(Partitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource,TLocal>(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource,TLocal>(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>,ParallelOptions,Func<TLocal>,Func<TSource,ParallelLoopState,TLocal,TLocal>,Action<TLocal>)
- uid: System.Threading.Tasks.Parallel.Invoke(System.Action[])
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: Invoke(Action[])
  nameWithType: Parallel.Invoke(Action[])
  fullName: System.Threading.Tasks.Parallel.Invoke(Action[])
- uid: System.Action[]
  parent: System
  isExternal: false
  name: Action[]
  nameWithType: Action[]
  fullName: System.Action[]
  spec.csharp:
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: Action[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: Invoke(ParallelOptions,Action[])
  nameWithType: Parallel.Invoke(ParallelOptions,Action[])
  fullName: System.Threading.Tasks.Parallel.Invoke(ParallelOptions,Action[])
- uid: System.Threading.Tasks.Parallel.For*
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For
  nameWithType: Parallel.For
- uid: System.Threading.Tasks.Parallel.For<TLocal>*
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: For<TLocal>
  nameWithType: Parallel.For<TLocal>
- uid: System.Threading.Tasks.Parallel.ForEach<TSource>*
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource>
  nameWithType: Parallel.ForEach<TSource>
- uid: System.Threading.Tasks.Parallel.ForEach<TSource,TLocal>*
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: ForEach<TSource,TLocal>
  nameWithType: Parallel.ForEach<TSource,TLocal>
- uid: System.Threading.Tasks.Parallel.Invoke*
  parent: System.Threading.Tasks.Parallel
  isExternal: false
  name: Invoke
  nameWithType: Parallel.Invoke
