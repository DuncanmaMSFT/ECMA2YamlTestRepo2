### YamlMime:ManagedReference
items:
- uid: System.Net.IPAddress
  id: IPAddress
  children:
  - System.Net.IPAddress.#ctor(System.Byte[])
  - System.Net.IPAddress.#ctor(System.Int64)
  - System.Net.IPAddress.#ctor(System.Byte[],System.Int64)
  - System.Net.IPAddress.Address
  - System.Net.IPAddress.AddressFamily
  - System.Net.IPAddress.Any
  - System.Net.IPAddress.Broadcast
  - System.Net.IPAddress.Equals(System.Object)
  - System.Net.IPAddress.GetAddressBytes
  - System.Net.IPAddress.GetHashCode
  - System.Net.IPAddress.HostToNetworkOrder(System.Int16)
  - System.Net.IPAddress.HostToNetworkOrder(System.Int32)
  - System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  - System.Net.IPAddress.IPv6Any
  - System.Net.IPAddress.IPv6Loopback
  - System.Net.IPAddress.IPv6None
  - System.Net.IPAddress.IsIPv6LinkLocal
  - System.Net.IPAddress.IsIPv6Multicast
  - System.Net.IPAddress.IsIPv6SiteLocal
  - System.Net.IPAddress.IsIPv6Teredo
  - System.Net.IPAddress.IsLoopback(System.Net.IPAddress)
  - System.Net.IPAddress.Loopback
  - System.Net.IPAddress.NetworkToHostOrder(System.Int16)
  - System.Net.IPAddress.NetworkToHostOrder(System.Int32)
  - System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  - System.Net.IPAddress.None
  - System.Net.IPAddress.Parse(System.String)
  - System.Net.IPAddress.ScopeId
  - System.Net.IPAddress.ToString
  - System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)
  langs:
  - csharp
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
  type: Class
  summary: Provides an Internet Protocol (IP) address.
  syntax:
    content: public class IPAddress
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IPAddress(Byte[])
  nameWithType: IPAddress.IPAddress(Byte[])
  fullName: System.Net.IPAddress.IPAddress(Byte[])
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: Initializes a new instance of the <xref href="System.Net.IPAddress"></xref> class with the address specified as a <xref href="System.Byte"></xref> array.
  syntax:
    content: public IPAddress (byte[] address);
    parameters:
    - id: address
      type: System.Byte[]
      description: To be added.
  overload: System.Net.IPAddress.#ctor*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IPAddress(Int64)
  nameWithType: IPAddress.IPAddress(Int64)
  fullName: System.Net.IPAddress.IPAddress(Int64)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: Initializes a new instance of the <xref href="System.Net.IPAddress"></xref> class with the address specified as an <xref href="System.Int64"></xref>.
  syntax:
    content: public IPAddress (long newAddress);
    parameters:
    - id: newAddress
      type: System.Int64
      description: To be added.
  overload: System.Net.IPAddress.#ctor*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.#ctor(System.Byte[],System.Int64)
  id: '#ctor(System.Byte[],System.Int64)'
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IPAddress(Byte[],Int64)
  nameWithType: IPAddress.IPAddress(Byte[],Int64)
  fullName: System.Net.IPAddress.IPAddress(Byte[],Int64)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: Initializes a new instance of the <xref href="System.Net.IPAddress"></xref> class with the address specified as a <xref href="System.Byte"></xref> array and the specified scope identifier.
  syntax:
    content: public IPAddress (byte[] address, long scopeid);
    parameters:
    - id: address
      type: System.Byte[]
      description: To be added.
    - id: scopeid
      type: System.Int64
      description: To be added.
  overload: System.Net.IPAddress.#ctor*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.Address
  id: Address
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: Address
  nameWithType: IPAddress.Address
  fullName: System.Net.IPAddress.Address
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: An Internet Protocol (IP) address.
  syntax:
    content: public long Address { get; set; }
    return:
      type: System.Int64
      description: To be added.
  overload: System.Net.IPAddress.Address*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.AddressFamily
  id: AddressFamily
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: AddressFamily
  nameWithType: IPAddress.AddressFamily
  fullName: System.Net.IPAddress.AddressFamily
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets the address family of the IP address.
  syntax:
    content: public System.Net.Sockets.AddressFamily AddressFamily { get; }
    return:
      type: System.Net.Sockets.AddressFamily
      description: To be added.
  overload: System.Net.IPAddress.AddressFamily*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.Any
  id: Any
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: Any
  nameWithType: IPAddress.Any
  fullName: System.Net.IPAddress.Any
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: Provides an IP address that indicates that the server must listen for client activity on all network interfaces. This field is read-only.
  syntax:
    content: public static readonly System.Net.IPAddress Any;
    return:
      type: System.Net.IPAddress
      description: To be added.
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.Broadcast
  id: Broadcast
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: Broadcast
  nameWithType: IPAddress.Broadcast
  fullName: System.Net.IPAddress.Broadcast
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: Provides the IP broadcast address. This field is read-only.
  syntax:
    content: public static readonly System.Net.IPAddress Broadcast;
    return:
      type: System.Net.IPAddress
      description: To be added.
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: IPAddress.Equals(Object)
  fullName: System.Net.IPAddress.Equals(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Compares two IP addresses.
  syntax:
    content: public override bool Equals (object comparand);
    parameters:
    - id: comparand
      type: System.Object
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.IPAddress.Equals*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.GetAddressBytes
  id: GetAddressBytes
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: GetAddressBytes()
  nameWithType: IPAddress.GetAddressBytes()
  fullName: System.Net.IPAddress.GetAddressBytes()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Provides a copy of the <xref href="System.Net.IPAddress"></xref> as an array of bytes.
  syntax:
    content: public byte[] GetAddressBytes ();
    parameters: []
    return:
      type: System.Byte[]
      description: To be added.
  overload: System.Net.IPAddress.GetAddressBytes*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.GetHashCode
  id: GetHashCode
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: IPAddress.GetHashCode()
  fullName: System.Net.IPAddress.GetHashCode()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Returns a hash value for an IP address.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.IPAddress.GetHashCode*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int16)
  id: HostToNetworkOrder(System.Int16)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: HostToNetworkOrder(Int16)
  nameWithType: IPAddress.HostToNetworkOrder(Int16)
  fullName: System.Net.IPAddress.HostToNetworkOrder(Int16)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Converts a short value from host byte order to network byte order.
  syntax:
    content: public static short HostToNetworkOrder (short host);
    parameters:
    - id: host
      type: System.Int16
      description: To be added.
    return:
      type: System.Int16
      description: To be added.
  overload: System.Net.IPAddress.HostToNetworkOrder*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int32)
  id: HostToNetworkOrder(System.Int32)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: HostToNetworkOrder(Int32)
  nameWithType: IPAddress.HostToNetworkOrder(Int32)
  fullName: System.Net.IPAddress.HostToNetworkOrder(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Converts an integer value from host byte order to network byte order.
  syntax:
    content: public static int HostToNetworkOrder (int host);
    parameters:
    - id: host
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.IPAddress.HostToNetworkOrder*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  id: HostToNetworkOrder(System.Int64)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: HostToNetworkOrder(Int64)
  nameWithType: IPAddress.HostToNetworkOrder(Int64)
  fullName: System.Net.IPAddress.HostToNetworkOrder(Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Converts a long value from host byte order to network byte order.
  syntax:
    content: public static long HostToNetworkOrder (long host);
    parameters:
    - id: host
      type: System.Int64
      description: To be added.
    return:
      type: System.Int64
      description: To be added.
  overload: System.Net.IPAddress.HostToNetworkOrder*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.IPv6Any
  id: IPv6Any
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IPv6Any
  nameWithType: IPAddress.IPv6Any
  fullName: System.Net.IPAddress.IPv6Any
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: The <xref:System.Net.Sockets.Socket.Bind*?displayProperty=fullName> method uses the IPv6Any field to indicate that a <xref href="System.Net.Sockets.Socket"></xref> must listen for client activity on all network interfaces.
  syntax:
    content: public static readonly System.Net.IPAddress IPv6Any;
    return:
      type: System.Net.IPAddress
      description: To be added.
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.IPv6Loopback
  id: IPv6Loopback
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IPv6Loopback
  nameWithType: IPAddress.IPv6Loopback
  fullName: System.Net.IPAddress.IPv6Loopback
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: Provides the IP loopback address. This property is read-only.
  syntax:
    content: public static readonly System.Net.IPAddress IPv6Loopback;
    return:
      type: System.Net.IPAddress
      description: To be added.
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.IPv6None
  id: IPv6None
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IPv6None
  nameWithType: IPAddress.IPv6None
  fullName: System.Net.IPAddress.IPv6None
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: Provides an IP address that indicates that no network interface should be used. This property is read-only.
  syntax:
    content: public static readonly System.Net.IPAddress IPv6None;
    return:
      type: System.Net.IPAddress
      description: To be added.
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.IsIPv6LinkLocal
  id: IsIPv6LinkLocal
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IsIPv6LinkLocal
  nameWithType: IPAddress.IsIPv6LinkLocal
  fullName: System.Net.IPAddress.IsIPv6LinkLocal
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets whether the address is an IPv6 link local address.
  syntax:
    content: public bool IsIPv6LinkLocal { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.IPAddress.IsIPv6LinkLocal*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.IsIPv6Multicast
  id: IsIPv6Multicast
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IsIPv6Multicast
  nameWithType: IPAddress.IsIPv6Multicast
  fullName: System.Net.IPAddress.IsIPv6Multicast
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets whether the address is an IPv6 multicast global address.
  syntax:
    content: public bool IsIPv6Multicast { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.IPAddress.IsIPv6Multicast*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.IsIPv6SiteLocal
  id: IsIPv6SiteLocal
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IsIPv6SiteLocal
  nameWithType: IPAddress.IsIPv6SiteLocal
  fullName: System.Net.IPAddress.IsIPv6SiteLocal
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets whether the address is an IPv6 site local address.
  syntax:
    content: public bool IsIPv6SiteLocal { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.IPAddress.IsIPv6SiteLocal*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.IsIPv6Teredo
  id: IsIPv6Teredo
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IsIPv6Teredo
  nameWithType: IPAddress.IsIPv6Teredo
  fullName: System.Net.IPAddress.IsIPv6Teredo
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets whether the address is an IPv6 Teredo address.
  syntax:
    content: public bool IsIPv6Teredo { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.IPAddress.IsIPv6Teredo*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Net.IPAddress.IsLoopback(System.Net.IPAddress)
  id: IsLoopback(System.Net.IPAddress)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: IsLoopback(IPAddress)
  nameWithType: IPAddress.IsLoopback(IPAddress)
  fullName: System.Net.IPAddress.IsLoopback(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Indicates whether the specified IP address is the loopback address.
  syntax:
    content: public static bool IsLoopback (System.Net.IPAddress address);
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.IPAddress.IsLoopback*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.Loopback
  id: Loopback
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: Loopback
  nameWithType: IPAddress.Loopback
  fullName: System.Net.IPAddress.Loopback
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: Provides the IP loopback address. This field is read-only.
  syntax:
    content: public static readonly System.Net.IPAddress Loopback;
    return:
      type: System.Net.IPAddress
      description: To be added.
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int16)
  id: NetworkToHostOrder(System.Int16)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: NetworkToHostOrder(Int16)
  nameWithType: IPAddress.NetworkToHostOrder(Int16)
  fullName: System.Net.IPAddress.NetworkToHostOrder(Int16)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Converts a short value from network byte order to host byte order.
  syntax:
    content: public static short NetworkToHostOrder (short network);
    parameters:
    - id: network
      type: System.Int16
      description: To be added.
    return:
      type: System.Int16
      description: To be added.
  overload: System.Net.IPAddress.NetworkToHostOrder*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int32)
  id: NetworkToHostOrder(System.Int32)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: NetworkToHostOrder(Int32)
  nameWithType: IPAddress.NetworkToHostOrder(Int32)
  fullName: System.Net.IPAddress.NetworkToHostOrder(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Converts an integer value from network byte order to host byte order.
  syntax:
    content: public static int NetworkToHostOrder (int network);
    parameters:
    - id: network
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.IPAddress.NetworkToHostOrder*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  id: NetworkToHostOrder(System.Int64)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: NetworkToHostOrder(Int64)
  nameWithType: IPAddress.NetworkToHostOrder(Int64)
  fullName: System.Net.IPAddress.NetworkToHostOrder(Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Converts a long value from network byte order to host byte order.
  syntax:
    content: public static long NetworkToHostOrder (long network);
    parameters:
    - id: network
      type: System.Int64
      description: To be added.
    return:
      type: System.Int64
      description: To be added.
  overload: System.Net.IPAddress.NetworkToHostOrder*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.None
  id: None
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: None
  nameWithType: IPAddress.None
  fullName: System.Net.IPAddress.None
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: Provides an IP address that indicates that no network interface should be used. This field is read-only.
  syntax:
    content: public static readonly System.Net.IPAddress None;
    return:
      type: System.Net.IPAddress
      description: To be added.
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.Parse(System.String)
  id: Parse(System.String)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: Parse(String)
  nameWithType: IPAddress.Parse(String)
  fullName: System.Net.IPAddress.Parse(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Converts an IP address string to an <xref href="System.Net.IPAddress"></xref> instance.
  syntax:
    content: public static System.Net.IPAddress Parse (string ipString);
    parameters:
    - id: ipString
      type: System.String
      description: To be added.
    return:
      type: System.Net.IPAddress
      description: To be added.
  overload: System.Net.IPAddress.Parse*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.ScopeId
  id: ScopeId
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: ScopeId
  nameWithType: IPAddress.ScopeId
  fullName: System.Net.IPAddress.ScopeId
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the IPv6 address scope identifier.
  syntax:
    content: public long ScopeId { get; set; }
    return:
      type: System.Int64
      description: To be added.
  overload: System.Net.IPAddress.ScopeId*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.ToString
  id: ToString
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: ToString()
  nameWithType: IPAddress.ToString()
  fullName: System.Net.IPAddress.ToString()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Converts an Internet address to its standard notation.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: To be added.
  overload: System.Net.IPAddress.ToString*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)
  id: TryParse(System.String,System.Net.IPAddress@)
  parent: System.Net.IPAddress
  langs:
  - csharp
  name: TryParse(String,IPAddress)
  nameWithType: IPAddress.TryParse(String,IPAddress)
  fullName: System.Net.IPAddress.TryParse(String,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Determines whether a string is a valid IP address.
  syntax:
    content: public static bool TryParse (string ipString, out System.Net.IPAddress address);
    parameters:
    - id: ipString
      type: System.String
      description: To be added.
    - id: address
      type: System.Net.IPAddress
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.IPAddress.TryParse*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.IPAddress.#ctor(System.Byte[])
  parent: System.Net.IPAddress
  isExternal: false
  name: IPAddress(Byte[])
  nameWithType: IPAddress.IPAddress(Byte[])
  fullName: System.Net.IPAddress.IPAddress(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.IPAddress.#ctor(System.Int64)
  parent: System.Net.IPAddress
  isExternal: false
  name: IPAddress(Int64)
  nameWithType: IPAddress.IPAddress(Int64)
  fullName: System.Net.IPAddress.IPAddress(Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.IPAddress.#ctor(System.Byte[],System.Int64)
  parent: System.Net.IPAddress
  isExternal: false
  name: IPAddress(Byte[],Int64)
  nameWithType: IPAddress.IPAddress(Byte[],Int64)
  fullName: System.Net.IPAddress.IPAddress(Byte[],Int64)
- uid: System.Net.IPAddress.Address
  parent: System.Net.IPAddress
  isExternal: false
  name: Address
  nameWithType: IPAddress.Address
  fullName: System.Net.IPAddress.Address
- uid: System.Net.IPAddress.AddressFamily
  parent: System.Net.IPAddress
  isExternal: false
  name: AddressFamily
  nameWithType: IPAddress.AddressFamily
  fullName: System.Net.IPAddress.AddressFamily
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: false
  name: AddressFamily
  nameWithType: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.IPAddress.Any
  parent: System.Net.IPAddress
  isExternal: false
  name: Any
  nameWithType: IPAddress.Any
  fullName: System.Net.IPAddress.Any
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.IPAddress.Broadcast
  parent: System.Net.IPAddress
  isExternal: false
  name: Broadcast
  nameWithType: IPAddress.Broadcast
  fullName: System.Net.IPAddress.Broadcast
- uid: System.Net.IPAddress.Equals(System.Object)
  parent: System.Net.IPAddress
  isExternal: false
  name: Equals(Object)
  nameWithType: IPAddress.Equals(Object)
  fullName: System.Net.IPAddress.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.IPAddress.GetAddressBytes
  parent: System.Net.IPAddress
  isExternal: false
  name: GetAddressBytes()
  nameWithType: IPAddress.GetAddressBytes()
  fullName: System.Net.IPAddress.GetAddressBytes()
- uid: System.Net.IPAddress.GetHashCode
  parent: System.Net.IPAddress
  isExternal: false
  name: GetHashCode()
  nameWithType: IPAddress.GetHashCode()
  fullName: System.Net.IPAddress.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int16)
  parent: System.Net.IPAddress
  isExternal: false
  name: HostToNetworkOrder(Int16)
  nameWithType: IPAddress.HostToNetworkOrder(Int16)
  fullName: System.Net.IPAddress.HostToNetworkOrder(Int16)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int32)
  parent: System.Net.IPAddress
  isExternal: false
  name: HostToNetworkOrder(Int32)
  nameWithType: IPAddress.HostToNetworkOrder(Int32)
  fullName: System.Net.IPAddress.HostToNetworkOrder(Int32)
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  parent: System.Net.IPAddress
  isExternal: false
  name: HostToNetworkOrder(Int64)
  nameWithType: IPAddress.HostToNetworkOrder(Int64)
  fullName: System.Net.IPAddress.HostToNetworkOrder(Int64)
- uid: System.Net.IPAddress.IPv6Any
  parent: System.Net.IPAddress
  isExternal: false
  name: IPv6Any
  nameWithType: IPAddress.IPv6Any
  fullName: System.Net.IPAddress.IPv6Any
- uid: System.Net.IPAddress.IPv6Loopback
  parent: System.Net.IPAddress
  isExternal: false
  name: IPv6Loopback
  nameWithType: IPAddress.IPv6Loopback
  fullName: System.Net.IPAddress.IPv6Loopback
- uid: System.Net.IPAddress.IPv6None
  parent: System.Net.IPAddress
  isExternal: false
  name: IPv6None
  nameWithType: IPAddress.IPv6None
  fullName: System.Net.IPAddress.IPv6None
- uid: System.Net.IPAddress.IsIPv6LinkLocal
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6LinkLocal
  nameWithType: IPAddress.IsIPv6LinkLocal
  fullName: System.Net.IPAddress.IsIPv6LinkLocal
- uid: System.Net.IPAddress.IsIPv6Multicast
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6Multicast
  nameWithType: IPAddress.IsIPv6Multicast
  fullName: System.Net.IPAddress.IsIPv6Multicast
- uid: System.Net.IPAddress.IsIPv6SiteLocal
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6SiteLocal
  nameWithType: IPAddress.IsIPv6SiteLocal
  fullName: System.Net.IPAddress.IsIPv6SiteLocal
- uid: System.Net.IPAddress.IsIPv6Teredo
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6Teredo
  nameWithType: IPAddress.IsIPv6Teredo
  fullName: System.Net.IPAddress.IsIPv6Teredo
- uid: System.Net.IPAddress.IsLoopback(System.Net.IPAddress)
  parent: System.Net.IPAddress
  isExternal: false
  name: IsLoopback(IPAddress)
  nameWithType: IPAddress.IsLoopback(IPAddress)
  fullName: System.Net.IPAddress.IsLoopback(IPAddress)
- uid: System.Net.IPAddress.Loopback
  parent: System.Net.IPAddress
  isExternal: false
  name: Loopback
  nameWithType: IPAddress.Loopback
  fullName: System.Net.IPAddress.Loopback
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int16)
  parent: System.Net.IPAddress
  isExternal: false
  name: NetworkToHostOrder(Int16)
  nameWithType: IPAddress.NetworkToHostOrder(Int16)
  fullName: System.Net.IPAddress.NetworkToHostOrder(Int16)
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int32)
  parent: System.Net.IPAddress
  isExternal: false
  name: NetworkToHostOrder(Int32)
  nameWithType: IPAddress.NetworkToHostOrder(Int32)
  fullName: System.Net.IPAddress.NetworkToHostOrder(Int32)
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  parent: System.Net.IPAddress
  isExternal: false
  name: NetworkToHostOrder(Int64)
  nameWithType: IPAddress.NetworkToHostOrder(Int64)
  fullName: System.Net.IPAddress.NetworkToHostOrder(Int64)
- uid: System.Net.IPAddress.None
  parent: System.Net.IPAddress
  isExternal: false
  name: None
  nameWithType: IPAddress.None
  fullName: System.Net.IPAddress.None
- uid: System.Net.IPAddress.Parse(System.String)
  parent: System.Net.IPAddress
  isExternal: false
  name: Parse(String)
  nameWithType: IPAddress.Parse(String)
  fullName: System.Net.IPAddress.Parse(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.IPAddress.ScopeId
  parent: System.Net.IPAddress
  isExternal: false
  name: ScopeId
  nameWithType: IPAddress.ScopeId
  fullName: System.Net.IPAddress.ScopeId
- uid: System.Net.IPAddress.ToString
  parent: System.Net.IPAddress
  isExternal: false
  name: ToString()
  nameWithType: IPAddress.ToString()
  fullName: System.Net.IPAddress.ToString()
- uid: System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)
  parent: System.Net.IPAddress
  isExternal: false
  name: TryParse(String,IPAddress)
  nameWithType: IPAddress.TryParse(String,IPAddress)
  fullName: System.Net.IPAddress.TryParse(String,IPAddress)
- uid: System.Net.IPAddress.#ctor*
  parent: System.Net.IPAddress
  isExternal: false
  name: IPAddress
  nameWithType: IPAddress.IPAddress
- uid: System.Net.IPAddress.Address*
  parent: System.Net.IPAddress
  isExternal: false
  name: Address
  nameWithType: IPAddress.Address
- uid: System.Net.IPAddress.AddressFamily*
  parent: System.Net.IPAddress
  isExternal: false
  name: AddressFamily
  nameWithType: IPAddress.AddressFamily
- uid: System.Net.IPAddress.Equals*
  parent: System.Net.IPAddress
  isExternal: false
  name: Equals
  nameWithType: IPAddress.Equals
- uid: System.Net.IPAddress.GetAddressBytes*
  parent: System.Net.IPAddress
  isExternal: false
  name: GetAddressBytes
  nameWithType: IPAddress.GetAddressBytes
- uid: System.Net.IPAddress.GetHashCode*
  parent: System.Net.IPAddress
  isExternal: false
  name: GetHashCode
  nameWithType: IPAddress.GetHashCode
- uid: System.Net.IPAddress.HostToNetworkOrder*
  parent: System.Net.IPAddress
  isExternal: false
  name: HostToNetworkOrder
  nameWithType: IPAddress.HostToNetworkOrder
- uid: System.Net.IPAddress.IsIPv6LinkLocal*
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6LinkLocal
  nameWithType: IPAddress.IsIPv6LinkLocal
- uid: System.Net.IPAddress.IsIPv6Multicast*
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6Multicast
  nameWithType: IPAddress.IsIPv6Multicast
- uid: System.Net.IPAddress.IsIPv6SiteLocal*
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6SiteLocal
  nameWithType: IPAddress.IsIPv6SiteLocal
- uid: System.Net.IPAddress.IsIPv6Teredo*
  parent: System.Net.IPAddress
  isExternal: false
  name: IsIPv6Teredo
  nameWithType: IPAddress.IsIPv6Teredo
- uid: System.Net.IPAddress.IsLoopback*
  parent: System.Net.IPAddress
  isExternal: false
  name: IsLoopback
  nameWithType: IPAddress.IsLoopback
- uid: System.Net.IPAddress.NetworkToHostOrder*
  parent: System.Net.IPAddress
  isExternal: false
  name: NetworkToHostOrder
  nameWithType: IPAddress.NetworkToHostOrder
- uid: System.Net.IPAddress.Parse*
  parent: System.Net.IPAddress
  isExternal: false
  name: Parse
  nameWithType: IPAddress.Parse
- uid: System.Net.IPAddress.ScopeId*
  parent: System.Net.IPAddress
  isExternal: false
  name: ScopeId
  nameWithType: IPAddress.ScopeId
- uid: System.Net.IPAddress.ToString*
  parent: System.Net.IPAddress
  isExternal: false
  name: ToString
  nameWithType: IPAddress.ToString
- uid: System.Net.IPAddress.TryParse*
  parent: System.Net.IPAddress
  isExternal: false
  name: TryParse
  nameWithType: IPAddress.TryParse
