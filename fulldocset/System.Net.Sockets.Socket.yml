### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.Socket
  id: Socket
  children:
  - System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketInformation)
  - System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  - System.Net.Sockets.Socket.Accept
  - System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.AddressFamily
  - System.Net.Sockets.Socket.Available
  - System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginAccept(System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  - System.Net.Sockets.Socket.Blocking
  - System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.Close
  - System.Net.Sockets.Socket.Close(System.Int32)
  - System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)
  - System.Net.Sockets.Socket.Connect(System.String,System.Int32)
  - System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.Connected
  - System.Net.Sockets.Socket.Disconnect(System.Boolean)
  - System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.Dispose
  - System.Net.Sockets.Socket.Dispose(System.Boolean)
  - System.Net.Sockets.Socket.DontFragment
  - System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)
  - System.Net.Sockets.Socket.EnableBroadcast
  - System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)
  - System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.IAsyncResult)
  - System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)
  - System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)
  - System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)
  - System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)
  - System.Net.Sockets.Socket.EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)
  - System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  - System.Net.Sockets.Socket.EndSend(System.IAsyncResult)
  - System.Net.Sockets.Socket.EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)
  - System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)
  - System.Net.Sockets.Socket.ExclusiveAddressUse
  - System.Net.Sockets.Socket.Finalize
  - System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  - System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  - System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - System.Net.Sockets.Socket.Handle
  - System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])
  - System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])
  - System.Net.Sockets.Socket.IsBound
  - System.Net.Sockets.Socket.LingerState
  - System.Net.Sockets.Socket.Listen(System.Int32)
  - System.Net.Sockets.Socket.LocalEndPoint
  - System.Net.Sockets.Socket.MulticastLoopback
  - System.Net.Sockets.Socket.NoDelay
  - System.Net.Sockets.Socket.OSSupportsIPv4
  - System.Net.Sockets.Socket.OSSupportsIPv6
  - System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
  - System.Net.Sockets.Socket.ProtocolType
  - System.Net.Sockets.Socket.Receive(System.Byte[])
  - System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ReceiveBufferSize
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  - System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ReceiveTimeout
  - System.Net.Sockets.Socket.RemoteEndPoint
  - System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)
  - System.Net.Sockets.Socket.Send(System.Byte[])
  - System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.SendBufferSize
  - System.Net.Sockets.Socket.SendFile(System.String)
  - System.Net.Sockets.Socket.SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)
  - System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.SendTimeout
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)
  - System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - System.Net.Sockets.Socket.SocketType
  - System.Net.Sockets.Socket.SupportsIPv4
  - System.Net.Sockets.Socket.SupportsIPv6
  - System.Net.Sockets.Socket.Ttl
  - System.Net.Sockets.Socket.UseOnlyOverlappedIO
  langs:
  - csharp
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
  type: Class
  summary: Implements the Berkeley sockets interface.
  syntax:
    content: 'public class Socket : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketInformation)
  id: '#ctor(System.Net.Sockets.SocketInformation)'
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Socket(SocketInformation)
  nameWithType: Socket.Socket(SocketInformation)
  fullName: System.Net.Sockets.Socket.Socket(SocketInformation)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the <xref href="System.Net.Sockets.Socket"></xref> class using the specified value returned from <xref:System.Net.Sockets.Socket.DuplicateAndClose*>.
  syntax:
    content: public Socket (System.Net.Sockets.SocketInformation socketInformation);
    parameters:
    - id: socketInformation
      type: System.Net.Sockets.SocketInformation
      description: To be added.
  overload: System.Net.Sockets.Socket.#ctor*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  id: '#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)'
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Socket(AddressFamily,SocketType,ProtocolType)
  nameWithType: Socket.Socket(AddressFamily,SocketType,ProtocolType)
  fullName: System.Net.Sockets.Socket.Socket(AddressFamily,SocketType,ProtocolType)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the <xref href="System.Net.Sockets.Socket"></xref> class using the specified address family, socket type and protocol.
  syntax:
    content: public Socket (System.Net.Sockets.AddressFamily addressFamily, System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType);
    parameters:
    - id: addressFamily
      type: System.Net.Sockets.AddressFamily
      description: To be added.
    - id: socketType
      type: System.Net.Sockets.SocketType
      description: To be added.
    - id: protocolType
      type: System.Net.Sockets.ProtocolType
      description: To be added.
  overload: System.Net.Sockets.Socket.#ctor*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Accept
  id: Accept
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Accept()
  nameWithType: Socket.Accept()
  fullName: System.Net.Sockets.Socket.Accept()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Creates a new <xref href="System.Net.Sockets.Socket"></xref> for a newly created connection.
  syntax:
    content: public System.Net.Sockets.Socket Accept ();
    parameters: []
    return:
      type: System.Net.Sockets.Socket
      description: To be added.
  overload: System.Net.Sockets.Socket.Accept*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: AcceptAsync(SocketAsyncEventArgs)
  nameWithType: Socket.AcceptAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.AcceptAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous operation to accept an incoming connection attempt.
  syntax:
    content: public bool AcceptAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.AcceptAsync*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.AddressFamily
  id: AddressFamily
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: AddressFamily
  nameWithType: Socket.AddressFamily
  fullName: System.Net.Sockets.Socket.AddressFamily
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets the address family of the <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public System.Net.Sockets.AddressFamily AddressFamily { get; }
    return:
      type: System.Net.Sockets.AddressFamily
      description: To be added.
  overload: System.Net.Sockets.Socket.AddressFamily*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Available
  id: Available
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Available
  nameWithType: Socket.Available
  fullName: System.Net.Sockets.Socket.Available
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets the amount of data that has been received from the network and is available to be read.
  syntax:
    content: public int Available { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Available*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)
  id: BeginAccept(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginAccept(AsyncCallback,Object)
  nameWithType: Socket.BeginAccept(AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginAccept(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous operation to accept an incoming connection attempt.
  syntax:
    content: public IAsyncResult BeginAccept (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginAccept*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginAccept(System.Int32,System.AsyncCallback,System.Object)
  id: BeginAccept(System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginAccept(Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginAccept(Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginAccept(Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous operation to accept an incoming connection attempt and receives the first block of data sent by the client application.
  syntax:
    content: public IAsyncResult BeginAccept (int receiveSize, AsyncCallback callback, object state);
    parameters:
    - id: receiveSize
      type: System.Int32
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginAccept*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)
  id: BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginAccept(Socket,Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginAccept(Socket,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginAccept(Socket,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous operation to accept an incoming connection attempt from a specified socket and receives the first block of data sent by the client application.
  syntax:
    content: public IAsyncResult BeginAccept (System.Net.Sockets.Socket acceptSocket, int receiveSize, AsyncCallback callback, object state);
    parameters:
    - id: acceptSocket
      type: System.Net.Sockets.Socket
      description: To be added.
    - id: receiveSize
      type: System.Int32
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginAccept*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)
  id: BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginConnect(EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(EndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a remote host connection.
  syntax:
    content: public IAsyncResult BeginConnect (System.Net.EndPoint remoteEP, AsyncCallback callback, object state);
    parameters:
    - id: remoteEP
      type: System.Net.EndPoint
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginConnect*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)
  id: BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginConnect(IPAddress,Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(IPAddress,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(IPAddress,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a remote host connection. The host is specified by an <xref href="System.Net.IPAddress"></xref> and a port number.
  syntax:
    content: public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: To be added.
    - id: port
      type: System.Int32
      description: To be added.
    - id: requestCallback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginConnect*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)
  id: BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginConnect(IPAddress[],Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(IPAddress[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(IPAddress[],Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a remote host connection. The host is specified by an <xref href="System.Net.IPAddress"></xref> array and a port number.
  syntax:
    content: public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: addresses
      type: System.Net.IPAddress[]
      description: To be added.
    - id: port
      type: System.Int32
      description: To be added.
    - id: requestCallback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginConnect*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)
  id: BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginConnect(String,Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(String,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a remote host connection. The host is specified by a host name and a port number.
  syntax:
    content: public IAsyncResult BeginConnect (string host, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: host
      type: System.String
      description: To be added.
    - id: port
      type: System.Int32
      description: To be added.
    - id: requestCallback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginConnect*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)
  id: BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginDisconnect(Boolean,AsyncCallback,Object)
  nameWithType: Socket.BeginDisconnect(Boolean,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginDisconnect(Boolean,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request to disconnect from a remote endpoint.
  syntax:
    content: public IAsyncResult BeginDisconnect (bool reuseSocket, AsyncCallback callback, object state);
    parameters:
    - id: reuseSocket
      type: System.Boolean
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginDisconnect*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  id: BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive data from a connected <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public IAsyncResult BeginReceive (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginReceive*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  id: BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive data from a connected <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public IAsyncResult BeginReceive (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginReceive*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  id: BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginReceive(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive data from a connected <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: offset
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginReceive*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  id: BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginReceive(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive data from a connected <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: offset
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginReceive*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  id: BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive data from a specified network device.
  syntax:
    content: public IAsyncResult BeginReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: offset
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: remoteEP
      type: System.Net.EndPoint
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginReceiveFrom*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  id: BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive the specified number of bytes of data into the specified location of the data buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>, and stores the endpoint and packet information..
  syntax:
    content: public IAsyncResult BeginReceiveMessageFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: offset
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: remoteEP
      type: System.Net.EndPoint
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginReceiveMessageFrom*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  id: BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginSend(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a connected <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public IAsyncResult BeginSend (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginSend*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  id: BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginSend(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a connected <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public IAsyncResult BeginSend (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginSend*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a connected <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: offset
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginSend*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a connected <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: offset
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginSend*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)
  id: BeginSendFile(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginSendFile(String,AsyncCallback,Object)
  nameWithType: Socket.BeginSendFile(String,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSendFile(String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the file `fileName` to a connected <xref href="System.Net.Sockets.Socket"></xref> object using the <xref href="System.Net.Sockets.TransmitFileOptions"></xref> flag.
  syntax:
    content: public IAsyncResult BeginSendFile (string fileName, AsyncCallback callback, object state);
    parameters:
    - id: fileName
      type: System.String
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginSendFile*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)
  id: BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginSendFile(String,Byte[],Byte[],TransmitFileOptions,AsyncCallback,Object)
  nameWithType: Socket.BeginSendFile(String,Byte[],Byte[],TransmitFileOptions,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSendFile(String,Byte[],Byte[],TransmitFileOptions,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends a file and buffers of data asynchronously to a connected <xref href="System.Net.Sockets.Socket"></xref> object.
  syntax:
    content: public IAsyncResult BeginSendFile (string fileName, byte[] preBuffer, byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags, AsyncCallback callback, object state);
    parameters:
    - id: fileName
      type: System.String
      description: To be added.
    - id: preBuffer
      type: System.Byte[]
      description: To be added.
    - id: postBuffer
      type: System.Byte[]
      description: To be added.
    - id: flags
      type: System.Net.Sockets.TransmitFileOptions
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginSendFile*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)
  id: BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginSendTo(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginSendTo(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSendTo(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a specific remote host.
  syntax:
    content: public IAsyncResult BeginSendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: offset
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: remoteEP
      type: System.Net.EndPoint
      description: To be added.
    - id: callback
      type: System.AsyncCallback
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.BeginSendTo*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  id: Bind(System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Bind(EndPoint)
  nameWithType: Socket.Bind(EndPoint)
  fullName: System.Net.Sockets.Socket.Bind(EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Associates a <xref href="System.Net.Sockets.Socket"></xref> with a local endpoint.
  syntax:
    content: public void Bind (System.Net.EndPoint localEP);
    parameters:
    - id: localEP
      type: System.Net.EndPoint
      description: To be added.
  overload: System.Net.Sockets.Socket.Bind*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Blocking
  id: Blocking
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Blocking
  nameWithType: Socket.Blocking
  fullName: System.Net.Sockets.Socket.Blocking
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that indicates whether the <xref href="System.Net.Sockets.Socket"></xref> is in blocking mode.
  syntax:
    content: public bool Blocking { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.Blocking*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: CancelConnectAsync(SocketAsyncEventArgs)
  nameWithType: Socket.CancelConnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.CancelConnectAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Cancels an asynchronous request for a remote host connection.
  syntax:
    content: public static void CancelConnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: To be added.
  overload: System.Net.Sockets.Socket.CancelConnectAsync*
  exceptions: []
  version:
  - netframework-40
- uid: System.Net.Sockets.Socket.Close
  id: Close
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Close()
  nameWithType: Socket.Close()
  fullName: System.Net.Sockets.Socket.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Closes the <xref href="System.Net.Sockets.Socket"></xref> connection and releases all associated resources.
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Net.Sockets.Socket.Close*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Close(System.Int32)
  id: Close(System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Close(Int32)
  nameWithType: Socket.Close(Int32)
  fullName: System.Net.Sockets.Socket.Close(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Closes the <xref href="System.Net.Sockets.Socket"></xref> connection and releases all associated resources with a specified timeout to allow queued data to be sent.
  syntax:
    content: public void Close (int timeout);
    parameters:
    - id: timeout
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Close*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  id: Connect(System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Connect(EndPoint)
  nameWithType: Socket.Connect(EndPoint)
  fullName: System.Net.Sockets.Socket.Connect(EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Establishes a connection to a remote host.
  syntax:
    content: public void Connect (System.Net.EndPoint remoteEP);
    parameters:
    - id: remoteEP
      type: System.Net.EndPoint
      description: To be added.
  overload: System.Net.Sockets.Socket.Connect*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)
  id: Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Connect(IPAddress,Int32)
  nameWithType: Socket.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.Socket.Connect(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Establishes a connection to a remote host. The host is specified by an IP address and a port number.
  syntax:
    content: public void Connect (System.Net.IPAddress address, int port);
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: To be added.
    - id: port
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Connect*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)
  id: Connect(System.Net.IPAddress[],System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Connect(IPAddress[],Int32)
  nameWithType: Socket.Connect(IPAddress[],Int32)
  fullName: System.Net.Sockets.Socket.Connect(IPAddress[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Establishes a connection to a remote host. The host is specified by an array of IP addresses and a port number.
  syntax:
    content: public void Connect (System.Net.IPAddress[] addresses, int port);
    parameters:
    - id: addresses
      type: System.Net.IPAddress[]
      description: To be added.
    - id: port
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Connect*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Connect(System.String,System.Int32)
  id: Connect(System.String,System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Connect(String,Int32)
  nameWithType: Socket.Connect(String,Int32)
  fullName: System.Net.Sockets.Socket.Connect(String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Establishes a connection to a remote host. The host is specified by a host name and a port number.
  syntax:
    content: public void Connect (string host, int port);
    parameters:
    - id: host
      type: System.String
      description: To be added.
    - id: port
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Connect*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ConnectAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ConnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ConnectAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a connection to a remote host.
  syntax:
    content: public bool ConnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.ConnectAsync*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)
  id: ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ConnectAsync(SocketType,ProtocolType,SocketAsyncEventArgs)
  nameWithType: Socket.ConnectAsync(SocketType,ProtocolType,SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ConnectAsync(SocketType,ProtocolType,SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a connection to a remote host.
  syntax:
    content: public static bool ConnectAsync (System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType, System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: socketType
      type: System.Net.Sockets.SocketType
      description: To be added.
    - id: protocolType
      type: System.Net.Sockets.ProtocolType
      description: To be added.
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.ConnectAsync*
  exceptions: []
  version:
  - netframework-40
- uid: System.Net.Sockets.Socket.Connected
  id: Connected
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Connected
  nameWithType: Socket.Connected
  fullName: System.Net.Sockets.Socket.Connected
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets a value that indicates whether a <xref href="System.Net.Sockets.Socket"></xref> is connected to a remote host as of the last <xref:System.Net.Sockets.Socket.Send*> or <xref:System.Net.Sockets.Socket.Receive*> operation.
  syntax:
    content: public bool Connected { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.Connected*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Disconnect(System.Boolean)
  id: Disconnect(System.Boolean)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Disconnect(Boolean)
  nameWithType: Socket.Disconnect(Boolean)
  fullName: System.Net.Sockets.Socket.Disconnect(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Closes the socket connection and allows reuse of the socket.
  syntax:
    content: public void Disconnect (bool reuseSocket);
    parameters:
    - id: reuseSocket
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.Disconnect*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: DisconnectAsync(SocketAsyncEventArgs)
  nameWithType: Socket.DisconnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.DisconnectAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request to disconnect from a remote endpoint.
  syntax:
    content: public bool DisconnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.DisconnectAsync*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Dispose
  id: Dispose
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Dispose()
  nameWithType: Socket.Dispose()
  fullName: System.Net.Sockets.Socket.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Releases all resources used by the current instance of the <xref href="System.Net.Sockets.Socket"></xref> class.
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Sockets.Socket.Dispose*
  exceptions: []
  version:
  - netframework-40
- uid: System.Net.Sockets.Socket.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Socket.Dispose(Boolean)
  fullName: System.Net.Sockets.Socket.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Releases the unmanaged resources used by the <xref href="System.Net.Sockets.Socket"></xref>, and optionally disposes of the managed resources.
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.Dispose*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.DontFragment
  id: DontFragment
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: DontFragment
  nameWithType: Socket.DontFragment
  fullName: System.Net.Sockets.Socket.DontFragment
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a <xref href="System.Boolean"></xref> value that specifies whether the <xref href="System.Net.Sockets.Socket"></xref> allows Internet Protocol (IP) datagrams to be fragmented.
  syntax:
    content: public bool DontFragment { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.DontFragment*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)
  id: DuplicateAndClose(System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: DuplicateAndClose(Int32)
  nameWithType: Socket.DuplicateAndClose(Int32)
  fullName: System.Net.Sockets.Socket.DuplicateAndClose(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Duplicates the socket reference for the target process, and closes the socket for this process.
  syntax:
    content: public System.Net.Sockets.SocketInformation DuplicateAndClose (int targetProcessId);
    parameters:
    - id: targetProcessId
      type: System.Int32
      description: To be added.
    return:
      type: System.Net.Sockets.SocketInformation
      description: To be added.
  overload: System.Net.Sockets.Socket.DuplicateAndClose*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.EnableBroadcast
  id: EnableBroadcast
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EnableBroadcast
  nameWithType: Socket.EnableBroadcast
  fullName: System.Net.Sockets.Socket.EnableBroadcast
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a <xref href="System.Boolean"></xref> value that specifies whether the <xref href="System.Net.Sockets.Socket"></xref> can send or receive broadcast packets.
  syntax:
    content: public bool EnableBroadcast { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.EnableBroadcast*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)
  id: EndAccept(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndAccept(IAsyncResult)
  nameWithType: Socket.EndAccept(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndAccept(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Asynchronously accepts an incoming connection attempt and creates a new <xref href="System.Net.Sockets.Socket"></xref> to handle remote host communication.
  syntax:
    content: public System.Net.Sockets.Socket EndAccept (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
    return:
      type: System.Net.Sockets.Socket
      description: To be added.
  overload: System.Net.Sockets.Socket.EndAccept*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.IAsyncResult)
  id: EndAccept(System.Byte[]@,System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndAccept(Byte[],IAsyncResult)
  nameWithType: Socket.EndAccept(Byte[],IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndAccept(Byte[],IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Asynchronously accepts an incoming connection attempt and creates a new <xref href="System.Net.Sockets.Socket"></xref> object to handle remote host communication. This method returns a buffer that contains the initial data transferred.
  syntax:
    content: public System.Net.Sockets.Socket EndAccept (out byte[] buffer, IAsyncResult asyncResult);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
    return:
      type: System.Net.Sockets.Socket
      description: To be added.
  overload: System.Net.Sockets.Socket.EndAccept*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)
  id: EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndAccept(Byte[],Int32,IAsyncResult)
  nameWithType: Socket.EndAccept(Byte[],Int32,IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndAccept(Byte[],Int32,IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Asynchronously accepts an incoming connection attempt and creates a new <xref href="System.Net.Sockets.Socket"></xref> object to handle remote host communication. This method returns a buffer that contains the initial data and the number of bytes transferred.
  syntax:
    content: public System.Net.Sockets.Socket EndAccept (out byte[] buffer, out int bytesTransferred, IAsyncResult asyncResult);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: bytesTransferred
      type: System.Int32
      description: To be added.
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
    return:
      type: System.Net.Sockets.Socket
      description: To be added.
  overload: System.Net.Sockets.Socket.EndAccept*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)
  id: EndConnect(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndConnect(IAsyncResult)
  nameWithType: Socket.EndConnect(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndConnect(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous connection request.
  syntax:
    content: public void EndConnect (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.EndConnect*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)
  id: EndDisconnect(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndDisconnect(IAsyncResult)
  nameWithType: Socket.EndDisconnect(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndDisconnect(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous disconnect request.
  syntax:
    content: public void EndDisconnect (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.EndDisconnect*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)
  id: EndReceive(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndReceive(IAsyncResult)
  nameWithType: Socket.EndReceive(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndReceive(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous read.
  syntax:
    content: public int EndReceive (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.EndReceive*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)
  id: EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndReceive(IAsyncResult,SocketError)
  nameWithType: Socket.EndReceive(IAsyncResult,SocketError)
  fullName: System.Net.Sockets.Socket.EndReceive(IAsyncResult,SocketError)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous read.
  syntax:
    content: public int EndReceive (IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.EndReceive*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)
  id: EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndReceiveFrom(IAsyncResult,EndPoint)
  nameWithType: Socket.EndReceiveFrom(IAsyncResult,EndPoint)
  fullName: System.Net.Sockets.Socket.EndReceiveFrom(IAsyncResult,EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous read from a specific endpoint.
  syntax:
    content: public int EndReceiveFrom (IAsyncResult asyncResult, ref System.Net.EndPoint endPoint);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
    - id: endPoint
      type: System.Net.EndPoint
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.EndReceiveFrom*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  id: EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndReceiveMessageFrom(IAsyncResult,SocketFlags,EndPoint,IPPacketInformation)
  nameWithType: Socket.EndReceiveMessageFrom(IAsyncResult,SocketFlags,EndPoint,IPPacketInformation)
  fullName: System.Net.Sockets.Socket.EndReceiveMessageFrom(IAsyncResult,SocketFlags,EndPoint,IPPacketInformation)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous read from a specific endpoint. This method also reveals more information about the packet than <xref:System.Net.Sockets.Socket.EndReceiveFrom*>.
  syntax:
    content: public int EndReceiveMessageFrom (IAsyncResult asyncResult, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint endPoint, out System.Net.Sockets.IPPacketInformation ipPacketInformation);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: endPoint
      type: System.Net.EndPoint
      description: To be added.
    - id: ipPacketInformation
      type: System.Net.Sockets.IPPacketInformation
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.EndReceiveMessageFrom*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.EndSend(System.IAsyncResult)
  id: EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndSend(IAsyncResult)
  nameWithType: Socket.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndSend(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous send.
  syntax:
    content: public int EndSend (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.EndSend*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)
  id: EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndSend(IAsyncResult,SocketError)
  nameWithType: Socket.EndSend(IAsyncResult,SocketError)
  fullName: System.Net.Sockets.Socket.EndSend(IAsyncResult,SocketError)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous send.
  syntax:
    content: public int EndSend (IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.EndSend*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)
  id: EndSendFile(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndSendFile(IAsyncResult)
  nameWithType: Socket.EndSendFile(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndSendFile(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous send of a file.
  syntax:
    content: public void EndSendFile (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
  overload: System.Net.Sockets.Socket.EndSendFile*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)
  id: EndSendTo(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndSendTo(IAsyncResult)
  nameWithType: Socket.EndSendTo(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndSendTo(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous send to a specific location.
  syntax:
    content: public int EndSendTo (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.EndSendTo*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ExclusiveAddressUse
  nameWithType: Socket.ExclusiveAddressUse
  fullName: System.Net.Sockets.Socket.ExclusiveAddressUse
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a <xref href="System.Boolean"></xref> value that specifies whether the <xref href="System.Net.Sockets.Socket"></xref> allows only one process to bind to a port.
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.ExclusiveAddressUse*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Finalize
  id: Finalize
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Finalize()
  nameWithType: Socket.Finalize()
  fullName: System.Net.Sockets.Socket.Finalize()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Frees resources used by the <xref href="System.Net.Sockets.Socket"></xref> class.
  syntax:
    content: ~Socket ();
    parameters: []
  overload: System.Net.Sockets.Socket.Finalize*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  id: GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: GetSocketOption(SocketOptionLevel,SocketOptionName)
  nameWithType: Socket.GetSocketOption(SocketOptionLevel,SocketOptionName)
  fullName: System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel,SocketOptionName)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Returns the value of a specified <xref href="System.Net.Sockets.Socket"></xref> option, represented as an object.
  syntax:
    content: public object GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName);
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: To be added.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: System.Net.Sockets.Socket.GetSocketOption*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  id: GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: GetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  nameWithType: Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  fullName: System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Returns the specified <xref href="System.Net.Sockets.Socket"></xref> option setting, represented as a byte array.
  syntax:
    content: public void GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue);
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: To be added.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: To be added.
    - id: optionValue
      type: System.Byte[]
      description: To be added.
  overload: System.Net.Sockets.Socket.GetSocketOption*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  id: GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: GetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  nameWithType: Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  fullName: System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Returns the value of the specified <xref href="System.Net.Sockets.Socket"></xref> option in an array.
  syntax:
    content: public byte[] GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionLength);
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: To be added.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: To be added.
    - id: optionLength
      type: System.Int32
      description: To be added.
    return:
      type: System.Byte[]
      description: To be added.
  overload: System.Net.Sockets.Socket.GetSocketOption*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Handle
  id: Handle
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Handle
  nameWithType: Socket.Handle
  fullName: System.Net.Sockets.Socket.Handle
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets the operating system handle for the <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: To be added.
  overload: System.Net.Sockets.Socket.Handle*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])
  id: IOControl(System.Int32,System.Byte[],System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: IOControl(Int32,Byte[],Byte[])
  nameWithType: Socket.IOControl(Int32,Byte[],Byte[])
  fullName: System.Net.Sockets.Socket.IOControl(Int32,Byte[],Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sets low-level operating modes for the <xref href="System.Net.Sockets.Socket"></xref> using numerical control codes.
  syntax:
    content: public int IOControl (int ioControlCode, byte[] optionInValue, byte[] optionOutValue);
    parameters:
    - id: ioControlCode
      type: System.Int32
      description: To be added.
    - id: optionInValue
      type: System.Byte[]
      description: To be added.
    - id: optionOutValue
      type: System.Byte[]
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.IOControl*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])
  id: IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: IOControl(IOControlCode,Byte[],Byte[])
  nameWithType: Socket.IOControl(IOControlCode,Byte[],Byte[])
  fullName: System.Net.Sockets.Socket.IOControl(IOControlCode,Byte[],Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sets low-level operating modes for the <xref href="System.Net.Sockets.Socket"></xref> using the <xref href="System.Net.Sockets.IOControlCode"></xref> enumeration to specify control codes.
  syntax:
    content: public int IOControl (System.Net.Sockets.IOControlCode ioControlCode, byte[] optionInValue, byte[] optionOutValue);
    parameters:
    - id: ioControlCode
      type: System.Net.Sockets.IOControlCode
      description: To be added.
    - id: optionInValue
      type: System.Byte[]
      description: To be added.
    - id: optionOutValue
      type: System.Byte[]
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.IOControl*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.IsBound
  id: IsBound
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: IsBound
  nameWithType: Socket.IsBound
  fullName: System.Net.Sockets.Socket.IsBound
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets a value that indicates whether the <xref href="System.Net.Sockets.Socket"></xref> is bound to a specific local port.
  syntax:
    content: public bool IsBound { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.IsBound*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.LingerState
  id: LingerState
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: LingerState
  nameWithType: Socket.LingerState
  fullName: System.Net.Sockets.Socket.LingerState
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies whether the <xref href="System.Net.Sockets.Socket"></xref> will delay closing a socket in an attempt to send all pending data.
  syntax:
    content: public System.Net.Sockets.LingerOption LingerState { get; set; }
    return:
      type: System.Net.Sockets.LingerOption
      description: To be added.
  overload: System.Net.Sockets.Socket.LingerState*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Listen(System.Int32)
  id: Listen(System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Listen(Int32)
  nameWithType: Socket.Listen(Int32)
  fullName: System.Net.Sockets.Socket.Listen(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Places a <xref href="System.Net.Sockets.Socket"></xref> in a listening state.
  syntax:
    content: public void Listen (int backlog);
    parameters:
    - id: backlog
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Listen*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.LocalEndPoint
  id: LocalEndPoint
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: LocalEndPoint
  nameWithType: Socket.LocalEndPoint
  fullName: System.Net.Sockets.Socket.LocalEndPoint
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets the local endpoint.
  syntax:
    content: public System.Net.EndPoint LocalEndPoint { get; }
    return:
      type: System.Net.EndPoint
      description: To be added.
  overload: System.Net.Sockets.Socket.LocalEndPoint*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.MulticastLoopback
  id: MulticastLoopback
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: MulticastLoopback
  nameWithType: Socket.MulticastLoopback
  fullName: System.Net.Sockets.Socket.MulticastLoopback
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies whether outgoing multicast packets are delivered to the sending application.
  syntax:
    content: public bool MulticastLoopback { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.MulticastLoopback*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.NoDelay
  id: NoDelay
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: NoDelay
  nameWithType: Socket.NoDelay
  fullName: System.Net.Sockets.Socket.NoDelay
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a <xref href="System.Boolean"></xref> value that specifies whether the stream <xref href="System.Net.Sockets.Socket"></xref> is using the Nagle algorithm.
  syntax:
    content: public bool NoDelay { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.NoDelay*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.OSSupportsIPv4
  id: OSSupportsIPv4
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: OSSupportsIPv4
  nameWithType: Socket.OSSupportsIPv4
  fullName: System.Net.Sockets.Socket.OSSupportsIPv4
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Indicates whether the underlying operating system and network adaptors support Internet Protocol version 4 (IPv4).
  syntax:
    content: public static bool OSSupportsIPv4 { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.OSSupportsIPv4*
  exceptions: []
  version:
  - netframework-40
- uid: System.Net.Sockets.Socket.OSSupportsIPv6
  id: OSSupportsIPv6
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: OSSupportsIPv6
  nameWithType: Socket.OSSupportsIPv6
  fullName: System.Net.Sockets.Socket.OSSupportsIPv6
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Indicates whether the underlying operating system and network adaptors support Internet Protocol version 6 (IPv6).
  syntax:
    content: public static bool OSSupportsIPv6 { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.OSSupportsIPv6*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
  id: Poll(System.Int32,System.Net.Sockets.SelectMode)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Poll(Int32,SelectMode)
  nameWithType: Socket.Poll(Int32,SelectMode)
  fullName: System.Net.Sockets.Socket.Poll(Int32,SelectMode)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Determines the status of the <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public bool Poll (int microSeconds, System.Net.Sockets.SelectMode mode);
    parameters:
    - id: microSeconds
      type: System.Int32
      description: To be added.
    - id: mode
      type: System.Net.Sockets.SelectMode
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.Poll*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.ProtocolType
  id: ProtocolType
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ProtocolType
  nameWithType: Socket.ProtocolType
  fullName: System.Net.Sockets.Socket.ProtocolType
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets the protocol type of the <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public System.Net.Sockets.ProtocolType ProtocolType { get; }
    return:
      type: System.Net.Sockets.ProtocolType
      description: To be added.
  overload: System.Net.Sockets.Socket.ProtocolType*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Receive(System.Byte[])
  id: Receive(System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(Byte[])
  nameWithType: Socket.Receive(Byte[])
  fullName: System.Net.Sockets.Socket.Receive(Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives data from a bound <xref href="System.Net.Sockets.Socket"></xref> into a receive buffer.
  syntax:
    content: public int Receive (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  id: Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(IList<ArraySegment<Byte>>)
  nameWithType: Socket.Receive(IList<ArraySegment<Byte>>)
  fullName: System.Net.Sockets.Socket.Receive(IList<ArraySegment<Byte>>)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives data from a bound <xref href="System.Net.Sockets.Socket"></xref> into the list of receive buffers.
  syntax:
    content: public int Receive (System.Collections.Generic.IList<ArraySegment<byte>> buffers);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)
  id: Receive(System.Byte[],System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(Byte[],SocketFlags)
  nameWithType: Socket.Receive(Byte[],SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives data from a bound <xref href="System.Net.Sockets.Socket"></xref> into a receive buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  syntax:
    content: public int Receive (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  id: Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(IList<ArraySegment<Byte>>,SocketFlags)
  nameWithType: Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives data from a bound <xref href="System.Net.Sockets.Socket"></xref> into the list of receive buffers, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  syntax:
    content: public int Receive (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  id: Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(Byte[],Int32,SocketFlags)
  nameWithType: Socket.Receive(Byte[],Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],Int32,SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives the specified number of bytes of data from a bound <xref href="System.Net.Sockets.Socket"></xref> into a receive buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  syntax:
    content: public int Receive (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  nameWithType: Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives data from a bound <xref href="System.Net.Sockets.Socket"></xref> into the list of receive buffers, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  syntax:
    content: public int Receive (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  id: Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(Byte[],Int32,Int32,SocketFlags)
  nameWithType: Socket.Receive(Byte[],Int32,Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],Int32,Int32,SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives the specified number of bytes from a bound <xref href="System.Net.Sockets.Socket"></xref> into the specified offset position of the receive buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  syntax:
    content: public int Receive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: offset
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(Byte[],Int32,Int32,SocketFlags,SocketError)
  nameWithType: Socket.Receive(Byte[],Int32,Int32,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],Int32,Int32,SocketFlags,SocketError)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives data from a bound <xref href="System.Net.Sockets.Socket"></xref> into a receive buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  syntax:
    content: public int Receive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: offset
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ReceiveAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request to receive data from a connected <xref href="System.Net.Sockets.Socket"></xref> object.
  syntax:
    content: public bool ReceiveAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.ReceiveAsync*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.ReceiveBufferSize
  id: ReceiveBufferSize
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveBufferSize
  nameWithType: Socket.ReceiveBufferSize
  fullName: System.Net.Sockets.Socket.ReceiveBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies the size of the receive buffer of the <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public int ReceiveBufferSize { get; set; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.ReceiveBufferSize*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveFrom(Byte[],EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives a datagram into the data buffer and stores the endpoint.
  syntax:
    content: public int ReceiveFrom (byte[] buffer, ref System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: remoteEP
      type: System.Net.EndPoint
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.ReceiveFrom*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveFrom(Byte[],SocketFlags,EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],SocketFlags,EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives a datagram into the data buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>, and stores the endpoint.
  syntax:
    content: public int ReceiveFrom (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: remoteEP
      type: System.Net.EndPoint
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.ReceiveFrom*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveFrom(Byte[],Int32,SocketFlags,EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],Int32,SocketFlags,EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives the specified number of bytes into the data buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>, and stores the endpoint.
  syntax:
    content: public int ReceiveFrom (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: remoteEP
      type: System.Net.EndPoint
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.ReceiveFrom*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>, and stores the endpoint.
  syntax:
    content: public int ReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: offset
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: remoteEP
      type: System.Net.EndPoint
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.ReceiveFrom*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveFromAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ReceiveFromAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveFromAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive data from a specified network device.
  syntax:
    content: public bool ReceiveFromAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.ReceiveFromAsync*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  id: ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,IPPacketInformation)
  nameWithType: Socket.ReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,IPPacketInformation)
  fullName: System.Net.Sockets.Socket.ReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,IPPacketInformation)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>, and stores the endpoint and packet information.
  syntax:
    content: public int ReceiveMessageFrom (byte[] buffer, int offset, int size, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, out System.Net.Sockets.IPPacketInformation ipPacketInformation);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: offset
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: remoteEP
      type: System.Net.EndPoint
      description: To be added.
    - id: ipPacketInformation
      type: System.Net.Sockets.IPPacketInformation
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.ReceiveMessageFrom*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveMessageFromAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ReceiveMessageFromAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveMessageFromAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive the specified number of bytes of data into the specified location in the data buffer, using the specified &lt;xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=fullName&gt;, and stores the endpoint and packet information.
  syntax:
    content: public bool ReceiveMessageFromAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.ReceiveMessageFromAsync*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.ReceiveTimeout
  id: ReceiveTimeout
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveTimeout
  nameWithType: Socket.ReceiveTimeout
  fullName: System.Net.Sockets.Socket.ReceiveTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies the amount of time after which a synchronous <xref:System.Net.Sockets.Socket.Receive*> call will time out.
  syntax:
    content: public int ReceiveTimeout { get; set; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.ReceiveTimeout*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.RemoteEndPoint
  id: RemoteEndPoint
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: RemoteEndPoint
  nameWithType: Socket.RemoteEndPoint
  fullName: System.Net.Sockets.Socket.RemoteEndPoint
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets the remote endpoint.
  syntax:
    content: public System.Net.EndPoint RemoteEndPoint { get; }
    return:
      type: System.Net.EndPoint
      description: To be added.
  overload: System.Net.Sockets.Socket.RemoteEndPoint*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)
  id: Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Select(IList,IList,IList,Int32)
  nameWithType: Socket.Select(IList,IList,IList,Int32)
  fullName: System.Net.Sockets.Socket.Select(IList,IList,IList,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Determines the status of one or more sockets.
  syntax:
    content: public static void Select (System.Collections.IList checkRead, System.Collections.IList checkWrite, System.Collections.IList checkError, int microSeconds);
    parameters:
    - id: checkRead
      type: System.Collections.IList
      description: To be added.
    - id: checkWrite
      type: System.Collections.IList
      description: To be added.
    - id: checkError
      type: System.Collections.IList
      description: To be added.
    - id: microSeconds
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Select*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Send(System.Byte[])
  id: Send(System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(Byte[])
  nameWithType: Socket.Send(Byte[])
  fullName: System.Net.Sockets.Socket.Send(Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data to a connected <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public int Send (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Send*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  id: Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(IList<ArraySegment<Byte>>)
  nameWithType: Socket.Send(IList<ArraySegment<Byte>>)
  fullName: System.Net.Sockets.Socket.Send(IList<ArraySegment<Byte>>)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the set of buffers in the list to a connected <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public int Send (System.Collections.Generic.IList<ArraySegment<byte>> buffers);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Send*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)
  id: Send(System.Byte[],System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(Byte[],SocketFlags)
  nameWithType: Socket.Send(Byte[],SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(Byte[],SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data to a connected <xref href="System.Net.Sockets.Socket"></xref> using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  syntax:
    content: public int Send (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Send*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  id: Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(IList<ArraySegment<Byte>>,SocketFlags)
  nameWithType: Socket.Send(IList<ArraySegment<Byte>>,SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(IList<ArraySegment<Byte>>,SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the set of buffers in the list to a connected <xref href="System.Net.Sockets.Socket"></xref>, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  syntax:
    content: public int Send (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Send*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  id: Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(Byte[],Int32,SocketFlags)
  nameWithType: Socket.Send(Byte[],Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(Byte[],Int32,SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the specified number of bytes of data to a connected <xref href="System.Net.Sockets.Socket"></xref>, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  syntax:
    content: public int Send (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Send*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  nameWithType: Socket.Send(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Send(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the set of buffers in the list to a connected <xref href="System.Net.Sockets.Socket"></xref>, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  syntax:
    content: public int Send (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Send*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  id: Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(Byte[],Int32,Int32,SocketFlags)
  nameWithType: Socket.Send(Byte[],Int32,Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(Byte[],Int32,Int32,SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the specified number of bytes of data to a connected <xref href="System.Net.Sockets.Socket"></xref>, starting at the specified offset, and using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  syntax:
    content: public int Send (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: offset
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Send*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(Byte[],Int32,Int32,SocketFlags,SocketError)
  nameWithType: Socket.Send(Byte[],Int32,Int32,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Send(Byte[],Int32,Int32,SocketFlags,SocketError)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the specified number of bytes of data to a connected <xref href="System.Net.Sockets.Socket"></xref>, starting at the specified offset, and using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>
  syntax:
    content: public int Send (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: offset
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.Send*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendAsync(SocketAsyncEventArgs)
  nameWithType: Socket.SendAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a connected <xref href="System.Net.Sockets.Socket"></xref> object.
  syntax:
    content: public bool SendAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.SendAsync*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SendBufferSize
  id: SendBufferSize
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendBufferSize
  nameWithType: Socket.SendBufferSize
  fullName: System.Net.Sockets.Socket.SendBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies the size of the send buffer of the <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public int SendBufferSize { get; set; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.SendBufferSize*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SendFile(System.String)
  id: SendFile(System.String)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendFile(String)
  nameWithType: Socket.SendFile(String)
  fullName: System.Net.Sockets.Socket.SendFile(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the file `fileName` to a connected <xref href="System.Net.Sockets.Socket"></xref> object with the <xref href="System.Net.Sockets.TransmitFileOptions"></xref> transmit flag.
  syntax:
    content: public void SendFile (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: To be added.
  overload: System.Net.Sockets.Socket.SendFile*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)
  id: SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendFile(String,Byte[],Byte[],TransmitFileOptions)
  nameWithType: Socket.SendFile(String,Byte[],Byte[],TransmitFileOptions)
  fullName: System.Net.Sockets.Socket.SendFile(String,Byte[],Byte[],TransmitFileOptions)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the file `fileName` and buffers of data to a connected <xref href="System.Net.Sockets.Socket"></xref> object using the specified <xref href="System.Net.Sockets.TransmitFileOptions"></xref> value.
  syntax:
    content: public void SendFile (string fileName, byte[] preBuffer, byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags);
    parameters:
    - id: fileName
      type: System.String
      description: To be added.
    - id: preBuffer
      type: System.Byte[]
      description: To be added.
    - id: postBuffer
      type: System.Byte[]
      description: To be added.
    - id: flags
      type: System.Net.Sockets.TransmitFileOptions
      description: To be added.
  overload: System.Net.Sockets.Socket.SendFile*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendPacketsAsync(SocketAsyncEventArgs)
  nameWithType: Socket.SendPacketsAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendPacketsAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends a collection of files or in memory data buffers asynchronously to a connected <xref href="System.Net.Sockets.Socket"></xref> object.
  syntax:
    content: public bool SendPacketsAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.SendPacketsAsync*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SendTimeout
  id: SendTimeout
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendTimeout
  nameWithType: Socket.SendTimeout
  fullName: System.Net.Sockets.Socket.SendTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies the amount of time after which a synchronous <xref:System.Net.Sockets.Socket.Send*> call will time out.
  syntax:
    content: public int SendTimeout { get; set; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.SendTimeout*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendTo(Byte[],EndPoint)
  nameWithType: Socket.SendTo(Byte[],EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data to the specified endpoint.
  syntax:
    content: public int SendTo (byte[] buffer, System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: remoteEP
      type: System.Net.EndPoint
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.SendTo*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendTo(Byte[],SocketFlags,EndPoint)
  nameWithType: Socket.SendTo(Byte[],SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],SocketFlags,EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data to a specific endpoint using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  syntax:
    content: public int SendTo (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: remoteEP
      type: System.Net.EndPoint
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.SendTo*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendTo(Byte[],Int32,SocketFlags,EndPoint)
  nameWithType: Socket.SendTo(Byte[],Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],Int32,SocketFlags,EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the specified number of bytes of data to the specified endpoint using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  syntax:
    content: public int SendTo (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: remoteEP
      type: System.Net.EndPoint
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.SendTo*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendTo(Byte[],Int32,Int32,SocketFlags,EndPoint)
  nameWithType: Socket.SendTo(Byte[],Int32,Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],Int32,Int32,SocketFlags,EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the specified number of bytes of data to the specified endpoint, starting at the specified location in the buffer, and using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  syntax:
    content: public int SendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: To be added.
    - id: offset
      type: System.Int32
      description: To be added.
    - id: size
      type: System.Int32
      description: To be added.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: To be added.
    - id: remoteEP
      type: System.Net.EndPoint
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.SendTo*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendToAsync(SocketAsyncEventArgs)
  nameWithType: Socket.SendToAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendToAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a specific remote host.
  syntax:
    content: public bool SendToAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.SendToAsync*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)
  id: SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SetIPProtectionLevel(IPProtectionLevel)
  nameWithType: Socket.SetIPProtectionLevel(IPProtectionLevel)
  fullName: System.Net.Sockets.Socket.SetIPProtectionLevel(IPProtectionLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Set the IP protection level on a socket.
  syntax:
    content: public void SetIPProtectionLevel (System.Net.Sockets.IPProtectionLevel level);
    parameters:
    - id: level
      type: System.Net.Sockets.IPProtectionLevel
      description: To be added.
  overload: System.Net.Sockets.Socket.SetIPProtectionLevel*
  exceptions: []
  version:
  - netframework-40
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Boolean)
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Boolean)
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sets the specified <xref href="System.Net.Sockets.Socket"></xref> option to the specified <xref href="System.Boolean"></xref> value.
  syntax:
    content: public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, bool optionValue);
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: To be added.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: To be added.
    - id: optionValue
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.SetSocketOption*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sets the specified <xref href="System.Net.Sockets.Socket"></xref> option to the specified value, represented as a byte array.
  syntax:
    content: public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue);
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: To be added.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: To be added.
    - id: optionValue
      type: System.Byte[]
      description: To be added.
  overload: System.Net.Sockets.Socket.SetSocketOption*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sets the specified <xref href="System.Net.Sockets.Socket"></xref> option to the specified integer value.
  syntax:
    content: public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionValue);
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: To be added.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: To be added.
    - id: optionValue
      type: System.Int32
      description: To be added.
  overload: System.Net.Sockets.Socket.SetSocketOption*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Object)
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Object)
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sets the specified <xref href="System.Net.Sockets.Socket"></xref> option to the specified value, represented as an object.
  syntax:
    content: public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, object optionValue);
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: To be added.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: To be added.
    - id: optionValue
      type: System.Object
      description: To be added.
  overload: System.Net.Sockets.Socket.SetSocketOption*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  id: Shutdown(System.Net.Sockets.SocketShutdown)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Shutdown(SocketShutdown)
  nameWithType: Socket.Shutdown(SocketShutdown)
  fullName: System.Net.Sockets.Socket.Shutdown(SocketShutdown)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Disables sends and receives on a <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public void Shutdown (System.Net.Sockets.SocketShutdown how);
    parameters:
    - id: how
      type: System.Net.Sockets.SocketShutdown
      description: To be added.
  overload: System.Net.Sockets.Socket.Shutdown*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SocketType
  id: SocketType
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SocketType
  nameWithType: Socket.SocketType
  fullName: System.Net.Sockets.Socket.SocketType
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets the type of the <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public System.Net.Sockets.SocketType SocketType { get; }
    return:
      type: System.Net.Sockets.SocketType
      description: To be added.
  overload: System.Net.Sockets.Socket.SocketType*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SupportsIPv4
  id: SupportsIPv4
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SupportsIPv4
  nameWithType: Socket.SupportsIPv4
  fullName: System.Net.Sockets.Socket.SupportsIPv4
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets a value indicating whether IPv4 support is available and enabled on the current host.
  syntax:
    content: public static bool SupportsIPv4 { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.SupportsIPv4*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.SupportsIPv6
  id: SupportsIPv6
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SupportsIPv6
  nameWithType: Socket.SupportsIPv6
  fullName: System.Net.Sockets.Socket.SupportsIPv6
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets a value that indicates whether the Framework supports IPv6 for certain obsolete <xref href="System.Net.Dns"></xref> members.
  syntax:
    content: public static bool SupportsIPv6 { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.SupportsIPv6*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.Ttl
  id: Ttl
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Ttl
  nameWithType: Socket.Ttl
  fullName: System.Net.Sockets.Socket.Ttl
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies the Time To Live (TTL) value of Internet Protocol (IP) packets sent by the <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public short Ttl { get; set; }
    return:
      type: System.Int16
      description: To be added.
  overload: System.Net.Sockets.Socket.Ttl*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.Sockets.Socket.UseOnlyOverlappedIO
  id: UseOnlyOverlappedIO
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: UseOnlyOverlappedIO
  nameWithType: Socket.UseOnlyOverlappedIO
  fullName: System.Net.Sockets.Socket.UseOnlyOverlappedIO
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Specifies whether the socket should only use Overlapped I/O mode.
  syntax:
    content: public bool UseOnlyOverlappedIO { get; set; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.Sockets.Socket.UseOnlyOverlappedIO*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketInformation)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Socket(SocketInformation)
  nameWithType: Socket.Socket(SocketInformation)
  fullName: System.Net.Sockets.Socket.Socket(SocketInformation)
- uid: System.Net.Sockets.SocketInformation
  parent: System.Net.Sockets
  isExternal: false
  name: SocketInformation
  nameWithType: SocketInformation
  fullName: System.Net.Sockets.SocketInformation
- uid: System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Socket(AddressFamily,SocketType,ProtocolType)
  nameWithType: Socket.Socket(AddressFamily,SocketType,ProtocolType)
  fullName: System.Net.Sockets.Socket.Socket(AddressFamily,SocketType,ProtocolType)
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: false
  name: AddressFamily
  nameWithType: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets.SocketType
  parent: System.Net.Sockets
  isExternal: false
  name: SocketType
  nameWithType: SocketType
  fullName: System.Net.Sockets.SocketType
- uid: System.Net.Sockets.ProtocolType
  parent: System.Net.Sockets
  isExternal: false
  name: ProtocolType
  nameWithType: ProtocolType
  fullName: System.Net.Sockets.ProtocolType
- uid: System.Net.Sockets.Socket.Accept
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Accept()
  nameWithType: Socket.Accept()
  fullName: System.Net.Sockets.Socket.Accept()
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: false
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: AcceptAsync(SocketAsyncEventArgs)
  nameWithType: Socket.AcceptAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.AcceptAsync(SocketAsyncEventArgs)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.SocketAsyncEventArgs
  parent: System.Net.Sockets
  isExternal: false
  name: SocketAsyncEventArgs
  nameWithType: SocketAsyncEventArgs
  fullName: System.Net.Sockets.SocketAsyncEventArgs
- uid: System.Net.Sockets.Socket.AddressFamily
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: AddressFamily
  nameWithType: Socket.AddressFamily
  fullName: System.Net.Sockets.Socket.AddressFamily
- uid: System.Net.Sockets.Socket.Available
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Available
  nameWithType: Socket.Available
  fullName: System.Net.Sockets.Socket.Available
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginAccept(AsyncCallback,Object)
  nameWithType: Socket.BeginAccept(AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginAccept(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: false
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.Socket.BeginAccept(System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginAccept(Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginAccept(Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginAccept(Int32,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginAccept(Socket,Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginAccept(Socket,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginAccept(Socket,Int32,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginConnect(EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(EndPoint,AsyncCallback,Object)
- uid: System.Net.EndPoint
  parent: System.Net
  isExternal: false
  name: EndPoint
  nameWithType: EndPoint
  fullName: System.Net.EndPoint
- uid: System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginConnect(IPAddress,Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(IPAddress,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(IPAddress,Int32,AsyncCallback,Object)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginConnect(IPAddress[],Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(IPAddress[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(IPAddress[],Int32,AsyncCallback,Object)
- uid: System.Net.IPAddress[]
  parent: System.Net
  isExternal: false
  name: IPAddress[]
  nameWithType: IPAddress[]
  fullName: System.Net.IPAddress[]
  spec.csharp:
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: IPAddress[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginConnect(String,Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(String,Int32,AsyncCallback,Object)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginDisconnect(Boolean,AsyncCallback,Object)
  nameWithType: Socket.BeginDisconnect(Boolean,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginDisconnect(Boolean,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
- uid: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<ArraySegment<Byte>>
  nameWithType: IList<ArraySegment<Byte>>
  fullName: System.Collections.Generic.IList<System.ArraySegment<System.Byte>>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.ArraySegment<System.Byte>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.SocketFlags
  parent: System.Net.Sockets
  isExternal: false
  name: SocketFlags
  nameWithType: SocketFlags
  fullName: System.Net.Sockets.SocketFlags
- uid: System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
- uid: System.Net.Sockets.SocketError
  parent: System.Net.Sockets
  isExternal: false
  name: SocketError
  nameWithType: SocketError
  fullName: System.Net.Sockets.SocketError
- uid: System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceive(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceive(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSend(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSend(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSend(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSend(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSendFile(String,AsyncCallback,Object)
  nameWithType: Socket.BeginSendFile(String,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSendFile(String,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSendFile(String,Byte[],Byte[],TransmitFileOptions,AsyncCallback,Object)
  nameWithType: Socket.BeginSendFile(String,Byte[],Byte[],TransmitFileOptions,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSendFile(String,Byte[],Byte[],TransmitFileOptions,AsyncCallback,Object)
- uid: System.Net.Sockets.TransmitFileOptions
  parent: System.Net.Sockets
  isExternal: false
  name: TransmitFileOptions
  nameWithType: TransmitFileOptions
  fullName: System.Net.Sockets.TransmitFileOptions
- uid: System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSendTo(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginSendTo(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSendTo(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Bind(EndPoint)
  nameWithType: Socket.Bind(EndPoint)
  fullName: System.Net.Sockets.Socket.Bind(EndPoint)
- uid: System.Net.Sockets.Socket.Blocking
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Blocking
  nameWithType: Socket.Blocking
  fullName: System.Net.Sockets.Socket.Blocking
- uid: System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: CancelConnectAsync(SocketAsyncEventArgs)
  nameWithType: Socket.CancelConnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.CancelConnectAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.Close
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Close()
  nameWithType: Socket.Close()
  fullName: System.Net.Sockets.Socket.Close()
- uid: System.Net.Sockets.Socket.Close(System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Close(Int32)
  nameWithType: Socket.Close(Int32)
  fullName: System.Net.Sockets.Socket.Close(Int32)
- uid: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Connect(EndPoint)
  nameWithType: Socket.Connect(EndPoint)
  fullName: System.Net.Sockets.Socket.Connect(EndPoint)
- uid: System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Connect(IPAddress,Int32)
  nameWithType: Socket.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.Socket.Connect(IPAddress,Int32)
- uid: System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Connect(IPAddress[],Int32)
  nameWithType: Socket.Connect(IPAddress[],Int32)
  fullName: System.Net.Sockets.Socket.Connect(IPAddress[],Int32)
- uid: System.Net.Sockets.Socket.Connect(System.String,System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Connect(String,Int32)
  nameWithType: Socket.Connect(String,Int32)
  fullName: System.Net.Sockets.Socket.Connect(String,Int32)
- uid: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ConnectAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ConnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ConnectAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ConnectAsync(SocketType,ProtocolType,SocketAsyncEventArgs)
  nameWithType: Socket.ConnectAsync(SocketType,ProtocolType,SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ConnectAsync(SocketType,ProtocolType,SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.Connected
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Connected
  nameWithType: Socket.Connected
  fullName: System.Net.Sockets.Socket.Connected
- uid: System.Net.Sockets.Socket.Disconnect(System.Boolean)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Disconnect(Boolean)
  nameWithType: Socket.Disconnect(Boolean)
  fullName: System.Net.Sockets.Socket.Disconnect(Boolean)
- uid: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: DisconnectAsync(SocketAsyncEventArgs)
  nameWithType: Socket.DisconnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.DisconnectAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.Dispose
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Dispose()
  nameWithType: Socket.Dispose()
  fullName: System.Net.Sockets.Socket.Dispose()
- uid: System.Net.Sockets.Socket.Dispose(System.Boolean)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Socket.Dispose(Boolean)
  fullName: System.Net.Sockets.Socket.Dispose(Boolean)
- uid: System.Net.Sockets.Socket.DontFragment
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: DontFragment
  nameWithType: Socket.DontFragment
  fullName: System.Net.Sockets.Socket.DontFragment
- uid: System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: DuplicateAndClose(Int32)
  nameWithType: Socket.DuplicateAndClose(Int32)
  fullName: System.Net.Sockets.Socket.DuplicateAndClose(Int32)
- uid: System.Net.Sockets.Socket.EnableBroadcast
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EnableBroadcast
  nameWithType: Socket.EnableBroadcast
  fullName: System.Net.Sockets.Socket.EnableBroadcast
- uid: System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndAccept(IAsyncResult)
  nameWithType: Socket.EndAccept(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndAccept(IAsyncResult)
- uid: System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndAccept(Byte[],IAsyncResult)
  nameWithType: Socket.EndAccept(Byte[],IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndAccept(Byte[],IAsyncResult)
- uid: System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndAccept(Byte[],Int32,IAsyncResult)
  nameWithType: Socket.EndAccept(Byte[],Int32,IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndAccept(Byte[],Int32,IAsyncResult)
- uid: System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndConnect(IAsyncResult)
  nameWithType: Socket.EndConnect(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndConnect(IAsyncResult)
- uid: System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndDisconnect(IAsyncResult)
  nameWithType: Socket.EndDisconnect(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndDisconnect(IAsyncResult)
- uid: System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndReceive(IAsyncResult)
  nameWithType: Socket.EndReceive(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndReceive(IAsyncResult)
- uid: System.Net.Sockets.Socket.EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndReceive(IAsyncResult,SocketError)
  nameWithType: Socket.EndReceive(IAsyncResult,SocketError)
  fullName: System.Net.Sockets.Socket.EndReceive(IAsyncResult,SocketError)
- uid: System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndReceiveFrom(IAsyncResult,EndPoint)
  nameWithType: Socket.EndReceiveFrom(IAsyncResult,EndPoint)
  fullName: System.Net.Sockets.Socket.EndReceiveFrom(IAsyncResult,EndPoint)
- uid: System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndReceiveMessageFrom(IAsyncResult,SocketFlags,EndPoint,IPPacketInformation)
  nameWithType: Socket.EndReceiveMessageFrom(IAsyncResult,SocketFlags,EndPoint,IPPacketInformation)
  fullName: System.Net.Sockets.Socket.EndReceiveMessageFrom(IAsyncResult,SocketFlags,EndPoint,IPPacketInformation)
- uid: System.Net.Sockets.IPPacketInformation
  parent: System.Net.Sockets
  isExternal: false
  name: IPPacketInformation
  nameWithType: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
- uid: System.Net.Sockets.Socket.EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndSend(IAsyncResult)
  nameWithType: Socket.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndSend(IAsyncResult)
- uid: System.Net.Sockets.Socket.EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndSend(IAsyncResult,SocketError)
  nameWithType: Socket.EndSend(IAsyncResult,SocketError)
  fullName: System.Net.Sockets.Socket.EndSend(IAsyncResult,SocketError)
- uid: System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndSendFile(IAsyncResult)
  nameWithType: Socket.EndSendFile(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndSendFile(IAsyncResult)
- uid: System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndSendTo(IAsyncResult)
  nameWithType: Socket.EndSendTo(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndSendTo(IAsyncResult)
- uid: System.Net.Sockets.Socket.ExclusiveAddressUse
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: Socket.ExclusiveAddressUse
  fullName: System.Net.Sockets.Socket.ExclusiveAddressUse
- uid: System.Net.Sockets.Socket.Finalize
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Finalize()
  nameWithType: Socket.Finalize()
  fullName: System.Net.Sockets.Socket.Finalize()
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: GetSocketOption(SocketOptionLevel,SocketOptionName)
  nameWithType: Socket.GetSocketOption(SocketOptionLevel,SocketOptionName)
  fullName: System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel,SocketOptionName)
- uid: System.Net.Sockets.SocketOptionLevel
  parent: System.Net.Sockets
  isExternal: false
  name: SocketOptionLevel
  nameWithType: SocketOptionLevel
  fullName: System.Net.Sockets.SocketOptionLevel
- uid: System.Net.Sockets.SocketOptionName
  parent: System.Net.Sockets
  isExternal: false
  name: SocketOptionName
  nameWithType: SocketOptionName
  fullName: System.Net.Sockets.SocketOptionName
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: GetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  nameWithType: Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  fullName: System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: GetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  nameWithType: Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  fullName: System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
- uid: System.Net.Sockets.Socket.Handle
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Handle
  nameWithType: Socket.Handle
  fullName: System.Net.Sockets.Socket.Handle
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: IOControl(Int32,Byte[],Byte[])
  nameWithType: Socket.IOControl(Int32,Byte[],Byte[])
  fullName: System.Net.Sockets.Socket.IOControl(Int32,Byte[],Byte[])
- uid: System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: IOControl(IOControlCode,Byte[],Byte[])
  nameWithType: Socket.IOControl(IOControlCode,Byte[],Byte[])
  fullName: System.Net.Sockets.Socket.IOControl(IOControlCode,Byte[],Byte[])
- uid: System.Net.Sockets.IOControlCode
  parent: System.Net.Sockets
  isExternal: false
  name: IOControlCode
  nameWithType: IOControlCode
  fullName: System.Net.Sockets.IOControlCode
- uid: System.Net.Sockets.Socket.IsBound
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: IsBound
  nameWithType: Socket.IsBound
  fullName: System.Net.Sockets.Socket.IsBound
- uid: System.Net.Sockets.Socket.LingerState
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: LingerState
  nameWithType: Socket.LingerState
  fullName: System.Net.Sockets.Socket.LingerState
- uid: System.Net.Sockets.LingerOption
  parent: System.Net.Sockets
  isExternal: false
  name: LingerOption
  nameWithType: LingerOption
  fullName: System.Net.Sockets.LingerOption
- uid: System.Net.Sockets.Socket.Listen(System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Listen(Int32)
  nameWithType: Socket.Listen(Int32)
  fullName: System.Net.Sockets.Socket.Listen(Int32)
- uid: System.Net.Sockets.Socket.LocalEndPoint
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: LocalEndPoint
  nameWithType: Socket.LocalEndPoint
  fullName: System.Net.Sockets.Socket.LocalEndPoint
- uid: System.Net.Sockets.Socket.MulticastLoopback
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: MulticastLoopback
  nameWithType: Socket.MulticastLoopback
  fullName: System.Net.Sockets.Socket.MulticastLoopback
- uid: System.Net.Sockets.Socket.NoDelay
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: NoDelay
  nameWithType: Socket.NoDelay
  fullName: System.Net.Sockets.Socket.NoDelay
- uid: System.Net.Sockets.Socket.OSSupportsIPv4
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: OSSupportsIPv4
  nameWithType: Socket.OSSupportsIPv4
  fullName: System.Net.Sockets.Socket.OSSupportsIPv4
- uid: System.Net.Sockets.Socket.OSSupportsIPv6
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: OSSupportsIPv6
  nameWithType: Socket.OSSupportsIPv6
  fullName: System.Net.Sockets.Socket.OSSupportsIPv6
- uid: System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Poll(Int32,SelectMode)
  nameWithType: Socket.Poll(Int32,SelectMode)
  fullName: System.Net.Sockets.Socket.Poll(Int32,SelectMode)
- uid: System.Net.Sockets.SelectMode
  parent: System.Net.Sockets
  isExternal: false
  name: SelectMode
  nameWithType: SelectMode
  fullName: System.Net.Sockets.SelectMode
- uid: System.Net.Sockets.Socket.ProtocolType
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ProtocolType
  nameWithType: Socket.ProtocolType
  fullName: System.Net.Sockets.Socket.ProtocolType
- uid: System.Net.Sockets.Socket.Receive(System.Byte[])
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(Byte[])
  nameWithType: Socket.Receive(Byte[])
  fullName: System.Net.Sockets.Socket.Receive(Byte[])
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(IList<ArraySegment<Byte>>)
  nameWithType: Socket.Receive(IList<ArraySegment<Byte>>)
  fullName: System.Net.Sockets.Socket.Receive(IList<ArraySegment<Byte>>)
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(Byte[],SocketFlags)
  nameWithType: Socket.Receive(Byte[],SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],SocketFlags)
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(IList<ArraySegment<Byte>>,SocketFlags)
  nameWithType: Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags)
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(Byte[],Int32,SocketFlags)
  nameWithType: Socket.Receive(Byte[],Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],Int32,SocketFlags)
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  nameWithType: Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(Byte[],Int32,Int32,SocketFlags)
  nameWithType: Socket.Receive(Byte[],Int32,Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],Int32,Int32,SocketFlags)
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(Byte[],Int32,Int32,SocketFlags,SocketError)
  nameWithType: Socket.Receive(Byte[],Int32,Int32,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],Int32,Int32,SocketFlags,SocketError)
- uid: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ReceiveAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.ReceiveBufferSize
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: Socket.ReceiveBufferSize
  fullName: System.Net.Sockets.Socket.ReceiveBufferSize
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveFrom(Byte[],EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],EndPoint)
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveFrom(Byte[],SocketFlags,EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],SocketFlags,EndPoint)
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveFrom(Byte[],Int32,SocketFlags,EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],Int32,SocketFlags,EndPoint)
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint)
- uid: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveFromAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ReceiveFromAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveFromAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,IPPacketInformation)
  nameWithType: Socket.ReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,IPPacketInformation)
  fullName: System.Net.Sockets.Socket.ReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,IPPacketInformation)
- uid: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveMessageFromAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ReceiveMessageFromAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveMessageFromAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.ReceiveTimeout
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveTimeout
  nameWithType: Socket.ReceiveTimeout
  fullName: System.Net.Sockets.Socket.ReceiveTimeout
- uid: System.Net.Sockets.Socket.RemoteEndPoint
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: RemoteEndPoint
  nameWithType: Socket.RemoteEndPoint
  fullName: System.Net.Sockets.Socket.RemoteEndPoint
- uid: System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Select(IList,IList,IList,Int32)
  nameWithType: Socket.Select(IList,IList,IList,Int32)
  fullName: System.Net.Sockets.Socket.Select(IList,IList,IList,Int32)
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Net.Sockets.Socket.Send(System.Byte[])
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(Byte[])
  nameWithType: Socket.Send(Byte[])
  fullName: System.Net.Sockets.Socket.Send(Byte[])
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(IList<ArraySegment<Byte>>)
  nameWithType: Socket.Send(IList<ArraySegment<Byte>>)
  fullName: System.Net.Sockets.Socket.Send(IList<ArraySegment<Byte>>)
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(Byte[],SocketFlags)
  nameWithType: Socket.Send(Byte[],SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(Byte[],SocketFlags)
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(IList<ArraySegment<Byte>>,SocketFlags)
  nameWithType: Socket.Send(IList<ArraySegment<Byte>>,SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(IList<ArraySegment<Byte>>,SocketFlags)
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(Byte[],Int32,SocketFlags)
  nameWithType: Socket.Send(Byte[],Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(Byte[],Int32,SocketFlags)
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  nameWithType: Socket.Send(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Send(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(Byte[],Int32,Int32,SocketFlags)
  nameWithType: Socket.Send(Byte[],Int32,Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(Byte[],Int32,Int32,SocketFlags)
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(Byte[],Int32,Int32,SocketFlags,SocketError)
  nameWithType: Socket.Send(Byte[],Int32,Int32,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Send(Byte[],Int32,Int32,SocketFlags,SocketError)
- uid: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendAsync(SocketAsyncEventArgs)
  nameWithType: Socket.SendAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.SendBufferSize
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendBufferSize
  nameWithType: Socket.SendBufferSize
  fullName: System.Net.Sockets.Socket.SendBufferSize
- uid: System.Net.Sockets.Socket.SendFile(System.String)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendFile(String)
  nameWithType: Socket.SendFile(String)
  fullName: System.Net.Sockets.Socket.SendFile(String)
- uid: System.Net.Sockets.Socket.SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendFile(String,Byte[],Byte[],TransmitFileOptions)
  nameWithType: Socket.SendFile(String,Byte[],Byte[],TransmitFileOptions)
  fullName: System.Net.Sockets.Socket.SendFile(String,Byte[],Byte[],TransmitFileOptions)
- uid: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendPacketsAsync(SocketAsyncEventArgs)
  nameWithType: Socket.SendPacketsAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendPacketsAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.SendTimeout
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendTimeout
  nameWithType: Socket.SendTimeout
  fullName: System.Net.Sockets.Socket.SendTimeout
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendTo(Byte[],EndPoint)
  nameWithType: Socket.SendTo(Byte[],EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],EndPoint)
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendTo(Byte[],SocketFlags,EndPoint)
  nameWithType: Socket.SendTo(Byte[],SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],SocketFlags,EndPoint)
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendTo(Byte[],Int32,SocketFlags,EndPoint)
  nameWithType: Socket.SendTo(Byte[],Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],Int32,SocketFlags,EndPoint)
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendTo(Byte[],Int32,Int32,SocketFlags,EndPoint)
  nameWithType: Socket.SendTo(Byte[],Int32,Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],Int32,Int32,SocketFlags,EndPoint)
- uid: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendToAsync(SocketAsyncEventArgs)
  nameWithType: Socket.SendToAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendToAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SetIPProtectionLevel(IPProtectionLevel)
  nameWithType: Socket.SetIPProtectionLevel(IPProtectionLevel)
  fullName: System.Net.Sockets.Socket.SetIPProtectionLevel(IPProtectionLevel)
- uid: System.Net.Sockets.IPProtectionLevel
  parent: System.Net.Sockets
  isExternal: false
  name: IPProtectionLevel
  nameWithType: IPProtectionLevel
  fullName: System.Net.Sockets.IPProtectionLevel
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Boolean)
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Boolean)
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Boolean)
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Object)
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Object)
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Object)
- uid: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Shutdown(SocketShutdown)
  nameWithType: Socket.Shutdown(SocketShutdown)
  fullName: System.Net.Sockets.Socket.Shutdown(SocketShutdown)
- uid: System.Net.Sockets.SocketShutdown
  parent: System.Net.Sockets
  isExternal: false
  name: SocketShutdown
  nameWithType: SocketShutdown
  fullName: System.Net.Sockets.SocketShutdown
- uid: System.Net.Sockets.Socket.SocketType
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SocketType
  nameWithType: Socket.SocketType
  fullName: System.Net.Sockets.Socket.SocketType
- uid: System.Net.Sockets.Socket.SupportsIPv4
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SupportsIPv4
  nameWithType: Socket.SupportsIPv4
  fullName: System.Net.Sockets.Socket.SupportsIPv4
- uid: System.Net.Sockets.Socket.SupportsIPv6
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SupportsIPv6
  nameWithType: Socket.SupportsIPv6
  fullName: System.Net.Sockets.Socket.SupportsIPv6
- uid: System.Net.Sockets.Socket.Ttl
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Ttl
  nameWithType: Socket.Ttl
  fullName: System.Net.Sockets.Socket.Ttl
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Net.Sockets.Socket.UseOnlyOverlappedIO
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: UseOnlyOverlappedIO
  nameWithType: Socket.UseOnlyOverlappedIO
  fullName: System.Net.Sockets.Socket.UseOnlyOverlappedIO
- uid: System.Net.Sockets.Socket.#ctor*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Socket
  nameWithType: Socket.Socket
- uid: System.Net.Sockets.Socket.Accept*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Accept
  nameWithType: Socket.Accept
- uid: System.Net.Sockets.Socket.AcceptAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: AcceptAsync
  nameWithType: Socket.AcceptAsync
- uid: System.Net.Sockets.Socket.AddressFamily*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: AddressFamily
  nameWithType: Socket.AddressFamily
- uid: System.Net.Sockets.Socket.Available*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Available
  nameWithType: Socket.Available
- uid: System.Net.Sockets.Socket.BeginAccept*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginAccept
  nameWithType: Socket.BeginAccept
- uid: System.Net.Sockets.Socket.BeginConnect*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginConnect
  nameWithType: Socket.BeginConnect
- uid: System.Net.Sockets.Socket.BeginDisconnect*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginDisconnect
  nameWithType: Socket.BeginDisconnect
- uid: System.Net.Sockets.Socket.BeginReceive*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceive
  nameWithType: Socket.BeginReceive
- uid: System.Net.Sockets.Socket.BeginReceiveFrom*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceiveFrom
  nameWithType: Socket.BeginReceiveFrom
- uid: System.Net.Sockets.Socket.BeginReceiveMessageFrom*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceiveMessageFrom
  nameWithType: Socket.BeginReceiveMessageFrom
- uid: System.Net.Sockets.Socket.BeginSend*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSend
  nameWithType: Socket.BeginSend
- uid: System.Net.Sockets.Socket.BeginSendFile*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSendFile
  nameWithType: Socket.BeginSendFile
- uid: System.Net.Sockets.Socket.BeginSendTo*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSendTo
  nameWithType: Socket.BeginSendTo
- uid: System.Net.Sockets.Socket.Bind*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Bind
  nameWithType: Socket.Bind
- uid: System.Net.Sockets.Socket.Blocking*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Blocking
  nameWithType: Socket.Blocking
- uid: System.Net.Sockets.Socket.CancelConnectAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: CancelConnectAsync
  nameWithType: Socket.CancelConnectAsync
- uid: System.Net.Sockets.Socket.Close*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Close
  nameWithType: Socket.Close
- uid: System.Net.Sockets.Socket.Connect*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Connect
  nameWithType: Socket.Connect
- uid: System.Net.Sockets.Socket.ConnectAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ConnectAsync
  nameWithType: Socket.ConnectAsync
- uid: System.Net.Sockets.Socket.Connected*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Connected
  nameWithType: Socket.Connected
- uid: System.Net.Sockets.Socket.Disconnect*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Disconnect
  nameWithType: Socket.Disconnect
- uid: System.Net.Sockets.Socket.DisconnectAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: DisconnectAsync
  nameWithType: Socket.DisconnectAsync
- uid: System.Net.Sockets.Socket.Dispose*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Dispose
  nameWithType: Socket.Dispose
- uid: System.Net.Sockets.Socket.DontFragment*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: DontFragment
  nameWithType: Socket.DontFragment
- uid: System.Net.Sockets.Socket.DuplicateAndClose*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: DuplicateAndClose
  nameWithType: Socket.DuplicateAndClose
- uid: System.Net.Sockets.Socket.EnableBroadcast*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EnableBroadcast
  nameWithType: Socket.EnableBroadcast
- uid: System.Net.Sockets.Socket.EndAccept*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndAccept
  nameWithType: Socket.EndAccept
- uid: System.Net.Sockets.Socket.EndConnect*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndConnect
  nameWithType: Socket.EndConnect
- uid: System.Net.Sockets.Socket.EndDisconnect*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndDisconnect
  nameWithType: Socket.EndDisconnect
- uid: System.Net.Sockets.Socket.EndReceive*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndReceive
  nameWithType: Socket.EndReceive
- uid: System.Net.Sockets.Socket.EndReceiveFrom*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndReceiveFrom
  nameWithType: Socket.EndReceiveFrom
- uid: System.Net.Sockets.Socket.EndReceiveMessageFrom*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndReceiveMessageFrom
  nameWithType: Socket.EndReceiveMessageFrom
- uid: System.Net.Sockets.Socket.EndSend*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndSend
  nameWithType: Socket.EndSend
- uid: System.Net.Sockets.Socket.EndSendFile*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndSendFile
  nameWithType: Socket.EndSendFile
- uid: System.Net.Sockets.Socket.EndSendTo*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndSendTo
  nameWithType: Socket.EndSendTo
- uid: System.Net.Sockets.Socket.ExclusiveAddressUse*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: Socket.ExclusiveAddressUse
- uid: System.Net.Sockets.Socket.Finalize*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Finalize
  nameWithType: Socket.Finalize
- uid: System.Net.Sockets.Socket.GetSocketOption*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: GetSocketOption
  nameWithType: Socket.GetSocketOption
- uid: System.Net.Sockets.Socket.Handle*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Handle
  nameWithType: Socket.Handle
- uid: System.Net.Sockets.Socket.IOControl*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: IOControl
  nameWithType: Socket.IOControl
- uid: System.Net.Sockets.Socket.IsBound*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: IsBound
  nameWithType: Socket.IsBound
- uid: System.Net.Sockets.Socket.LingerState*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: LingerState
  nameWithType: Socket.LingerState
- uid: System.Net.Sockets.Socket.Listen*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Listen
  nameWithType: Socket.Listen
- uid: System.Net.Sockets.Socket.LocalEndPoint*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: LocalEndPoint
  nameWithType: Socket.LocalEndPoint
- uid: System.Net.Sockets.Socket.MulticastLoopback*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: MulticastLoopback
  nameWithType: Socket.MulticastLoopback
- uid: System.Net.Sockets.Socket.NoDelay*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: NoDelay
  nameWithType: Socket.NoDelay
- uid: System.Net.Sockets.Socket.OSSupportsIPv4*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: OSSupportsIPv4
  nameWithType: Socket.OSSupportsIPv4
- uid: System.Net.Sockets.Socket.OSSupportsIPv6*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: OSSupportsIPv6
  nameWithType: Socket.OSSupportsIPv6
- uid: System.Net.Sockets.Socket.Poll*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Poll
  nameWithType: Socket.Poll
- uid: System.Net.Sockets.Socket.ProtocolType*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ProtocolType
  nameWithType: Socket.ProtocolType
- uid: System.Net.Sockets.Socket.Receive*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive
  nameWithType: Socket.Receive
- uid: System.Net.Sockets.Socket.ReceiveAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveAsync
  nameWithType: Socket.ReceiveAsync
- uid: System.Net.Sockets.Socket.ReceiveBufferSize*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: Socket.ReceiveBufferSize
- uid: System.Net.Sockets.Socket.ReceiveFrom*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveFrom
  nameWithType: Socket.ReceiveFrom
- uid: System.Net.Sockets.Socket.ReceiveFromAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveFromAsync
  nameWithType: Socket.ReceiveFromAsync
- uid: System.Net.Sockets.Socket.ReceiveMessageFrom*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveMessageFrom
  nameWithType: Socket.ReceiveMessageFrom
- uid: System.Net.Sockets.Socket.ReceiveMessageFromAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveMessageFromAsync
  nameWithType: Socket.ReceiveMessageFromAsync
- uid: System.Net.Sockets.Socket.ReceiveTimeout*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveTimeout
  nameWithType: Socket.ReceiveTimeout
- uid: System.Net.Sockets.Socket.RemoteEndPoint*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: RemoteEndPoint
  nameWithType: Socket.RemoteEndPoint
- uid: System.Net.Sockets.Socket.Select*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Select
  nameWithType: Socket.Select
- uid: System.Net.Sockets.Socket.Send*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send
  nameWithType: Socket.Send
- uid: System.Net.Sockets.Socket.SendAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendAsync
  nameWithType: Socket.SendAsync
- uid: System.Net.Sockets.Socket.SendBufferSize*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendBufferSize
  nameWithType: Socket.SendBufferSize
- uid: System.Net.Sockets.Socket.SendFile*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendFile
  nameWithType: Socket.SendFile
- uid: System.Net.Sockets.Socket.SendPacketsAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendPacketsAsync
  nameWithType: Socket.SendPacketsAsync
- uid: System.Net.Sockets.Socket.SendTimeout*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendTimeout
  nameWithType: Socket.SendTimeout
- uid: System.Net.Sockets.Socket.SendTo*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendTo
  nameWithType: Socket.SendTo
- uid: System.Net.Sockets.Socket.SendToAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendToAsync
  nameWithType: Socket.SendToAsync
- uid: System.Net.Sockets.Socket.SetIPProtectionLevel*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SetIPProtectionLevel
  nameWithType: Socket.SetIPProtectionLevel
- uid: System.Net.Sockets.Socket.SetSocketOption*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SetSocketOption
  nameWithType: Socket.SetSocketOption
- uid: System.Net.Sockets.Socket.Shutdown*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Shutdown
  nameWithType: Socket.Shutdown
- uid: System.Net.Sockets.Socket.SocketType*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SocketType
  nameWithType: Socket.SocketType
- uid: System.Net.Sockets.Socket.SupportsIPv4*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SupportsIPv4
  nameWithType: Socket.SupportsIPv4
- uid: System.Net.Sockets.Socket.SupportsIPv6*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SupportsIPv6
  nameWithType: Socket.SupportsIPv6
- uid: System.Net.Sockets.Socket.Ttl*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Ttl
  nameWithType: Socket.Ttl
- uid: System.Net.Sockets.Socket.UseOnlyOverlappedIO*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: UseOnlyOverlappedIO
  nameWithType: Socket.UseOnlyOverlappedIO
