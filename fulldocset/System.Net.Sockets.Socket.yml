### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.Socket
  id: Socket
  children:
  - System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketInformation)
  - System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  - System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  - System.Net.Sockets.Socket.Accept
  - System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.AddressFamily
  - System.Net.Sockets.Socket.Available
  - System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginAccept(System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)
  - System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  - System.Net.Sockets.Socket.Blocking
  - System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.Close
  - System.Net.Sockets.Socket.Close(System.Int32)
  - System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)
  - System.Net.Sockets.Socket.Connect(System.String,System.Int32)
  - System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.Connected
  - System.Net.Sockets.Socket.Disconnect(System.Boolean)
  - System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.Dispose
  - System.Net.Sockets.Socket.Dispose(System.Boolean)
  - System.Net.Sockets.Socket.DontFragment
  - System.Net.Sockets.Socket.DualMode
  - System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)
  - System.Net.Sockets.Socket.EnableBroadcast
  - System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)
  - System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.IAsyncResult)
  - System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)
  - System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)
  - System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)
  - System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)
  - System.Net.Sockets.Socket.EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)
  - System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  - System.Net.Sockets.Socket.EndSend(System.IAsyncResult)
  - System.Net.Sockets.Socket.EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)
  - System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)
  - System.Net.Sockets.Socket.ExclusiveAddressUse
  - System.Net.Sockets.Socket.Finalize
  - System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  - System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  - System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - System.Net.Sockets.Socket.Handle
  - System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])
  - System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])
  - System.Net.Sockets.Socket.IsBound
  - System.Net.Sockets.Socket.LingerState
  - System.Net.Sockets.Socket.Listen(System.Int32)
  - System.Net.Sockets.Socket.LocalEndPoint
  - System.Net.Sockets.Socket.MulticastLoopback
  - System.Net.Sockets.Socket.NoDelay
  - System.Net.Sockets.Socket.OSSupportsIPv4
  - System.Net.Sockets.Socket.OSSupportsIPv6
  - System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
  - System.Net.Sockets.Socket.ProtocolType
  - System.Net.Sockets.Socket.Receive(System.Byte[])
  - System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ReceiveBufferSize
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  - System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ReceiveTimeout
  - System.Net.Sockets.Socket.RemoteEndPoint
  - System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)
  - System.Net.Sockets.Socket.Send(System.Byte[])
  - System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.SendBufferSize
  - System.Net.Sockets.Socket.SendFile(System.String)
  - System.Net.Sockets.Socket.SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)
  - System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.SendTimeout
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)
  - System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - System.Net.Sockets.Socket.SocketType
  - System.Net.Sockets.Socket.SupportsIPv4
  - System.Net.Sockets.Socket.SupportsIPv6
  - System.Net.Sockets.Socket.Ttl
  - System.Net.Sockets.Socket.UseOnlyOverlappedIO
  langs:
  - csharp
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
  type: Class
  summary: Implements the Berkeley sockets interface.
  remarks: "The Socket class provides a rich set of methods and properties for network communications. The Socket class allows you to perform both synchronous and asynchronous data transfer using any of the communication protocols listed in the <xref:System.Net.Sockets.ProtocolType> enumeration.  \n  \n The Socket class follows the .NET Framework naming pattern for asynchronous methods. For example, the synchronous <xref:System.Net.Sockets.Socket.Receive%2A> method corresponds to the asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> and <xref:System.Net.Sockets.Socket.EndReceive%2A> methods.  \n  \n If your application only requires one thread during execution, use the following methods, which are designed for synchronous operation mode.  \n  \n-   If you are using a connection-oriented protocol such as TCP, your server can listen for connections using the <xref:System.Net.Sockets.Socket.Listen%2A> method. The <xref:System.Net.Sockets.Socket.Accept%2A> method processes any incoming connection requests and returns a Socket that you can use to communicate data with the remote host. Use this returned Socket to call the <xref:System.Net.Sockets.Socket.Send%2A> or <xref:System.Net.Sockets.Socket.Receive%2A> method. Call the <xref:System.Net.Sockets.Socket.Bind%2A> method prior to calling the <xref:System.Net.Sockets.Socket.Listen%2A> method if you want to specify the local IP address and port number. Use a port number of zero if you want the underlying service provider to assign a free port for you. If you want to connect to a listening host, call the <xref:System.Net.Sockets.Socket.Connect%2A> method. To communicate data, call the <xref:System.Net.Sockets.Socket.Send%2A> or <xref:System.Net.Sockets.Socket.Receive%2A> method.  \n  \n-   If you are using a connectionless protocol such as UDP, you do not need to listen for connections at all. Call the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method to accept any incoming datagrams. Use the <xref:System.Net.Sockets.Socket.SendTo%2A> method to send datagrams to a remote host.  \n  \n To process communications using separate threads during execution, use the following methods, which are designed for asynchronous operation mode.  \n  \n-   If you are using a connection-oriented protocol such as TCP, use the Socket, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, and <xref:System.Net.Sockets.Socket.EndConnect%2A> methods to connect with a listening host. Use the <xref:System.Net.Sockets.Socket.BeginSend%2A> and <xref:System.Net.Sockets.Socket.EndSend%2A> or <xref:System.Net.Sockets.Socket.BeginReceive%2A> and <xref:System.Net.Sockets.Socket.EndReceive%2A> methods to communicate data asynchronously. Incoming connection requests can be processed using <xref:System.Net.Sockets.Socket.BeginAccept%2A> and <xref:System.Net.Sockets.Socket.EndAccept%2A>.  \n  \n-   If you are using a connectionless protocol such as UDP, you can use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> and <xref:System.Net.Sockets.Socket.EndSendTo%2A> to send datagrams, and <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>and<xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> to receive datagrams.  \n  \n If you perform multiple asynchronous operations on a socket, they do not necessarily complete in the order in which they are started.  \n  \n When you are finished sending and receiving data, use the <xref:System.Net.Sockets.Socket.Shutdown%2A> method to disable the Socket. After calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method to release all resources associated with the Socket.  \n  \n The Socket class allows you to configure your Socket using the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method. Retrieve these settings using the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.  \n  \n> [!NOTE]\n>  If you are writing a relatively simple application and do not require maximum performance, consider using <xref:System.Net.Sockets.TcpClient>, <xref:System.Net.Sockets.TcpListener>, and <xref:System.Net.Sockets.UdpClient>. These classes provide a simpler and more user-friendly interface to Socket communications."
  example:
  - "The following code example shows how the Socket class can be used to send data to an HTTP server and receive the response. This example blocks until the entire page is received.  \n  \n [!code-vb[System.Net.Sockets.Socket#1](~/add/codesnippet/visualbasic/t-system.net.sockets.soc_1_1.vb)]\n [!code-cpp[System.Net.Sockets.Socket#1](~/add/codesnippet/cpp/t-system.net.sockets.soc_1_1.cpp)]\n [!code-cs[System.Net.Sockets.Socket#1](~/add/codesnippet/csharp/t-system.net.sockets.soc_1_1.cs)]"
  syntax:
    content: 'public class Socket : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketInformation)
  id: '#ctor(System.Net.Sockets.SocketInformation)'
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Socket(SocketInformation)
  nameWithType: Socket.Socket(SocketInformation)
  fullName: System.Net.Sockets.Socket.Socket(SocketInformation)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the <xref href="System.Net.Sockets.Socket"></xref> class using the specified value returned from <xref href="stem.Net.Sockets.Socket.DuplicateAndClose%2A"></xref>.
  remarks: If you call the Socket constructor multiple times with the same byte array as the argument for each call, you will create multiple managed <xref:System.Net.Sockets.Socket>s with the same underlying socket. This practice is strongly discouraged.
  syntax:
    content: public Socket (System.Net.Sockets.SocketInformation socketInformation);
    parameters:
    - id: socketInformation
      type: System.Net.Sockets.SocketInformation
      description: The socket information returned by <xref href="stem.Net.Sockets.Socket.DuplicateAndClose%2A"></xref>.
  overload: System.Net.Sockets.Socket.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  id: '#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)'
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Socket(SocketType,ProtocolType)
  nameWithType: Socket.Socket(SocketType,ProtocolType)
  fullName: System.Net.Sockets.Socket.Socket(SocketType,ProtocolType)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the <xref href="System.Net.Sockets.Socket"></xref> class using the specified socket type and protocol.
  remarks: "The `socketType` parameter specifies the type of the <xref:System.Net.Sockets.Socket> class and the `protocolType` parameter specifies the protocol used by <xref:System.Net.Sockets.Socket>. The two parameters are not independent. Often the <xref:System.Net.Sockets.Socket> type is implicit in the protocol. If the combination of <xref:System.Net.Sockets.Socket> type and protocol type results in an invalid <xref:System.Net.Sockets.Socket>, this constructor throws a <xref:System.Net.Sockets.SocketException>.  \n  \n> [!NOTE]\n>  If this constructor throws a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public Socket (System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType);
    parameters:
    - id: socketType
      type: System.Net.Sockets.SocketType
      description: One of the <xref href="System.Net.Sockets.SocketType"></xref> values.
    - id: protocolType
      type: System.Net.Sockets.ProtocolType
      description: One of the <xref href="System.Net.Sockets.ProtocolType"></xref> values.
  overload: System.Net.Sockets.Socket.#ctor*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: The combination of  <code>socketType</code> and <code>protocolType</code> results in an invalid socket.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  id: '#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)'
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Socket(AddressFamily,SocketType,ProtocolType)
  nameWithType: Socket.Socket(AddressFamily,SocketType,ProtocolType)
  fullName: System.Net.Sockets.Socket.Socket(AddressFamily,SocketType,ProtocolType)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the <xref href="System.Net.Sockets.Socket"></xref> class using the specified address family, socket type and protocol.
  remarks: "The `addressFamily` parameter specifies the addressing scheme that the<xref:System.Net.Sockets.Socket> class uses, the `socketType` parameter specifies the type of the <xref:System.Net.Sockets.Socket> class, and the `protocolType` parameter specifies the protocol used by <xref:System.Net.Sockets.Socket>. The three parameters are not independent. Some address families restrict which protocols can be used with them, and often the <xref:System.Net.Sockets.Socket> type is implicit in the protocol. If the combination of address family, <xref:System.Net.Sockets.Socket> type, and protocol type results in an invalid <xref:System.Net.Sockets.Socket>, this constructor throws a <xref:System.Net.Sockets.SocketException>.  \n  \n> [!NOTE]\n>  If this constructor throws a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example demonstrates how to create an instance of the <xref:System.Net.Sockets.Socket> class.  \n  \n [!code-vb[Socket_Send_Recieve#1](~/add/codesnippet/visualbasic/6f97c6f0-af75-4c22-b6fc-_1.vb)]\n [!code-cpp[Socket_Send_Recieve#1](~/add/codesnippet/cpp/6f97c6f0-af75-4c22-b6fc-_1.cpp)]\n [!code-cs[Socket_Send_Recieve#1](~/add/codesnippet/csharp/6f97c6f0-af75-4c22-b6fc-_1.cs)]"
  syntax:
    content: public Socket (System.Net.Sockets.AddressFamily addressFamily, System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType);
    parameters:
    - id: addressFamily
      type: System.Net.Sockets.AddressFamily
      description: One of the <xref href="System.Net.Sockets.AddressFamily"></xref> values.
    - id: socketType
      type: System.Net.Sockets.SocketType
      description: One of the <xref href="System.Net.Sockets.SocketType"></xref> values.
    - id: protocolType
      type: System.Net.Sockets.ProtocolType
      description: One of the <xref href="System.Net.Sockets.ProtocolType"></xref> values.
  overload: System.Net.Sockets.Socket.#ctor*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: The combination of <code>addressFamily</code>, <code>socketType</code>, and <code>protocolType</code> results in an invalid socket.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Accept
  id: Accept
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Accept()
  nameWithType: Socket.Accept()
  fullName: System.Net.Sockets.Socket.Accept()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Creates a new <xref href="System.Net.Sockets.Socket"></xref> for a newly created connection.
  remarks: "Accept synchronously extracts the first pending connection request from the connection request queue of the listening socket, and then creates and returns a new <xref:System.Net.Sockets.Socket>. You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue. However, you can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> method of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.  \n  \n In blocking mode, Accept blocks until an incoming connection attempt is queued. Once a connection is accepted, the original <xref:System.Net.Sockets.Socket> continues queuing incoming connection requests until you close it.  \n  \n If you call this method using a non-blocking <xref:System.Net.Sockets.Socket>, and no connection requests are queued, Accept throws a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  Before calling the Accept method, you must first call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example accepts a simple <xref:System.Net.Sockets.Socket> connection.  \n  \n [!code-cpp[Classic Socket.Accept Example#1](~/add/codesnippet/cpp/m-system.net.sockets.soc_13_1.cpp)]\n [!code-cs[Classic Socket.Accept Example#1](~/add/codesnippet/csharp/m-system.net.sockets.soc_13_1.cs)]\n [!code-vb[Classic Socket.Accept Example#1](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_13_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket Accept ();
    parameters: []
    return:
      type: System.Net.Sockets.Socket
      description: A <xref href="System.Net.Sockets.Socket"></xref> for a newly created connection.
  overload: System.Net.Sockets.Socket.Accept*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The accepting socket is not listening for connections. You must call <xref href="stem.Net.Sockets.Socket.Bind%2A"></xref> and <xref href="stem.Net.Sockets.Socket.Listen%2A"></xref> before calling Accept.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: AcceptAsync(SocketAsyncEventArgs)
  nameWithType: Socket.AcceptAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.AcceptAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous operation to accept an incoming connection attempt.
  remarks: "Connection-oriented protocols can use the AcceptAsync method to asynchronously process incoming connection attempts. Accepting connections asynchronously gives you the ability to send and receive data within a separate execution thread. Before calling the AcceptAsync method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.  \n  \n To be notified of completion, you must create a callback method that implements the EventHandler\\<SocketAsyncEventArgs> delegate and hook it to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName> event.  \n  \n The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=fullName> object are required:  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName>  \n  \n The caller can optionally specify an existing <xref:System.Net.Sockets.Socket> to use for the incoming connection by specifying the <xref:System.Net.Sockets.Socket> to use with the <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=fullName> property.  \n  \n If the <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=fullName> property is null, a new <xref:System.Net.Sockets.Socket> is constructed with the same <xref:System.Net.Sockets.Socket.AddressFamily%2A>, <xref:System.Net.Sockets.Socket.SocketType%2A>, and <xref:System.Net.Sockets.Socket.ProtocolType%2A> as the current <xref:System.Net.Sockets.Socket> and set as the <xref:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket%2A?displayProperty=fullName> property.  \n  \n The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=fullName> property to any user state object desired before calling the AcceptAsync method, so that the information will be retrievable in the callback method. If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.  \n  \n Optionally, a buffer may be provided in which to receive the initial block of data on the socket after the <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method succeeds. In this case, the <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=fullName> property needs to be set to the buffer containing the data to receive and the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=fullName> property needs to be set to the maximum number of bytes of data to receive in the buffer. These properties can be set using the <xref:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer%2A?displayProperty=fullName> method. Part of the buffer passed in will be consumed internally for use by the the underlying Winsock AcceptEx call. This means that the amount of data returned will always be less than the value of the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=fullName> property on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=fullName> instance provided. The amount of the buffer used internally varies based on the address family of the socket. The minimum buffer size required is 288 bytes. If a larger buffer size is specified, then the <xref:System.Net.Sockets.Socket> will expect some extra data other than the address data received by the Winsock AcceptEx call and will wait until this extra data is received. If a timeout occurs, the connection is reset. So if extra data is expected of  a specific amount, then the buffer size should be set to the minimum buffer size plus this amount.  \n  \n The completion callback method should examine the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=fullName> property to determine if the AcceptAsync operation was successful.  \n  \n The <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName> event can occur in some cases when no connection has been accepted and cause the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=fullName> property to be set to <xref:System.Net.Sockets.SocketError>. This can occur as a result of port scanning using a half-open SYN type scan (a SYN -> SYN-ACK -> RST sequence). Applications using the AcceptAsync method should be prepared to handle this condition."
  syntax:
    content: public bool AcceptAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: "Returns `true` if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will be raised upon completion of the operation.  \n  \n Returns `false` if the I/O operation completed synchronously. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will not be raised and the <code>e</code> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation."
  overload: System.Net.Sockets.Socket.AcceptAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An argument is not valid. This exception occurs if the buffer provided is not large enough. The buffer must be at least 2 * (sizeof(SOCKADDR_STORAGE + 16) bytes.  \n  \n This exception also occurs if multiple buffers are specified, the <xref href=\"stem.Net.Sockets.SocketAsyncEventArgs.BufferList%2A\"></xref> property is not null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: An argument is out of range. The exception occurs if the <xref href="stem.Net.Sockets.SocketAsyncEventArgs.Count%2A"></xref> is less than 0.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "An invalid operation was requested. This exception occurs if the accepting <xref href=\"System.Net.Sockets.Socket\"></xref> is not listening for connections or the accepted socket is bound.  \n  \n You must call the <xref href=\"stem.Net.Sockets.Socket.Bind%2A\"></xref> and <xref href=\"stem.Net.Sockets.Socket.Listen%2A\"></xref> method before calling the AcceptAsync method.  \n  \n This exception also occurs if the socket is already connected or a socket operation was already in progress using the specified <code>e</code> parameter."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows XP or later is required for this method.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.AddressFamily
  id: AddressFamily
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: AddressFamily
  nameWithType: Socket.AddressFamily
  fullName: System.Net.Sockets.Socket.AddressFamily
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets the address family of the <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: The <xref:System.Net.Sockets.AddressFamily> specifies the addressing scheme that an instance of the <xref:System.Net.Sockets.Socket> class can use. This property is read-only and is set when the <xref:System.Net.Sockets.Socket> is created.
  example:
  - "The following code example displays the <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, and <xref:System.Net.Sockets.ProtocolType> to the console.  \n  \n [!code-cs[Socket_Socket_Options#3](~/add/codesnippet/csharp/p-system.net.sockets.soc_6_1.cs)]\n [!code-cpp[Socket_Socket_Options#3](~/add/codesnippet/cpp/p-system.net.sockets.soc_6_1.cpp)]\n [!code-vb[Socket_Socket_Options#3](~/add/codesnippet/visualbasic/p-system.net.sockets.soc_6_1.vb)]"
  syntax:
    content: public System.Net.Sockets.AddressFamily AddressFamily { get; }
    return:
      type: System.Net.Sockets.AddressFamily
      description: One of the <xref href="System.Net.Sockets.AddressFamily"></xref> values.
  overload: System.Net.Sockets.Socket.AddressFamily*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Available
  id: Available
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Available
  nameWithType: Socket.Available
  fullName: System.Net.Sockets.Socket.Available
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets the amount of data that has been received from the network and is available to be read.
  remarks: "If you are using a non-blocking <xref:System.Net.Sockets.Socket>, Available is a good way to determine whether data is queued for reading, before calling <xref:System.Net.Sockets.Socket.Receive%2A>. The available data is the total amount of data queued in the network buffer for reading. If no data is queued in the network buffer, Available returns 0.  \n  \n If the remote host shuts down or closes the connection, Available can throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example compares the results of calling IOControl with FIONREAD and the Available property.  \n  \n [!code-cpp[NCLSocketIoControl#1](~/add/codesnippet/cpp/p-system.net.sockets.soc_12_1.cpp)]\n [!code-cs[NCLSocketIoControl#1](~/add/codesnippet/csharp/p-system.net.sockets.soc_12_1.cs)]"
  syntax:
    content: public int Available { get; }
    return:
      type: System.Int32
      description: The number of bytes of data received from the network and available to be read.
  overload: System.Net.Sockets.Socket.Available*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)
  id: BeginAccept(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginAccept(AsyncCallback,Object)
  nameWithType: Socket.BeginAccept(AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginAccept(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous operation to accept an incoming connection attempt.
  remarks: "Connection-oriented protocols can use the BeginAccept method to asynchronously process incoming connection attempts. Accepting connections asynchronously gives you the ability to send and receive data within a separate execution thread. Before calling the BeginAccept method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.  \n  \n You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the BeginAccept method. To do this, at the very minimum, you must pass the listening <xref:System.Net.Sockets.Socket> object to BeginAccept through the `state` parameter. If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information. Pass an instance of this class to the BeginAccept method through the `state` parameter.  \n  \n Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndAccept%2A> method. When your application calls BeginAccept, the system usually uses a separate thread to execute the specified callback method and blocks on <xref:System.Net.Sockets.Socket.EndAccept%2A> until a pending connection is retrieved. <xref:System.Net.Sockets.Socket.EndAccept%2A> will return a new <xref:System.Net.Sockets.Socket> object that you can use to send and receive data with the remote host. You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue. If you want the original thread to block after you call the BeginAccept method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=fullName>. Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.  \n  \n The system may also use the calling thread to invoke the callback method. In this case, the <xref:System.IAsyncResult.CompletedSynchronously%2A> property on the returned <xref:System.IAsyncResult> will be set to indicate that the BeginAcceptmethod completed synchronously.  \n  \n For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](../Topic/Marshaling%20a%20Delegate%20as%20a%20Callback%20Method.md).  \n  \n To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, close the <xref:System.Net.Sockets.Socket>. When the<xref:System.Net.Sockets.Socket.Close%2A>method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method is called.  A subsequent call to the <xref:System.Net.Sockets.Socket.EndAccept%2A>method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.  \n  \n> [!NOTE]\n>  You can use the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  example:
  - "The following code example attempts to receive an incoming connection asynchronously.  \n  \n [!code-cpp[Socket_Async_Send_Receive#2](~/add/codesnippet/cpp/m-system.net.sockets.soc_24_1.cpp)]\n [!code-cs[Socket_Async_Send_Receive#2](~/add/codesnippet/csharp/m-system.net.sockets.soc_24_1.cs)]\n [!code-vb[Socket_Async_Send_Receive#2](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_24_1.vb)]"
  syntax:
    content: public IAsyncResult BeginAccept (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate.
    - id: state
      type: System.Object
      description: An object that contains state information for this request.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous <xref href="System.Net.Sockets.Socket"></xref> creation.
  overload: System.Net.Sockets.Socket.BeginAccept*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object has been closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows NT is required for this method.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The accepting socket is not listening for connections. You must call <xref href=\"stem.Net.Sockets.Socket.Bind%2A\"></xref> and <xref href=\"stem.Net.Sockets.Socket.Listen%2A\"></xref> before calling BeginAccept.  \n  \n -or-  \n  \n The accepted socket is bound."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>receiveSize</code> is less than 0.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginAccept(System.Int32,System.AsyncCallback,System.Object)
  id: BeginAccept(System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginAccept(Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginAccept(Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginAccept(Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous operation to accept an incoming connection attempt and receives the first block of data sent by the client application.
  remarks: "Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to asynchronously process incoming connection attempts. Accepting connections asynchronously enables you to send and receive data within a separate execution thread. This overload allows you to specify the number of bytes to accept in the initial transfer in the `receiveSize` parameter.  \n  \n Before calling the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.  \n  \n You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method. To do this, at the very minimum, you must pass the listening <xref:System.Net.Sockets.Socket> object to <xref:System.Net.Sockets.Socket.BeginAccept%2A> through the `state` parameter. If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information. Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method through the `state` parameter.  \n  \n Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndAccept%2A> method. When your application calls <xref:System.Net.Sockets.Socket.BeginAccept%2A>, the system usually uses a separate thread to execute the specified callback method and blocks on <xref:System.Net.Sockets.Socket.EndAccept%2A> until a pending connection is retrieved.  \n  \n <xref:System.Net.Sockets.Socket.EndAccept%2A> returns a new <xref:System.Net.Sockets.Socket> that you can use to send and receive data with the remote host. You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue. If you want the original thread to block after you call the BeginAccept method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=fullName>. Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.  \n  \n The system may also use the calling thread to invoke the callback method. In this case, the <xref:System.IAsyncResult.CompletedSynchronously%2A> property on the returned <xref:System.IAsyncResult> will be set to indicate that the BeginAcceptmethod completed synchronously.  \n  \n For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](../Topic/Marshaling%20a%20Delegate%20as%20a%20Callback%20Method.md).  \n  \n To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, close the <xref:System.Net.Sockets.Socket>.  When the <xref:System.Net.Sockets.Socket.Close%2A>method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method is called.  A subsequent call to the <xref:System.Net.Sockets.Socket.EndAccept%2A>method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.  \n  \n> [!NOTE]\n>  You can call use the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> object to identify the remote host's network address and port number.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  example:
  - "The following code example opens a socket and accepts an asynchronous connection. In this example, the socket accepts the initial 10 bytes of data. The number of bytes received and the data are displayed on the console by the callback delegate. See <xref:System.Net.Sockets.Socket.BeginReceive%2A> for a description of how the remaining data is received.  \n  \n [!code-cs[NCLSocketEnhancements#6](~/add/codesnippet/csharp/1ec8ea1c-f5e3-4423-8635-_1.cs)]\n [!code-cpp[NCLSocketEnhancements#6](~/add/codesnippet/cpp/1ec8ea1c-f5e3-4423-8635-_1.cpp)]"
  syntax:
    content: public IAsyncResult BeginAccept (int receiveSize, AsyncCallback callback, object state);
    parameters:
    - id: receiveSize
      type: System.Int32
      description: The number of bytes to accept from the sender.
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate.
    - id: state
      type: System.Object
      description: An object that contains state information for this request.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous <xref href="System.Net.Sockets.Socket"></xref> creation.
  overload: System.Net.Sockets.Socket.BeginAccept*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object has been closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows NT is required for this method.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The accepting socket is not listening for connections. You must call <xref href=\"stem.Net.Sockets.Socket.Bind%2A\"></xref> and <xref href=\"stem.Net.Sockets.Socket.Listen%2A\"></xref> before calling <xref href=\"stem.Net.Sockets.Socket.BeginAccept%2A\"></xref>.  \n  \n -or-  \n  \n The accepted socket is bound."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>receiveSize</code> is less than 0.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)
  id: BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginAccept(Socket,Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginAccept(Socket,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginAccept(Socket,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous operation to accept an incoming connection attempt from a specified socket and receives the first block of data sent by the client application.
  remarks: "Connection-oriented protocols can use the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to asynchronously process incoming connection attempts. Accepting connections asynchronously gives you the ability to send and receive data within a separate execution thread. This overload allows you to specify the accepted socket in the `acceptSocket` parameter. If this parameter is `null`, the accepted socket is created by the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method. You can specify the number of bytes to accept in the initial transfer in the `receiveSize` parameter.  \n  \n Before calling the BeginAccept method, you must call the <xref:System.Net.Sockets.Socket.Listen%2A> method to listen for and queue incoming connection requests.  \n  \n You must create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the BeginAccept method. To do this, at the very minimum, you must pass the listening <xref:System.Net.Sockets.Socket> object to BeginAccept through the `state` parameter. If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information. Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method through the `state` parameter.  \n  \n Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndAccept%2A> method. When your application calls BeginAccept, the system usually uses a separate thread to execute the specified callback method and blocks on <xref:System.Net.Sockets.Socket.EndAccept%2A> until a pending connection is retrieved.  \n  \n <xref:System.Net.Sockets.Socket.EndAccept%2A> returns a new <xref:System.Net.Sockets.Socket> object that you can use to send and receive data with the remote host. You cannot use this returned <xref:System.Net.Sockets.Socket> to accept any additional connections from the connection queue. If you want the original thread to block after you call the BeginAccept method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=fullName>. Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing.  \n  \n The system may also use the calling thread to invoke the callback method. In this case, the <xref:System.IAsyncResult.CompletedSynchronously%2A> property on the returned <xref:System.IAsyncResult> will be set to indicate that the BeginAcceptmethod completed synchronously.  \n  \n For additional information on writing callback methods, see [Marshaling a Delegate as a Callback Method](../Topic/Marshaling%20a%20Delegate%20as%20a%20Callback%20Method.md).  \n  \n To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, close the <xref:System.Net.Sockets.Socket>. When the <xref:System.Net.Sockets.Socket.Close%2A>method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method is called.  A subsequent call to the <xref:System.Net.Sockets.Socket.EndAccept%2A>method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.  \n  \n> [!NOTE]\n>  You can use the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> object to identify the remote host's network address and port number.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  example:
  - "The following code example opens a socket and accepts an asynchronous connection. In this example, the socket accepts the initial 10 bytes of data and the `acceptSocket` parameter is `null`, which forces the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method to create the accepted socket. The number of bytes received and the data are displayed on the console by the callback delegate. See <xref:System.Net.Sockets.Socket.BeginReceive%2A> for a description of how the remaining data is received.  \n  \n [!code-cs[NCLSocketEnhancements#7](~/add/codesnippet/csharp/c1c976cf-8163-42d0-8458-_1.cs)]\n [!code-cpp[NCLSocketEnhancements#7](~/add/codesnippet/cpp/c1c976cf-8163-42d0-8458-_1.cpp)]"
  syntax:
    content: public IAsyncResult BeginAccept (System.Net.Sockets.Socket acceptSocket, int receiveSize, AsyncCallback callback, object state);
    parameters:
    - id: acceptSocket
      type: System.Net.Sockets.Socket
      description: The accepted <xref href="System.Net.Sockets.Socket"></xref> object. This value may be `null`.
    - id: receiveSize
      type: System.Int32
      description: The maximum number of bytes to receive.
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate.
    - id: state
      type: System.Object
      description: An object that contains state information for this request.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> object that references the asynchronous <xref href="System.Net.Sockets.Socket"></xref> object creation.
  overload: System.Net.Sockets.Socket.BeginAccept*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object has been closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows NT is required for this method.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The accepting socket is not listening for connections. You must call <xref href=\"stem.Net.Sockets.Socket.Bind%2A\"></xref> and <xref href=\"stem.Net.Sockets.Socket.Listen%2A\"></xref> before calling <xref href=\"stem.Net.Sockets.Socket.BeginAccept%2A\"></xref>.  \n  \n -or-  \n  \n The accepted socket is bound."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>receiveSize</code> is less than 0.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)
  id: BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginConnect(EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(EndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a remote host connection.
  remarks: "If you are using a connection-oriented protocol, the BeginConnect method starts an asynchronous request for a connection to the `remoteEP` parameter. If you are using a connectionless protocol, BeginConnect establishes a default remote host. Connecting or setting the default remote host asynchronously gives you the ability to send and receive data within a separate execution thread.  \n  \n You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the BeginConnect method. At the very minimum, you must pass the <xref:System.Net.Sockets.Socket> to BeginConnect through the `state` parameter. If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket>, and the other required information. Pass an instance of this class to the BeginConnect method through the `state` parameter.  \n  \n Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndConnect%2A> method. When your application calls BeginConnect, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndConnect%2A> until the <xref:System.Net.Sockets.Socket> connects successfully or throws an exception. If you want the original thread to block after you call the BeginConnect method, use <xref:System.Threading.WaitHandle.WaitOne%2A>. Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing. For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](../Topic/Marshaling%20a%20Delegate%20as%20a%20Callback%20Method.md).  \n  \n If you are using a connectionless protocol such as UDP, you do not have to call BeginConnect before sending and receiving data. You can use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> and <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> to communicate with a remote host. If you do call BeginConnect, any datagrams that arrive from an address other than the specified default will be discarded. If you wish to set your default remote host to a broadcast address, you must first call <xref:System.Net.Sockets.Socket.SetSocketOption%2A> and set Broadcast to `true`. If you cannot, BeginConnect will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n If you are using a connection-oriented protocol and do not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling BeginConnect, the underlying service provider will assign the most appropriate local network address and port number. If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> or <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method. If you want to change the default remote host, call the BeginConnect method again with the desired endpoint.  \n  \n To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>. When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.  A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete. This is a limitation of the underlying provider.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  example:
  - "The following code example initiates an asynchronous connection attempt.  \n  \n [!code-cpp[Socket_Async_Send_Receive#1](~/add/codesnippet/cpp/c3cf5410-4f66-453a-bb69-_1.cpp)]\n [!code-cs[Socket_Async_Send_Receive#1](~/add/codesnippet/csharp/c3cf5410-4f66-453a-bb69-_1.cs)]\n [!code-vb[Socket_Async_Send_Receive#1](~/add/codesnippet/visualbasic/c3cf5410-4f66-453a-bb69-_1.vb)]"
  syntax:
    content: public IAsyncResult BeginConnect (System.Net.EndPoint remoteEP, AsyncCallback callback, object state);
    parameters:
    - id: remoteEP
      type: System.Net.EndPoint
      description: An <xref href="System.Net.EndPoint"></xref> that represents the remote host.
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate.
    - id: state
      type: System.Object
      description: An object that contains state information for this request.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous connection.
  overload: System.Net.Sockets.Socket.BeginConnect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>remoteEP</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Net.Sockets.Socket"></xref> is <xref href="stem.Net.Sockets.Socket.Listen%2A"></xref>ing.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)
  id: BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginConnect(IPAddress,Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(IPAddress,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(IPAddress,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a remote host connection. The host is specified by an <xref href="System.Net.IPAddress"></xref> and a port number.
  remarks: "The asynchronous BeginConnect operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndConnect%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Connect%2A> method overloads, or <xref:System.Net.Sockets.Socket.EndConnect%2A>.  \n  \n To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>. When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.  A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md)  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete. This is a limitation of the underlying provider. Also the <xref:System.Net.EndPoint> that is used must be different.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  example:
  - "The following code example initiates an asynchronous connection attempt.  \n  \n [!code-cpp[System.Net.Sockets.Socket.BeginConnect#1](~/add/codesnippet/cpp/fef8abe5-1fdb-421c-99fd-_1.cpp)]\n [!code-cs[System.Net.Sockets.Socket.BeginConnect#1](~/add/codesnippet/csharp/fef8abe5-1fdb-421c-99fd-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.Socket.BeginConnect#7](~/add/codesnippet/cpp/fef8abe5-1fdb-421c-99fd-_2.cpp)]\n [!code-cs[System.Net.Sockets.Socket.BeginConnect#7](~/add/codesnippet/csharp/fef8abe5-1fdb-421c-99fd-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: The <xref href="System.Net.IPAddress"></xref> of the remote host.
    - id: port
      type: System.Int32
      description: The port number of the remote host.
    - id: requestCallback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate that references the method to invoke when the connect operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains information about the connect operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous connection.
  overload: System.Net.Sockets.Socket.BeginConnect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>address</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> is not in the socket family.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The port number is not valid.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The length of <code>address</code> is zero.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Net.Sockets.Socket"></xref> is <xref href="stem.Net.Sockets.Socket.Listen%2A"></xref>ing.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)
  id: BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginConnect(IPAddress[],Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(IPAddress[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(IPAddress[],Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a remote host connection. The host is specified by an <xref href="System.Net.IPAddress"></xref> array and a port number.
  remarks: "The asynchronous BeginConnect operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndConnect%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Connect%2A> method overloads.  \n  \n To cancel a pending call to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>. When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.  A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md).  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete. This is a limitation of the underlying provider. Also the <xref:System.Net.EndPoint> that is used must be different.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  example:
  - "The following code example initiates an asynchronous connection attempt.  \n  \n [!code-cpp[System.Net.Sockets.Socket.BeginConnect#1](~/add/codesnippet/cpp/c0b52280-ca91-42f3-a5ab-_1.cpp)]\n [!code-cs[System.Net.Sockets.Socket.BeginConnect#1](~/add/codesnippet/csharp/c0b52280-ca91-42f3-a5ab-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.Socket.BeginConnect#2](~/add/codesnippet/cpp/c0b52280-ca91-42f3-a5ab-_2.cpp)]\n [!code-cs[System.Net.Sockets.Socket.BeginConnect#2](~/add/codesnippet/csharp/c0b52280-ca91-42f3-a5ab-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: addresses
      type: System.Net.IPAddress[]
      description: At least one <xref href="System.Net.IPAddress"></xref>, designating the remote host.
    - id: port
      type: System.Int32
      description: The port number of the remote host.
    - id: requestCallback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate that references the method to invoke when the connect operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains information about the connect operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous connections.
  overload: System.Net.Sockets.Socket.BeginConnect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>addresses</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This method is valid for sockets that use <xref href="System.Net.Sockets.AddressFamily"></xref> or <xref href="System.Net.Sockets.AddressFamily"></xref>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The port number is not valid.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The length of <code>address</code> is zero.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Net.Sockets.Socket"></xref> is <xref href="stem.Net.Sockets.Socket.Listen%2A"></xref>ing.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)
  id: BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginConnect(String,Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(String,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a remote host connection. The host is specified by a host name and a port number.
  remarks: "The asynchronous BeginConnect operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndConnect%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Connect%2A> method overloads.  \n  \n To cancel a pending call to the  <xref:System.Net.Sockets.Socket.BeginConnect%2A> method, close the <xref:System.Net.Sockets.Socket>. When the <xref:System.Net.Sockets.Socket.Close%2A> method is called while an asynchronous operation is in progress, the callback provided to the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method is called.  A subsequent call to the <xref:System.Net.Sockets.Socket.EndConnect%2A> method will throw an <xref:System.ObjectDisposedException> to indicate that the operation has been cancelled.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md)  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  If this socket has previously been disconnected, then <xref:System.Net.Sockets.Socket.BeginConnect%2A> must be called on a thread that will not exit until the operation is complete. This is a limitation of the underlying provider. Also the <xref:System.Net.EndPoint> that is used must be different.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  example:
  - "The following code example initiates an asynchronous connection attempt.  \n  \n [!code-cpp[System.Net.Sockets.Socket.BeginConnect#1](~/add/codesnippet/cpp/676b7f39-6ee0-49fa-b539-_1.cpp)]\n [!code-cs[System.Net.Sockets.Socket.BeginConnect#1](~/add/codesnippet/csharp/676b7f39-6ee0-49fa-b539-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.Socket.BeginConnect#3](~/add/codesnippet/cpp/676b7f39-6ee0-49fa-b539-_2.cpp)]\n [!code-cs[System.Net.Sockets.Socket.BeginConnect#3](~/add/codesnippet/csharp/676b7f39-6ee0-49fa-b539-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginConnect (string host, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: host
      type: System.String
      description: The name of the remote host.
    - id: port
      type: System.Int32
      description: The port number of the remote host.
    - id: requestCallback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate that references the method to invoke when the connect operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains information about the connect operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous connection.
  overload: System.Net.Sockets.Socket.BeginConnect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>host</code> is `null`.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This method is valid for sockets in the <xref href="System.Net.Sockets.AddressFamily"></xref> or <xref href="System.Net.Sockets.AddressFamily"></xref> families.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The port number is not valid.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Net.Sockets.Socket"></xref> is <xref href="stem.Net.Sockets.Socket.Listen%2A"></xref>ing.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)
  id: BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginDisconnect(Boolean,AsyncCallback,Object)
  nameWithType: Socket.BeginDisconnect(Boolean,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginDisconnect(Boolean,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request to disconnect from a remote endpoint.
  remarks: "If you are using a connection-oriented protocol, you can call the BeginDisconnect method to request a disconnect from a remote endpoint. If `reuseSocket` is `true`, you can reuse the socket.  \n  \n The BeginDisconnect method uses a separate thread to invoke the specified callback method. The <xref:System.Net.Sockets.Socket.EndDisconnect%2A> method blocks until the pending disconnect is complete. For additional information on writing callback methods, see [Marshaling a Delegate as a Callback Method](../Topic/Marshaling%20a%20Delegate%20as%20a%20Callback%20Method.md).  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example creates a socket for asynchronous communication and sends some data to a remote host. When the data has been sent, <xref:System.Net.Sockets.Socket.Shutdown%2A> is called to stop the send and receive activity. Then BeginDisconnect is called to begin a disconnect request. When the request completes, the <xref:System.Net.Sockets.Socket.Connected%2A> property is queried to test whether the socket is disconnected.  \n  \n [!code-cs[Nclsocketenhancements#11](~/add/codesnippet/csharp/775ed890-ddd6-488a-bfa6-_1.cs)]\n [!code-cpp[Nclsocketenhancements#11](~/add/codesnippet/cpp/775ed890-ddd6-488a-bfa6-_1.cpp)]"
  syntax:
    content: public IAsyncResult BeginDisconnect (bool reuseSocket, AsyncCallback callback, object state);
    parameters:
    - id: reuseSocket
      type: System.Boolean
      description: '`true` if this socket can be reused after the connection is closed; otherwise, `false`.'
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate.
    - id: state
      type: System.Object
      description: An object that contains state information for this request.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> object that references the asynchronous operation.
  overload: System.Net.Sockets.Socket.BeginDisconnect*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The operating system is Windows 2000 or earlier, and this method requires Windows XP.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object has been closed.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  id: BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive data from a connected <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: "The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method. Typically, the method is invoked by the `callback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.  \n  \n To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md).  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  All I/O initiated by a given thread is canceled when that thread exits. A pending asynchronous operation can fail if the thread exits before the operation completes.  \n  \n> [!NOTE]\n>  `state` is an instantiation of a user-defined class.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  syntax:
    content: public IAsyncResult BeginReceive (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for the received data.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains information about the receive operation. This object is passed to the <xref href="stem.Net.Sockets.Socket.EndReceive%2A"></xref> delegate when the operation is complete.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous read.
  overload: System.Net.Sockets.Socket.BeginReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  id: BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive data from a connected <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: "The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method. Typically, the method is invoked by the `callback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.  \n  \n To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md).  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  All I/O initiated by a given thread is canceled when that thread exits. A pending asynchronous operation can fail if the thread exits before the operation completes.  \n  \n> [!NOTE]\n>  `state` is an instantiation of a user-defined class.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket>methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  syntax:
    content: public IAsyncResult BeginReceive (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for the received data.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: A <xref href="System.Net.Sockets.SocketError"></xref> object that stores the socket error.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains information about the receive operation. This object is passed to the <xref href="stem.Net.Sockets.Socket.EndReceive%2A"></xref> delegate when the operation is complete.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous read.
  overload: System.Net.Sockets.Socket.BeginReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  id: BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginReceive(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive data from a connected <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: "The asynchronous BeginReceive operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method. Typically, the method is invoked by the `callback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.  \n  \n To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md).  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  All I/O initiated by a given thread is canceled when that thread exits. A pending asynchronous operation can fail if the thread exits before the operation completes.  \n  \n> [!NOTE]\n>  `state` is an instantiation of a user-defined class.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  example:
  - "The following code example begins to asynchronously receive data from a connected <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cpp[Socket_Async_Send_Receive#11](~/add/codesnippet/cpp/1e17700d-a49c-4fed-9f90-_1.cpp)]\n [!code-cs[Socket_Async_Send_Receive#11](~/add/codesnippet/csharp/1e17700d-a49c-4fed-9f90-_1.cs)]\n [!code-vb[Socket_Async_Send_Receive#11](~/add/codesnippet/visualbasic/1e17700d-a49c-4fed-9f90-_1.vb)]  \n  \n [!code-cpp[Socket_Async_Send_Receive#7](~/add/codesnippet/cpp/1e17700d-a49c-4fed-9f90-_2.cpp)]\n [!code-cs[Socket_Async_Send_Receive#7](~/add/codesnippet/csharp/1e17700d-a49c-4fed-9f90-_2.cs)]\n [!code-vb[Socket_Async_Send_Receive#7](~/add/codesnippet/visualbasic/1e17700d-a49c-4fed-9f90-_2.vb)]  \n  \n [!code-cpp[Socket_Async_Send_Receive#8](~/add/codesnippet/cpp/1e17700d-a49c-4fed-9f90-_3.cpp)]\n [!code-cs[Socket_Async_Send_Receive#8](~/add/codesnippet/csharp/1e17700d-a49c-4fed-9f90-_3.cs)]\n [!code-vb[Socket_Async_Send_Receive#8](~/add/codesnippet/visualbasic/1e17700d-a49c-4fed-9f90-_3.vb)]"
  syntax:
    content: public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for the received data.
    - id: offset
      type: System.Int32
      description: The zero-based position in the <code>buffer</code> parameter at which to store the received data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains information about the receive operation. This object is passed to the <xref href="stem.Net.Sockets.Socket.EndReceive%2A"></xref> delegate when the operation is complete.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous read.
  overload: System.Net.Sockets.Socket.BeginReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n -or-  \n  \n <code>size</code> is less than 0.  \n  \n -or-  \n  \n <code>size</code> is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  id: BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginReceive(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive data from a connected <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: "The asynchronous <xref:System.Net.Sockets.Socket.BeginReceive%2A> operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceive%2A> method. Typically, the method is invoked by the `callback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use one of the <xref:System.Net.Sockets.Socket.Receive%2A> method overloads.  \n  \n To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md).  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  All I/O initiated by a given thread is canceled when that thread exits. A pending asynchronous operation can fail if the thread exits before the operation completes.  \n  \n> [!NOTE]\n>  `state` is an instantiation of a user-defined class.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  syntax:
    content: public IAsyncResult BeginReceive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for the received data.
    - id: offset
      type: System.Int32
      description: The location in <code>buffer</code> to store the received data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: A <xref href="System.Net.Sockets.SocketError"></xref> object that stores the socket error.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate that references the method to invoke when the operation is complete.
    - id: state
      type: System.Object
      description: A user-defined object that contains information about the receive operation. This object is passed to the <xref href="stem.Net.Sockets.Socket.EndReceive%2A"></xref> delegate when the operation is complete.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous read.
  overload: System.Net.Sockets.Socket.BeginReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n -or-  \n  \n <code>size</code> is less than 0.  \n  \n -or-  \n  \n <code>size</code> is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  id: BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive data from a specified network device.
  remarks: "The BeginReceiveFrom method starts asynchronously reading connectionless datagrams from a remote host. Calling the BeginReceiveFrom method gives you the ability to receive data within a separate execution thread.  \n  \n You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the BeginReceiveFrom method. To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication. If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket> and the other required information. Pass an instance of this class to the BeginReceiveFrom method through the `state` parameter.  \n  \n Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> method. When your application calls BeginReceiveFrom, the system will use a separate thread to execute the specified callback method, and it will block on <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A> until the <xref:System.Net.Sockets.Socket> reads data or throws an exception. If you want the original thread to block after you call the BeginReceiveFrom method, use <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=fullName>. Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing. For additional information on writing callback methods, see [Marshaling a Delegate as a Callback Method](../Topic/Marshaling%20a%20Delegate%20as%20a%20Callback%20Method.md).  \n  \n> [!NOTE]\n>  Before calling BeginReceiveFrom, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method, or BeginReceiveFrom will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n This method reads data into the `buffer` parameter, and captures the remote host endpoint from which the data is sent. For information on how to retrieve this endpoint, refer to <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>. This method is most useful if you intend to asynchronously receive connectionless datagrams from an unknown host or multiple hosts. In these cases, BeginReceiveFrom will read the first enqueued datagram received into the local network buffer. If the datagram you receive is larger than the size of `buffer`, the BeginReceiveFrom method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>. If you are using an unreliable protocol, the excess data will be lost. If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the BeginReceiveFrom method with a large enough buffer.  \n  \n To guarantee that the remote host endpoint is always returned, an application should explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method and then call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method with the `optionLevel` parameter set to <xref:System.Net.Sockets.SocketOptionLevel> or <xref:System.Net.Sockets.SocketOptionLevel> as appropriate, the `optionName` parameter set to <xref:System.Net.Sockets.SocketOptionName>, and the `optionValue` parameter to enable this option before calling the BeginReceiveFrom method. Otherwise, it is possible for the remote host endpoint to not be returned when the sender has sent a number of datagrams before the receiver has called the BeginReceiveFrom method.  \n  \n Although BeginReceiveFrom is intended for connectionless protocols, you can use a connection-oriented protocol as well. If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> / <xref:System.Net.Sockets.Socket.BeginConnect%2A> method or accept an incoming connection request by calling the <xref:System.Net.Sockets.Socket.Accept%2A> or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method. If you call the BeginReceiveFrom method before establishing or accepting a connection, you will get a <xref:System.Net.Sockets.SocketException>. You can also establish a default remote host for a connectionless protocol prior to calling the BeginReceiveFrom method. In either of these cases, the BeginReceiveFrom method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.  \n  \n With connection-oriented sockets, BeginReceiveFrom will read as much data as is available up to the number of bytes specified by the `size` parameter.  \n  \n To cancel a pending BeginReceiveFrom, call the <xref:System.Net.Sockets.Socket.Close%2A> method.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  example:
  - "The following code example asynchronously receives connectionless datagrams from a remote host.  \n  \n [!code-cpp[Socket_Async_Send_Receive#41](~/add/codesnippet/cpp/c522b9a7-b15e-44f0-a0cd-_1.cpp)]\n [!code-cs[Socket_Async_Send_Receive#41](~/add/codesnippet/csharp/c522b9a7-b15e-44f0-a0cd-_1.cs)]\n [!code-vb[Socket_Async_Send_Receive#41](~/add/codesnippet/visualbasic/c522b9a7-b15e-44f0-a0cd-_1.vb)]"
  syntax:
    content: public IAsyncResult BeginReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for the received data.
    - id: offset
      type: System.Int32
      description: The zero-based position in the <code>buffer</code> parameter at which to store the data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: An <xref href="System.Net.EndPoint"></xref> that represents the source of the data.
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate.
    - id: state
      type: System.Object
      description: An object that contains state information for this request.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous read.
  overload: System.Net.Sockets.Socket.BeginReceiveFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is `null`.  \n  \n -or-  \n  \n <code>remoteEP</code> is `null`."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n -or-  \n  \n <code>size</code> is less than 0.  \n  \n -or-  \n  \n <code>size</code> is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  id: BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive the specified number of bytes of data into the specified location of the data buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>, and stores the endpoint and packet information..
  remarks: "The asynchronous receive operation must be completed by calling the <xref:System.Net.Sockets.Socket.EndReceiveMessageFrom%2A> method. Typically, the method is invoked by the `asyncCallback` delegate.  \n  \n This method does not block until the operation completes. To block until the operation completes, use the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method.  \n  \n To cancel a pending BeginReceiveMessageFrom, call the <xref:System.Net.Sockets.Socket.Close%2A> method.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](../Topic/Calling%20Synchronous%20Methods%20Asynchronously.md)  \n  \n This method reads data into the `buffer` parameter, and captures the remote host endpoint from which the data is sent, as well as information about the received packet. For information on how to retrieve this endpoint, refer to <xref:System.Net.Sockets.Socket.EndReceiveFrom%2A>. This method is most useful if you intend to asynchronously receive connectionless datagrams from an unknown host or multiple hosts.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  syntax:
    content: public IAsyncResult BeginReceiveMessageFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for the received data.
    - id: offset
      type: System.Int32
      description: The zero-based position in the <code>buffer</code> parameter at which to store the data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: An <xref href="System.Net.EndPoint"></xref> that represents the source of the data.
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate.
    - id: state
      type: System.Object
      description: An object that contains state information for this request.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous read.
  overload: System.Net.Sockets.Socket.BeginReceiveMessageFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is `null`.  \n  \n -or-  \n  \n <code>remoteEP</code> is `null`."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n -or-  \n  \n <code>size</code> is less than 0.  \n  \n -or-  \n  \n <code>size</code> is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The operating system is Windows 2000 or earlier, and this method requires Windows XP.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  id: BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginSend(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a connected <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: "The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method. <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>. Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.  \n  \n You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method. To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication. If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information. Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.  \n  \n Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method. When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception. If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=fullName> method. Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing. For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](../Topic/Marshaling%20a%20Delegate%20as%20a%20Callback%20Method.md).  \n  \n Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host. If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>. It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>. You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>. With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n If you specify the <xref:System.Net.Sockets.SocketFlags> flag as the `socketflags` parameter, the data you are sending will not be routed.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  All I/O initiated by a given thread is canceled when that thread exits. A pending asynchronous operation can fail if the thread exits before the operation completes.  \n  \n> [!NOTE]\n>  `state` is an instantiation of a user-defined class.  \n  \n> [!NOTE]\n>  The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  syntax:
    content: public IAsyncResult BeginSend (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: An array of type <xref href="System.Byte"></xref> that contains the data to send.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate.
    - id: state
      type: System.Object
      description: An object that contains state information for this request.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous send.
  overload: System.Net.Sockets.Socket.BeginSend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffers</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>buffers</code> is empty.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See remarks section below.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  id: BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginSend(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a connected <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: "The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method. <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>. Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.  \n  \n You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method. To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication. If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information. Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.  \n  \n Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method. When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception. If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=fullName> method. Call the Set method on a <xref:System.Threading.ManualResetEvent> in the callback method when you want the original thread to continue executing. For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](../Topic/Marshaling%20a%20Delegate%20as%20a%20Callback%20Method.md).  \n  \n Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host. If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>. It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>. You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>. With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n If you specify the <xref:System.Net.Sockets.SocketFlags> flag as the `socketflags` parameter, the data you are sending will not be routed.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  All I/O initiated by a given thread is canceled when that thread exits. A pending asynchronous operation can fail if the thread exits before the operation completes.  \n  \n> [!NOTE]\n>  `state` is an instantiation of a user-defined class.  \n  \n> [!NOTE]\n>  The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  syntax:
    content: public IAsyncResult BeginSend (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: An array of type <xref href="System.Byte"></xref> that contains the data to send.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: A <xref href="System.Net.Sockets.SocketError"></xref> object that stores the socket error.
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate.
    - id: state
      type: System.Object
      description: An object that contains state information for this request.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous send.
  overload: System.Net.Sockets.Socket.BeginSend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffers</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>buffers</code> is empty.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See remarks section below.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a connected <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: "The BeginSend method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method. BeginSend will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>. Calling the BeginSend method gives you the ability to send data within a separate execution thread.  \n  \n You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the BeginSend method. To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication. If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information. Pass an instance of this class to the BeginSend method through the `state` parameter.  \n  \n Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method. When your application calls BeginSend, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception. If you want the original thread to block after you call the BeginSend method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=fullName> method. Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing. For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](../Topic/Marshaling%20a%20Delegate%20as%20a%20Callback%20Method.md).  \n  \n Although intended for connection-oriented protocols, BeginSend also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host. If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>. It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>. You can also change the default remote host prior to calling BeginSend by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>. With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and BeginSend will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n If you specify the <xref:System.Net.Sockets.SocketFlags> flag as the `socketflags` parameter, the data you are sending will not be routed.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  All I/O initiated by a given thread is canceled when that thread exits. A pending asynchronous operation can fail if the thread exits before the operation completes.  \n  \n> [!NOTE]\n>  `state` is an instantiation of a user-defined class.  \n  \n> [!NOTE]\n>  The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  example:
  - "The following code example begins asynchronously sending data to a remote host.  \n  \n [!code-cpp[Socket_Async_Send_Receive#5](~/add/codesnippet/cpp/e42abcb4-21d4-4fc3-b3e0-_1.cpp)]\n [!code-cs[Socket_Async_Send_Receive#5](~/add/codesnippet/csharp/e42abcb4-21d4-4fc3-b3e0-_1.cs)]\n [!code-vb[Socket_Async_Send_Receive#5](~/add/codesnippet/visualbasic/e42abcb4-21d4-4fc3-b3e0-_1.vb)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the data to send.
    - id: offset
      type: System.Int32
      description: The zero-based position in the <code>buffer</code> parameter at which to begin sending data.
    - id: size
      type: System.Int32
      description: The number of bytes to send.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate.
    - id: state
      type: System.Object
      description: An object that contains state information for this request.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous send.
  overload: System.Net.Sockets.Socket.BeginSend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See remarks section below.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> is less than the length of <code>buffer</code>.  \n  \n -or-  \n  \n <code>size</code> is less than 0.  \n  \n -or-  \n  \n <code>size</code> is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a connected <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: "The <xref:System.Net.Sockets.Socket.BeginSend%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method. <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>. Calling the <xref:System.Net.Sockets.Socket.BeginSend%2A> method gives you the ability to send data within a separate execution thread.  \n  \n You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method. To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication. If your callback needs more information, you can create a small class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information. Pass an instance of this class to the <xref:System.Net.Sockets.Socket.BeginSend%2A> method through the `state` parameter.  \n  \n Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSend%2A> method. When your application calls <xref:System.Net.Sockets.Socket.BeginSend%2A>, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSend%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception. If you want the original thread to block after you call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=fullName> method. Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing. For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](../Topic/Marshaling%20a%20Delegate%20as%20a%20Callback%20Method.md).  \n  \n Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSend%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host. If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.BeginSendTo%2A>. It is okay to use <xref:System.Net.Sockets.Socket.BeginSendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>. You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.BeginSend%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A>. With connectionless protocols, you must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.BeginSend%2A> will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n If you specify the <xref:System.Net.Sockets.SocketFlags> flag as the `socketflags` parameter, the data you are sending will not be routed.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  All I/O initiated by a given thread is canceled when that thread exits. A pending asynchronous operation can fail if the thread exits before the operation completes.  \n  \n> [!NOTE]\n>  `state` is an instantiation of a user-defined class.  \n  \n> [!NOTE]\n>  The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  syntax:
    content: public IAsyncResult BeginSend (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the data to send.
    - id: offset
      type: System.Int32
      description: The zero-based position in the <code>buffer</code> parameter at which to begin sending data.
    - id: size
      type: System.Int32
      description: The number of bytes to send.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: A <xref href="System.Net.Sockets.SocketError"></xref> object that stores the socket error.
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate.
    - id: state
      type: System.Object
      description: An object that contains state information for this request.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous send.
  overload: System.Net.Sockets.Socket.BeginSend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See remarks section below.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> is less than the length of <code>buffer</code>.  \n  \n -or-  \n  \n <code>size</code> is less than 0.  \n  \n -or-  \n  \n <code>size</code> is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)
  id: BeginSendFile(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginSendFile(String,AsyncCallback,Object)
  nameWithType: Socket.BeginSendFile(String,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSendFile(String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the file <code>fileName</code> to a connected <xref href="System.Net.Sockets.Socket"></xref> object using the <xref href="System.Net.Sockets.TransmitFileOptions"></xref> flag.
  remarks: "This overload sends the file `fileName` to the connected socket. If `fileName` is in the local directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified. Wildcards (\"..\\\\\\myfile.txt\") and UNC share names (\"\\\\\\\\\\\\\\shared directory\\\\\\myfile.txt\") are supported. If the file is not found, the exception <xref:System.IO.FileNotFoundException> is thrown.  \n  \n This method uses the `TransmitFile` function found in the Windows Sockets 2 API. For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.  \n  \n The BeginSendFile method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>,<xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> methods. BeginSendFile throws an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>. Calling the BeginSendFile method enables you to send a file within a separate execution thread.  \n  \n To complete the operation, you can create a callback method that is invoked by the <xref:System.AsyncCallback> delegate parameter. To do this, at the very minimum, the `state` parameter must contain the <xref:System.Net.Sockets.Socket> object being used for communication. If your callback needs more information, you can create a class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information. Pass an instance of this custom object to the BeginSendFile method through the `state` parameter.  \n  \n Your callback method must invoke the <xref:System.Net.Sockets.Socket.EndSendFile%2A> method. When your application calls BeginSendFile, the system uses a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.Socket.EndSendFile%2A> until the <xref:System.Net.Sockets.Socket> sends the entire file or throws an exception. For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](../Topic/Marshaling%20a%20Delegate%20as%20a%20Callback%20Method.md).  \n  \n Although intended for connection-oriented protocols, BeginSendFile also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host. With connectionless protocols, you must be sure that the size of your file does not exceed the maximum packet size of the underlying service provider. If it does, the datagram is not sent and BeginSendFile throws a <xref:System.Net.Sockets.SocketException> exception.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  example:
  - "The following code example creates and connects a socket for asynchronous communication. First, the file \"text.txt\" is sent asynchronously to the remote host. The callback delegate calls <xref:System.Net.Sockets.Socket.EndSendFile%2A> to complete the transmission.  \n  \n [!code-cs[NCLSocketEnhancements#9](~/add/codesnippet/csharp/8ad3abff-9684-4a1a-99dd-_1.cs)]\n [!code-cpp[NCLSocketEnhancements#9](~/add/codesnippet/cpp/8ad3abff-9684-4a1a-99dd-_1.cpp)]"
  syntax:
    content: public IAsyncResult BeginSendFile (string fileName, AsyncCallback callback, object state);
    parameters:
    - id: fileName
      type: System.String
      description: A string that contains the path and name of the file to send. This parameter can be `null`.
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate.
    - id: state
      type: System.Object
      description: An object that contains state information for this request.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> object that represents the asynchronous send.
  overload: System.Net.Sockets.Socket.BeginSendFile*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object has been closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The socket is not connected to a remote host.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: The file <code>fileName</code> was not found.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See remarks section below.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)
  id: BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginSendFile(String,Byte[],Byte[],TransmitFileOptions,AsyncCallback,Object)
  nameWithType: Socket.BeginSendFile(String,Byte[],Byte[],TransmitFileOptions,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSendFile(String,Byte[],Byte[],TransmitFileOptions,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends a file and buffers of data asynchronously to a connected <xref href="System.Net.Sockets.Socket"></xref> object.
  remarks: "This overload requires the name of the file you want to send and a bitwise combination of <xref:System.Net.Sockets.TransmitFileOptions> values. The `preBuffer` parameter contains any data you want to precede the file. `postBuffer` contains data you want to follow the file. If `fileName` is in the local directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified. Wildcards (\"..\\\\\\myfile.txt\") and UNC share names (\"\\\\\\\\\\\\\\shared directory\\\\\\myfile.txt\") are supported. If the file is not found, the exception <xref:System.IO.FileNotFoundException> is thrown.  \n  \n The `flags` parameter provides the Window Sockets service provider with additional information about the file transfer. For more information about how to use this parameter, see <xref:System.Net.Sockets.TransmitFileOptions>.  \n  \n This method uses the `TransmitFile` function found in the Windows Sockets 2 API. For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.  \n  \n The <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> methods. <xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.BeginConnect%2A>. Calling the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method gives you the ability to send a file within a separate execution thread.  \n  \n To complete the operation, you can create a callback method that is invoked by the <xref:System.AsyncCallback> delegate parameter. To do this, at the very minimum, the `state` parameter must contain the <xref:System.Net.Sockets.Socket> object being used for communication. If your callback needs more information, you can create a class or structure to hold the <xref:System.Net.Sockets.Socket> and the other required information. Pass an instance of this custom object to the<xref:System.Net.Sockets.Socket.BeginSendFile%2A> method through the `state` parameter.  \n  \n Your callback method must invoke the <xref:System.Net.Sockets.Socket.EndSendFile%2A> method. When your application calls <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, the system uses a separate thread to execute the specified callback method, and blocks on <xref:System.Net.Sockets.Socket.EndSendFile%2A> until the <xref:System.Net.Sockets.Socket> sends the entire file or throws an exception. For additional information on writing callback methods see [Marshaling a Delegate as a Callback Method](../Topic/Marshaling%20a%20Delegate%20as%20a%20Callback%20Method.md).  \n  \n Although intended for connection-oriented protocols, <xref:System.Net.Sockets.Socket.BeginSendFile%2A> also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method to establish a default remote host. With connectionless protocols, you must also be sure that the size of your file does not exceed the maximum packet size of the underlying service provider. If it does, the datagram is not sent and <xref:System.Net.Sockets.Socket.BeginSendFile%2A> throws a <xref:System.Net.Sockets.SocketException> exception.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  example:
  - "The following code example creates and connects a socket for asynchronous communication and begins sending the file \"text.txt\" asynchronously to the remote host. In this example, a `preBuffer` and a `postBuffer` of data is created to send with the file and the default <xref:System.Net.Sockets.TransmitFileOptions> value is used. The callback delegate calls <xref:System.Net.Sockets.Socket.EndSendFile%2A> to complete the transmission.  \n  \n [!code-cs[NCLSocketEnhancements#10](~/add/codesnippet/csharp/570951b0-4607-433f-87d5-_1.cs)]\n [!code-cpp[NCLSocketEnhancements#10](~/add/codesnippet/cpp/570951b0-4607-433f-87d5-_1.cpp)]"
  syntax:
    content: public IAsyncResult BeginSendFile (string fileName, byte[] preBuffer, byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags, AsyncCallback callback, object state);
    parameters:
    - id: fileName
      type: System.String
      description: A string that contains the path and name of the file to be sent. This parameter can be `null`.
    - id: preBuffer
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array that contains data to be sent before the file is sent. This parameter can be `null`.
    - id: postBuffer
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array that contains data to be sent after the file is sent. This parameter can be `null`.
    - id: flags
      type: System.Net.Sockets.TransmitFileOptions
      description: A bitwise combination of <xref href="System.Net.Sockets.TransmitFileOptions"></xref> values.
    - id: callback
      type: System.AsyncCallback
      description: An <xref href="System.AsyncCallback"></xref> delegate to be invoked when this operation completes. This parameter can be `null`.
    - id: state
      type: System.Object
      description: A user-defined object that contains state information for this request. This parameter can be `null`.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> object that represents the asynchronous operation.
  overload: System.Net.Sockets.Socket.BeginSendFile*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object has been closed.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See remarks section below.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The operating system is not Windows NT or later.  \n  \n \\- or -  \n  \n The socket is not connected to a remote host."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: The file <code>fileName</code> was not found.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)
  id: BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: BeginSendTo(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginSendTo(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSendTo(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a specific remote host.
  remarks: "The BeginSendTo method starts an asynchronous send operation to the remote host specified in the `remoteEP` parameter. Calling the BeginSendTo method gives you the ability to send data within a separate execution thread. Although intended for connectionless protocols, BeginSendTo works with both connectionless and connection-oriented protocols.  \n  \n You can create a callback method that implements the <xref:System.AsyncCallback> delegate and pass its name to the BeginSendTo method. To do this, at the very minimum, your `state` parameter must contain the connected or default <xref:System.Net.Sockets.Socket> being used for communication. If your callback needs more information, you can create a small class to hold the <xref:System.Net.Sockets.Socket>, and the other required information. Pass an instance of this class to the BeginSendTo method through the `state` parameter.  \n  \n Your callback method should invoke the <xref:System.Net.Sockets.Socket.EndSendTo%2A> method. When your application calls BeginSendTo, the system will use a separate thread to execute the specified callback method, and will block on <xref:System.Net.Sockets.Socket.EndSendTo%2A> until the <xref:System.Net.Sockets.Socket> sends the number of bytes requested or throws an exception. If you want the original thread to block after you call the BeginSendTo method, use the <xref:System.Threading.WaitHandle.WaitOne%2A?displayProperty=fullName> method. Call the Set method on a T:System.Threading.ManualResetEvent in the callback method when you want the original thread to continue executing. For additional information about writing callback methods see [Marshaling a Delegate as a Callback Method](../Topic/Marshaling%20a%20Delegate%20as%20a%20Callback%20Method.md).  \n  \n If you are using a connection-oriented protocol, you must first call the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method, or BeginSendTo will throw a <xref:System.Net.Sockets.SocketException>. BeginSendTo will ignore the `remoteEP` parameter and send data to the <xref:System.Net.EndPoint> established in the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Accept%2A>, or <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.  \n  \n If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>. You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method. If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.BeginConnect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only. You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method. In this case, the underlying service provider will assign the most appropriate local network address and port number. Use a port number of zero if you want the underlying service provider to select a free port. If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.EndSendTo%2A> method successfully completes.  \n  \n If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. -You must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.EndSendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n If you specify the <xref:System.Net.Sockets.SocketFlags> flag as the `socketflags` parameter, the data you are sending will not be routed.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The execution context (the security context, the impersonated user, and the calling context) is cached for the asynchronous <xref:System.Net.Sockets.Socket> methods. After the first use of a particular context (a specific asynchronous <xref:System.Net.Sockets.Socket> method, a specific <xref:System.Net.Sockets.Socket> instance, and a specific callback), subsequent uses of that context will see a performance improvement."
  example:
  - "The following code example asynchronously sends data to the specified remote host.  \n  \n [!code-cpp[Socket_Async_Send_Receive#3](~/add/codesnippet/cpp/3c0e03f1-28fe-416f-a40d-_1.cpp)]\n [!code-cs[Socket_Async_Send_Receive#3](~/add/codesnippet/csharp/3c0e03f1-28fe-416f-a40d-_1.cs)]\n [!code-vb[Socket_Async_Send_Receive#3](~/add/codesnippet/visualbasic/3c0e03f1-28fe-416f-a40d-_1.vb)]"
  syntax:
    content: public IAsyncResult BeginSendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the data to send.
    - id: offset
      type: System.Int32
      description: The zero-based position in <code>buffer</code> at which to begin sending data.
    - id: size
      type: System.Int32
      description: The number of bytes to send.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: An <xref href="System.Net.EndPoint"></xref> that represents the remote device.
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate.
    - id: state
      type: System.Object
      description: An object that contains state information for this request.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous send.
  overload: System.Net.Sockets.Socket.BeginSendTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is `null`.  \n  \n -or-  \n  \n <code>remoteEP</code> is `null`."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n -or-  \n  \n <code>size</code> is less than 0.  \n  \n -or-  \n  \n <code>size</code> is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  id: Bind(System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Bind(EndPoint)
  nameWithType: Socket.Bind(EndPoint)
  fullName: System.Net.Sockets.Socket.Bind(EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Associates a <xref href="System.Net.Sockets.Socket"></xref> with a local endpoint.
  remarks: "Use the Bind method if you need to use a specific local endpoint. You must call Bind before you can call the <xref:System.Net.Sockets.Socket.Listen%2A> method. You do not need to call Bind before using the <xref:System.Net.Sockets.Socket.Connect%2A> method unless you need to use a specific local endpoint. You can use the Bind method on both connectionless and connection-oriented protocols.  \n  \n Before calling Bind, you must first create the local <xref:System.Net.IPEndPoint> from which you intend to communicate data. If you do not care which local address is assigned, you can create an <xref:System.Net.IPEndPoint> using <xref:System.Net.IPAddress.Any?displayProperty=fullName> as the address parameter, and the underlying service provider will assign the most appropriate network address. This might help simplify your application if you have multiple network interfaces. If you do not care which local port is used, you can create an <xref:System.Net.IPEndPoint> using 0 for the port number. In this case, the service provider will assign an available port number between 1024 and 5000.  \n  \n If you use the above approach, you can discover what local network address and port number has been assigned by calling the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A>. If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> will not return the locally assigned network address until after you have made a call to the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.EndConnect%2A> method. If you are using a connectionless protocol, you will not have access to this information until you have completed a send or receive.  \n  \n If a UDP socket wants to receive interface information on received packets,  the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method should be explicitly called with the socket option set to <xref:System.Net.Sockets.SocketOptionName> immediately after calling the Bind method.  \n  \n> [!NOTE]\n>  If you intend to receive multicast datagrams, you must call the Bind method with a multicast port number.  \n  \n> [!NOTE]\n>  You must call the Bind method if you intend to receive connectionless datagrams using the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException> when calling the Bind method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example binds a <xref:System.Net.Sockets.Socket> using the specified local endpoint.  \n  \n [!code-cs[Classic Socket.Bind Example#1](~/add/codesnippet/csharp/m-system.net.sockets.soc_21_1.cs)]\n [!code-cpp[Classic Socket.Bind Example#1](~/add/codesnippet/cpp/m-system.net.sockets.soc_21_1.cpp)]\n [!code-vb[Classic Socket.Bind Example#1](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_21_1.vb)]"
  syntax:
    content: public void Bind (System.Net.EndPoint localEP);
    parameters:
    - id: localEP
      type: System.Net.EndPoint
      description: The local <xref href="System.Net.EndPoint"></xref> to associate with the <xref href="System.Net.Sockets.Socket"></xref>.
  overload: System.Net.Sockets.Socket.Bind*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>localEP</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Blocking
  id: Blocking
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Blocking
  nameWithType: Socket.Blocking
  fullName: System.Net.Sockets.Socket.Blocking
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that indicates whether the <xref href="System.Net.Sockets.Socket"></xref> is in blocking mode.
  remarks: "The Blocking property indicates whether a <xref:System.Net.Sockets.Socket> is in blocking mode.  \n  \n If you are in blocking mode, and you make a method call which does not complete immediately, your application will block execution until the requested operation completes. If you want execution to continue even though the requested operation is not complete, change the Blocking property to `false`. The Blocking property has no effect on asynchronous methods. If you are sending and receiving data asynchronously and want to block execution, use the <xref:System.Threading.ManualResetEvent> class.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public bool Blocking { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Net.Sockets.Socket"></xref> will block; otherwise, `false`. The default is `true`.'
  overload: System.Net.Sockets.Socket.Blocking*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: CancelConnectAsync(SocketAsyncEventArgs)
  nameWithType: Socket.CancelConnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.CancelConnectAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Cancels an asynchronous request for a remote host connection.
  remarks: The CancelConnectAsync method cancels an asynchronous request for a remote host connection.
  syntax:
    content: public static void CancelConnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object used to request the connection to the remote host by calling one of the <xref href="stem.Net.Sockets.Socket.ConnectAsync%2A"></xref> methods.
  overload: System.Net.Sockets.Socket.CancelConnectAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>e</code> parameter cannot be null and the <xref href="stem.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A"></xref> cannot be null.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Close
  id: Close
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Close()
  nameWithType: Socket.Close()
  fullName: System.Net.Sockets.Socket.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Closes the <xref href="System.Net.Sockets.Socket"></xref> connection and releases all associated resources.
  remarks: "The Close method closes the remote host connection and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.Socket>. Upon closing, the <xref:System.Net.Sockets.Socket.Connected%2A> property is set to `false`.  \n  \n For connection-oriented protocols, it is recommended that you call <xref:System.Net.Sockets.Socket.Shutdown%2A> before calling the Close method. This ensures that all data is sent and received on the connected socket before it is closed.  \n  \n If you need to call Close without first calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, you can ensure that data queued for outgoing transmission will be sent by setting the <xref:System.Net.Sockets.SocketOptionName><xref:System.Net.Sockets.Socket> option to `false` and specifying a non-zero time-out interval. Close will then block until this data is sent or until the specified time-out expires. If you set <xref:System.Net.Sockets.SocketOptionName> to `false` and specify a zero time-out interval, Close releases the connection and automatically discards outgoing queued data.  \n  \n> [!NOTE]\n>  To set the <xref:System.Net.Sockets.SocketOptionName> socket option to `false`, create a <xref:System.Net.Sockets.LingerOption>, set the enabled property to `true`, and set the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property to the desired time out period. Use this <xref:System.Net.Sockets.LingerOption> along with the <xref:System.Net.Sockets.SocketOptionName> socket option to call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example closes a <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cpp[Classic Socket.Close Example#1](~/add/codesnippet/cpp/m-system.net.sockets.soc_6_1.cpp)]\n [!code-cs[Classic Socket.Close Example#1](~/add/codesnippet/csharp/m-system.net.sockets.soc_6_1.cs)]\n [!code-vb[Classic Socket.Close Example#1](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_6_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Net.Sockets.Socket.Close*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Close(System.Int32)
  id: Close(System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Close(Int32)
  nameWithType: Socket.Close(Int32)
  fullName: System.Net.Sockets.Socket.Close(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Closes the <xref href="System.Net.Sockets.Socket"></xref> connection and releases all associated resources with a specified timeout to allow queued data to be sent.
  remarks: "The <xref:System.Net.Sockets.Socket.Close%2A> method closes the remote host connection and releases all managed and unmanaged resources associated with the <xref:System.Net.Sockets.Socket>. Upon closing, the <xref:System.Net.Sockets.Socket.Connected%2A> property is set to `false`.  \n  \n For connection-oriented protocols, it is recommended that you call <xref:System.Net.Sockets.Socket.Shutdown%2A> before calling <xref:System.Net.Sockets.Socket.Close%2A>. This ensures that all data is sent and received on the connected socket before it is closed.  \n  \n If you need to call <xref:System.Net.Sockets.Socket.Close%2A> without first calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, you can ensure that data queued for outgoing transmission will be sent by setting the <xref:System.Net.Sockets.SocketOptionName> option to `false` and specifying a non-zero time-out interval. <xref:System.Net.Sockets.Socket.Close%2A> will then block until this data is sent or until the specified time-out expires. If you set <xref:System.Net.Sockets.SocketOptionName> to `false` and specify a zero time-out interval, <xref:System.Net.Sockets.Socket.Close%2A> releases the connection and automatically discards outgoing queued data.  \n  \n> [!NOTE]\n>  To set the <xref:System.Net.Sockets.SocketOptionName> socket option to `false`, create a <xref:System.Net.Sockets.LingerOption>, set the enabled property to `true`, and set the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property to the desired time-out period. Use this <xref:System.Net.Sockets.LingerOption> along with the <xref:System.Net.Sockets.SocketOptionName> socket option to call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example demonstrates how to close a <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cpp[Classic Socket.Close Example#1](~/add/codesnippet/cpp/m-system.net.sockets.soc_7_1.cpp)]\n [!code-cs[Classic Socket.Close Example#1](~/add/codesnippet/csharp/m-system.net.sockets.soc_7_1.cs)]\n [!code-vb[Classic Socket.Close Example#1](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_7_1.vb)]"
  syntax:
    content: public void Close (int timeout);
    parameters:
    - id: timeout
      type: System.Int32
      description: Wait up to <code>timeout</code> seconds to send any remaining data, then close the socket.
  overload: System.Net.Sockets.Socket.Close*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  id: Connect(System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Connect(EndPoint)
  nameWithType: Socket.Connect(EndPoint)
  fullName: System.Net.Sockets.Socket.Connect(EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Establishes a connection to a remote host.
  remarks: "If you are using a connection-oriented protocol such as TCP, the Connect method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote endpoint. If you are using a connectionless protocol, Connect establishes a default remote host. After you call Connect, you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.  \n  \n If you are using a connectionless protocol such as UDP, you do not have to call Connect before sending and receiving data. You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host. If you do call Connect, any datagrams that arrive from an address other than the specified default will be discarded. If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>, or Connect will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n The Connect method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling Connect. If you are using a connection-oriented protocol like TCP and you do disable blocking, Connect will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection. Connectionless protocols will not throw an exception because they simply establish a default remote host. You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully. Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.  \n  \n> [!NOTE]\n>  If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling Connect, the underlying service provider will assign the local network address and port number. If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation. If you want to change the default remote host, call Connect again with the desired endpoint.  \n  \n> [!NOTE]\n>  If the socket has been previously disconnected, then you cannot use this method to restore the connection. Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect. This is a limitation of the underlying provider.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example connects to a remote endpoint and then verifies the connection.  \n  \n [!code-cpp[Classic Socket.Connect Example#1](~/add/codesnippet/cpp/m-system.net.sockets.soc_28_1.cpp)]\n [!code-cs[Classic Socket.Connect Example#1](~/add/codesnippet/csharp/m-system.net.sockets.soc_28_1.cs)]\n [!code-vb[Classic Socket.Connect Example#1](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_28_1.vb)]"
  syntax:
    content: public void Connect (System.Net.EndPoint remoteEP);
    parameters:
    - id: remoteEP
      type: System.Net.EndPoint
      description: An <xref href="System.Net.EndPoint"></xref> that represents the remote device.
  overload: System.Net.Sockets.Socket.Connect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>remoteEP</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Net.Sockets.Socket"></xref> is <xref href="stem.Net.Sockets.Socket.Listen%2A"></xref>ing.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)
  id: Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Connect(IPAddress,Int32)
  nameWithType: Socket.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.Socket.Connect(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Establishes a connection to a remote host. The host is specified by an IP address and a port number.
  remarks: "If you are using a connection-oriented protocol such as TCP, the Connect method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote endpoint. If you are using a connectionless protocol, Connect establishes a default remote host. After you call Connect you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.  \n  \n If you are using a connectionless protocol such as UDP, you do not have to call Connect before sending and receiving data. You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host. If you do call Connect any datagrams that arrive from an address other than the specified default will be discarded. If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>, or Connect will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n Connect method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling Connect. If you are using a connection-oriented protocol like TCP and you do disable blocking, Connect will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection. Connectionless protocols will not throw an exception because they simply establish a default remote host. You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully. Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.  \n  \n> [!NOTE]\n>  If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling Connect, the underlying service provider will assign the local network address and port number. If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation. If you want to change the default remote host, call Connect again with the desired endpoint.  \n  \n> [!NOTE]\n>  If the socket has been previously disconnected, then you cannot use this method to restore the connection. Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect. This is a limitation of the underlying provider.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example connects to a remote endpoint and then verifies the connection.  \n  \n [!code-cpp[System.Net.Sockets.Socket.BeginConnect#4](~/add/codesnippet/cpp/m-system.net.sockets.soc_17_1.cpp)]\n [!code-cs[System.Net.Sockets.Socket.BeginConnect#4](~/add/codesnippet/csharp/m-system.net.sockets.soc_17_1.cs)]"
  syntax:
    content: public void Connect (System.Net.IPAddress address, int port);
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: The IP address of the remote host.
    - id: port
      type: System.Int32
      description: The port number of the remote host.
  overload: System.Net.Sockets.Socket.Connect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>address</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The port number is not valid.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This method is valid for sockets in the <xref href="System.Net.Sockets.AddressFamily"></xref> or <xref href="System.Net.Sockets.AddressFamily"></xref> families.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The length of <code>address</code> is zero.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Net.Sockets.Socket"></xref> is <xref href="stem.Net.Sockets.Socket.Listen%2A"></xref>ing.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)
  id: Connect(System.Net.IPAddress[],System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Connect(IPAddress[],Int32)
  nameWithType: Socket.Connect(IPAddress[],Int32)
  fullName: System.Net.Sockets.Socket.Connect(IPAddress[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Establishes a connection to a remote host. The host is specified by an array of IP addresses and a port number.
  remarks: "This method is typically used immediately after a call to <xref:System.Net.Dns.GetHostAddresses%2A>, which can return multiple IP addresses for a single host. If you are using a connection-oriented protocol such as TCP, the Connect method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote endpoint. If you are using a connectionless protocol, Connect establishes a default remote host. After you call Connect you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.  \n  \n If you are using a connectionless protocol such as UDP, you do not have to call Connect before sending and receiving data. You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host. If you do call Connect any datagrams that arrive from an address other than the specified default will be discarded. If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>, or Connect will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n Connect method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling Connect. If you are using a connection-oriented protocol like TCP and you do disable blocking, Connect will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection. Connectionless protocols will not throw an exception because they simply establish a default remote host. You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully. Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.  \n  \n> [!NOTE]\n>  If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling Connect, the underlying service provider will assign the local network address and port number. If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation. If you want to change the default remote host, call Connect again with the desired endpoint.  \n  \n> [!NOTE]\n>  If the socket has been previously disconnected, then you cannot use this method to restore the connection. Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect. This is a limitation of the underlying provider.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example connects to a remote endpoint and then verifies the connection.  \n  \n [!code-cpp[System.Net.Sockets.Socket.BeginConnect#5](~/add/codesnippet/cpp/m-system.net.sockets.soc_8_1.cpp)]\n [!code-cs[System.Net.Sockets.Socket.BeginConnect#5](~/add/codesnippet/csharp/m-system.net.sockets.soc_8_1.cs)]"
  syntax:
    content: public void Connect (System.Net.IPAddress[] addresses, int port);
    parameters:
    - id: addresses
      type: System.Net.IPAddress[]
      description: The IP addresses of the remote host.
    - id: port
      type: System.Int32
      description: The port number of the remote host.
  overload: System.Net.Sockets.Socket.Connect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>addresses</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The port number is not valid.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This method is valid for sockets in the <xref href="System.Net.Sockets.AddressFamily"></xref> or <xref href="System.Net.Sockets.AddressFamily"></xref> families.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The length of <code>address</code> is zero.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Net.Sockets.Socket"></xref> is <xref href="stem.Net.Sockets.Socket.Listen%2A"></xref>ing.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Connect(System.String,System.Int32)
  id: Connect(System.String,System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Connect(String,Int32)
  nameWithType: Socket.Connect(String,Int32)
  fullName: System.Net.Sockets.Socket.Connect(String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Establishes a connection to a remote host. The host is specified by a host name and a port number.
  remarks: "If you are using a connection-oriented protocol such as TCP, the Connect method synchronously establishes a network connection between <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> and the specified remote host. If you are using a connectionless protocol, Connect establishes a default remote host. After you call Connect you can send data to the remote device with the <xref:System.Net.Sockets.Socket.Send%2A> method, or receive data from the remote device with the <xref:System.Net.Sockets.Socket.Receive%2A> method.  \n  \n If you are using a connectionless protocol such as UDP, you do not have to call Connect before sending and receiving data. You can use <xref:System.Net.Sockets.Socket.SendTo%2A> and <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> to synchronously communicate with a remote host. If you do call Connect any datagrams that arrive from an address other than the specified default will be discarded. If you want to set your default remote host to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>, or Connect will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n Connect method will block, unless you specifically set the <xref:System.Net.Sockets.Socket.Blocking%2A> property to `false` prior to calling Connect. If you are using a connection-oriented protocol like TCP and you do disable blocking, Connect will throw a <xref:System.Net.Sockets.SocketException> because it needs time to make the connection. Connectionless protocols will not throw an exception because they simply establish a default remote host. You can use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. If the error returned WSAEWOULDBLOCK, the remote host connection has been initiated by a connection-oriented <xref:System.Net.Sockets.Socket>, but has not yet completed successfully. Use the <xref:System.Net.Sockets.Socket.Poll%2A> method to determine when the <xref:System.Net.Sockets.Socket> is finished connecting.  \n  \n If IPv6 is enabled and the Connect method is called to connect to a host that resolves to both IPv6 and IPv4 addresses, the connection to the IPv6 address will be attempted first before the IPv4 address. This may have the effect of delaying the time to establish the connection if the host is not listening on the IPv6 address.  \n  \n> [!NOTE]\n>  If you are using a connection-oriented protocol and did not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling Connect, the underlying service provider will assign the local network address and port number. If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation. If you want to change the default remote host, call Connect again with the desired endpoint.  \n  \n> [!NOTE]\n>  If the socket has been previously disconnected, then you cannot use this method to restore the connection. Use one of the asynchronous <xref:System.Net.Sockets.Socket.BeginConnect%2A> methods to reconnect. This is a limitation of the underlying provider.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example connects to a remote endpoint and then verifies the connection.  \n  \n [!code-cpp[System.Net.Sockets.Socket.BeginConnect#6](~/add/codesnippet/cpp/m-system.net.sockets.soc_14_1.cpp)]\n [!code-cs[System.Net.Sockets.Socket.BeginConnect#6](~/add/codesnippet/csharp/m-system.net.sockets.soc_14_1.cs)]"
  syntax:
    content: public void Connect (string host, int port);
    parameters:
    - id: host
      type: System.String
      description: The name of the remote host.
    - id: port
      type: System.Int32
      description: The port number of the remote host.
  overload: System.Net.Sockets.Socket.Connect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>host</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The port number is not valid.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This method is valid for sockets in the <xref href="System.Net.Sockets.AddressFamily"></xref> or <xref href="System.Net.Sockets.AddressFamily"></xref> families.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Net.Sockets.Socket"></xref> is <xref href="stem.Net.Sockets.Socket.Listen%2A"></xref>ing.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ConnectAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ConnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ConnectAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a connection to a remote host.
  remarks: "If you are using a connection-oriented protocol, the ConnectAsync method starts an asynchronous request for a connection to the remote host. If you are using a connectionless protocol, ConnectAsync establishes a default remote host.  \n  \n To be notified of completion, you must create a callback method that implements the EventHandler\\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName> event.  \n  \n The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=fullName> property to the <xref:System.Net.IPEndPoint> of the remote host to connect to.  \n  \n The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=fullName> property to any user state object desired before calling the ConnectAsync method, so that the information will be retrievable in the callback method. If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.  \n  \n If you are using a connectionless protocol such as UDP, you do not have to call ConnectAsync before sending and receiving data. You can use <xref:System.Net.Sockets.Socket.SendToAsync%2A> and <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> to communicate with a remote host. If you do call ConnectAsync, any datagrams that arrive from an address other than the specified default will be discarded. If you want to change the default remote host, call the ConnectAsync method again with the desired endpoint.  \n  \n If you wish to set the default remote host to a broadcast address, you must first call <xref:System.Net.Sockets.Socket.SetSocketOption%2A> and set Broadcast to `true`. If this is not done, the ConnectAsync method will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=fullName> object are required:  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=fullName>  \n  \n Optionally, a buffer may be provided which will atomically be sent on the socket after the ConnectAsync method succeeds. In this case, the <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=fullName> property needs to be set to the buffer containing the data to send and the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=fullName> property needs to be set to the number of bytes of data to send from the buffer. Once a connection is established, this buffer of data is sent.  \n  \n If you are using a connection-oriented protocol and do not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling ConnectAsync, the underlying service provider will assign the most appropriate local network address and port number.  \n  \n If you are using a connectionless protocol, the service provider will not assign a local network IP address and port number until you call the <xref:System.Net.Sockets.Socket.SendAsync%2A> or <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> methods.  \n  \n The ConnectAsync method throws <xref:System.NotSupportedException> if the address family of the <xref:System.Net.Sockets.Socket> and the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=fullName> are not the same address family.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException> when calling this method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error."
  syntax:
    content: public bool ConnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: "Returns `true` if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will be raised upon completion of the operation.  \n  \n Returns `false` if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will not be raised and the <code>e</code> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation."
  overload: System.Net.Sockets.Socket.ConnectAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An argument is not valid. This exception occurs if multiple buffers are specified, the <xref href="stem.Net.Sockets.SocketAsyncEventArgs.BufferList%2A"></xref> property is not null.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>e</code> parameter cannot be null and the <xref href="stem.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A"></xref> cannot be null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Net.Sockets.Socket"></xref> is listening or a socket operation was already in progress using the <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object specified in the <code>e</code> parameter.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows XP or later is required for this method. This exception also occurs if the local endpoint and the <xref href="stem.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A"></xref> are not the same address family.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)
  id: ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ConnectAsync(SocketType,ProtocolType,SocketAsyncEventArgs)
  nameWithType: Socket.ConnectAsync(SocketType,ProtocolType,SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ConnectAsync(SocketType,ProtocolType,SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a connection to a remote host.
  remarks: "If you are using a connection-oriented protocol, the M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs) method starts an asynchronous request for a connection to the remote host. If you are using a connectionless protocol, ConnectAsync establishes a default remote host specified by the `socketType` and `protocolType` parameters.  \n  \n To be notified of completion, you must create a callback method that implements the EventHandler\\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName> event.  \n  \n The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=fullName> property to the <xref:System.Net.IPEndPoint> of the remote host to connect to.  \n  \n The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=fullName> property to any user state object desired before calling the ConnectAsync method, so that the information will be retrievable in the callback method. If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.  \n  \n If you are using a connectionless protocol such as UDP, you do not have to call ConnectAsync before sending and receiving data. You can use <xref:System.Net.Sockets.Socket.SendToAsync%2A> and <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A> to communicate with a remote host. If you do call ConnectAsync, any datagrams that arrive from an address other than the specified default will be discarded. If you want to change the default remote host, call the ConnectAsync method again with the desired endpoint.  \n  \n If you wish to set the default remote host to a broadcast address, you must first call <xref:System.Net.Sockets.Socket.SetSocketOption%2A> and set Broadcast to `true`. If this is not done, the ConnectAsync method will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=fullName> object are required:  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=fullName>  \n  \n Optionally, a buffer may be provided which will atomically be sent on the socket after the ConnectAsync method succeeds. In this case, the <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=fullName> property needs to be set to the buffer containing the data to send and the <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=fullName> property needs to be set to the number of bytes of data to send from the buffer. Once a connection is established, this buffer of data is sent.  \n  \n If you are using a connection-oriented protocol and do not call <xref:System.Net.Sockets.Socket.Bind%2A> before calling ConnectAsync, the underlying service provider will assign the most appropriate local network address and port number.  \n  \n If you are using a connectionless protocol, the service provider will not assign a local network IP address and port number until you call the <xref:System.Net.Sockets.Socket.SendAsync%2A> or <xref:System.Net.Sockets.Socket.ReceiveAsync%2A> methods.  \n  \n The ConnectAsync method throws <xref:System.NotSupportedException> if the address family of the <xref:System.Net.Sockets.Socket> and the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=fullName> are not the same address family.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException> when calling this method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error."
  syntax:
    content: public static bool ConnectAsync (System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType, System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: socketType
      type: System.Net.Sockets.SocketType
      description: One of the <xref href="System.Net.Sockets.SocketType"></xref> values.
    - id: protocolType
      type: System.Net.Sockets.ProtocolType
      description: One of the <xref href="System.Net.Sockets.ProtocolType"></xref> values.
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: "Returns `true` if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will be raised upon completion of the operation.  \n  \n Returns `false` if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will not be raised and the <code>e</code> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation."
  overload: System.Net.Sockets.Socket.ConnectAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An argument is not valid. This exception occurs if multiple buffers are specified, the <xref href="stem.Net.Sockets.SocketAsyncEventArgs.BufferList%2A"></xref> property is not null.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>e</code> parameter cannot be null and the <xref href="stem.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A"></xref> cannot be null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Net.Sockets.Socket"></xref> is listening or a socket operation was already in progress using the <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object specified in the <code>e</code> parameter.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows XP or later is required for this method. This exception also occurs if the local endpoint and the <xref href="stem.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A"></xref> are not the same address family.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Connected
  id: Connected
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Connected
  nameWithType: Socket.Connected
  fullName: System.Net.Sockets.Socket.Connected
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets a value that indicates whether a <xref href="System.Net.Sockets.Socket"></xref> is connected to a remote host as of the last <xref href="stem.Net.Sockets.Socket.Send%2A"></xref> or <xref href="stem.Net.Sockets.Socket.Receive%2A"></xref> operation.
  remarks: "The `Connected` property gets the connection state of the <xref:System.Net.Sockets.Socket> as of the last I/O operation. When it returns `false`, the <xref:System.Net.Sockets.Socket> was either never connected, or is no longer connected.  \n  \n The value of the Connected property reflects the state of the connection as of the most recent operation. If you need to determine the current state of the connection, make a nonblocking, zero-byte Send call. If the call returns successfully or throws a WAEWOULDBLOCK error code (10035), then the socket is still connected; otherwise, the socket is no longer connected.  \n  \n If you call <xref:System.Net.Sockets.Socket.Connect%2A> on a User Datagram Protocol (UDP) socket, the Connected property always returns `true`; however, this action does not change the inherent connectionless nature of UDP."
  example:
  - "The following code example connects to a remote endpoint, checks the Connected property, and checks the current state of the connection.  \n  \n [!code-cpp[Classic Socket.Connect Example#1](~/add/codesnippet/cpp/p-system.net.sockets.soc_0_1.cpp)]\n [!code-cs[Classic Socket.Connect Example#1](~/add/codesnippet/csharp/p-system.net.sockets.soc_0_1.cs)]\n [!code-vb[Classic Socket.Connect Example#1](~/add/codesnippet/visualbasic/p-system.net.sockets.soc_0_1.vb)]"
  syntax:
    content: public bool Connected { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Net.Sockets.Socket"></xref> was connected to a remote resource as of the most recent operation; otherwise, `false`.'
  overload: System.Net.Sockets.Socket.Connected*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Disconnect(System.Boolean)
  id: Disconnect(System.Boolean)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Disconnect(Boolean)
  nameWithType: Socket.Disconnect(Boolean)
  fullName: System.Net.Sockets.Socket.Disconnect(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Closes the socket connection and allows reuse of the socket.
  remarks: "If you are using a connection-oriented protocol, you can use this method to close the socket. This method ends the connection and sets the <xref:System.Net.Sockets.Socket.Connected%2A> property to `false`. However, if `reuseSocket` is `true`, you can reuse the socket.  \n  \n To ensure that all data is sent and received before the socket is closed, you should call <xref:System.Net.Sockets.Socket.Shutdown%2A> before calling the Disconnect method.  \n  \n If you need to call Disconnect without first calling <xref:System.Net.Sockets.Socket.Shutdown%2A>, you can set the <xref:System.Net.Sockets.SocketOptionName><xref:System.Net.Sockets.Socket> option to `false` and specify a nonzero time-out interval to ensure that data queued for outgoing transmission is sent. Disconnect then blocks until the data is sent or until the specified time-out expires. If you set <xref:System.Net.Sockets.SocketOptionName> to `false` and specify a zero time-out interval, <xref:System.Net.Sockets.Socket.Close%2A> releases the connection and automatically discards outgoing queued data.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example creates a socket for synchronous communication and sends some data to a remote host. It then calls <xref:System.Net.Sockets.Socket.Shutdown%2A>, to stop the send and receive activity, and Disconnect, to close the socket connection.  \n  \n [!code-cs[Nclsocketenhancements#12](~/add/codesnippet/csharp/m-system.net.sockets.soc_4_1.cs)]\n [!code-cpp[Nclsocketenhancements#12](~/add/codesnippet/cpp/m-system.net.sockets.soc_4_1.cpp)]"
  syntax:
    content: public void Disconnect (bool reuseSocket);
    parameters:
    - id: reuseSocket
      type: System.Boolean
      description: '`true` if this socket can be reused after the current connection is closed; otherwise, `false`.'
  overload: System.Net.Sockets.Socket.Disconnect*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: This method requires Windows 2000 or earlier, or the exception will be thrown.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object has been closed.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: DisconnectAsync(SocketAsyncEventArgs)
  nameWithType: Socket.DisconnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.DisconnectAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request to disconnect from a remote endpoint.
  remarks: When using a connection-oriented protocol, calling the DisconnectAsync method requests a disconnect from a remote endpoint. If you set <xref:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket%2A?displayProperty=fullName> to `true` in the `e` parameter, the socket can be reused.
  syntax:
    content: public bool DisconnectAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: "Returns `true` if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will be raised upon completion of the operation.  \n  \n Returns `false` if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will not be raised and the <code>e</code> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation."
  overload: System.Net.Sockets.Socket.DisconnectAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>e</code> parameter cannot be null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: A socket operation was already in progress using the <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object specified in the <code>e</code> parameter.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows XP or later is required for this method.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Dispose
  id: Dispose
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Dispose()
  nameWithType: Socket.Dispose()
  fullName: System.Net.Sockets.Socket.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Releases all resources used by the current instance of the <xref href="System.Net.Sockets.Socket"></xref> class.
  remarks: "Call `Dispose` when you are finished using the <xref:System.Net.Sockets.Socket>. The `Dispose` method leaves the <xref:System.Net.Sockets.Socket> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Net.Sockets.Socket> so the garbage collector can reclaim the memory that the <xref:System.Net.Sockets.Socket> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](../Topic/Cleaning%20Up%20Unmanaged%20Resources.md) and [Implementing a Dispose Method](../Topic/Implementing%20a%20Dispose%20Method.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Net.Sockets.Socket>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Net.Sockets.Socket> object's `Finalize` method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Sockets.Socket.Dispose*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Socket.Dispose(Boolean)
  fullName: System.Net.Sockets.Socket.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Releases the unmanaged resources used by the <xref href="System.Net.Sockets.Socket"></xref>, and optionally disposes of the managed resources.
  remarks: "This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.Socket> references. This method invokes the `Dispose()` method of each referenced object.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: '`true` to release both managed and unmanaged resources; `false` to releases only unmanaged resources.'
  overload: System.Net.Sockets.Socket.Dispose*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.DontFragment
  id: DontFragment
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: DontFragment
  nameWithType: Socket.DontFragment
  fullName: System.Net.Sockets.Socket.DontFragment
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a <xref href="System.Boolean"></xref> value that specifies whether the <xref href="System.Net.Sockets.Socket"></xref> allows Internet Protocol (IP) datagrams to be fragmented.
  remarks: "Datagrams require fragmentation when their size exceeds the Maximum Transfer Unit (MTU) of the transmission medium. Datagrams may be fragmented by the sending host (all Internet Protocol versions) or an intermediate router (Internet Protocol Version 4 only). If a datagram must be fragmented, and the DontFragment option is set, the datagram is discarded, and an Internet Control Message Protocol (ICMP) error message is sent back to the sender of the datagram.  \n  \n Setting this property on a Transmission Control Protocol (TCP) socket will have no effect."
  example:
  - "The following code example demonstrates the use of the DontFragment property.  \n  \n [!code-cpp[SocketPropertyTester#2](~/add/codesnippet/cpp/p-system.net.sockets.soc_7_1.cpp)]\n [!code-cs[SocketPropertyTester#2](~/add/codesnippet/csharp/p-system.net.sockets.soc_7_1.cs)]"
  syntax:
    content: public bool DontFragment { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Net.Sockets.Socket"></xref> allows datagram fragmentation; otherwise, `false`. The default is `true`.'
  overload: System.Net.Sockets.Socket.DontFragment*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This property can be set only for sockets in the <xref href="System.Net.Sockets.AddressFamily"></xref> or <xref href="System.Net.Sockets.AddressFamily"></xref> families.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.DualMode
  id: DualMode
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: DualMode
  nameWithType: Socket.DualMode
  fullName: System.Net.Sockets.Socket.DualMode
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a <xref href="System.Boolean"></xref> value that specifies whether the <xref href="System.Net.Sockets.Socket"></xref> is a dual-mode socket used for both IPv4 and IPv6.
  syntax:
    content: public bool DualMode { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Net.Sockets.Socket"></xref> is a  dual-mode socket; otherwise, `false`. The default is `false`.'
  overload: System.Net.Sockets.Socket.DualMode*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)
  id: DuplicateAndClose(System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: DuplicateAndClose(Int32)
  nameWithType: Socket.DuplicateAndClose(Int32)
  fullName: System.Net.Sockets.Socket.DuplicateAndClose(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Duplicates the socket reference for the target process, and closes the socket for this process.
  remarks: "The target process should use <xref:System.Net.Sockets.Socket.%23ctor%2A> to create the duplicate socket instance.  \n  \n If you call the <xref:System.Net.Sockets.Socket.%23ctor%2A> constructor multiple times with the same byte array as the argument for each call, you will create multiple managed <xref:System.Net.Sockets.Socket> instances with the same underlying socket. This practice is strongly discouraged.  \n  \n If the process creating the socket uses asynchronous methods (<xref:System.Net.Sockets.Socket.BeginReceive%2A> or <xref:System.Net.Sockets.Socket.BeginSend%2A>), the process must first set the <xref:System.Net.Sockets.Socket.UseOnlyOverlappedIO%2A> property to true; otherwise, the socket is bound to the completion port of the creating process, which may cause an <xref:System.ArgumentNullException> to be thrown on the target process."
  syntax:
    content: public System.Net.Sockets.SocketInformation DuplicateAndClose (int targetProcessId);
    parameters:
    - id: targetProcessId
      type: System.Int32
      description: The ID of the target process where a duplicate of the socket reference is created.
    return:
      type: System.Net.Sockets.SocketInformation
      description: The socket reference to be passed to the target process.
  overload: System.Net.Sockets.Socket.DuplicateAndClose*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "<code>targetProcessID</code> is not a valid process id.  \n  \n -or-  \n  \n Duplication of the socket reference failed."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.EnableBroadcast
  id: EnableBroadcast
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EnableBroadcast
  nameWithType: Socket.EnableBroadcast
  fullName: System.Net.Sockets.Socket.EnableBroadcast
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a <xref href="System.Boolean"></xref> value that specifies whether the <xref href="System.Net.Sockets.Socket"></xref> can send or receive broadcast packets.
  remarks: "Broadcasting is limited to a specific subnet, and must use User Datagram Protocol (UDP.) For Internet Protocol version 4, you can broadcast to your local subnet by sending a packet to 255.255.255.255; or you can use the directed broadcast address, which is the network portion of an Internet Protocol (IP) address with all bits set in the host portion. For example, if your IP address is 192.168.1.40 (a Class C address, with a netmask of 255.255.255.0 -- the network portion is the first three octets, and the host portion is the last octet), your directed broadcast address is 192.168.1.255.  \n  \n Setting this property on a Transmission Control Protocol (TCP) socket will have no effect."
  example:
  - "The following code example demonstrates the use of the EnableBroadcast property.  \n  \n [!code-cpp[SocketPropertyTester#2](~/add/codesnippet/cpp/p-system.net.sockets.soc_14_1.cpp)]\n [!code-cs[SocketPropertyTester#2](~/add/codesnippet/csharp/p-system.net.sockets.soc_14_1.cs)]"
  syntax:
    content: public bool EnableBroadcast { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Net.Sockets.Socket"></xref> allows broadcast packets; otherwise, `false`. The default is `false`.'
  overload: System.Net.Sockets.Socket.EnableBroadcast*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: This option is valid for a datagram socket only.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)
  id: EndAccept(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndAccept(IAsyncResult)
  nameWithType: Socket.EndAccept(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndAccept(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Asynchronously accepts an incoming connection attempt and creates a new <xref href="System.Net.Sockets.Socket"></xref> to handle remote host communication.
  remarks: "EndAccept completes a call to <xref:System.Net.Sockets.Socket.BeginAccept%2A>. Before calling <xref:System.Net.Sockets.Socket.BeginAccept%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate. This callback method executes in a separate thread, and is called by the system after the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method returns. It must accept the `asyncResult` parameter returned from the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.  \n  \n Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the `asyncResult` parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made. After obtaining the <xref:System.Net.Sockets.Socket>, you can call the EndAccept method to successfully complete the connection attempt.  \n  \n The EndAccept method blocks until a connection is pending in the incoming connection queue. The EndAccept method accepts the incoming connection and returns a new <xref:System.Net.Sockets.Socket> that can be used to send data to and receive data from the remote host.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example ends an asynchronous request and creates a new <xref:System.Net.Sockets.Socket> to accept an incoming connection request. For a complete example that demonstrates asynchronous communications with sockets, see [Socket Code Examples](../Topic/Socket%20Code%20Examples.md).  \n  \n [!code-cpp[Socket_Async_Send_Receive#7](~/add/codesnippet/cpp/m-system.net.sockets.soc_20_1.cpp)]\n [!code-cs[Socket_Async_Send_Receive#7](~/add/codesnippet/csharp/m-system.net.sockets.soc_20_1.cs)]\n [!code-vb[Socket_Async_Send_Receive#7](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_20_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket EndAccept (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that stores state information for this asynchronous operation as well as any user defined data.
    return:
      type: System.Net.Sockets.Socket
      description: A <xref href="System.Net.Sockets.Socket"></xref> to handle communication with the remote host.
  overload: System.Net.Sockets.Socket.EndAccept*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not created by a call to <xref href="stem.Net.Sockets.Socket.BeginAccept%2A"></xref>.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: EndAccept method was previously called.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows NT is required for this method.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.IAsyncResult)
  id: EndAccept(System.Byte[]@,System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndAccept(Byte[],IAsyncResult)
  nameWithType: Socket.EndAccept(Byte[],IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndAccept(Byte[],IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Asynchronously accepts an incoming connection attempt and creates a new <xref href="System.Net.Sockets.Socket"></xref> object to handle remote host communication. This method returns a buffer that contains the initial data transferred.
  remarks: "<xref:System.Net.Sockets.Socket.EndAccept%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginAccept%2A>. Before calling <xref:System.Net.Sockets.Socket.BeginAccept%2A>, you need to create a callback method that is invoked by the <xref:System.AsyncCallback> delegate. This callback method executes in a separate thread, and is called by the system after the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method returns.  \n  \n Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the `asyncResult` parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made. After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndAccept%2A> method to successfully complete the connection attempt. The `buffer` parameter of this overload contains the data that was received in the call to <xref:System.Net.Sockets.Socket.BeginAccept%2A> and the `bytesTransferred` parameter contains the number of bytes that were transferred in the call.  \n  \n The <xref:System.Net.Sockets.Socket.EndAccept%2A> method blocks until a connection is pending in the incoming connection queue. The <xref:System.Net.Sockets.Socket.EndAccept%2A> method accepts the incoming connection and returns a new <xref:System.Net.Sockets.Socket> that can be used to send data to and receive data from the remote host.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example uses <xref:System.Net.Sockets.Socket.BeginAccept%2A> to create and connect a socket and accept the initial 10 bytes of data. The callback delegate calls <xref:System.Net.Sockets.Socket.EndAccept%2A> to end the asynchronous request. The number of bytes transmitted and the data are returned in the `buffer` and `bytesTransferred` parameters of this method and are displayed on the console.  \n  \n [!code-cs[NCLSocketEnhancements#6](~/add/codesnippet/csharp/m-system.net.sockets.soc_22_1.cs)]\n [!code-cpp[NCLSocketEnhancements#6](~/add/codesnippet/cpp/m-system.net.sockets.soc_22_1.cpp)]"
  syntax:
    content: public System.Net.Sockets.Socket EndAccept (out byte[] buffer, IAsyncResult asyncResult);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the bytes transferred.
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> object that stores state information for this asynchronous operation as well as any user defined data.
    return:
      type: System.Net.Sockets.Socket
      description: A <xref href="System.Net.Sockets.Socket"></xref> object to handle communication with the remote host.
  overload: System.Net.Sockets.Socket.EndAccept*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows NT is required for this method.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object has been closed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is empty.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not created by a call to <xref href="stem.Net.Sockets.Socket.BeginAccept%2A"></xref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <xref href="stem.Net.Sockets.Socket.EndAccept%2A"></xref> method was previously called.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the <xref href="System.Net.Sockets.Socket"></xref> See the Remarks section for more information.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)
  id: EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndAccept(Byte[],Int32,IAsyncResult)
  nameWithType: Socket.EndAccept(Byte[],Int32,IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndAccept(Byte[],Int32,IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Asynchronously accepts an incoming connection attempt and creates a new <xref href="System.Net.Sockets.Socket"></xref> object to handle remote host communication. This method returns a buffer that contains the initial data and the number of bytes transferred.
  remarks: "<xref:System.Net.Sockets.Socket.EndAccept%2A> completes a call to <xref:System.Net.Sockets.Socket.BeginAccept%2A>. Before calling <xref:System.Net.Sockets.Socket.BeginAccept%2A>, you need to create a callback method that is invoked by the <xref:System.AsyncCallback> delegate. This callback method executes in a separate thread, and is called by the system after the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method returns. It must accept the `asyncResult` parameter returned from the <xref:System.Net.Sockets.Socket.BeginAccept%2A> method.  \n  \n Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the `asyncResult` parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made. After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndAccept%2A> method to successfully complete the connection attempt. The `buffer` parameter of this overload contains the data that was received in the call to <xref:System.Net.Sockets.Socket.BeginAccept%2A> and the `bytesTransferred` parameter contains the number of bytes that were transferred in the call.  \n  \n The <xref:System.Net.Sockets.Socket.EndAccept%2A> method blocks until a connection is pending in the incoming connection queue. The <xref:System.Net.Sockets.Socket.EndAccept%2A> method accepts the incoming connection and returns a new <xref:System.Net.Sockets.Socket> that can be used to send data to and receive data from the remote host.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example uses <xref:System.Net.Sockets.Socket.BeginAccept%2A> to create and connect a socket and accept the initial 10 bytes of data. The callback delegate calls <xref:System.Net.Sockets.Socket.EndAccept%2A> to end the asynchronous request. The number of bytes transmitted and the data are returned in the `buffer` and `bytesTransferred` parameters of this method and are displayed on the console.  \n  \n [!code-cs[NCLSocketEnhancements#6](~/add/codesnippet/csharp/eb3317ba-c837-4940-bf74-_1.cs)]\n [!code-cpp[NCLSocketEnhancements#6](~/add/codesnippet/cpp/eb3317ba-c837-4940-bf74-_1.cpp)]"
  syntax:
    content: public System.Net.Sockets.Socket EndAccept (out byte[] buffer, out int bytesTransferred, IAsyncResult asyncResult);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the bytes transferred.
    - id: bytesTransferred
      type: System.Int32
      description: The number of bytes transferred.
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> object that stores state information for this asynchronous operation as well as any user defined data.
    return:
      type: System.Net.Sockets.Socket
      description: A <xref href="System.Net.Sockets.Socket"></xref> object to handle communication with the remote host.
  overload: System.Net.Sockets.Socket.EndAccept*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows NT is required for this method.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object has been closed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is empty.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not created by a call to <xref href="stem.Net.Sockets.Socket.BeginAccept%2A"></xref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <xref href="stem.Net.Sockets.Socket.EndAccept%2A"></xref> method was previously called.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the <xref href="System.Net.Sockets.Socket"></xref>. See the Remarks section for more information.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)
  id: EndConnect(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndConnect(IAsyncResult)
  nameWithType: Socket.EndConnect(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndConnect(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous connection request.
  remarks: "EndConnect is a blocking method that completes the asynchronous remote host connection request started in the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method.  \n  \n Before calling <xref:System.Net.Sockets.Socket.BeginConnect%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate. This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginConnect%2A> returns. The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginConnect%2A> method as a parameter.  \n  \n Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the <xref:System.Net.Sockets.Socket> on which the connection attempt is being made. After obtaining the <xref:System.Net.Sockets.Socket>, you can call the EndConnect method to successfully complete the connection attempt.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example ends the asynchronous connection attempt. For a complete example that demonstrates asynchronous communications with sockets, see [Socket Code Examples](../Topic/Socket%20Code%20Examples.md).  \n  \n [!code-cpp[Socket_Async_Send_Receive#5](~/add/codesnippet/cpp/m-system.net.sockets.soc_10_1.cpp)]\n [!code-cs[Socket_Async_Send_Receive#5](~/add/codesnippet/csharp/m-system.net.sockets.soc_10_1.cs)]\n [!code-vb[Socket_Async_Send_Receive#5](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_10_1.vb)]"
  syntax:
    content: public void EndConnect (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that stores state information and any user defined data for this asynchronous operation.
  overload: System.Net.Sockets.Socket.EndConnect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not returned by a call to the <xref href="stem.Net.Sockets.Socket.BeginConnect%2A"></xref> method.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: EndConnect was previously called for the asynchronous connection.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)
  id: EndDisconnect(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndDisconnect(IAsyncResult)
  nameWithType: Socket.EndDisconnect(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndDisconnect(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous disconnect request.
  remarks: "EndDisconnect completes a call to <xref:System.Net.Sockets.Socket.BeginDisconnect%2A>. The EndDisconnect method blocks until the disconnect completes. For information about asynchronous operations, see the Asynchronous Programming Overview topic in the MSDN library.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example creates a socket for asynchronous communication and sends some data to a remote host. When the data has been sent, <xref:System.Net.Sockets.Socket.Shutdown%2A> is called to stop the send and receive activity. Then <xref:System.Net.Sockets.Socket.BeginDisconnect%2A> is called to begin a disconnect request. The callback delegate calls EndDisconnect to end the asynchronous request. When the request completes, the <xref:System.Net.Sockets.Socket.Connected%2A> property is queried to test whether the socket is disconnected.  \n  \n [!code-cs[Nclsocketenhancements#11](~/add/codesnippet/csharp/m-system.net.sockets.soc_25_1.cs)]\n [!code-cpp[Nclsocketenhancements#11](~/add/codesnippet/cpp/m-system.net.sockets.soc_25_1.cpp)]"
  syntax:
    content: public void EndDisconnect (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> object that stores state information and any user-defined data for this asynchronous operation.
  overload: System.Net.Sockets.Socket.EndDisconnect*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The operating system is Windows 2000 or earlier, and this method requires Windows XP.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object has been closed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not returned by a call to the <xref href="stem.Net.Sockets.Socket.BeginDisconnect%2A"></xref> method.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: EndDisconnect was previously called for the asynchronous connection.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: The disconnect request has timed out.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)
  id: EndReceive(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndReceive(IAsyncResult)
  nameWithType: Socket.EndReceive(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndReceive(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous read.
  remarks: "The EndReceive method completes the asynchronous read operation started in the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.  \n  \n Before calling <xref:System.Net.Sockets.Socket.BeginReceive%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate. This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceive%2A> returns. The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method as a parameter.  \n  \n Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method. Extract the receiving <xref:System.Net.Sockets.Socket> from this state object. After obtaining the <xref:System.Net.Sockets.Socket>, you can call the EndReceive method to successfully complete the read operation and return the number of bytes read.  \n  \n The EndReceive method will block until data is available. If you are using a connectionless protocol, EndReceive will read the first enqueued datagram available in the incoming network buffer. If you are using a connection-oriented protocol, the EndReceive method will read as much data as is available up to the number of bytes you specified in the `size` parameter of the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the EndReceive method will complete immediately and return zero bytes.  \n  \n To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult>, and extract the buffer contained in the resulting state object.  \n  \n To cancel a pending <xref:System.Net.Sockets.Socket.BeginReceive%2A>, call the <xref:System.Net.Sockets.Socket.Close%2A> method.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  All I/O initiated by a given thread is canceled when that thread exits. A pending asynchronous operation can fail if the thread exits before the operation completes.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example ends a pending asynchronous read. For a complete example that demonstrates asynchronous communications with sockets, see [Socket Code Examples](../Topic/Socket%20Code%20Examples.md).  \n  \n [!code-cpp[Socket_Async_Send_Receive#8](~/add/codesnippet/cpp/m-system.net.sockets.soc_0_1.cpp)]\n [!code-cs[Socket_Async_Send_Receive#8](~/add/codesnippet/csharp/m-system.net.sockets.soc_0_1.cs)]\n [!code-vb[Socket_Async_Send_Receive#8](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_0_1.vb)]"
  syntax:
    content: public int EndReceive (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that stores state information and any user defined data for this asynchronous operation.
    return:
      type: System.Int32
      description: The number of bytes received.
  overload: System.Net.Sockets.Socket.EndReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not returned by a call to the <xref href="stem.Net.Sockets.Socket.BeginReceive%2A"></xref> method.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: EndReceive was previously called for the asynchronous read.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)
  id: EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndReceive(IAsyncResult,SocketError)
  nameWithType: Socket.EndReceive(IAsyncResult,SocketError)
  fullName: System.Net.Sockets.Socket.EndReceive(IAsyncResult,SocketError)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous read.
  remarks: "The <xref:System.Net.Sockets.Socket.EndReceive%2A> method completes the asynchronous read operation started in the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method.  \n  \n Before calling <xref:System.Net.Sockets.Socket.BeginReceive%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate. This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceive%2A> returns. The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method as a parameter.  \n  \n Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method. Extract the receiving <xref:System.Net.Sockets.Socket> from this state object. After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndReceive%2A>method to successfully complete the read operation and return the number of bytes read.  \n  \n The <xref:System.Net.Sockets.Socket.EndReceive%2A> method will block until data is available. If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndReceive%2A> will read the first enqueued datagram available in the incoming network buffer. If you are using a connection-oriented protocol, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will read as much data as is available up to the number of bytes you specified in the `size` parameter of the <xref:System.Net.Sockets.Socket.BeginReceive%2A> method. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.EndReceive%2A> method will complete immediately and return zero bytes.  \n  \n To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult>, and extract the buffer contained in the resulting state object.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  All I/O initiated by a given thread is canceled when that thread exits. A pending asynchronous operation can fail if the thread exits before the operation completes.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public int EndReceive (IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that stores state information and any user defined data for this asynchronous operation.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: A <xref href="System.Net.Sockets.SocketError"></xref> object that stores the socket error.
    return:
      type: System.Int32
      description: The number of bytes received.
  overload: System.Net.Sockets.Socket.EndReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not returned by a call to the <xref href="stem.Net.Sockets.Socket.BeginReceive%2A"></xref> method.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <xref href="stem.Net.Sockets.Socket.EndReceive%2A"></xref> was previously called for the asynchronous read.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)
  id: EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndReceiveFrom(IAsyncResult,EndPoint)
  nameWithType: Socket.EndReceiveFrom(IAsyncResult,EndPoint)
  fullName: System.Net.Sockets.Socket.EndReceiveFrom(IAsyncResult,EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous read from a specific endpoint.
  remarks: "The EndReceiveFrom method completes the asynchronous read operation started in the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method.  \n  \n Before calling <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate. This callback method executes in a separate thread and is called by the system after<xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> returns. The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method as a parameter.  \n  \n Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> to obtain the state object passed to the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method. Extract the receiving <xref:System.Net.Sockets.Socket> from this state object. After obtaining the <xref:System.Net.Sockets.Socket>, you can call the EndReceiveFrom method to successfully complete the read operation and return the number of bytes read.  \n  \n The EndReceiveFrom method will block until data is available. If you are using a connectionless protocol, EndReceiveFrom will read the first enqueued datagram available in the incoming network buffer. If you are using a connection-oriented protocol, the EndReceiveFrom method will read as much data as is available up to the number of bytes you specified in the `size` parameter of the <xref:System.Net.Sockets.Socket.BeginReceiveFrom%2A> method. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the EndReceiveFrom method will complete immediately and return zero bytes. To obtain the received data, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> object, and extract the buffer contained in the resulting state object. To identify the originating host, extract the <xref:System.Net.EndPoint> and cast it to an <xref:System.Net.IPEndPoint>. Use the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=fullName> method to obtain the IP address and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=fullName> method to obtain the port number.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example ends a pending asynchronous read from a specific <xref:System.Net.EndPoint>.  \n  \n [!code-cpp[Socket_Async_Send_Receive#10](~/add/codesnippet/cpp/91097d50-c87d-46f9-94fe-_1.cpp)]\n [!code-cs[Socket_Async_Send_Receive#10](~/add/codesnippet/csharp/91097d50-c87d-46f9-94fe-_1.cs)]\n [!code-vb[Socket_Async_Send_Receive#10](~/add/codesnippet/visualbasic/91097d50-c87d-46f9-94fe-_1.vb)]"
  syntax:
    content: public int EndReceiveFrom (IAsyncResult asyncResult, ref System.Net.EndPoint endPoint);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that stores state information and any user defined data for this asynchronous operation.
    - id: endPoint
      type: System.Net.EndPoint
      description: The source <xref href="System.Net.EndPoint"></xref>.
    return:
      type: System.Int32
      description: If successful, the number of bytes received. If unsuccessful, returns 0.
  overload: System.Net.Sockets.Socket.EndReceiveFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not returned by a call to the <xref href="stem.Net.Sockets.Socket.BeginReceiveFrom%2A"></xref> method.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: EndReceiveFrom was previously called for the asynchronous read.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  id: EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndReceiveMessageFrom(IAsyncResult,SocketFlags,EndPoint,IPPacketInformation)
  nameWithType: Socket.EndReceiveMessageFrom(IAsyncResult,SocketFlags,EndPoint,IPPacketInformation)
  fullName: System.Net.Sockets.Socket.EndReceiveMessageFrom(IAsyncResult,SocketFlags,EndPoint,IPPacketInformation)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous read from a specific endpoint. This method also reveals more information about the packet than <xref href="stem.Net.Sockets.Socket.EndReceiveFrom%2A"></xref>.
  remarks: "If the operation has not completed, this method blocks until it does.  \n  \n To perform this operation synchronously, use the <xref:System.Net.Sockets.Socket.ReceiveMessageFrom%2A> method.  \n  \n Examine `ipPacketInformation` if you need to know if the datagram was sent using a unicast, multicast, or broadcast address."
  syntax:
    content: public int EndReceiveMessageFrom (IAsyncResult asyncResult, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint endPoint, out System.Net.Sockets.IPPacketInformation ipPacketInformation);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that stores state information and any user defined data for this asynchronous operation.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values for the received packet.
    - id: endPoint
      type: System.Net.EndPoint
      description: The source <xref href="System.Net.EndPoint"></xref>.
    - id: ipPacketInformation
      type: System.Net.Sockets.IPPacketInformation
      description: The <xref href="System.Net.IPAddress"></xref> and interface of the received packet.
    return:
      type: System.Int32
      description: If successful, the number of bytes received. If unsuccessful, returns 0.
  overload: System.Net.Sockets.Socket.EndReceiveMessageFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code> is `null`  \n  \n -or-  \n  \n <code>endPoint</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not returned by a call to the <xref href="stem.Net.Sockets.Socket.BeginReceiveMessageFrom%2A"></xref> method.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: EndReceiveMessageFrom was previously called for the asynchronous read.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.EndSend(System.IAsyncResult)
  id: EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndSend(IAsyncResult)
  nameWithType: Socket.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndSend(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous send.
  remarks: "EndSend completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSend%2A>.  \n  \n Before calling <xref:System.Net.Sockets.Socket.BeginSend%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate. This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginSend%2A> returns. The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginSend%2A> method as a parameter.  \n  \n Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>. After obtaining the <xref:System.Net.Sockets.Socket>, you can call the EndSend method to successfully complete the send operation and return the number of bytes sent.  \n  \n If you are using a connectionless protocol, EndSend will block until the datagram is sent. If you are using a connection-oriented protocol, EndSend will block until some of the buffer was sent. If the return value from EndSend indicates that the buffer was not completely sent, call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method again, modifying the buffer to hold the unsent data.  \n  \n There is no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the <xref:System.Net.Sockets.Socket.BeginSend%2A> method means that the underlying system has had room to buffer your data for a network send.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  All I/O initiated by a given thread is canceled when that thread exits. A pending asynchronous operation can fail if the thread exits before the operation completes.  \n  \n> [!NOTE]\n>  The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example ends a pending asynchronous send.  \n  \n [!code-cpp[Socket_Async_Send_Receive#6](~/add/codesnippet/cpp/m-system.net.sockets.soc_19_1.cpp)]\n [!code-cs[Socket_Async_Send_Receive#6](~/add/codesnippet/csharp/m-system.net.sockets.soc_19_1.cs)]\n [!code-vb[Socket_Async_Send_Receive#6](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_19_1.vb)]"
  syntax:
    content: public int EndSend (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that stores state information for this asynchronous operation.
    return:
      type: System.Int32
      description: If successful, the number of bytes sent to the <xref href="System.Net.Sockets.Socket"></xref>; otherwise, an invalid <xref href="System.Net.Sockets.Socket"></xref> error.
  overload: System.Net.Sockets.Socket.EndSend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not returned by a call to the <xref href="stem.Net.Sockets.Socket.BeginSend%2A"></xref> method.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: EndSend was previously called for the asynchronous send.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)
  id: EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndSend(IAsyncResult,SocketError)
  nameWithType: Socket.EndSend(IAsyncResult,SocketError)
  fullName: System.Net.Sockets.Socket.EndSend(IAsyncResult,SocketError)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous send.
  remarks: "<xref:System.Net.Sockets.Socket.EndSend%2A> completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSend%2A>.  \n  \n Before calling <xref:System.Net.Sockets.Socket.BeginSend%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate. This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginSend%2A> returns. The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginSend%2A> method as a parameter.  \n  \n Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>. After obtaining the <xref:System.Net.Sockets.Socket>, you can call the <xref:System.Net.Sockets.Socket.EndSend%2A> method to successfully complete the send operation and return the number of bytes sent.  \n  \n If you are using a connectionless protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until the datagram is sent. If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.EndSend%2A> will block until some of the buffer was sent. If the return value from <xref:System.Net.Sockets.Socket.EndSend%2A> indicates that the buffer was not completely sent, call the <xref:System.Net.Sockets.Socket.BeginSend%2A> method again, modifying the buffer to hold the unsent data.  \n  \n There is no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the <xref:System.Net.Sockets.Socket.BeginSend%2A> method means that the underlying system has had room to buffer your data for a network send.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  All I/O initiated by a given thread is canceled when that thread exits. A pending asynchronous operation can fail if the thread exits before the operation completes.  \n  \n> [!NOTE]\n>  The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public int EndSend (IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that stores state information for this asynchronous operation.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: A <xref href="System.Net.Sockets.SocketError"></xref> object that stores the socket error.
    return:
      type: System.Int32
      description: If successful, the number of bytes sent to the <xref href="System.Net.Sockets.Socket"></xref>; otherwise, an invalid <xref href="System.Net.Sockets.Socket"></xref> error.
  overload: System.Net.Sockets.Socket.EndSend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not returned by a call to the <xref href="stem.Net.Sockets.Socket.BeginSend%2A"></xref> method.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <xref href="stem.Net.Sockets.Socket.EndSend%2A"></xref> was previously called for the asynchronous send.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)
  id: EndSendFile(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndSendFile(IAsyncResult)
  nameWithType: Socket.EndSendFile(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndSendFile(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous send of a file.
  remarks: "EndSendFile completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSendFile%2A>.  \n  \n Before calling <xref:System.Net.Sockets.Socket.BeginSendFile%2A>, you must create a callback method that implements the <xref:System.AsyncCallback> delegate. This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginSendFile%2A> returns. The callback method must accept the <xref:System.IAsyncResult> object returned by the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method as a parameter.  \n  \n Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>. After obtaining the <xref:System.Net.Sockets.Socket>, you can call the EndSendFile method to successfully complete the send operation.  \n  \n If you are using a connectionless protocol, EndSendFile blocks until the datagram is sent. If you are using a connection-oriented protocol, EndSendFile blocks until the entire file is sent. There is no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the <xref:System.Net.Sockets.Socket.BeginSendFile%2A> method means that the underlying system has had room to buffer your data for a network send.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example creates and connects a socket for asynchronous communication and begins sending the file \"text.txt\" asynchronously to the remote host. The callback delegate calls EndSendFile to complete the transmission.  \n  \n [!code-cs[NCLSocketEnhancements#9](~/add/codesnippet/csharp/m-system.net.sockets.soc_5_1.cs)]\n [!code-cpp[NCLSocketEnhancements#9](~/add/codesnippet/cpp/m-system.net.sockets.soc_5_1.cpp)]"
  syntax:
    content: public void EndSendFile (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> object that stores state information for this asynchronous operation.
  overload: System.Net.Sockets.Socket.EndSendFile*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows NT is required for this method.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object has been closed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is empty.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not returned by a call to the <xref href="stem.Net.Sockets.Socket.BeginSendFile%2A"></xref> method.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: EndSendFile was previously called for the asynchronous <xref href="stem.Net.Sockets.Socket.BeginSendFile%2A"></xref>.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See remarks section below.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)
  id: EndSendTo(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: EndSendTo(IAsyncResult)
  nameWithType: Socket.EndSendTo(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndSendTo(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Ends a pending asynchronous send to a specific location.
  remarks: "EndSendTo completes the asynchronous send operation started in <xref:System.Net.Sockets.Socket.BeginSendTo%2A>.  \n  \n Before calling <xref:System.Net.Sockets.Socket.BeginSendTo%2A>, you need to create a callback method that implements the <xref:System.AsyncCallback> delegate. This callback method executes in a separate thread and is called by the system after <xref:System.Net.Sockets.Socket.BeginReceive%2A> returns. The callback method must accept the <xref:System.IAsyncResult> returned by the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method as a parameter.  \n  \n Within the callback method, call the <xref:System.IAsyncResult.AsyncState%2A> method of the <xref:System.IAsyncResult> parameter to obtain the sending <xref:System.Net.Sockets.Socket>. After obtaining the <xref:System.Net.Sockets.Socket>, you can call the EndSendTo method to successfully complete the send operation and return the number of bytes sent.  \n  \n If you are using a connectionless protocol, EndSendTo will block until the datagram is sent. If you are using a connection-oriented protocol, EndSendTo will block until the requested number of bytes are sent. There is no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the <xref:System.Net.Sockets.Socket.BeginSendTo%2A> method means that the underlying system has had room to buffer your data for a network send.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example ends an asynchronous send to a specific location.  \n  \n [!code-cpp[Socket_Async_Send_Receive#9](~/add/codesnippet/cpp/m-system.net.sockets.soc_18_1.cpp)]\n [!code-cs[Socket_Async_Send_Receive#9](~/add/codesnippet/csharp/m-system.net.sockets.soc_18_1.cs)]\n [!code-vb[Socket_Async_Send_Receive#9](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_18_1.vb)]"
  syntax:
    content: public int EndSendTo (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that stores state information and any user defined data for this asynchronous operation.
    return:
      type: System.Int32
      description: If successful, the number of bytes sent; otherwise, an invalid <xref href="System.Net.Sockets.Socket"></xref> error.
  overload: System.Net.Sockets.Socket.EndSendTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not returned by a call to the <xref href="stem.Net.Sockets.Socket.BeginSendTo%2A"></xref> method.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: EndSendTo was previously called for the asynchronous send.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ExclusiveAddressUse
  nameWithType: Socket.ExclusiveAddressUse
  fullName: System.Net.Sockets.Socket.ExclusiveAddressUse
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a <xref href="System.Boolean"></xref> value that specifies whether the <xref href="System.Net.Sockets.Socket"></xref> allows only one process to bind to a port.
  remarks: "If ExclusiveAddressUse is `false`, multiple sockets can use the <xref:System.Net.Sockets.Socket.Bind%2A> method to bind to a specific port; however only one of the sockets can perform operations on the network traffic sent to the port. If more than one socket attempts to use the <xref:System.Net.Sockets.Socket.Bind%28System.Net.EndPoint%29> method to bind to a particular port, then the one with the more specific IP address will handle the network traffic sent to that port.  \n  \n If ExclusiveAddressUse is `true`, the first use of the <xref:System.Net.Sockets.Socket.Bind%2A> method to attempt to bind to a particular port, regardless of Internet Protocol (IP) address, will succeed; all subsequent uses of the <xref:System.Net.Sockets.Socket.Bind%2A> method to attempt to bind to that port will fail until the original bound socket is destroyed.  \n  \n This property must be set before <xref:System.Net.Sockets.Socket.Bind%2A> is called; otherwise an <xref:System.InvalidOperationException> will be thrown."
  example:
  - "The following code example demonstrates the use of the ExclusiveAddressUse property.  \n  \n [!code-cpp[SocketPropertyTester#1](~/add/codesnippet/cpp/p-system.net.sockets.soc_16_1.cpp)]\n [!code-cs[SocketPropertyTester#1](~/add/codesnippet/csharp/p-system.net.sockets.soc_16_1.cs)]"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Net.Sockets.Socket"></xref> allows only one socket to bind to a specific port; otherwise, `false`. The default is `true` for Windows Server 2003 and Windows XP Service Pack 2, and `false` for all other versions.'
  overload: System.Net.Sockets.Socket.ExclusiveAddressUse*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <xref href="stem.Net.Sockets.Socket.Bind%2A"></xref> has been called for this <xref href="System.Net.Sockets.Socket"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Finalize
  id: Finalize
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Finalize()
  nameWithType: Socket.Finalize()
  fullName: System.Net.Sockets.Socket.Finalize()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Frees resources used by the <xref href="System.Net.Sockets.Socket"></xref> class.
  remarks: The <xref:System.Net.Sockets.Socket> class finalizer calls the <xref:System.Net.Sockets.Socket.Close%2A> method to close the <xref:System.Net.Sockets.Socket> and free resources associated with the <xref:System.Net.Sockets.Socket>.
  syntax:
    content: ~Socket ();
    parameters: []
  overload: System.Net.Sockets.Socket.Finalize*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  id: GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: GetSocketOption(SocketOptionLevel,SocketOptionName)
  nameWithType: Socket.GetSocketOption(SocketOptionLevel,SocketOptionName)
  fullName: System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel,SocketOptionName)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Returns the value of a specified <xref href="System.Net.Sockets.Socket"></xref> option, represented as an object.
  remarks: "<xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>. Use this overload to get the <xref:System.Net.Sockets.SocketOptionName>, <xref:System.Net.Sockets.SocketOptionName>, and <xref:System.Net.Sockets.SocketOptionName><xref:System.Net.Sockets.Socket> options. For the <xref:System.Net.Sockets.SocketOptionName> option, use <xref:System.Net.Sockets.Socket> for the `optionLevel` parameter. For <xref:System.Net.Sockets.SocketOptionName> and <xref:System.Net.Sockets.SocketOptionName>, use <xref:System.Net.Sockets.SocketOptionLevel>. If you want to set the value of any of the options listed above, use the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example retrieves the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values and displays them to the console.  \n  \n [!code-cs[Socket_Socket_Options#2](~/add/codesnippet/csharp/cc38c5a6-2b2a-4f9b-9e78-_1.cs)]\n [!code-cpp[Socket_Socket_Options#2](~/add/codesnippet/cpp/cc38c5a6-2b2a-4f9b-9e78-_1.cpp)]\n [!code-vb[Socket_Socket_Options#2](~/add/codesnippet/visualbasic/cc38c5a6-2b2a-4f9b-9e78-_1.vb)]"
  syntax:
    content: public object GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName);
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: One of the <xref href="System.Net.Sockets.SocketOptionLevel"></xref> values.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: One of the <xref href="System.Net.Sockets.SocketOptionName"></xref> values.
    return:
      type: System.Object
      description: An object that represents the value of the option. When the <code>optionName</code> parameter is set to <xref href="System.Net.Sockets.SocketOptionName"></xref> the return value is an instance of the <xref href="System.Net.Sockets.LingerOption"></xref> class. When <code>optionName</code> is set to <xref href="System.Net.Sockets.SocketOptionName"></xref> or <xref href="System.Net.Sockets.SocketOptionName"></xref>, the return value is an instance of the <xref href="System.Net.Sockets.MulticastOption"></xref> class. When <code>optionName</code> is any other value, the return value is an integer.
  overload: System.Net.Sockets.Socket.GetSocketOption*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when attempting to access the socket. See the Remarks section for more information.  \n  \n -or-  \n  \n <code>optionName</code> was set to the unsupported value <xref href=\"System.Net.Sockets.SocketOptionName\"></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  id: GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: GetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  nameWithType: Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  fullName: System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Returns the specified <xref href="System.Net.Sockets.Socket"></xref> option setting, represented as a byte array.
  remarks: "<xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>. Upon successful completion of this method, the array specified by the `optionValue` parameter contains the value of the specified <xref:System.Net.Sockets.Socket> option.  \n  \n When the length of the `optionValue` array is smaller than the number of bytes required to store the value of the specified <xref:System.Net.Sockets.Socket> option, <xref:System.Net.Sockets.Socket.GetSocketOption%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. Use this overload for any sockets that are represented by Boolean values or integers.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example retrieves the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values and displays them to the console.  \n  \n [!code-cs[Socket_Socket_Options#2](~/add/codesnippet/csharp/bfb3d730-15ba-4a3b-9167-_1.cs)]\n [!code-cpp[Socket_Socket_Options#2](~/add/codesnippet/cpp/bfb3d730-15ba-4a3b-9167-_1.cpp)]\n [!code-vb[Socket_Socket_Options#2](~/add/codesnippet/visualbasic/bfb3d730-15ba-4a3b-9167-_1.vb)]"
  syntax:
    content: public void GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue);
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: One of the <xref href="System.Net.Sockets.SocketOptionLevel"></xref> values.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: One of the <xref href="System.Net.Sockets.SocketOptionName"></xref> values.
    - id: optionValue
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that is to receive the option setting.
  overload: System.Net.Sockets.Socket.GetSocketOption*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when attempting to access the socket. See the Remarks section for more information.  \n  \n \\- or -  \n  \n In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes. You can change the per socket buffer space by calling <xref href=\"stem.Net.Sockets.Socket.SetSocketOption%2A\"></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  id: GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: GetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  nameWithType: Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  fullName: System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Returns the value of the specified <xref href="System.Net.Sockets.Socket"></xref> option in an array.
  remarks: "The `optionLength` parameter sets the maximum size of the returned byte array. If the option value requires fewer bytes, the array will contain only that many bytes. If the option value requires more bytes, <xref:System.Net.Sockets.Socket.GetSocketOption%2A> will throw a <xref:System.Net.Sockets.SocketException>. Use this overload for any sockets that are represented by Boolean values or integers.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example retrieves the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values and displays them to the console.  \n  \n [!code-cs[Socket_Socket_Options#2](~/add/codesnippet/csharp/d47aa721-5026-48a0-90af-_1.cs)]\n [!code-cpp[Socket_Socket_Options#2](~/add/codesnippet/cpp/d47aa721-5026-48a0-90af-_1.cpp)]\n [!code-vb[Socket_Socket_Options#2](~/add/codesnippet/visualbasic/d47aa721-5026-48a0-90af-_1.vb)]"
  syntax:
    content: public byte[] GetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionLength);
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: One of the <xref href="System.Net.Sockets.SocketOptionLevel"></xref> values.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: One of the <xref href="System.Net.Sockets.SocketOptionName"></xref> values.
    - id: optionLength
      type: System.Int32
      description: The length, in bytes, of the expected return value.
    return:
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the value of the socket option.
  overload: System.Net.Sockets.Socket.GetSocketOption*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "An error occurred when attempting to access the socket. See the Remarks section for more information.  \n  \n \\- or -  \n  \n In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes. You can change the per socket buffer space by calling <xref href=\"stem.Net.Sockets.Socket.SetSocketOption%2A\"></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Handle
  id: Handle
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Handle
  nameWithType: Socket.Handle
  fullName: System.Net.Sockets.Socket.Handle
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets the operating system handle for the <xref href="System.Net.Sockets.Socket"></xref>.
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: An <xref href="System.IntPtr"></xref> that represents the operating system handle for the <xref href="System.Net.Sockets.Socket"></xref>.
  overload: System.Net.Sockets.Socket.Handle*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])
  id: IOControl(System.Int32,System.Byte[],System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: IOControl(Int32,Byte[],Byte[])
  nameWithType: Socket.IOControl(Int32,Byte[],Byte[])
  fullName: System.Net.Sockets.Socket.IOControl(Int32,Byte[],Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sets low-level operating modes for the <xref href="System.Net.Sockets.Socket"></xref> using numerical control codes.
  remarks: "The IOControl method provides low-level access to the operating system <xref:System.Net.Sockets.Socket> underlying the current instance of the <xref:System.Net.Sockets.Socket> class. For more information, see the WSAIoctl documentation in the MSDN library.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example compares the results of FIONREAD and the Available property.  \n  \n [!code-cpp[NCLSocketIoControl#1](~/add/codesnippet/cpp/m-system.net.sockets.soc_16_1.cpp)]\n [!code-cs[NCLSocketIoControl#1](~/add/codesnippet/csharp/m-system.net.sockets.soc_16_1.cs)]"
  syntax:
    content: public int IOControl (int ioControlCode, byte[] optionInValue, byte[] optionOutValue);
    parameters:
    - id: ioControlCode
      type: System.Int32
      description: An <xref href="System.Int32"></xref> value that specifies the control code of the operation to perform.
    - id: optionInValue
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array that contains the input data required by the operation.
    - id: optionOutValue
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array that contains the output data returned by the operation.
    return:
      type: System.Int32
      description: The number of bytes in the <code>optionOutValue</code> parameter.
  overload: System.Net.Sockets.Socket.IOControl*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: An attempt was made to change the blocking mode without using the <xref href="stem.Net.Sockets.Socket.Blocking%2A"></xref> property.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])
  id: IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: IOControl(IOControlCode,Byte[],Byte[])
  nameWithType: Socket.IOControl(IOControlCode,Byte[],Byte[])
  fullName: System.Net.Sockets.Socket.IOControl(IOControlCode,Byte[],Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sets low-level operating modes for the <xref href="System.Net.Sockets.Socket"></xref> using the <xref href="System.Net.Sockets.IOControlCode"></xref> enumeration to specify control codes.
  remarks: "This method provides low-level access to the operating system <xref:System.Net.Sockets.Socket> underlying the current instance of the <xref:System.Net.Sockets.Socket> class. For more, see the WSAIoctl documentation in the MSDN library.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example compares the results of calling IOControl with <xref:System.Net.Sockets.IOControlCode> and the <xref:System.Net.Sockets.Socket.Available%2A> property.  \n  \n [!code-cpp[NCLSocketIoControl1#1](~/add/codesnippet/cpp/87f0035a-cf26-47d6-bb7b-_1.cpp)]\n [!code-cs[NCLSocketIoControl1#1](~/add/codesnippet/csharp/87f0035a-cf26-47d6-bb7b-_1.cs)]"
  syntax:
    content: public int IOControl (System.Net.Sockets.IOControlCode ioControlCode, byte[] optionInValue, byte[] optionOutValue);
    parameters:
    - id: ioControlCode
      type: System.Net.Sockets.IOControlCode
      description: A <xref href="System.Net.Sockets.IOControlCode"></xref> value that specifies the control code of the operation to perform.
    - id: optionInValue
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the input data required by the operation.
    - id: optionOutValue
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the output data returned by the operation.
    return:
      type: System.Int32
      description: The number of bytes in the <code>optionOutValue</code> parameter.
  overload: System.Net.Sockets.Socket.IOControl*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: An attempt was made to change the blocking mode without using the <xref href="stem.Net.Sockets.Socket.Blocking%2A"></xref> property.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.IsBound
  id: IsBound
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: IsBound
  nameWithType: Socket.IsBound
  fullName: System.Net.Sockets.Socket.IsBound
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets a value that indicates whether the <xref href="System.Net.Sockets.Socket"></xref> is bound to a specific local port.
  remarks: A socket is considered bound to a local port if it is explicitly bound by calling the <xref:System.Net.Sockets.Socket.Bind%2A> method, or implicitly bound by calling members like <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, or <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, which use an ephemeral local port (a free port greater than 1024, selected by the operating system.) Servers use the <xref:System.Net.Sockets.Socket.Bind%2A> method to bind to a well-known port so that clients may connect to them.
  example:
  - "The following code example demonstrates the use of the IsBound property.  \n  \n [!code-cpp[SocketPropertyTester#1](~/add/codesnippet/cpp/p-system.net.sockets.soc_11_1.cpp)]\n [!code-cs[SocketPropertyTester#1](~/add/codesnippet/csharp/p-system.net.sockets.soc_11_1.cs)]"
  syntax:
    content: public bool IsBound { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Net.Sockets.Socket"></xref> is bound to a local port; otherwise, `false`.'
  overload: System.Net.Sockets.Socket.IsBound*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.LingerState
  id: LingerState
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: LingerState
  nameWithType: Socket.LingerState
  fullName: System.Net.Sockets.Socket.LingerState
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies whether the <xref href="System.Net.Sockets.Socket"></xref> will delay closing a socket in an attempt to send all pending data.
  remarks: "The LingerState property changes the way <xref:System.Net.Sockets.Socket.Close%2A> method behaves. This property when set modifies the conditions under which the connection can be reset by Winsock. Connection resets can still occur based on the IP protocol behavior.  \n  \n This property controls the length of time that a connection-oriented connection will remain open after a call to <xref:System.Net.Sockets.Socket.Close%2A> when data remains to be sent.  \n  \n When you call methods to send data to a peer, this data is placed in the outgoing network buffer. This property can be used to ensure that this data is sent to the remote host before the <xref:System.Net.Sockets.TcpClient.Close%2A> method drops the connection.  \n  \n To enable lingering, create a <xref:System.Net.Sockets.LingerOption> instance containing the desired values, and set the LingerState property to this instance.  \n  \n The following table describes the behavior of the <xref:System.Net.Sockets.Socket.Close%2A> method for the possible values of the <xref:System.Net.Sockets.LingerOption.Enabled%2A> property and the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the LingerState property.  \n  \n|LingerState.Enabled|LingerState.LingerTime|Behavior|  \n|-------------------------|----------------------------|--------------|  \n|`false` (disabled), the default value|The time-out is not applicable, (default).|Attempts to send pending data until the default IP protocol time-out expires.|  \n|`true` (enabled)|A nonzero time-out|Attempts to send pending data until the specified time-out expires, and if the attempt fails, then Winsock resets the connection.|  \n|`true` (enabled)|A zero timeout.|Discards any pending data. For connection-oriented socket (TCP, for example), Winsock resets the connection.|  \n  \n The IP stack computes the default IP protocol time-out period to use based on the round trip time of the connection. In most cases, the time-out computed by the stack is more relevant than one defined by an application. This is the default behavior for a socket when the LingerState property is not set.  \n  \n When the <xref:System.Net.Sockets.LingerOption.LingerTime%2A> property stored in the LingerState property is set greater than the default IP protocol time-out, the default IP protocol time-out will still apply and override."
  example:
  - "The following code example demonstrates the use of the LingerState property.  \n  \n [!code-cpp[SocketPropertyTester#1](~/add/codesnippet/cpp/p-system.net.sockets.soc_1_1.cpp)]\n [!code-cs[SocketPropertyTester#1](~/add/codesnippet/csharp/p-system.net.sockets.soc_1_1.cs)]"
  syntax:
    content: public System.Net.Sockets.LingerOption LingerState { get; set; }
    return:
      type: System.Net.Sockets.LingerOption
      description: A <xref href="System.Net.Sockets.LingerOption"></xref> that specifies how to linger while closing a socket.
  overload: System.Net.Sockets.Socket.LingerState*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Listen(System.Int32)
  id: Listen(System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Listen(Int32)
  nameWithType: Socket.Listen(Int32)
  fullName: System.Net.Sockets.Socket.Listen(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Places a <xref href="System.Net.Sockets.Socket"></xref> in a listening state.
  remarks: "Listen causes a connection-oriented <xref:System.Net.Sockets.Socket> to listen for incoming connection attempts. The `backlog` parameter specifies the number of incoming connections that can be queued for acceptance. To determine the maximum number of connections you can specify, retrieve the <xref:System.Net.Sockets.SocketOptionName> value. Listen does not block.  \n  \n If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. Use <xref:System.Net.Sockets.Socket.Accept%2A> or <xref:System.Net.Sockets.Socket.BeginAccept%2A> to accept a connection from the queue.  \n  \n> [!NOTE]\n>  You must call the <xref:System.Net.Sockets.Socket.Bind%2A> method before calling Listen, or Listen will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  The backlog parameter is limited to different values depending on the Operating System. You may specify a higher value, but the backlog will be limited based on the Operating System."
  example:
  - "The following code example uses <xref:System.Net.Sockets.Socket> to listen for incoming connections.  \n  \n [!code-cpp[Classic Socket.Listen Example#1](~/add/codesnippet/cpp/m-system.net.sockets.soc_23_1.cpp)]\n [!code-vb[Classic Socket.Listen Example#1](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_23_1.vb)]\n [!code-cs[Classic Socket.Listen Example#1](~/add/codesnippet/csharp/m-system.net.sockets.soc_23_1.cs)]"
  syntax:
    content: public void Listen (int backlog);
    parameters:
    - id: backlog
      type: System.Int32
      description: The maximum length of the pending connections queue.
  overload: System.Net.Sockets.Socket.Listen*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.LocalEndPoint
  id: LocalEndPoint
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: LocalEndPoint
  nameWithType: Socket.LocalEndPoint
  fullName: System.Net.Sockets.Socket.LocalEndPoint
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets the local endpoint.
  remarks: "The LocalEndPoint property gets an <xref:System.Net.EndPoint> that contains the local IP address and port number to which your <xref:System.Net.Sockets.Socket> is bound. You must cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint> before retrieving any information. You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=fullName> method to retrieve the local <xref:System.Net.IPAddress>, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=fullName> method to retrieve the local port number.  \n  \n The LocalEndPoint property is usually set after you make a call to the <xref:System.Net.Sockets.Socket.Bind%2A> method. If you allow the system to assign your socket's local IP address and port number, the LocalEndPoint property will be set after the first I/O operation. For connection-oriented protocols, the first I/O operation would be a call to the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method. For connectionless protocols, the first I/O operation would be any of the send or receive calls.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example retrieves and displays the local and remote endpoints.  \n  \n [!code-cs[Socket_Socket_Options#4](~/add/codesnippet/csharp/p-system.net.sockets.soc_2_1.cs)]\n [!code-cpp[Socket_Socket_Options#4](~/add/codesnippet/cpp/p-system.net.sockets.soc_2_1.cpp)]\n [!code-vb[Socket_Socket_Options#4](~/add/codesnippet/visualbasic/p-system.net.sockets.soc_2_1.vb)]"
  syntax:
    content: public System.Net.EndPoint LocalEndPoint { get; }
    return:
      type: System.Net.EndPoint
      description: The <xref href="System.Net.EndPoint"></xref> that the <xref href="System.Net.Sockets.Socket"></xref> is using for communications.
  overload: System.Net.Sockets.Socket.LocalEndPoint*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.MulticastLoopback
  id: MulticastLoopback
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: MulticastLoopback
  nameWithType: Socket.MulticastLoopback
  fullName: System.Net.Sockets.Socket.MulticastLoopback
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies whether outgoing multicast packets are delivered to the sending application.
  remarks: "Multicast is a scalable method for many-to-many communication on the Internet. A process subscribes to a multicast address; then, any packets sent by a subscribed process are received by every other process subscribed to the multicast address.  \n  \n Setting this property on a Transmission Control Protocol (TCP) socket will have no effect."
  example:
  - "The following code example demonstrates the use of the MulticastLoopback property.  \n  \n [!code-cpp[SocketPropertyTester#2](~/add/codesnippet/cpp/p-system.net.sockets.soc_4_1.cpp)]\n [!code-cs[SocketPropertyTester#2](~/add/codesnippet/csharp/p-system.net.sockets.soc_4_1.cs)]"
  syntax:
    content: public bool MulticastLoopback { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Net.Sockets.Socket"></xref> receives outgoing multicast packets; otherwise, `false`.'
  overload: System.Net.Sockets.Socket.MulticastLoopback*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.NoDelay
  id: NoDelay
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: NoDelay
  nameWithType: Socket.NoDelay
  fullName: System.Net.Sockets.Socket.NoDelay
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a <xref href="System.Boolean"></xref> value that specifies whether the stream <xref href="System.Net.Sockets.Socket"></xref> is using the Nagle algorithm.
  remarks: "The Nagle algorithm is designed to reduce network traffic by causing the socket to buffer small packets and then combine and send them in one packet under certain circumstances. A TCP packet consists of 40 bytes of header plus the data being sent. When small packets of data are sent with TCP, the overhead resulting from the TCP header can become a significant part of the network traffic.On heavily loaded networks, the congestion resulting from this overhead can result in lost datagrams and retransmissions, as well as excessive propagation time caused by congestion. The Nagle algorithm inhibits the sending of new TCP segmentswhen new outgoing data arrives from the user if any previouslytransmitted data on the connection remains unacknowledged.  \n  \n The majority of network applications should use the Nagle algorithm.  \n  \n Setting this property on a User Datagram Protocol (UDP) socket will have no effect."
  example:
  - "The following code example demonstrates the use of the NoDelay property.  \n  \n [!code-cpp[SocketPropertyTester#1](~/add/codesnippet/cpp/p-system.net.sockets.soc_18_1.cpp)]\n [!code-cs[SocketPropertyTester#1](~/add/codesnippet/csharp/p-system.net.sockets.soc_18_1.cs)]"
  syntax:
    content: public bool NoDelay { get; set; }
    return:
      type: System.Boolean
      description: '`false` if the <xref href="System.Net.Sockets.Socket"></xref> uses the Nagle algorithm; otherwise, `true`. The default is `false`.'
  overload: System.Net.Sockets.Socket.NoDelay*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the <xref href="System.Net.Sockets.Socket"></xref>. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.OSSupportsIPv4
  id: OSSupportsIPv4
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: OSSupportsIPv4
  nameWithType: Socket.OSSupportsIPv4
  fullName: System.Net.Sockets.Socket.OSSupportsIPv4
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Indicates whether the underlying operating system and network adaptors support Internet Protocol version 4 (IPv4).
  remarks: The operating system may support both IPv4 and IPv6 protocols.
  syntax:
    content: public static bool OSSupportsIPv4 { get; }
    return:
      type: System.Boolean
      description: '`true` if the operating system and network adaptors support the IPv4 protocol; otherwise, `false`.'
  overload: System.Net.Sockets.Socket.OSSupportsIPv4*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.OSSupportsIPv6
  id: OSSupportsIPv6
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: OSSupportsIPv6
  nameWithType: Socket.OSSupportsIPv6
  fullName: System.Net.Sockets.Socket.OSSupportsIPv6
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Indicates whether the underlying operating system and network adaptors support Internet Protocol version 6 (IPv6).
  remarks: The operating system may support both IPv4 and IPv6 protocols.
  syntax:
    content: public static bool OSSupportsIPv6 { get; }
    return:
      type: System.Boolean
      description: '`true` if the operating system and network adaptors support the IPv6 protocol; otherwise, `false`.'
  overload: System.Net.Sockets.Socket.OSSupportsIPv6*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
  id: Poll(System.Int32,System.Net.Sockets.SelectMode)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Poll(Int32,SelectMode)
  nameWithType: Socket.Poll(Int32,SelectMode)
  fullName: System.Net.Sockets.Socket.Poll(Int32,SelectMode)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Determines the status of the <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: "The Poll method will check the state of the <xref:System.Net.Sockets.Socket>. Specify <xref:System.Net.Sockets.SelectMode?displayProperty=fullName> for the `selectMode` parameter to determine if the <xref:System.Net.Sockets.Socket> is readable. Specify <xref:System.Net.Sockets.SelectMode?displayProperty=fullName> to determine if the <xref:System.Net.Sockets.Socket> is writable. Use <xref:System.Net.Sockets.SelectMode?displayProperty=fullName> to detect an error condition. Poll will block execution until the specified time period, measured in `microseconds`, elapses. Set the `microSeconds` parameter to a negative integer if you would like to wait indefinitely for a response. If you want to check the status of multiple sockets, you might prefer to use the <xref:System.Net.Sockets.Socket.Select%2A> method.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This method cannot detect certain kinds of connection problems, such as a broken network cable, or that the remote host was shut down ungracefully. You must attempt to send or receive data to detect these kinds of errors.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example creates a socket, connects to a server, and uses Poll to check the status of the socket.  \n  \n [!code-cs[SelectModeExample#1](~/add/codesnippet/csharp/m-system.net.sockets.soc_1_1.cs)]\n [!code-cpp[SelectModeExample#1](~/add/codesnippet/cpp/m-system.net.sockets.soc_1_1.cpp)]\n [!code-vb[SelectModeExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_1_1.vb)]"
  syntax:
    content: public bool Poll (int microSeconds, System.Net.Sockets.SelectMode mode);
    parameters:
    - id: microSeconds
      type: System.Int32
      description: The time to wait for a response, in microseconds.
    - id: mode
      type: System.Net.Sockets.SelectMode
      description: One of the <xref href="System.Net.Sockets.SelectMode"></xref> values.
    return:
      type: System.Boolean
      description: "The status of the <xref href=\"System.Net.Sockets.Socket\"></xref> based on the polling mode value passed in the <code>mode</code> parameter.  \n  \n <table><thead><tr><th> Mode  \n  \n </th><th> Return Value  \n  \n </th></tr></thead><tbody><tr><td><xref href=\"System.Net.Sockets.SelectMode\"></xref></td><td>`true` if <xref href=\"stem.Net.Sockets.Socket.Listen%2A\"></xref> has been called and a connection is pending;  \n  \n -or-  \n  \n `true` if data is available for reading;  \n  \n -or-  \n  \n `true` if the connection has been closed, reset, or terminated;  \n  \n otherwise, returns `false`.  \n  \n </td></tr><tr><td><xref href=\"System.Net.Sockets.SelectMode\"></xref></td><td>`true`, if processing a <xref href=\"stem.Net.Sockets.Socket.Connect%2A\"></xref>, and the connection has succeeded;  \n  \n -or-  \n  \n `true` if data can be sent;  \n  \n otherwise, returns `false`.  \n  \n </td></tr><tr><td><xref href=\"System.Net.Sockets.SelectMode\"></xref></td><td>`true` if processing a <xref href=\"stem.Net.Sockets.Socket.Connect%2A\"></xref> that does not block, and the connection has failed;  \n  \n -or-  \n  \n `true` if <xref href=\"System.Net.Sockets.SocketOptionName\"></xref> is not set and out-of-band data is available;  \n  \n otherwise, returns `false`.  \n  \n </td></tr></tbody></table>"
  overload: System.Net.Sockets.Socket.Poll*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <code>mode</code> parameter is not one of the <xref href="System.Net.Sockets.SelectMode"></xref> values.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See remarks below.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.ProtocolType
  id: ProtocolType
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ProtocolType
  nameWithType: Socket.ProtocolType
  fullName: System.Net.Sockets.Socket.ProtocolType
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets the protocol type of the <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: The ProtocolType property is set when the <xref:System.Net.Sockets.Socket> is created, and specifies the protocol used by that <xref:System.Net.Sockets.Socket>.
  example:
  - "The following code example displays the <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, and <xref:System.Net.Sockets.ProtocolType> to the console.  \n  \n [!code-cs[Socket_Socket_Options#3](~/add/codesnippet/csharp/p-system.net.sockets.soc_5_1.cs)]\n [!code-cpp[Socket_Socket_Options#3](~/add/codesnippet/cpp/p-system.net.sockets.soc_5_1.cpp)]\n [!code-vb[Socket_Socket_Options#3](~/add/codesnippet/visualbasic/p-system.net.sockets.soc_5_1.vb)]"
  syntax:
    content: public System.Net.Sockets.ProtocolType ProtocolType { get; }
    return:
      type: System.Net.Sockets.ProtocolType
      description: One of the <xref href="System.Net.Sockets.ProtocolType"></xref> values.
  overload: System.Net.Sockets.Socket.ProtocolType*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Receive(System.Byte[])
  id: Receive(System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(Byte[])
  nameWithType: Socket.Receive(Byte[])
  fullName: System.Net.Sockets.Socket.Receive(Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives data from a bound <xref href="System.Net.Sockets.Socket"></xref> into a receive buffer.
  remarks: "The Receive method reads data into the buffer parameter and returns the number of bytes successfully read. You can call Receive from both connection-oriented and connectionless sockets.  \n  \n This overload only requires you to provide a receive buffer. The buffer offset defaults to 0, the size defaults to the length of the buffer parameter, and the <xref:System.Net.Sockets.SocketFlags> value defaults to <xref:System.Net.Sockets.SocketFlags>.  \n  \n If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling Receive. The Receive method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method. If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method. <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.  \n  \n If no data is available for reading, the Receive method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=fullName>. If the time-out value was exceeded, the Receive call will throw a <xref:System.Net.Sockets.SocketException>. If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the Receive method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>. You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading. When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.  \n  \n If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the Receive method will read as much data as is available, up to the size of the buffer. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the Receive method will complete immediately and return zero bytes.  \n  \n If you are using a connectionless <xref:System.Net.Sockets.Socket>, Receive will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method. If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example receives data on a connected <xref:System.Net.Sockets.Socket>.  \n  \n [!code-vb[Socket_Sync_Send_Receive#1](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_12_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#1](~/add/codesnippet/csharp/m-system.net.sockets.soc_12_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#1](~/add/codesnippet/cpp/m-system.net.sockets.soc_12_1.cpp)]"
  syntax:
    content: public int Receive (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for the received data.
    return:
      type: System.Int32
      description: The number of bytes received.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  id: Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(IList<ArraySegment<Byte>>)
  nameWithType: Socket.Receive(IList<ArraySegment<Byte>>)
  fullName: System.Net.Sockets.Socket.Receive(IList<ArraySegment<Byte>>)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives data from a bound <xref href="System.Net.Sockets.Socket"></xref> into the list of receive buffers.
  remarks: "This method reads data into the buffers parameter and returns the number of bytes successfully read. You can call from both connection-oriented and connectionless sockets.  \n  \n This overload requires you to provide one or more receive buffers.  \n  \n If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling Receive. The Receive method will only read data that arrives from the remote host connection established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method. If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method. <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.  \n  \n If no data is available for reading, the Receive method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=fullName>. If the time-out value was exceeded, the Receive call will throw a <xref:System.Net.Sockets.SocketException>. If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the Receive method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>. You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading. When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.  \n  \n If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the Receive method will read as much data as is available, up to the size of the buffer. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the Receive method will complete immediately and return zero bytes.  \n  \n If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first enqueued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method. If the datagram you receive is larger than the size of the `buffers` parameter, `buffers` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n **Note** This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public int Receive (System.Collections.Generic.IList<ArraySegment<byte>> buffers);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: A list of <xref href="stem.ArraySegment%601"></xref>s of type <xref href="System.Byte"></xref> that contains the received data.
    return:
      type: System.Int32
      description: The number of bytes received.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>buffer</code> parameter is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred while attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)
  id: Receive(System.Byte[],System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(Byte[],SocketFlags)
  nameWithType: Socket.Receive(Byte[],SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives data from a bound <xref href="System.Net.Sockets.Socket"></xref> into a receive buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  remarks: "The Receive method reads data into the buffer parameter and returns the number of bytes successfully read. You can call Receive from both connection-oriented and connectionless sockets.  \n  \n This overload only requires you to provide a receive buffer and the necessary <xref:System.Net.Sockets.SocketFlags>. The buffer offset defaults to 0, and the size defaults to the length of the byte parameter.  \n  \n If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling Receive. The Receive method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method. If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method. <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.  \n  \n If no data is available for reading, the Receive method will block until data is available. If you are in non-blocking mode, and there is no data available in the protocol stack buffer, the Receivemethod will complete immediately and throw a <xref:System.Net.Sockets.SocketException>. You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading. When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry your receive operation.  \n  \n If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the Receive method will read as much data as is available up to the size of the buffer. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the Receive method will complete immediately and return zero bytes.  \n  \n If you are using a connectionless <xref:System.Net.Sockets.Socket>, Receive will read the first enqueued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method. If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example specifies a data buffer, and <xref:System.Net.Sockets.SocketFlags> for receiving data on a connected <xref:System.Net.Sockets.Socket>.  \n  \n [!code-vb[Socket_Sync_Send_Receive#2](~/add/codesnippet/visualbasic/33eda0ad-9ecd-4628-813d-_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#2](~/add/codesnippet/csharp/33eda0ad-9ecd-4628-813d-_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#2](~/add/codesnippet/cpp/33eda0ad-9ecd-4628-813d-_1.cpp)]"
  syntax:
    content: public int Receive (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for the received data.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    return:
      type: System.Int32
      description: The number of bytes received.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  id: Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(IList<ArraySegment<Byte>>,SocketFlags)
  nameWithType: Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives data from a bound <xref href="System.Net.Sockets.Socket"></xref> into the list of receive buffers, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  remarks: "This method reads data into the `buffers` parameter and returns the number of bytes successfully read. You can call from both connection-oriented and connectionless sockets.  \n  \n This overload requires you to provide one or more receive buffers. The <xref:System.Net.Sockets.SocketFlags> value defaults to <xref:System.Net.Sockets.SocketFlags>.  \n  \n If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling Receive. The Receive method will only read data that arrives from the remote host connection established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method. If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method. <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.  \n  \n If no data is available for reading, the Receive method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=fullName>. If the time-out value was exceeded, the Receive call throws a <xref:System.Net.Sockets.SocketException>. If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the Receive method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>. You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading. When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.  \n  \n If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the Receive method will read as much data as is available, up to the size of the buffer. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the Receive method will complete immediately and return zero bytes.  \n  \n If you are using a connectionless <xref:System.Net.Sockets.Socket>, Receive will read the first enqueued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method. If the datagram you receive is larger than the size of the `buffers` parameter, `buffers` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example demonstrates how to receive data on a connected <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cs[System.Net.Sockets.Socketgenerics#2](~/add/codesnippet/csharp/4c7ffd5f-9776-4ce5-af99-_1.cs)]\n [!code-cpp[System.Net.Sockets.Socketgenerics#2](~/add/codesnippet/cpp/4c7ffd5f-9776-4ce5-af99-_1.cpp)]"
  syntax:
    content: public int Receive (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: A list of <xref href="stem.ArraySegment%601"></xref>s of type <xref href="System.Byte"></xref> that contains the received data.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    return:
      type: System.Int32
      description: The number of bytes received.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffers</code> is `null`.  \n  \n -or-  \n  \n <code>buffers</code>.Count is zero."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred while attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  id: Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(Byte[],Int32,SocketFlags)
  nameWithType: Socket.Receive(Byte[],Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],Int32,SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives the specified number of bytes of data from a bound <xref href="System.Net.Sockets.Socket"></xref> into a receive buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  remarks: "The Receive method reads data into the `buffer` parameter and returns the number of bytes successfully read. You can call Receive from both connection-oriented and connectionless sockets.  \n  \n This overload only requires you to provide a receive buffer, the number of bytes you want to receive, and the necessary <xref:System.Net.Sockets.SocketFlags>.  \n  \n If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling Receive. The Receive method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method. If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method. <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.  \n  \n If no data is available for reading, the Receive method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=fullName>. If the time-out value was exceeded, the Receive call will throw a <xref:System.Net.Sockets.SocketException>. If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, The Receive method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>. You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading. When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry your receive operation.  \n  \n If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the Receive method will read as much data as is available, up to the number of bytes specified by the `size` parameter. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the Receive method will complete immediately and return zero bytes.  \n  \n If you are using a connectionless <xref:System.Net.Sockets.Socket>, Receive will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method. If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following receives the data found into `buffer`, and specifies <xref:System.Net.Sockets.SocketFlags> for <xref:System.Net.Sockets.SocketFlags>.  \n  \n [!code-vb[Socket_Send_Recieve#4](~/add/codesnippet/visualbasic/4bfbd419-a8c3-4108-9f1a-_1.vb)]\n [!code-cpp[Socket_Send_Recieve#4](~/add/codesnippet/cpp/4bfbd419-a8c3-4108-9f1a-_1.cpp)]\n [!code-cs[Socket_Send_Recieve#4](~/add/codesnippet/csharp/4bfbd419-a8c3-4108-9f1a-_1.cs)]"
  syntax:
    content: public int Receive (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for the received data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    return:
      type: System.Int32
      description: The number of bytes received.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>size</code> exceeds the size of <code>buffer</code>.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  nameWithType: Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives data from a bound <xref href="System.Net.Sockets.Socket"></xref> into the list of receive buffers, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  remarks: "This method reads data into the `buffers` parameter and returns the number of bytes successfully read. You can call from both connection-oriented and connectionless sockets.  \n  \n This overload requires you to provide one or more receive buffers. The <xref:System.Net.Sockets.SocketFlags> value defaults to <xref:System.Net.Sockets.SocketFlags>.  \n  \n If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling Receive. The Receive method will only read data that arrives from the remote host connection established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method. If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method. <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.  \n  \n If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=fullName>. If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call throws a <xref:System.Net.Sockets.SocketException>. If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the Receive method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>. You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading. When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.  \n  \n If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the Receive method will read as much data as is available, up to the size of the buffer. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the Receive method will complete immediately and return zero bytes.  \n  \n If you are using a connectionless <xref:System.Net.Sockets.Socket>,Receive will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method. If the datagram you receive is larger than the size of the `buffers` parameter, `buffers` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public int Receive (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: A list of <xref href="stem.ArraySegment%601"></xref>s of type <xref href="System.Byte"></xref> that contains the received data.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: A <xref href="System.Net.Sockets.SocketError"></xref> object that stores the socket error.
    return:
      type: System.Int32
      description: The number of bytes received.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffers</code> is `null`.  \n  \n -or-  \n  \n <code>buffers</code>.Count is zero."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred while attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  id: Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(Byte[],Int32,Int32,SocketFlags)
  nameWithType: Socket.Receive(Byte[],Int32,Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],Int32,Int32,SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives the specified number of bytes from a bound <xref href="System.Net.Sockets.Socket"></xref> into the specified offset position of the receive buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  remarks: "The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read. You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.  \n  \n If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>. The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method. If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method. <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.  \n  \n If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=fullName>. If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>. If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>. An error occurred when attempting to access the socket. See Remarks below. You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading. When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.  \n  \n If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the number of bytes specified by the size parameter. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.  \n  \n If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method. If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example specifies a data buffer, an offset, a size, and a socket flag before receiving data on a connected <xref:System.Net.Sockets.Socket>.  \n  \n [!code-vb[Socket_Sync_Send_Receive#4](~/add/codesnippet/visualbasic/0c98c479-ce9a-4c5f-b64d-_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#4](~/add/codesnippet/csharp/0c98c479-ce9a-4c5f-b64d-_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#4](~/add/codesnippet/cpp/0c98c479-ce9a-4c5f-b64d-_1.cpp)]"
  syntax:
    content: public int Receive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for received data.
    - id: offset
      type: System.Int32
      description: The location in <code>buffer</code> to store the received data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    return:
      type: System.Int32
      description: The number of bytes received.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n -or-  \n  \n <code>size</code> is less than 0.  \n  \n -or-  \n  \n <code>size</code> is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "<code>socketFlags</code> is not a valid combination of values.  \n  \n -or-  \n  \n The <xref href=\"stem.Net.Sockets.Socket.LocalEndPoint%2A\"></xref> property was not set.  \n  \n -or-  \n  \n An operating system error occurs while accessing the <xref href=\"System.Net.Sockets.Socket\"></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Receive(Byte[],Int32,Int32,SocketFlags,SocketError)
  nameWithType: Socket.Receive(Byte[],Int32,Int32,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],Int32,Int32,SocketFlags,SocketError)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives data from a bound <xref href="System.Net.Sockets.Socket"></xref> into a receive buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  remarks: "The <xref:System.Net.Sockets.Socket.Receive%2A> method reads data into the buffer parameter and returns the number of bytes successfully read. You can call <xref:System.Net.Sockets.Socket.Receive%2A> from both connection-oriented and connectionless sockets.  \n  \n If you are using a connection-oriented protocol, you must either call <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection prior to calling <xref:System.Net.Sockets.Socket.Receive%2A>The <xref:System.Net.Sockets.Socket.Receive%2A> method will only read data that arrives from the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method. If you are using a connectionless protocol, you can also use the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method. <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will allow you to receive data arriving from any host.  \n  \n If no data is available for reading, the <xref:System.Net.Sockets.Socket.Receive%2A> method will block until data is available, unless a time-out value was set by using <xref:System.Net.Sockets.Socket.ReceiveTimeout%2A?displayProperty=fullName>. If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> call will throw a <xref:System.Net.Sockets.SocketException>. If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>. An error occurred when attempting to access the socket. See Remarks below. You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading. When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.  \n  \n If you are using a connection-oriented <xref:System.Net.Sockets.Socket>, the <xref:System.Net.Sockets.Socket.Receive%2A> method will read as much data as is available, up to the number of bytes specified by the size parameter. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.Receive%2A> method will complete immediately and return zero bytes.  \n  \n If you are using a connectionless <xref:System.Net.Sockets.Socket>, <xref:System.Net.Sockets.Socket.Receive%2A> will read the first queued datagram from the destination address you specify in the <xref:System.Net.Sockets.Socket.Connect%2A> method. If the datagram you receive is larger than the size of the `buffer` parameter, `buffer` gets filled with the first part of the message, the excess data is lost and a <xref:System.Net.Sockets.SocketException> is thrown.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public int Receive (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for the received data.
    - id: offset
      type: System.Int32
      description: The position in the <code>buffer</code> parameter to store the received data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: A <xref href="System.Net.Sockets.SocketError"></xref> object that stores the socket error.
    return:
      type: System.Int32
      description: The number of bytes received.
  overload: System.Net.Sockets.Socket.Receive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n -or-  \n  \n <code>size</code> is less than 0.  \n  \n -or-  \n  \n <code>size</code> is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "<code>socketFlags</code> is not a valid combination of values.  \n  \n -or-  \n  \n The <xref href=\"stem.Net.Sockets.Socket.LocalEndPoint%2A\"></xref> property is not set.  \n  \n -or-  \n  \n An operating system error occurs while accessing the <xref href=\"System.Net.Sockets.Socket\"></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ReceiveAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request to receive data from a connected <xref href="System.Net.Sockets.Socket"></xref> object.
  remarks: "The ReceiveAsync method is used on connected sockets or bound connectionless sockets and is used to read incoming data. The socket's local address must be known.  \n  \n For bound connectionless sockets, this function restricts the addresses from which received messages are accepted. The function only returns messages from the remote address specified in the connection. Messages from other addresses are silently discarded.  \n  \n The <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=fullName> property on the `e` parameter provides the Window Sockets service provider with additional information about the read request. For more information about how to use this parameter, see <xref:System.Net.Sockets.SocketFlags?displayProperty=fullName>.  \n  \n The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=fullName> object are required to successfully call this method:  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=fullName> or <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=fullName> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=fullName> is set  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=fullName> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=fullName> is set  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName>  \n  \n The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=fullName> property to any user state object desired before calling the ReceiveAsync method, so that the information will be retrievable in the callback method. If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.  \n  \n For byte stream-style sockets, incoming data is placed into the buffer until the buffer is filled, the connection is closed, or the internally buffered data is exhausted.  \n  \n For message-oriented sockets, an incoming message is placed into the buffer up to the total size of the buffer associated with the `e` parameter. If the message is larger than the buffer, the buffer is filled with the first part of the message.  \n  \n For connection-oriented sockets, the ReceiveAsync method can indicate the graceful termination of the virtual circuit in one of two ways that depend on whether the socket is byte stream or message oriented. For byte streams, zero bytes having been read indicates graceful closure and that no more bytes will ever be read. For message-oriented sockets, where a zero byte message is often allowable, a <xref:System.Net.Sockets.SocketException> with the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=fullName> set to the native Winsock WSAEDISCON error code (10101) is used to indicate graceful closure. In any case, a <xref:System.Net.Sockets.SocketException> with the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=fullName> set to the native Winsock WSAECONNRESET error code (10054) indicates an abortive close has occurred."
  syntax:
    content: public bool ReceiveAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: "Returns `true` if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will be raised upon completion of the operation.  \n  \n Returns `false` if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will not be raised and the <code>e</code> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation."
  overload: System.Net.Sockets.Socket.ReceiveAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An argument was invalid. The <xref href="stem.Net.Sockets.SocketAsyncEventArgs.Buffer%2A"></xref> or <xref href="stem.Net.Sockets.SocketAsyncEventArgs.BufferList%2A"></xref> properties on the <code>e</code> parameter must reference valid buffers. One or the other of these properties may be set, but not both at the same time.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: A socket operation was already in progress using the <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object specified in the <code>e</code> parameter.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows XP or later is required for this method.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.ReceiveBufferSize
  id: ReceiveBufferSize
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveBufferSize
  nameWithType: Socket.ReceiveBufferSize
  fullName: System.Net.Sockets.Socket.ReceiveBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies the size of the receive buffer of the <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: A larger buffer size potentially reduces the number of empty acknowledgements (TCP packets with no data portion), but might also delay the recognition of connection difficulties. Consider increasing the buffer size if you are transferring large files, or you are using a high bandwidth, high latency connection (such as a satellite broadband provider.)
  example:
  - "The following code example demonstrates the use of the ReceiveBufferSize property.  \n  \n [!code-cpp[SocketPropertyTester#1](~/add/codesnippet/cpp/p-system.net.sockets.soc_3_1.cpp)]\n [!code-cs[SocketPropertyTester#1](~/add/codesnippet/csharp/p-system.net.sockets.soc_3_1.cs)]"
  syntax:
    content: public int ReceiveBufferSize { get; set; }
    return:
      type: System.Int32
      description: An <xref href="System.Int32"></xref> that contains the size, in bytes, of the receive buffer. The default is 8192.
  overload: System.Net.Sockets.Socket.ReceiveBufferSize*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value specified for a set operation is less than 0.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveFrom(Byte[],EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives a datagram into the data buffer and stores the endpoint.
  remarks: "The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent. This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.  \n  \n This overload only requires you to provide a receive `buffer`, and an <xref:System.Net.EndPoint> that represents the remote host. The buffer offset defaults to 0. The size defaults to the length of the `buffer` parameter and the `socketFlags` value defaults to <xref:System.Net.Sockets.SocketFlags>.  \n  \n> [!NOTE]\n>  Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method. If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer. If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>. If you are using an unreliable protocol, the excess data will be lost. If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.  \n  \n If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available. If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>. You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading. When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.  \n  \n Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well. If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method. If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>. You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method. In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.  \n  \n With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the size of `buffer`. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example receives a connectionless datagram from a remote host.  \n  \n [!code-vb[Socket_Sync_Send_Receive#9](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_15_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#9](~/add/codesnippet/csharp/m-system.net.sockets.soc_15_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#9](~/add/codesnippet/cpp/m-system.net.sockets.soc_15_1.cpp)]"
  syntax:
    content: public int ReceiveFrom (byte[] buffer, ref System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for received data.
    - id: remoteEP
      type: System.Net.EndPoint
      description: An <xref href="System.Net.EndPoint"></xref>, passed by reference, that represents the remote server.
    return:
      type: System.Int32
      description: The number of bytes received.
  overload: System.Net.Sockets.Socket.ReceiveFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is `null`.  \n  \n -or-  \n  \n <code>remoteEP</code> is `null`."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveFrom(Byte[],SocketFlags,EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],SocketFlags,EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives a datagram into the data buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>, and stores the endpoint.
  remarks: "The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent. This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.  \n  \n This overload only requires you to provide a receive buffer, the necessary <xref:System.Net.Sockets.SocketFlags>, and an <xref:System.Net.EndPoint> that represents the remote host. The offset defaults to 0 and the size defaults to the length of the buffer parameter.  \n  \n> [!NOTE]\n>  Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method. If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer. If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>. If you are using an unreliable protocol, the excess data will be lost. If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.  \n  \n If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available. If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>. You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading. When<xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.  \n  \n Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well. If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method. If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>. You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method. In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.  \n  \n With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the size of `buffer`. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been Received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example receives a connectionless datagram from a remote host. <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.  \n  \n [!code-vb[Socket_Sync_Send_Receive#10](~/add/codesnippet/visualbasic/c6469302-2575-4cad-b468-_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#10](~/add/codesnippet/csharp/c6469302-2575-4cad-b468-_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#10](~/add/codesnippet/cpp/c6469302-2575-4cad-b468-_1.cpp)]"
  syntax:
    content: public int ReceiveFrom (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for the received data.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: An <xref href="System.Net.EndPoint"></xref>, passed by reference, that represents the remote server.
    return:
      type: System.Int32
      description: The number of bytes received.
  overload: System.Net.Sockets.Socket.ReceiveFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is `null`.  \n  \n -or-  \n  \n <code>remoteEP</code> is `null`."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveFrom(Byte[],Int32,SocketFlags,EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],Int32,SocketFlags,EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives the specified number of bytes into the data buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>, and stores the endpoint.
  remarks: "The <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent. This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.  \n  \n This overload only requires you to provide a receive buffer, the number of bytes you want to receive, the necessary <xref:System.Net.Sockets.SocketFlags>, and an <xref:System.Net.EndPoint> that represents the remote host. The buffer offset defaults to 0.  \n  \n With connectionless protocols, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read the first enqueued datagram received into the local network buffer. If the datagram you receive is larger than the size of `buffer`, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>. If you are using an unreliable protocol, the excess data will be lost. If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method with a large enough buffer.  \n  \n If no data is available for reading, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will block until data is available. If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>. You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading. When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.  \n  \n Although <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> is intended for connectionless protocols, you can use a connection-oriented protocol as well. If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method. If you do not establish or accept a connection before calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method, you will get a <xref:System.Net.Sockets.SocketException>. You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method. In either of these cases, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.  \n  \n With connection-oriented sockets, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will read as much data as is available up to the number of bytes specified by the `size` parameter. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been received, the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method will complete immediately and return zero bytes.  \n  \n> [!NOTE]\n>  Before calling <xref:System.Net.Sockets.Socket.ReceiveFrom%2A>, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method. If you do not, <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example receives a connectionless datagram from a remote host. The buffer size, and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> method.  \n  \n [!code-vb[Socket_Sync_Send_Receive#11](~/add/codesnippet/visualbasic/96aa8bb0-6e18-4e9c-99c5-_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#11](~/add/codesnippet/csharp/96aa8bb0-6e18-4e9c-99c5-_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#11](~/add/codesnippet/cpp/96aa8bb0-6e18-4e9c-99c5-_1.cpp)]"
  syntax:
    content: public int ReceiveFrom (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for received data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: An <xref href="System.Net.EndPoint"></xref>, passed by reference, that represents the remote server.
    return:
      type: System.Int32
      description: The number of bytes received.
  overload: System.Net.Sockets.Socket.ReceiveFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is `null`.  \n  \n -or-  \n  \n <code>remoteEP</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>size</code> is less than 0.  \n  \n -or-  \n  \n <code>size</code> is greater than the length of <code>buffer</code>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "<code>socketFlags</code> is not a valid combination of values.  \n  \n -or-  \n  \n The <xref href=\"stem.Net.Sockets.Socket.LocalEndPoint%2A\"></xref> property was not set.  \n  \n -or-  \n  \n An operating system error occurs while accessing the <xref href=\"System.Net.Sockets.Socket\"></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>, and stores the endpoint.
  remarks: "The ReceiveFrom method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent. This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts.  \n  \n With connectionless protocols, ReceiveFrom will read the first enqueued datagram received into the local network buffer. If the datagram you receive is larger than the size of `buffer`, the ReceiveFrom method will fill `buffer` with as much of the message as is possible, and throw a <xref:System.Net.Sockets.SocketException>. If you are using an unreliable protocol, the excess data will be lost. If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the ReceiveFrom method with a large enough buffer.  \n  \n If no data is available for reading, the ReceiveFrom method will block until data is available. If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the ReceiveFrom method will complete immediately and throw a <xref:System.Net.Sockets.SocketException>. You can use the <xref:System.Net.Sockets.Socket.Available%2A> property to determine if data is available for reading. When <xref:System.Net.Sockets.Socket.Available%2A> is non-zero, retry the receive operation.  \n  \n Although ReceiveFrom is intended for connectionless protocols, you can use a connection-oriented protocol as well. If you choose to do so, you must first either establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming remote host connection by calling the <xref:System.Net.Sockets.Socket.Accept%2A> method. If you do not establish or accept a connection before calling the ReceiveFrom method, you will get a <xref:System.Net.Sockets.SocketException>. You can also establish a default remote host for a connectionless protocol prior to calling the ReceiveFrom method. In either of these cases, the ReceiveFrom method will ignore the `remoteEP` parameter and only receive data from the connected or default remote host.  \n  \n With connection-oriented sockets, ReceiveFrom will read as much data as is available up to the amount of bytes specified by the `size` parameter. If the remote host shuts down the <xref:System.Net.Sockets.Socket> connection with the <xref:System.Net.Sockets.Socket.Shutdown%2A> method, and all available data has been Received, the ReceiveFrom method will complete immediately and return zero bytes.  \n  \n> [!NOTE]\n>  Before calling ReceiveFrom, you must explicitly bind the <xref:System.Net.Sockets.Socket> to a local endpoint using the <xref:System.Net.Sockets.Socket.Bind%2A> method. If you do not, ReceiveFrom will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the<xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example receives a connectionless datagram from a remote host. The offset, buffer size, and <xref:System.Net.Sockets.SocketFlags> are passed to the ReceiveFrom method.  \n  \n [!code-vb[Socket_Sync_Send_Receive#12](~/add/codesnippet/visualbasic/f267d63b-f441-426f-895a-_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#12](~/add/codesnippet/csharp/f267d63b-f441-426f-895a-_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#12](~/add/codesnippet/cpp/f267d63b-f441-426f-895a-_1.cpp)]"
  syntax:
    content: public int ReceiveFrom (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for received data.
    - id: offset
      type: System.Int32
      description: The position in the <code>buffer</code> parameter to store the received data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: An <xref href="System.Net.EndPoint"></xref>, passed by reference, that represents the remote server.
    return:
      type: System.Int32
      description: The number of bytes received.
  overload: System.Net.Sockets.Socket.ReceiveFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is `null`.  \n  \n -or-  \n  \n <code>remoteEP</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n -or-  \n  \n <code>size</code> is less than 0.  \n  \n -or-  \n  \n <code>size</code> is greater than the length of the <code>buffer</code> minus the value of the offset parameter."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "<code>socketFlags</code> is not a valid combination of values.  \n  \n -or-  \n  \n The <xref href=\"stem.Net.Sockets.Socket.LocalEndPoint%2A\"></xref> property was not set.  \n  \n -or-  \n  \n An error occurred when attempting to access the socket. See the Remarks section for more information."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveFromAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ReceiveFromAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveFromAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive data from a specified network device.
  remarks: "The ReceiveFromAsync method is used primarily to receive data on a connectionless socket. The socket's local address must be known.  \n  \n The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=fullName> property to the <xref:System.Net.IPEndPoint> of the remote host from which the data is to be received.  \n  \n The <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=fullName> property on the `e` parameter provides the Window Sockets service provider with additional information about the read request. For more information about how to use this parameter, see <xref:System.Net.Sockets.SocketFlags?displayProperty=fullName>.  \n  \n The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=fullName> object are required to successfully call this method:  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName>  \n  \n The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=fullName> property to any user state object desired before calling the ReceiveFromAsync method, so that the information will be retrievable in the callback method. If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.  \n  \n For message-oriented sockets, an incoming message is placed into the buffer up to the total size of the buffer. The <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=fullName> and <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=fullName> properties determine where in the buffer the data is placed and the amount of data.  \n  \n For byte stream–style sockets, incoming data is placed into the buffer until the buffer is filled, the connection is closed, or the internally buffered data is exhausted. The <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=fullName> and <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=fullName> properties determine where in the buffer the data is placed and the amount of data."
  syntax:
    content: public bool ReceiveFromAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: "Returns `true` if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will be raised upon completion of the operation.  \n  \n Returns `false` if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will not be raised and the <code>e</code> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation."
  overload: System.Net.Sockets.Socket.ReceiveFromAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <xref href="stem.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A"></xref> cannot be null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: A socket operation was already in progress using the <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object specified in the <code>e</code> parameter.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows XP or later is required for this method.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  id: ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,IPPacketInformation)
  nameWithType: Socket.ReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,IPPacketInformation)
  fullName: System.Net.Sockets.Socket.ReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,IPPacketInformation)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>, and stores the endpoint and packet information.
  remarks: "The ReceiveMessageFrom method reads data into the `buffer` parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent, as well as information about the received packet.  \n  \n The ReceiveMessageFrom method is used primarily to receive message data on a connectionless socket. The socket's local address must be known. This method can only be used with datagram and raw sockets. The socket must be initialized with the socket type set to <xref:System.Net.Sockets.SocketType> or <xref:System.Net.Sockets.SocketType> before calling this method. This can be done when the socket is constructed using <xref:System.Net.Sockets.Socket.%23ctor%2A>.  \n  \n For message-oriented sockets, an incoming message is placed into the `buffer` parameter up to the total size specified in the `size` parameter. The `offset` parameter determines where in the `buffer` the data is placed. The actual amount of data placed into the `buffer` is returned by the ReceiveMessageFrom method.  \n  \n The ReceiveMessageFrom method automatically method sets the <xref:System.Net.Sockets.SocketOptionName> socket option to `true` the first time it is called for a given <xref:System.Net.Sockets.Socket>. However, the returned <xref:System.Net.Sockets.IPPacketInformation> object will only be valid for packets which arrive at the local computer after the socket option has been set. If a socket is sent packets between when it is bound to a local endpoint (explicitly by the <xref:System.Net.Sockets.Socket.Bind%2A> method or implicitly by one of the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, or <xref:System.Net.Sockets.Socket.SendToAsync%2A> methods) and its first call to the ReceiveMessageFrom method, calls to ReceiveMessageFrom method will return invalid <xref:System.Net.Sockets.IPPacketInformation> objects for these packets.  \n  \n To ensure that all <xref:System.Net.Sockets.IPPacketInformation> objects are valid, an application should set the <xref:System.Net.Sockets.SocketOptionName> socket option to `true` before it is bound to a local endpoint using the <xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29> method.  \n  \n An application can examine the `ipPacketInformation` parameter if it needs to know if the datagram was sent using a unicast, multicast, or broadcast address.  \n  \n> [!NOTE]\n>  The <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.ReceiveFrom%2A> needs to match the <xref:System.Net.Sockets.AddressFamily> of the <xref:System.Net.EndPoint> used in <xref:System.Net.Sockets.Socket.SendTo%2A>.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public int ReceiveMessageFrom (byte[] buffer, int offset, int size, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, out System.Net.Sockets.IPPacketInformation ipPacketInformation);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that is the storage location for received data.
    - id: offset
      type: System.Int32
      description: The position in the <code>buffer</code> parameter to store the received data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: An <xref href="System.Net.EndPoint"></xref>, passed by reference, that represents the remote server.
    - id: ipPacketInformation
      type: System.Net.Sockets.IPPacketInformation
      description: An <xref href="System.Net.Sockets.IPPacketInformation"></xref> holding address and interface information.
    return:
      type: System.Int32
      description: The number of bytes received.
  overload: System.Net.Sockets.Socket.ReceiveMessageFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is `null`.  \n  \n \\- or-  \n  \n <code>remoteEP</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n -or-  \n  \n <code>size</code> is less than 0.  \n  \n -or-  \n  \n <code>size</code> is greater than the length of the <code>buffer</code> minus the value of the offset parameter."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "<code>socketFlags</code> is not a valid combination of values.  \n  \n -or-  \n  \n The <xref href=\"stem.Net.Sockets.Socket.LocalEndPoint%2A\"></xref> property was not set.  \n  \n -or-  \n  \n The .NET Framework is running on an AMD 64-bit processor.  \n  \n -or-  \n  \n An error occurred when attempting to access the socket. See the Remarks section for more information."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The operating system is Windows 2000 or earlier, and this method requires Windows XP.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveMessageFromAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ReceiveMessageFromAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveMessageFromAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive the specified number of bytes of data into the specified location in the data buffer, using the specified <xref href="stem.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A"></xref>, and stores the endpoint and packet information.
  remarks: "The ReceiveMessageFromAsync method is used primarily to receive message data on a connectionless socket. The socket's local address must be known. This method can only be used with datagram and raw sockets. The socket must be initialized with the socket type set to <xref:System.Net.Sockets.SocketType> or <xref:System.Net.Sockets.SocketType> before calling this method. This can be done when the socket is constructed using <xref:System.Net.Sockets.Socket.%23ctor%2A>.  \n  \n The caller must set the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=fullName> property to the <xref:System.Net.IPEndPoint> of the remote host from which the data is to be received.  \n  \n The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=fullName> object are required to successfully call this method:  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName>  \n  \n The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=fullName> property to any user state object desired before calling the ReceiveMessageFromAsync method, so that the information will be retrievable in the callback method. If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.  \n  \n For message-oriented sockets, an incoming message is placed into the buffer up to the total size of the buffer. The <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=fullName> and <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=fullName> properties determine where in the buffer the data is placed and the amount of data.  \n  \n The ReceiveMessageFromAsync method automatically sets the <xref:System.Net.Sockets.SocketOptionName> socket option to `true` the first time it is called for a given <xref:System.Net.Sockets.Socket>. However, the <xref:System.Net.Sockets.IPPacketInformation> object will only be valid for packets which arrive at the local computer after the socket option has been set. If a socket is sent packets between when the socket is bound to a local endpoint (explicitly by the <xref:System.Net.Sockets.Socket.Bind%2A> method or implicitly by one of the <xref:System.Net.Sockets.Socket.Connect%2A>, <xref:System.Net.Sockets.Socket.ConnectAsync%2A>, <xref:System.Net.Sockets.Socket.SendTo%2A>, or <xref:System.Net.Sockets.Socket.SendToAsync%2A> methods) and the first call to the ReceiveMessageFromAsync method, calls to ReceiveMessageFromAsync method will result in invalid <xref:System.Net.Sockets.IPPacketInformation> objects for these packets.  \n  \n To ensure that all <xref:System.Net.Sockets.IPPacketInformation> objects are valid, an application should set the <xref:System.Net.Sockets.SocketOptionName> socket option to`true` before it is bound to a local endpoint using the <xref:System.Net.Sockets.Socket.SetSocketOption%28System.Net.Sockets.SocketOptionLevel%2CSystem.Net.Sockets.SocketOptionName%2CSystem.Boolean%29> method.  \n  \n An application can examine the resulting <xref:System.Net.Sockets.IPPacketInformation> objects if it needs to know if the datagram was sent using a unicast, multicast, or broadcast address."
  syntax:
    content: public bool ReceiveMessageFromAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: "Returns `true` if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will be raised upon completion of the operation.  \n  \n Returns `false` if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will not be raised and the <code>e</code> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation."
  overload: System.Net.Sockets.Socket.ReceiveMessageFromAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <xref href="stem.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A"></xref> cannot be null.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows XP or later is required for this method.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.ReceiveTimeout
  id: ReceiveTimeout
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: ReceiveTimeout
  nameWithType: Socket.ReceiveTimeout
  fullName: System.Net.Sockets.Socket.ReceiveTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies the amount of time after which a synchronous <xref href="stem.Net.Sockets.Socket.Receive%2A"></xref> call will time out.
  remarks: This option applies to synchronous <xref:System.Net.Sockets.Socket.Receive%2A> calls only. If the time-out period is exceeded, the <xref:System.Net.Sockets.Socket.Receive%2A> method will throw a <xref:System.Net.Sockets.SocketException>.
  example:
  - "The following code example demonstrates the use of the ReceiveTimeout property.  \n  \n [!code-cpp[SocketPropertyTester#1](~/add/codesnippet/cpp/p-system.net.sockets.soc_8_1.cpp)]\n [!code-cs[SocketPropertyTester#1](~/add/codesnippet/csharp/p-system.net.sockets.soc_8_1.cs)]"
  syntax:
    content: public int ReceiveTimeout { get; set; }
    return:
      type: System.Int32
      description: The time-out value, in milliseconds. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period.
  overload: System.Net.Sockets.Socket.ReceiveTimeout*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value specified for a set operation is less than -1.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.RemoteEndPoint
  id: RemoteEndPoint
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: RemoteEndPoint
  nameWithType: Socket.RemoteEndPoint
  fullName: System.Net.Sockets.Socket.RemoteEndPoint
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets the remote endpoint.
  remarks: "If you are using a connection-oriented protocol, the RemoteEndPoint property gets the <xref:System.Net.EndPoint> that contains the remote IP address and port number to which the <xref:System.Net.Sockets.Socket> is connected. If you are using a connectionless protocol, RemoteEndPoint contains the default remote IP address and port number with which the <xref:System.Net.Sockets.Socket> will communicate. You must cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint> before retrieving any information. You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=fullName> method to retrieve the remote <xref:System.Net.IPAddress>, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=fullName> method to retrieve the remote port number.  \n  \n The RemoteEndPoint is set after a call to either <xref:System.Net.Sockets.Socket.Accept%2A> or <xref:System.Net.Sockets.Socket.Connect%2A>. If you try to access this property earlier, RemoteEndPoint will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example retrieves and displays the local and remote endpoints.  \n  \n [!code-cs[Socket_Socket_Options#4](~/add/codesnippet/csharp/p-system.net.sockets.soc_13_1.cs)]\n [!code-cpp[Socket_Socket_Options#4](~/add/codesnippet/cpp/p-system.net.sockets.soc_13_1.cpp)]\n [!code-vb[Socket_Socket_Options#4](~/add/codesnippet/visualbasic/p-system.net.sockets.soc_13_1.vb)]"
  syntax:
    content: public System.Net.EndPoint RemoteEndPoint { get; }
    return:
      type: System.Net.EndPoint
      description: The <xref href="System.Net.EndPoint"></xref> with which the <xref href="System.Net.Sockets.Socket"></xref> is communicating.
  overload: System.Net.Sockets.Socket.RemoteEndPoint*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)
  id: Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Select(IList,IList,IList,Int32)
  nameWithType: Socket.Select(IList,IList,IList,Int32)
  fullName: System.Net.Sockets.Socket.Select(IList,IList,IList,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Determines the status of one or more sockets.
  remarks: "Select is a static method that determines the status of one or more <xref:System.Net.Sockets.Socket> instances. You must place one or more sockets into an <xref:System.Collections.IList> before you can use the Select method. Check for readability by calling Select with the <xref:System.Collections.IList> as the `checkRead` parameter. To check your sockets for writability, use the `checkWrite` parameter. For detecting error conditions, use `checkError`. After calling Select, the <xref:System.Collections.IList> will be filled with only those sockets that satisfy the conditions.  \n  \n If you are in a listening state, readability means that a call to <xref:System.Net.Sockets.Socket.Accept%2A> will succeed without blocking. If you have already accepted the connection, readability means that data is available for reading. In these cases, all receive operations will succeed without blocking. Readability can also indicate whether the remote <xref:System.Net.Sockets.Socket> has shut down the connection; in that case a call to <xref:System.Net.Sockets.Socket.Receive%2A> will return immediately, with zero bytes returned.  \n  \n Select returns when at least one of the sockets of interest (the sockets in the `checkRead`, `checkWrite`, and `checkError` lists) meets its specified criteria, or the `microSeconds` parameter is exceeded, whichever comes first. Setting `microSeconds` to -1 specifies an infinite time-out.  \n  \n If you make a nonblocking call to <xref:System.Net.Sockets.Socket.Connect%2A>, writability means that you have connected successfully. If you already have a connection established, writability means that all send operations will succeed without blocking.  \n  \n If you have made a non-blocking call to <xref:System.Net.Sockets.Socket.Connect%2A>, the `checkerror` parameter identifies sockets that have not connected successfully.  \n  \n> [!NOTE]\n>  Use the <xref:System.Net.Sockets.Socket.Poll%2A> method if you only want to determine the status of a single <xref:System.Net.Sockets.Socket>.  \n  \n> [!NOTE]\n>  This method cannot detect certain kinds of connection problems, such as a broken network cable, or that the remote host was shut down ungracefully. You must attempt to send or receive data to detect these kinds of errors.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error."
  example:
  - "The following code example uses Select to determine which listening sockets have a connection request.  \n  \n [!code-cs[Socket_Select#1](~/add/codesnippet/csharp/8de88d57-6fe8-425f-bcce-_1.cs)]\n [!code-vb[Socket_Select#1](~/add/codesnippet/visualbasic/8de88d57-6fe8-425f-bcce-_1.vb)]\n [!code-cpp[Socket_Select#1](~/add/codesnippet/cpp/8de88d57-6fe8-425f-bcce-_1.cpp)]"
  syntax:
    content: public static void Select (System.Collections.IList checkRead, System.Collections.IList checkWrite, System.Collections.IList checkError, int microSeconds);
    parameters:
    - id: checkRead
      type: System.Collections.IList
      description: An <xref href="System.Collections.IList"></xref> of <xref href="System.Net.Sockets.Socket"></xref> instances to check for readability.
    - id: checkWrite
      type: System.Collections.IList
      description: An <xref href="System.Collections.IList"></xref> of <xref href="System.Net.Sockets.Socket"></xref> instances to check for writability.
    - id: checkError
      type: System.Collections.IList
      description: An <xref href="System.Collections.IList"></xref> of <xref href="System.Net.Sockets.Socket"></xref> instances to check for errors.
    - id: microSeconds
      type: System.Int32
      description: The time-out value, in microseconds. A -1 value indicates an infinite time-out.
  overload: System.Net.Sockets.Socket.Select*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>checkRead</code> parameter is `null` or empty.  \n  \n -and-  \n  \n The <code>checkWrite</code> parameter is `null` or empty  \n  \n -and-  \n  \n The <code>checkError</code> parameter is `null` or empty."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Send(System.Byte[])
  id: Send(System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(Byte[])
  nameWithType: Socket.Send(Byte[])
  fullName: System.Net.Sockets.Socket.Send(Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data to a connected <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: "Send synchronously sends data to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent. Send can be used for both connection-oriented and connectionless protocols.  \n  \n This overload requires a buffer that contains the data you want to send. The <xref:System.Net.Sockets.SocketFlags> value defaults to 0, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer.  \n  \n If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or Send will throw a <xref:System.Net.Sockets.SocketException>. If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.  \n  \n If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method. If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to Send. You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>. You can also change the default remote host prior to calling Send by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.  \n  \n If you are using a connection-oriented protocol, Send will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=fullName>. If the time-out value was exceeded, the Send call will throw a <xref:System.Net.Sockets.SocketException>. In nonblocking mode, Send may complete successfully even if it sends less than the number of bytes in the buffer. It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer. There is also no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the Send method means that the underlying system has had room to buffer your data for a network send.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example demonstrates sending data on a connected <xref:System.Net.Sockets.Socket>.  \n  \n [!code-vb[Socket_Sync_Send_Receive#1](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_9_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#1](~/add/codesnippet/csharp/m-system.net.sockets.soc_9_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#1](~/add/codesnippet/cpp/m-system.net.sockets.soc_9_1.cpp)]"
  syntax:
    content: public int Send (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the data to be sent.
    return:
      type: System.Int32
      description: The number of bytes sent to the <xref href="System.Net.Sockets.Socket"></xref>.
  overload: System.Net.Sockets.Socket.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  id: Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(IList<ArraySegment<Byte>>)
  nameWithType: Socket.Send(IList<ArraySegment<Byte>>)
  fullName: System.Net.Sockets.Socket.Send(IList<ArraySegment<Byte>>)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the set of buffers in the list to a connected <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: "Send can be used for both connection-oriented and connectionless protocols.  \n  \n This overload requires at least one buffer that contains the data you want to send.  \n  \n If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.  \n  \n If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method. If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>. You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>. You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.  \n  \n If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=fullName>. If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>. In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer. It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer. There is also no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public int Send (System.Collections.Generic.IList<ArraySegment<byte>> buffers);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: A list of <xref href="stem.ArraySegment%601"></xref>s of type <xref href="System.Byte"></xref> that contains the data to be sent.
    return:
      type: System.Int32
      description: The number of bytes sent to the <xref href="System.Net.Sockets.Socket"></xref>.
  overload: System.Net.Sockets.Socket.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffers</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>buffers</code> is empty.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See remarks section below.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)
  id: Send(System.Byte[],System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(Byte[],SocketFlags)
  nameWithType: Socket.Send(Byte[],SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(Byte[],SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data to a connected <xref href="System.Net.Sockets.Socket"></xref> using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  remarks: "<xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent. The <xref:System.Net.Sockets.Socket.Send%2A> method can be used for both connection-oriented and connectionless protocols.  \n  \n This overload requires a buffer that contains the data you want to send and a bitwise combination of <xref:System.Net.Sockets.SocketFlags>. The buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer. If you specify the <xref:System.Net.Sockets.SocketFlags> flag as the `socketflags` parameter value, the data you are sending will not be routed.  \n  \n If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.  \n  \n If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method. If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call the <xref:System.Net.Sockets.Socket.Connect%2A> method before each call to <xref:System.Net.Sockets.Socket.Send%2A>. You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>. You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.  \n  \n If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=fullName>. If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>. In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer. It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes. There is also no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.  \n  \n> [!NOTE]\n>  You must ensure that the size of your buffer does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see[Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example demonstrates sending data on a connected <xref:System.Net.Sockets.Socket>.  \n  \n [!code-vb[Socket_Sync_Send_Receive#2](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_2_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#2](~/add/codesnippet/csharp/m-system.net.sockets.soc_2_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#2](~/add/codesnippet/cpp/m-system.net.sockets.soc_2_1.cpp)]"
  syntax:
    content: public int Send (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the data to be sent.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    return:
      type: System.Int32
      description: The number of bytes sent to the <xref href="System.Net.Sockets.Socket"></xref>.
  overload: System.Net.Sockets.Socket.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  id: Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(IList<ArraySegment<Byte>>,SocketFlags)
  nameWithType: Socket.Send(IList<ArraySegment<Byte>>,SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(IList<ArraySegment<Byte>>,SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the set of buffers in the list to a connected <xref href="System.Net.Sockets.Socket"></xref>, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  remarks: "This overload requires at least one buffer that contains the data you want to send. The <xref:System.Net.Sockets.SocketFlags> value defaults to 0. If you specify the <xref:System.Net.Sockets.SocketFlags> flag as the `socketFlags` parameter, the data you are sending will not be routed.  \n  \n If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or Send will throw a <xref:System.Net.Sockets.SocketException>. If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.  \n  \n If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method. If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>. You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>. You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.  \n  \n If you are using a connection-oriented protocol, Send will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=fullName>. If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>. In non-blocking mode, Send may complete successfully even if it sends less than the number of bytes in the buffer. It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer. There is also no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the Send method means that the underlying system has had room to buffer your data for a network send.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public int Send (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: A list of <xref href="stem.ArraySegment%601"></xref>s of type <xref href="System.Byte"></xref> that contains the data to be sent.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    return:
      type: System.Int32
      description: The number of bytes sent to the <xref href="System.Net.Sockets.Socket"></xref>.
  overload: System.Net.Sockets.Socket.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffers</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>buffers</code> is empty.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  id: Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(Byte[],Int32,SocketFlags)
  nameWithType: Socket.Send(Byte[],Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(Byte[],Int32,SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the specified number of bytes of data to a connected <xref href="System.Net.Sockets.Socket"></xref>, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  remarks: "Send synchronously sends data to the remote host established in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent. Send can be used for both connection-oriented and connectionless protocols.  \n  \n This overload requires a buffer that contains the data you want to send, the number of bytes you want to send, and a bitwise combination of any <xref:System.Net.Sockets.SocketFlags>. If you specify the <xref:System.Net.Sockets.SocketFlags> flag as the `socketflags` parameter, the data you are sending will not be routed.  \n  \n If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or Send will throw a <xref:System.Net.Sockets.SocketException>. If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.  \n  \n If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method. If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call the <xref:System.Net.Sockets.Socket.Connect%2A> method before each call to the Send method. You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>. You can also change the default remote host prior to calling Send by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.  \n  \n With a connection-oriented protocol, Send will block until the requested number of bytes are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=fullName>. If the time-out value was exceeded, the Send call will throw a <xref:System.Net.Sockets.SocketException>. In nonblocking mode, Send may complete successfully even if it sends less than the number of bytes you request. It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes. There is also no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the Send method means that the underlying system has had room to buffer your data for a network send.  \n  \n> [!NOTE]\n>  You must ensure that the size does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and Send will throw a <xref:System.Net.Sockets.SocketException>. If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example sends the data found in buffer, and specifies <xref:System.Net.Sockets.SocketFlags> for <xref:System.Net.Sockets.SocketFlags>.  \n  \n [!code-vb[Socket_Sync_Send_Receive#3](~/add/codesnippet/visualbasic/92a4a53b-7a5b-4476-98fa-_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#3](~/add/codesnippet/csharp/92a4a53b-7a5b-4476-98fa-_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#3](~/add/codesnippet/cpp/92a4a53b-7a5b-4476-98fa-_1.cpp)]"
  syntax:
    content: public int Send (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the data to be sent.
    - id: size
      type: System.Int32
      description: The number of bytes to send.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    return:
      type: System.Int32
      description: The number of bytes sent to the <xref href="System.Net.Sockets.Socket"></xref>.
  overload: System.Net.Sockets.Socket.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>size</code> is less than 0 or exceeds the size of the buffer.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "<code>socketFlags</code> is not a valid combination of values.  \n  \n -or-  \n  \n An operating system error occurs while accessing the socket. See the Remarks section for more information."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  nameWithType: Socket.Send(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Send(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the set of buffers in the list to a connected <xref href="System.Net.Sockets.Socket"></xref>, using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  remarks: "This overload requires at least one buffer that contains the data you want to send. The <xref:System.Net.Sockets.SocketFlags> value defaults to 0. If you specify the <xref:System.Net.Sockets.SocketFlags> flag as the `socketFlags` parameter, the data you are sending will not be routed.  \n  \n If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.  \n  \n If you are using a connectionless protocol and plan to send data to several different hosts, you should use the <xref:System.Net.Sockets.Socket.SendTo%2A> method. If you do not use the <xref:System.Net.Sockets.Socket.SendTo%2A> method, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>. You can use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>. You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.  \n  \n If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until all of the bytes in the buffer are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=fullName>. If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>. In non-blocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes in the buffer. It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer. There is also no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public int Send (System.Collections.Generic.IList<ArraySegment<byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: A list of <xref href="stem.ArraySegment%601"></xref>s of type <xref href="System.Byte"></xref> that contains the data to be sent.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: A <xref href="System.Net.Sockets.SocketError"></xref> object that stores the socket error.
    return:
      type: System.Int32
      description: The number of bytes sent to the <xref href="System.Net.Sockets.Socket"></xref>.
  overload: System.Net.Sockets.Socket.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffers</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>buffers</code> is empty.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  id: Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(Byte[],Int32,Int32,SocketFlags)
  nameWithType: Socket.Send(Byte[],Int32,Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(Byte[],Int32,Int32,SocketFlags)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the specified number of bytes of data to a connected <xref href="System.Net.Sockets.Socket"></xref>, starting at the specified offset, and using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  remarks: "<xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent. <xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.  \n  \n In this overload, if you specify the <xref:System.Net.Sockets.SocketFlags> flag as the `socketflags` parameter, the data you are sending will not be routed.  \n  \n If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method or <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>. If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.  \n  \n If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.SendTo%2A>. If you do not use <xref:System.Net.Sockets.Socket.SendTo%2A>, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>. It is okay to use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>. You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.  \n  \n You must also be sure that the size does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until the requested number of bytes are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=fullName>. If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>. In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes you request. It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes. There is also no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example specifies the data buffer, an offset, a size, and <xref:System.Net.Sockets.SocketFlags> for sending data to a connected <xref:System.Net.Sockets.Socket>.  \n  \n [!code-vb[Socket_Sync_Send_Receive#4](~/add/codesnippet/visualbasic/6454c871-2f55-458d-b073-_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#4](~/add/codesnippet/csharp/6454c871-2f55-458d-b073-_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#4](~/add/codesnippet/cpp/6454c871-2f55-458d-b073-_1.cpp)]"
  syntax:
    content: public int Send (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the data to be sent.
    - id: offset
      type: System.Int32
      description: The position in the data buffer at which to begin sending data.
    - id: size
      type: System.Int32
      description: The number of bytes to send.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    return:
      type: System.Int32
      description: The number of bytes sent to the <xref href="System.Net.Sockets.Socket"></xref>.
  overload: System.Net.Sockets.Socket.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n -or-  \n  \n <code>size</code> is less than 0.  \n  \n -or-  \n  \n <code>size</code> is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "<code>socketFlags</code> is not a valid combination of values.  \n  \n -or-  \n  \n An operating system error occurs while accessing the <xref href=\"System.Net.Sockets.Socket\"></xref>. See the Remarks section for more information."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Send(Byte[],Int32,Int32,SocketFlags,SocketError)
  nameWithType: Socket.Send(Byte[],Int32,Int32,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Send(Byte[],Int32,Int32,SocketFlags,SocketError)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the specified number of bytes of data to a connected <xref href="System.Net.Sockets.Socket"></xref>, starting at the specified offset, and using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>
  remarks: "<xref:System.Net.Sockets.Socket.Send%2A> synchronously sends data to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method and returns the number of bytes successfully sent. <xref:System.Net.Sockets.Socket.Send%2A> can be used for both connection-oriented and connectionless protocols.  \n  \n In this overload, if you specify the <xref:System.Net.Sockets.SocketFlags> flag as the `socketflags` parameter, the data you are sending will not be routed.  \n  \n If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method or <xref:System.Net.Sockets.Socket.Send%2A> will throw a<xref:System.Net.Sockets.SocketException>. If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.  \n  \n If you are using a connectionless protocol and plan to send data to several different hosts, you should use <xref:System.Net.Sockets.Socket.SendTo%2A>. If you do not use <xref:System.Net.Sockets.Socket.SendTo%2A>, you will have to call <xref:System.Net.Sockets.Socket.Connect%2A> before each call to <xref:System.Net.Sockets.Socket.Send%2A>. It is okay to use <xref:System.Net.Sockets.Socket.SendTo%2A> even after you have established a default remote host with <xref:System.Net.Sockets.Socket.Connect%2A>. You can also change the default remote host prior to calling <xref:System.Net.Sockets.Socket.Send%2A> by making another call to <xref:System.Net.Sockets.Socket.Connect%2A>.  \n  \n You must also be sure that the size does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.Send%2A> will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.Send%2A> will block until the requested number of bytes are sent, unless a time-out was set by using <xref:System.Net.Sockets.Socket.SendTimeout%2A?displayProperty=fullName>. If the time-out value was exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> call will throw a <xref:System.Net.Sockets.SocketException>. In nonblocking mode, <xref:System.Net.Sockets.Socket.Send%2A> may complete successfully even if it sends less than the number of bytes you request. It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes. There is also no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the <xref:System.Net.Sockets.Socket.Send%2A> method means that the underlying system has had room to buffer your data for a network send.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see[Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example specifies the data buffer, an offset, a size, and <xref:System.Net.Sockets.SocketFlags> for sending data to a connected <xref:System.Net.Sockets.Socket>.  \n  \n [!code-vb[Socket_Sync_Send_Receive#4](~/add/codesnippet/visualbasic/f89a183d-8038-4be6-b64e-_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#4](~/add/codesnippet/csharp/f89a183d-8038-4be6-b64e-_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#4](~/add/codesnippet/cpp/f89a183d-8038-4be6-b64e-_1.cpp)]"
  syntax:
    content: public int Send (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the data to be sent.
    - id: offset
      type: System.Int32
      description: The position in the data buffer at which to begin sending data.
    - id: size
      type: System.Int32
      description: The number of bytes to send.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: A <xref href="System.Net.Sockets.SocketError"></xref> object that stores the socket error.
    return:
      type: System.Int32
      description: The number of bytes sent to the <xref href="System.Net.Sockets.Socket"></xref>.
  overload: System.Net.Sockets.Socket.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n -or-  \n  \n <code>size</code> is less than 0.  \n  \n -or-  \n  \n <code>size</code> is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "<code>socketFlags</code> is not a valid combination of values.  \n  \n -or-  \n  \n An operating system error occurs while accessing the <xref href=\"System.Net.Sockets.Socket\"></xref>. See the Remarks section for more information."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendAsync(SocketAsyncEventArgs)
  nameWithType: Socket.SendAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a connected <xref href="System.Net.Sockets.Socket"></xref> object.
  remarks: "The SendAsync method is used to write outgoing data from one or more buffers on a connection-oriented socket. This method can also be used, however, on connectionless sockets that have specified a remote host on a connect operation.  \n  \n The SendAsync method starts an asynchronous send operation to the remote host established in the <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method.  \n  \n The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=fullName> object are required to successfully call this method:  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=fullName> or <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=fullName> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=fullName> is set  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=fullName> if <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=fullName> is set  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName>  \n  \n The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=fullName> property to any user state object desired before calling the SendAsync method, so that the information will be retrievable in the callback method. If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.  \n  \n The SendAsync method will throw an exception if you do not first call <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A><xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A>.  \n  \n Calling the SendAsync method gives you the ability to send data within a separate execution thread.  \n  \n For message-oriented sockets, do not exceed the maximum message size of the underlying Windows sockets service provider. If the data is too long to pass atomically through the underlying service provider, no data is transmitted and the SendAsync method throws a <xref:System.Net.Sockets.SocketException> with the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A?displayProperty=fullName> set to the native Winsock WSAEMSGSIZE error code (10040).  \n  \n Note that the successful completion of the SendAsync method does not indicate that the data was successfully delivered."
  syntax:
    content: public bool SendAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: "Returns `true` if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will be raised upon completion of the operation.  \n  \n Returns `false` if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will not be raised and the <code>e</code> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation."
  overload: System.Net.Sockets.Socket.SendAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="stem.Net.Sockets.SocketAsyncEventArgs.Buffer%2A"></xref> or <xref href="stem.Net.Sockets.SocketAsyncEventArgs.BufferList%2A"></xref> properties on the <code>e</code> parameter must reference valid buffers. One or the other of these properties may be set, but not both at the same time.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: A socket operation was already in progress using the <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object specified in the <code>e</code> parameter.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows XP or later is required for this method.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: The <xref href="System.Net.Sockets.Socket"></xref> is not yet connected or was not obtained via an <xref href="stem.Net.Sockets.Socket.Accept%2A"></xref>, <xref href="stem.Net.Sockets.Socket.AcceptAsync%2A"></xref>,or <xref href="stem.Net.Sockets.Socket.BeginAccept%2A"></xref>, method.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SendBufferSize
  id: SendBufferSize
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendBufferSize
  nameWithType: Socket.SendBufferSize
  fullName: System.Net.Sockets.Socket.SendBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies the size of the send buffer of the <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: A larger buffer size might delay the recognition of connection difficulties. Consider increasing the buffer size if you are transferring large files, or you are using a high bandwidth, high latency connection (such as a satellite broadband provider.)
  example:
  - "The following code example demonstrates the use of the SendBufferSize property.  \n  \n [!code-cpp[SocketPropertyTester#1](~/add/codesnippet/cpp/p-system.net.sockets.soc_9_1.cpp)]\n [!code-cs[SocketPropertyTester#1](~/add/codesnippet/csharp/p-system.net.sockets.soc_9_1.cs)]"
  syntax:
    content: public int SendBufferSize { get; set; }
    return:
      type: System.Int32
      description: An <xref href="System.Int32"></xref> that contains the size, in bytes, of the send buffer. The default is 8192.
  overload: System.Net.Sockets.Socket.SendBufferSize*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value specified for a set operation is less than 0.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SendFile(System.String)
  id: SendFile(System.String)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendFile(String)
  nameWithType: Socket.SendFile(String)
  fullName: System.Net.Sockets.Socket.SendFile(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the file <code>fileName</code> to a connected <xref href="System.Net.Sockets.Socket"></xref> object with the <xref href="System.Net.Sockets.TransmitFileOptions"></xref> transmit flag.
  remarks: "This overload sends the file `fileName` to the connected socket. The `flags` parameter defaults to <xref:System.Net.Sockets.TransmitFileOptions> (0), and the `preBuffer` and `postBuffer` parameters default to `null`. If `fileName` is in the local directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified. Wildcards (\"..\\\\\\myfile.txt\") and UNC share names (\"\\\\\\\\\\\\\\shared directory\\\\\\myfile.txt\") are supported. If the file is not found, the exception <xref:System.IO.FileNotFoundException> is thrown.  \n  \n This method uses the `TransmitFile` function found in the Windows Sockets 2 API. For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.  \n  \n SendFile synchronously sends a file to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method. SendFile can be used for both connection-oriented and for connectionless protocols.  \n  \n If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method, otherwise SendFile throws a <xref:System.Net.Sockets.SocketException> exception. If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.  \n  \n If you are using a connection-oriented protocol, SendFile blocks until the file is sent. In nonblocking mode, SendFile may complete successfully before the entire file has been sent. There is no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the SendFile method means that the underlying system has had room to buffer your data for a network send.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example creates and connects a socket and then sends a file to the remote host. The file \"test.txt\" is located in the root directory of the local machine.  \n  \n [!code-cs[NCLSocketEnhancements#3](~/add/codesnippet/csharp/m-system.net.sockets.soc_27_1.cs)]\n [!code-cpp[NCLSocketEnhancements#3](~/add/codesnippet/cpp/m-system.net.sockets.soc_27_1.cpp)]"
  syntax:
    content: public void SendFile (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: A <xref href="System.String"></xref> that contains the path and name of the file to be sent. This parameter can be `null`.
  overload: System.Net.Sockets.Socket.SendFile*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The socket is not connected to a remote host.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object has been closed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object is not in blocking mode and cannot accept this synchronous call.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: The file <code>fileName</code> was not found.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)
  id: SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendFile(String,Byte[],Byte[],TransmitFileOptions)
  nameWithType: Socket.SendFile(String,Byte[],Byte[],TransmitFileOptions)
  fullName: System.Net.Sockets.Socket.SendFile(String,Byte[],Byte[],TransmitFileOptions)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the file <code>fileName</code> and buffers of data to a connected <xref href="System.Net.Sockets.Socket"></xref> object using the specified <xref href="System.Net.Sockets.TransmitFileOptions"></xref> value.
  remarks: "This overload requires the name of the file you want to send and a bitwise combination of <xref:System.Net.Sockets.TransmitFileOptions> values. The `preBuffer` parameter contains any data you want to precede the file. `postBuffer` contains data you want to follow the file. If `fileName` is in the current working directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified. Wildcards (\"..\\\\\\myfile.txt\") and UNC share names (\"\\\\\\\\\\\\\\shared directory\\\\\\myfile.txt\") are supported.  \n  \n The `flags` parameter provides the Window Sockets service provider with additional information about the file transfer. For more information about how to use this parameter, see <xref:System.Net.Sockets.TransmitFileOptions>.  \n  \n This method uses the `TransmitFile` function found in the Windows Sockets 2 API. For more information about the `TransmitFile` function and its flags, see the Windows Sockets documentation in the MSDN Library.  \n  \n <xref:System.Net.Sockets.Socket.SendFile%2A> synchronously sends a file to the remote host specified in the <xref:System.Net.Sockets.Socket.Connect%2A> or <xref:System.Net.Sockets.Socket.Accept%2A> method. <xref:System.Net.Sockets.Socket.SendFile%2A> can be used for both connection-oriented and for connectionless protocols.  \n  \n If you are using a connectionless protocol, you must call <xref:System.Net.Sockets.Socket.Connect%2A> before calling this method; otherwise <xref:System.Net.Sockets.Socket.SendFile%2A> throws a <xref:System.Net.Sockets.SocketException>. If you are using a connection-oriented protocol, you must either use <xref:System.Net.Sockets.Socket.Connect%2A> to establish a remote host connection, or use <xref:System.Net.Sockets.Socket.Accept%2A> to accept an incoming connection.  \n  \n If you are using a connection-oriented protocol, <xref:System.Net.Sockets.Socket.SendFile%2A> blocks until the entire file is sent. In nonblocking mode, <xref:System.Net.Sockets.Socket.SendFile%2A> may complete successfully before the entire file has been sent. There is no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the <xref:System.Net.Sockets.Socket.SendFile%2A> method means that the underlying system has had room to buffer your data for a network send.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example creates and connects a socket. The file \"test.txt\" is located in the root directory of the local machine. In this example, we create a prebuffer and postbuffer of data and send them to the remote host with the file. The default <xref:System.Net.Sockets.TransmitFileOptions> are used.  \n  \n [!code-cs[NCLSocketEnhancements#4](~/add/codesnippet/csharp/11263260-21a3-4425-aadc-_1.cs)]\n [!code-cpp[NCLSocketEnhancements#4](~/add/codesnippet/cpp/11263260-21a3-4425-aadc-_1.cpp)]"
  syntax:
    content: public void SendFile (string fileName, byte[] preBuffer, byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags);
    parameters:
    - id: fileName
      type: System.String
      description: A <xref href="System.String"></xref> that contains the path and name of the file to be sent. This parameter can be `null`.
    - id: preBuffer
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array that contains data to be sent before the file is sent. This parameter can be `null`.
    - id: postBuffer
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array that contains data to be sent after the file is sent. This parameter can be `null`.
    - id: flags
      type: System.Net.Sockets.TransmitFileOptions
      description: One or more of <xref href="System.Net.Sockets.TransmitFileOptions"></xref> values.
  overload: System.Net.Sockets.Socket.SendFile*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The operating system is not Windows NT or later.  \n  \n \\- or -  \n  \n The socket is not connected to a remote host."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object has been closed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object is not in blocking mode and cannot accept this synchronous call.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: The file <code>fileName</code> was not found.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendPacketsAsync(SocketAsyncEventArgs)
  nameWithType: Socket.SendPacketsAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendPacketsAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends a collection of files or in memory data buffers asynchronously to a connected <xref href="System.Net.Sockets.Socket"></xref> object.
  remarks: "The SendPacketsAsync method is used to send a collection of files or in memory data buffers to remote host. The <xref:System.Net.Sockets.Socket> must already be connected to the remote host.  \n  \n If a <xref:System.Net.Sockets.SendPacketsElement?displayProperty=fullName> references a file in the working directory, it may be identified with just the name of the file; otherwise, the full path and name of the file must be specified. Wildcards and UNC share names are supported. If the file is not found, <xref:System.IO.FileNotFoundException> is thrown.  \n  \n To be notified of completion, you must create a callback method that implements the EventHandler\\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName> event.  \n  \n The <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=fullName> property on the `e` parameter provides the Window Sockets service provider with additional information about the file transfer. For more information about how to use this parameter, see <xref:System.Net.Sockets.TransmitFileOptions>.  \n  \n The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=fullName> object are required to successfully call this method:  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements%2A?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName>  \n  \n The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=fullName> property to any user state object desired before calling the SendPacketsAsync method, so that the information will be retrievable in the callback method. If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.  \n  \n This method uses the TransmitPackets function found in the Windows Sockets 2 API. For more information about the TransmitPackets function and its flags, see the Windows Sockets documentation in the MSDN Library.  \n  \n Although intended for connection-oriented protocols, the SendPacketsAsync method also works for connectionless protocols, provided that you first call the <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method to establish a default remote host. With connectionless protocols, you must also be sure that the size of your file does not exceed the maximum packet size of the underlying service provider. If it does, the datagram is not sent and SendPacketsAsync throws a <xref:System.Net.Sockets.SocketException> exception.  \n  \n The SendPacketsAsync method is optimized according to the operating system on which it is used. On Windows server editions, the SendPacketsAsync method is optimized for high performance.  \n  \n On Windows client editions, the SendPacketsAsync method is optimized for minimum memory and resource utilization.  \n  \n Use of the <xref:System.Net.Sockets.TransmitFileOptions?displayProperty=fullName> flag in the <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A?displayProperty=fullName> property on the `e` parameter can deliver significant performance benefits. If the thread initiating the SendPacketsAsync method call is being used for heavy computations, it is possible, though unlikely, that APCs could be prevented from launching. Note that there is a difference between kernel and user-mode APCs. Kernel APCs launch when a thread is in a wait state. User-mode APCs launch when a thread is in an alertable wait state"
  syntax:
    content: public bool SendPacketsAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: "Returns `true` if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will be raised upon completion of the operation.  \n  \n Returns `false` if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will not be raised and the <code>e</code> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation."
  overload: System.Net.Sockets.Socket.SendPacketsAsync*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: The file specified in the <xref href="stem.Net.Sockets.SendPacketsElement.FilePath%2A"></xref> property was not found.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: A socket operation was already in progress using the <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object specified in the <code>e</code> parameter.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows XP or later is required for this method. This exception also occurs if the <xref href="System.Net.Sockets.Socket"></xref> is not connected to a remote host.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: A connectionless <xref href="System.Net.Sockets.Socket"></xref> is being used and the file being sent exceeds the maximum packet size of the underlying transport.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SendTimeout
  id: SendTimeout
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendTimeout
  nameWithType: Socket.SendTimeout
  fullName: System.Net.Sockets.Socket.SendTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies the amount of time after which a synchronous <xref href="stem.Net.Sockets.Socket.Send%2A"></xref> call will time out.
  remarks: This option applies to synchronous <xref:System.Net.Sockets.Socket.Send%2A> calls only. If the time-out period is exceeded, the <xref:System.Net.Sockets.Socket.Send%2A> method will throw a <xref:System.Net.Sockets.SocketException>.
  example:
  - "The following code example demonstrates the use of the SendTimeout property.  \n  \n [!code-cpp[SocketPropertyTester#1](~/add/codesnippet/cpp/p-system.net.sockets.soc_10_1.cpp)]\n [!code-cs[SocketPropertyTester#1](~/add/codesnippet/csharp/p-system.net.sockets.soc_10_1.cs)]"
  syntax:
    content: public int SendTimeout { get; set; }
    return:
      type: System.Int32
      description: The time-out value, in milliseconds. If you set the property with a value between 1 and 499, the value will be changed to 500. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period.
  overload: System.Net.Sockets.Socket.SendTimeout*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value specified for a set operation is less than -1.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendTo(Byte[],EndPoint)
  nameWithType: Socket.SendTo(Byte[],EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data to the specified endpoint.
  remarks: "In this overload, the buffer offset defaults to 0, the number of bytes to send defaults to the size of the `buffer` parameter, and the <xref:System.Net.Sockets.SocketFlags> value defaults to 0.  \n  \n If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>. You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method. If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only. You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number. If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.  \n  \n Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols. If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method. If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>. You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method. In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.  \n  \n Blocking sockets will block until the all of the bytes in the buffer are sent. Since a nonblocking<xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes in the `buffer`. It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends all of the bytes in the `buffer`. There is also no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.  \n  \n If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent. If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You must also be sure that the number of bytes sent does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example sends a connectionless datagram to the specified remote host.  \n  \n [!code-vb[Socket_Sync_Send_Receive#5](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_26_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#5](~/add/codesnippet/csharp/m-system.net.sockets.soc_26_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#5](~/add/codesnippet/cpp/m-system.net.sockets.soc_26_1.cpp)]"
  syntax:
    content: public int SendTo (byte[] buffer, System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the data to be sent.
    - id: remoteEP
      type: System.Net.EndPoint
      description: The <xref href="System.Net.EndPoint"></xref> that represents the destination for the data.
    return:
      type: System.Int32
      description: The number of bytes sent.
  overload: System.Net.Sockets.Socket.SendTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is `null`.  \n  \n -or-  \n  \n <code>remoteEP</code> is `null`."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendTo(Byte[],SocketFlags,EndPoint)
  nameWithType: Socket.SendTo(Byte[],SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],SocketFlags,EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data to a specific endpoint using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  remarks: "In this overload, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the `buffer`. If you specify the <xref:System.Net.Sockets.SocketFlags> flag as the `socketflags` parameter, the data you are sending will not be routed.  \n  \n If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>. You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method. If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only. You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number. If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.  \n  \n Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols. If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method. If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>. You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method. In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.  \n  \n Blocking sockets will block until the requested all of the bytes in the `buffer` are sent. Since a nonblocking<xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes in the `buffer`. It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends all of the bytes in the `buffer`. There is also no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of out-going data is collected. A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.  \n  \n If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent. If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You must also be sure that the number of bytes sent does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example sends a connectionless datagram to the specified remote host. <xref:System.Net.Sockets.SocketFlags> are passed to the<xref:System.Net.Sockets.Socket.SendTo%2A> method.  \n  \n [!code-vb[Socket_Sync_Send_Receive#6](~/add/codesnippet/visualbasic/677e2700-5bf4-45a1-a6f6-_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#6](~/add/codesnippet/csharp/677e2700-5bf4-45a1-a6f6-_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#6](~/add/codesnippet/cpp/677e2700-5bf4-45a1-a6f6-_1.cpp)]"
  syntax:
    content: public int SendTo (byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the data to be sent.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: The <xref href="System.Net.EndPoint"></xref> that represents the destination location for the data.
    return:
      type: System.Int32
      description: The number of bytes sent.
  overload: System.Net.Sockets.Socket.SendTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is `null`.  \n  \n -or-  \n  \n <code>remoteEP</code> is `null`."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendTo(Byte[],Int32,SocketFlags,EndPoint)
  nameWithType: Socket.SendTo(Byte[],Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],Int32,SocketFlags,EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the specified number of bytes of data to the specified endpoint using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  remarks: "In this overload, the buffer offset defaults to 0. If you specify the <xref:System.Net.Sockets.SocketFlags> flag as the `socketflags` parameter, the data you are sending will not be routed.  \n  \n If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>. You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method. If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling <xref:System.Net.Sockets.Socket.SendTo%2A>, the `remoteEP` parameter will override the specified default remote host for that send operation only. You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number. If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.Socket.SendTo%2A> method successfully completes.  \n  \n Although intended for connectionless protocols, <xref:System.Net.Sockets.Socket.SendTo%2A> also works with connection-oriented protocols. If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method. If you do not establish or accept a remote host connection, <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>. You can also establish a default remote host for a connectionless protocol prior to calling the <xref:System.Net.Sockets.Socket.SendTo%2A> method. In either of these cases, <xref:System.Net.Sockets.Socket.SendTo%2A> will ignore the `remoteEP` parameter and only send data to the connected or default remote host.  \n  \n Blocking sockets will block until the requested number of bytes are sent. Since a nonblocking<xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes requested in a single operation. It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes. There is also no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of out-going data is collected. A successful completion of the <xref:System.Net.Sockets.Socket.SendTo%2A> method means that the underlying system has had room to buffer your data for a network send.  \n  \n If you are using a connectionless protocol in blocking mode, <xref:System.Net.Sockets.Socket.SendTo%2A> will block until the datagram is sent. If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You must also be sure that the number of bytes sent does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and <xref:System.Net.Sockets.Socket.SendTo%2A> will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example sends a connectionless datagram to the specified remote host. The size and <xref:System.Net.Sockets.SocketFlags> are passed to the <xref:System.Net.Sockets.Socket.SendTo%2A> method.  \n  \n [!code-vb[Socket_Sync_Send_Receive#7](~/add/codesnippet/visualbasic/097c3f55-743d-4ef2-98da-_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#7](~/add/codesnippet/csharp/097c3f55-743d-4ef2-98da-_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#7](~/add/codesnippet/cpp/097c3f55-743d-4ef2-98da-_1.cpp)]"
  syntax:
    content: public int SendTo (byte[] buffer, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the data to be sent.
    - id: size
      type: System.Int32
      description: The number of bytes to send.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: The <xref href="System.Net.EndPoint"></xref> that represents the destination location for the data.
    return:
      type: System.Int32
      description: The number of bytes sent.
  overload: System.Net.Sockets.Socket.SendTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is `null`.  \n  \n -or-  \n  \n <code>remoteEP</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The specified <code>size</code> exceeds the size of <code>buffer</code>.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendTo(Byte[],Int32,Int32,SocketFlags,EndPoint)
  nameWithType: Socket.SendTo(Byte[],Int32,Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],Int32,Int32,SocketFlags,EndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends the specified number of bytes of data to the specified endpoint, starting at the specified location in the buffer, and using the specified <xref href="System.Net.Sockets.SocketFlags"></xref>.
  remarks: "In this overload, if you specify the <xref:System.Net.Sockets.SocketFlags> flag as the `socketflags` parameter, the data you are sending will not be routed.  \n  \n If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling SendTo. You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.Send%2A> method. If you do call the <xref:System.Net.Sockets.Socket.Connect%2A> method prior to calling SendTo, the `remoteEP` parameter will override the specified default remote host for that send operation only. You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method, because the underlying service provider will assign the most appropriate local network address and port number. If you need to identify the assigned local network address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the SendTo method successfully completes.  \n  \n Although intended for connectionless protocols, SendTo also works with connection-oriented protocols. If you are using a connection-oriented protocol, you must first establish a remote host connection by calling the <xref:System.Net.Sockets.Socket.Connect%2A> method or accept an incoming connection request using the <xref:System.Net.Sockets.Socket.Accept%2A> method. If you do not establish or accept a remote host connection, SendTo will throw a <xref:System.Net.Sockets.SocketException>. You can also establish a default remote host for a connectionless protocol prior to calling the SendTo method. In either of these cases, SendTo will ignore the `remoteEP` parameter and only send data to the connected or default remote host.  \n  \n Blocking sockets will block until the requested number of bytes are sent. Since a non-blocking <xref:System.Net.Sockets.Socket> completes immediately, it might not send all of the bytes requested in a single operation. It is your applications responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the requested number of bytes. There is also no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of out-going data is collected. A successful completion of the SendTo method means that the underlying system has had room to buffer your data for a network send.  \n  \n If you are using a connectionless protocol in blocking mode, SendTo will block until the datagram is sent. If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option to <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>. You must also be sure that the size does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and SendTo will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example sends a connectionless datagram to the specified remote host. The offset, size, and <xref:System.Net.Sockets.SocketFlags> are passed to the SendTo method.  \n  \n [!code-vb[Socket_Sync_Send_Receive#8](~/add/codesnippet/visualbasic/09253b14-96fa-4f5a-a346-_1.vb)]\n [!code-cs[Socket_Sync_Send_Receive#8](~/add/codesnippet/csharp/09253b14-96fa-4f5a-a346-_1.cs)]\n [!code-cpp[Socket_Sync_Send_Receive#8](~/add/codesnippet/cpp/09253b14-96fa-4f5a-a346-_1.cpp)]"
  syntax:
    content: public int SendTo (byte[] buffer, int offset, int size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that contains the data to be sent.
    - id: offset
      type: System.Int32
      description: The position in the data buffer at which to begin sending data.
    - id: size
      type: System.Int32
      description: The number of bytes to send.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the <xref href="System.Net.Sockets.SocketFlags"></xref> values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: The <xref href="System.Net.EndPoint"></xref> that represents the destination location for the data.
    return:
      type: System.Int32
      description: The number of bytes sent.
  overload: System.Net.Sockets.Socket.SendTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code> is `null`.  \n  \n -or-  \n  \n <code>remoteEP</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code> is less than 0.  \n  \n -or-  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n -or-  \n  \n <code>size</code> is less than 0.  \n  \n -or-  \n  \n <code>size</code> is greater than the length of <code>buffer</code> minus the value of the <code>offset</code> parameter."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "<code>socketFlags</code> is not a valid combination of values.  \n  \n -or-  \n  \n An operating system error occurs while accessing the <xref href=\"System.Net.Sockets.Socket\"></xref>. See the Remarks section for more information."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SendToAsync(SocketAsyncEventArgs)
  nameWithType: Socket.SendToAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendToAsync(SocketAsyncEventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a specific remote host.
  remarks: "The SendToAsync method starts an asynchronous send operation to the remote host specified in the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=fullName> property of the `e` parameter. Calling the SendToAsync method gives you the ability to send data within a separate execution thread. Although this method is intended for connectionless protocols, SendToAsync works with both connectionless and connection-oriented protocols.  \n  \n To be notified of completion, you must create a callback method that implements the EventHandler\\<SocketAsyncEventArgs> delegate and attach the callback to the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName> event.  \n  \n The following properties and events on the <xref:System.Net.Sockets.SocketAsyncEventArgs?displayProperty=fullName> object are required to successfully call this method:  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=fullName>  \n  \n-   <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName>  \n  \n The caller may set the <xref:System.Net.Sockets.SocketAsyncEventArgs.UserToken%2A?displayProperty=fullName> property to any user state object desired before calling the SendToAsync method, so that the information will be retrievable in the callback method. If the callback needs more information than a single object, a small class can be created to hold the other required state information as members.  \n  \n If you are using a connection-oriented protocol, you must first call the <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method. Otherwise SendToAsync will throw a <xref:System.Net.Sockets.SocketException>. When using a connection-oriented protocol, the SendToAsync method will ignore the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=fullName> property and send data to the <xref:System.Net.EndPoint?displayProperty=fullName> established in the <xref:System.Net.Sockets.Socket.Accept%2A>, <xref:System.Net.Sockets.Socket.AcceptAsync%2A>, <xref:System.Net.Sockets.Socket.BeginAccept%2A>, <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method.  \n  \n If you are using a connectionless protocol, you do not need to establish a default remote host with the <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method prior to calling SendToAsync. You only need to do this if you intend to call the <xref:System.Net.Sockets.Socket.BeginSend%2A> or <xref:System.Net.Sockets.Socket.SendAsync%2A> methods. If you do call the <xref:System.Net.Sockets.Socket.BeginConnect%2A>, <xref:System.Net.Sockets.Socket.Connect%2A>, or <xref:System.Net.Sockets.Socket.ConnectAsync%2A> method prior to calling SendToAsync, the <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A?displayProperty=fullName> property will override the specified default remote host for that send operation only. You are also not required to call the <xref:System.Net.Sockets.Socket.Bind%2A> method. In this case, the underlying service provider will assign the most appropriate local network IP address and port number. Use a port number of zero if you want the underlying service provider to select a free port. If you need to identify the assigned local network IP address and port number, you can use the <xref:System.Net.Sockets.Socket.LocalEndPoint%2A> property after the <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed?displayProperty=fullName> event is signaled and the associated delegates are called.  \n  \n If you want to send data to a broadcast address, you must first call the <xref:System.Net.Sockets.Socket.SetSocketOption%2A> method and set the socket option for <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> to true. You must also be sure that the size of your buffer does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and SendToAsync will throw a <xref:System.Net.Sockets.SocketException>.  \n  \n If you specify the DontRoute flag in the <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A?displayProperty=fullName> property, the data you are sending will not be routed.  \n  \n For message-oriented sockets, care must be taken not to exceed the maximum message size of the underlying transport. If the size of the buffer exceeds the maximum packet size of the underlying service provider, the datagram is not sent and SendToAsync will throw a <xref:System.Net.Sockets.SocketException>. The successful completion of a SendToAsync method does not indicate that the data was successfully delivered."
  syntax:
    content: public bool SendToAsync (System.Net.Sockets.SocketAsyncEventArgs e);
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: "Returns `true` if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will be raised upon completion of the operation.  \n  \n Returns `false` if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\"></xref> event on the <code>e</code> parameter will not be raised and the <code>e</code> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation."
  overload: System.Net.Sockets.Socket.SendToAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <xref href="stem.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A"></xref> cannot be null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: A socket operation was already in progress using the <xref href="System.Net.Sockets.SocketAsyncEventArgs"></xref> object specified in the <code>e</code> parameter.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Windows XP or later is required for this method.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: The protocol specified is connection-oriented, but the <xref href="System.Net.Sockets.Socket"></xref> is not yet connected.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)
  id: SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SetIPProtectionLevel(IPProtectionLevel)
  nameWithType: Socket.SetIPProtectionLevel(IPProtectionLevel)
  fullName: System.Net.Sockets.Socket.SetIPProtectionLevel(IPProtectionLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Set the IP protection level on a socket.
  remarks: "The SetIPProtectionLevel method enables restricting an a IPv6 or IP socket to listen on a specified scope, such as addresses with the same link local or site local prefix. This socket option enables applications to place access restrictions on IPv6 or IP sockets. Such restrictions enable an application running on a private LAN to simply and robustly harden itself against external attacks. This socket option can also be used to remove access restrictions if the `level` parameter is set to <xref:System.Net.Sockets.IPProtectionLevel>. This socket option widens or narrows the scope of a listening socket, enabling unrestricted access from public and private users when appropriate, or restricting access only to the same site, as required.  \n  \n This socket option has defined protection levels specified in the <xref:System.Net.Sockets.IPProtectionLevel> enumeration.  \n  \n The SetIPProtectionLevel method is used to enable or disable Network Address Traversal (NAT) for a <xref:System.Net.Sockets.Socket> instance. NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.  \n  \n When the `level` parameter is set to <xref:System.Net.Sockets.IPProtectionLevel>, or <xref:System.Net.Sockets.IPProtectionLevel>, this explicitly disables NAT traversal for a <xref:System.Net.Sockets.Socket> instance.  \n  \n When the `level` parameter is set to <xref:System.Net.Sockets.IPProtectionLevel>, this may allow NAT traversal for a <xref:System.Net.Sockets.Socket> depending on firewall rules in place on the system."
  syntax:
    content: public void SetIPProtectionLevel (System.Net.Sockets.IPProtectionLevel level);
    parameters:
    - id: level
      type: System.Net.Sockets.IPProtectionLevel
      description: The IP protection level to set on this socket.
  overload: System.Net.Sockets.Socket.SetIPProtectionLevel*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>level</code> parameter cannot be <xref href="System.Net.Sockets.IPProtectionLevel"></xref>. The IP protection level cannot be set to unspecified.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Net.Sockets.AddressFamily"></xref> of the socket must be either <xref href="System.Net.Sockets.AddressFamily"></xref> or <xref href="System.Net.Sockets.AddressFamily"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Boolean)
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Boolean)
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sets the specified <xref href="System.Net.Sockets.Socket"></xref> option to the specified <xref href="System.Boolean"></xref> value.
  remarks: "<xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>. Set `optionValue` to `true` to enable the option, or to `false` to disable the option.  \n  \n <xref:System.Net.Sockets.Socket> options are grouped by level of protocol support.  \n  \n Listed below are the various <xref:System.Net.Sockets.Socket> options that can be set using this overload. These options are grouped by the appropriate <xref:System.Net.Sockets.SocketOptionLevel> value. If you intend to set any of these options, be sure to use the appropriate <xref:System.Net.Sockets.SocketOptionLevel> value for the `optionLevel` parameter. The option you choose to set must be specified in the `optionName` parameter. If you want to get the current value of any of the options listed, use the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.  \n  \n <xref:System.Net.Sockets.SocketOptionLevel?displayProperty=fullName> options that can be set using this overload.  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n <xref:System.Net.Sockets.SocketOptionLevel?displayProperty=fullName> options that can be set using this overload.  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n <xref:System.Net.Sockets.SocketOptionLevel?displayProperty=fullName> options that can be set using this overload.  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n <xref:System.Net.Sockets.SocketOptionLevel?displayProperty=fullName> options that can be set using this overload.  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n For more information on these options, refer to the <xref:System.Net.Sockets.SocketOptionName> enumeration.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException> exception, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error."
  example:
  - "The following code example opens a socket and enables the `DontLinger` and the `OutOfBandInline` socket options.  \n  \n [!code-cs[NCLSocketEnhancements#5](~/add/codesnippet/csharp/70b4c8d1-e5b4-47b8-98a4-_1.cs)]\n [!code-cpp[NCLSocketEnhancements#5](~/add/codesnippet/cpp/70b4c8d1-e5b4-47b8-98a4-_1.cpp)]"
  syntax:
    content: public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, bool optionValue);
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: One of the <xref href="System.Net.Sockets.SocketOptionLevel"></xref> values.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: One of the <xref href="System.Net.Sockets.SocketOptionName"></xref> values.
    - id: optionValue
      type: System.Boolean
      description: The value of the option, represented as a <xref href="System.Boolean"></xref>.
  overload: System.Net.Sockets.Socket.SetSocketOption*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> object has been closed.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sets the specified <xref href="System.Net.Sockets.Socket"></xref> option to the specified value, represented as a byte array.
  remarks: "<xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>. Use this overload to set those <xref:System.Net.Sockets.Socket> options that require a byte array as an option value.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example sets the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values.  \n  \n [!code-cs[Socket_Socket_Options#1](~/add/codesnippet/csharp/b776473c-0cb2-49b3-91de-_1.cs)]\n [!code-cpp[Socket_Socket_Options#1](~/add/codesnippet/cpp/b776473c-0cb2-49b3-91de-_1.cpp)]\n [!code-vb[Socket_Socket_Options#1](~/add/codesnippet/visualbasic/b776473c-0cb2-49b3-91de-_1.vb)]"
  syntax:
    content: public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, byte[] optionValue);
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: One of the <xref href="System.Net.Sockets.SocketOptionLevel"></xref> values.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: One of the <xref href="System.Net.Sockets.SocketOptionName"></xref> values.
    - id: optionValue
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> that represents the value of the option.
  overload: System.Net.Sockets.Socket.SetSocketOption*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sets the specified <xref href="System.Net.Sockets.Socket"></xref> option to the specified integer value.
  remarks: "<xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>. For an option with a <xref:System.Boolean> data type, specify a nonzero value to enable the option, and a zero value to disable the option. For an option with an integer data type, specify the appropriate value. <xref:System.Net.Sockets.Socket> options are grouped by level of protocol support.  \n  \n Listed below are the various <xref:System.Net.Sockets.Socket> options that can be set using this overload. These options are grouped by the appropriate <xref:System.Net.Sockets.SocketOptionLevel>. If you intend to set any of these options, be sure to use the appropriate <xref:System.Net.Sockets.SocketOptionLevel> for the `optionLevel` parameter. The option you choose to set must be specified in the `optionName` parameter. If you want to get the current value of any of the options listed, use the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.  \n  \n <xref:System.Net.Sockets.SocketOptionLevel?displayProperty=fullName> options that can be set using this overload.  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n <xref:System.Net.Sockets.SocketOptionLevel?displayProperty=fullName> options that can be set using this overload.  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n <xref:System.Net.Sockets.SocketOptionLevel?displayProperty=fullName> options that can be set using this overload.  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n <xref:System.Net.Sockets.SocketOptionLevel?displayProperty=fullName> options that can be set using this overload.  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n <xref:System.Net.Sockets.SocketOptionLevel?displayProperty=fullName> options that can be set using this overload.  \n  \n-   <xref:System.Net.Sockets.SocketOptionName>  \n  \n For more information about these options, refer to the <xref:System.Net.Sockets.SocketOptionName> enumeration.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example sets the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time-out values.  \n  \n [!code-cs[Socket_Socket_Options#1](~/add/codesnippet/csharp/a74761f3-a726-4e0b-bc5f-_1.cs)]\n [!code-cpp[Socket_Socket_Options#1](~/add/codesnippet/cpp/a74761f3-a726-4e0b-bc5f-_1.cpp)]\n [!code-vb[Socket_Socket_Options#1](~/add/codesnippet/visualbasic/a74761f3-a726-4e0b-bc5f-_1.vb)]"
  syntax:
    content: public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, int optionValue);
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: One of the <xref href="System.Net.Sockets.SocketOptionLevel"></xref> values.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: One of the <xref href="System.Net.Sockets.SocketOptionName"></xref> values.
    - id: optionValue
      type: System.Int32
      description: A value of the option.
  overload: System.Net.Sockets.Socket.SetSocketOption*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Object)
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Object)
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Sets the specified <xref href="System.Net.Sockets.Socket"></xref> option to the specified value, represented as an object.
  remarks: "<xref:System.Net.Sockets.Socket> options determine the behavior of the current <xref:System.Net.Sockets.Socket>. Use this overload to set the <xref:System.Net.Sockets.SocketOptionName>, <xref:System.Net.Sockets.SocketOptionName>, and <xref:System.Net.Sockets.SocketOptionName><xref:System.Net.Sockets.Socket> options. For the <xref:System.Net.Sockets.SocketOptionName> option, use <xref:System.Net.Sockets.Socket> for the `optionLevel` parameter. For <xref:System.Net.Sockets.SocketOptionName> and <xref:System.Net.Sockets.SocketOptionName>, use <xref:System.Net.Sockets.SocketOptionLevel>. If you want to get the current value of any of the options listed above, use the <xref:System.Net.Sockets.Socket.GetSocketOption%2A> method.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error."
  example:
  - "The following code example sets the <xref:System.Net.Sockets.LingerOption> and <xref:System.Net.Sockets.Socket.Send%2A> time out values.  \n  \n [!code-cs[Socket_Socket_Options#1](~/add/codesnippet/csharp/2bb4acc0-3126-46cd-a798-_1.cs)]\n [!code-cpp[Socket_Socket_Options#1](~/add/codesnippet/cpp/2bb4acc0-3126-46cd-a798-_1.cpp)]\n [!code-vb[Socket_Socket_Options#1](~/add/codesnippet/visualbasic/2bb4acc0-3126-46cd-a798-_1.vb)]"
  syntax:
    content: public void SetSocketOption (System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, object optionValue);
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: One of the <xref href="System.Net.Sockets.SocketOptionLevel"></xref> values.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: One of the <xref href="System.Net.Sockets.SocketOptionName"></xref> values.
    - id: optionValue
      type: System.Object
      description: A <xref href="System.Net.Sockets.LingerOption"></xref> or <xref href="System.Net.Sockets.MulticastOption"></xref> that contains the value of the option.
  overload: System.Net.Sockets.Socket.SetSocketOption*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>optionValue</code> is `null`.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  id: Shutdown(System.Net.Sockets.SocketShutdown)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Shutdown(SocketShutdown)
  nameWithType: Socket.Shutdown(SocketShutdown)
  fullName: System.Net.Sockets.Socket.Shutdown(SocketShutdown)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Disables sends and receives on a <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: "When using a connection-oriented <xref:System.Net.Sockets.Socket>, always call the Shutdown method before closing the <xref:System.Net.Sockets.Socket>. This ensures that all data is sent and received on the connected socket before it is closed.  \n  \n Call the <xref:System.Net.Sockets.Socket.Close%2A> method to free all managed and unmanaged resources associated with the <xref:System.Net.Sockets.Socket>. Do not attempt to reuse the <xref:System.Net.Sockets.Socket> after closing.  \n  \n The following table shows the <xref:System.Net.Sockets.SocketShutdown> enumeration values that are valid for the `how` parameter.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|Send|Disable sending on this <xref:System.Net.Sockets.Socket>.|  \n|Receive|Disable receiving on this <xref:System.Net.Sockets.Socket>.|  \n|Both|Disable both sending and receiving on this <xref:System.Net.Sockets.Socket>.|  \n  \n Setting `how` to <xref:System.Net.Sockets.SocketShutdown> specifies that subsequent calls to <xref:System.Net.Sockets.Socket.Send%2A> are not allowed. If you are using a connectionless <xref:System.Net.Sockets.Socket>, specifying <xref:System.Net.Sockets.SocketShutdown> will have no effect.  \n  \n Setting `how` to <xref:System.Net.Sockets.SocketShutdown> specifies that subsequent calls to <xref:System.Net.Sockets.Socket.Receive%2A> are not allowed. This has no effect on lower protocol layers. If you are using a connection-oriented protocol, the connection is terminated if either of the following conditions exist after a call to Shutdown :  \n  \n-   Data is in the incoming network buffer waiting to be received.  \n  \n-   More data has arrived.  \n  \n If you are using a connectionless protocol, datagrams are accepted and queued. However, if no buffer space is available for additional incoming datagrams, they will be discarded and no error will be returned to the sender. Using Shutdown on a connectionless <xref:System.Net.Sockets.Socket> is not recommended.  \n  \n Setting `how` to <xref:System.Net.Sockets.SocketShutdown> disables both sends and receives as described above.  \n  \n> [!NOTE]\n>  If you receive a <xref:System.Net.Sockets.SocketException> when calling the Shutdown method, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example uses Shutdown to disable the <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cpp[Classic Socket.Close Example#1](~/add/codesnippet/cpp/m-system.net.sockets.soc_11_1.cpp)]\n [!code-cs[Classic Socket.Close Example#1](~/add/codesnippet/csharp/m-system.net.sockets.soc_11_1.cs)]\n [!code-vb[Classic Socket.Close Example#1](~/add/codesnippet/visualbasic/m-system.net.sockets.soc_11_1.vb)]"
  syntax:
    content: public void Shutdown (System.Net.Sockets.SocketShutdown how);
    parameters:
    - id: how
      type: System.Net.Sockets.SocketShutdown
      description: One of the <xref href="System.Net.Sockets.SocketShutdown"></xref> values that specifies the operation that will no longer be allowed.
  overload: System.Net.Sockets.Socket.Shutdown*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SocketType
  id: SocketType
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SocketType
  nameWithType: Socket.SocketType
  fullName: System.Net.Sockets.Socket.SocketType
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets the type of the <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: SocketType is read-only and is set when the <xref:System.Net.Sockets.Socket> is created.
  example:
  - "The following code example displays the <xref:System.Net.Sockets.AddressFamily>, <xref:System.Net.Sockets.SocketType>, and <xref:System.Net.Sockets.ProtocolType> to the console.  \n  \n [!code-cs[Socket_Socket_Options#3](~/add/codesnippet/csharp/p-system.net.sockets.soc_15_1.cs)]\n [!code-cpp[Socket_Socket_Options#3](~/add/codesnippet/cpp/p-system.net.sockets.soc_15_1.cpp)]\n [!code-vb[Socket_Socket_Options#3](~/add/codesnippet/visualbasic/p-system.net.sockets.soc_15_1.vb)]"
  syntax:
    content: public System.Net.Sockets.SocketType SocketType { get; }
    return:
      type: System.Net.Sockets.SocketType
      description: One of the <xref href="System.Net.Sockets.SocketType"></xref> values.
  overload: System.Net.Sockets.Socket.SocketType*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SupportsIPv4
  id: SupportsIPv4
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SupportsIPv4
  nameWithType: Socket.SupportsIPv4
  fullName: System.Net.Sockets.Socket.SupportsIPv4
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets a value indicating whether IPv4 support is available and enabled on the current host.
  remarks: The operating system may support both IPv4 and IPv6 protocols.
  syntax:
    content: public static bool SupportsIPv4 { get; }
    return:
      type: System.Boolean
      description: '`true` if the current host supports the IPv4 protocol; otherwise, `false`.'
  overload: System.Net.Sockets.Socket.SupportsIPv4*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.SupportsIPv6
  id: SupportsIPv6
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: SupportsIPv6
  nameWithType: Socket.SupportsIPv6
  fullName: System.Net.Sockets.Socket.SupportsIPv6
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets a value that indicates whether the Framework supports IPv6 for certain obsolete <xref href="System.Net.Dns"></xref> members.
  remarks: The operating system may support both IPv4 and IPv6 protocols.
  syntax:
    content: public static bool SupportsIPv6 { get; }
    return:
      type: System.Boolean
      description: '`true` if the Framework supports IPv6 for certain obsolete <xref href="System.Net.Dns"></xref> methods; otherwise, `false`.'
  overload: System.Net.Sockets.Socket.SupportsIPv6*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.Ttl
  id: Ttl
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: Ttl
  nameWithType: Socket.Ttl
  fullName: System.Net.Sockets.Socket.Ttl
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies the Time To Live (TTL) value of Internet Protocol (IP) packets sent by the <xref href="System.Net.Sockets.Socket"></xref>.
  remarks: "The TTL value indicates the maximum number of routers the packet can traverse before the router discards the packet and an Internet Control Message Protocol (ICMP) \"TTL exceeded\" error message is returned to the sender.  \n  \n The TTL value may be set to a value from 0 to 255. When this property is not set, the default TTL value for a socket is 32.  \n  \n Setting this property on a Transmission Control Protocol (TCP) socket is ignored by the TCP/IP stack if a successful connection has been established using the socket.  \n  \n If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error."
  example:
  - "The following code example demonstrates the use of the Ttl property.  \n  \n [!code-cpp[SocketPropertyTester#1](~/add/codesnippet/cpp/p-system.net.sockets.soc_17_1.cpp)]\n [!code-cs[SocketPropertyTester#1](~/add/codesnippet/csharp/p-system.net.sockets.soc_17_1.cs)]"
  syntax:
    content: public short Ttl { get; set; }
    return:
      type: System.Int16
      description: The TTL value.
  overload: System.Net.Sockets.Socket.Ttl*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The TTL value can't be set to a negative number.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This property can be set only for sockets in the <xref href="System.Net.Sockets.AddressFamily"></xref> or <xref href="System.Net.Sockets.AddressFamily"></xref> families.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. This error is also returned when an attempt was made to set TTL to a value higher than 255.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Net.Sockets.Socket"></xref> has been closed.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.Sockets.Socket.UseOnlyOverlappedIO
  id: UseOnlyOverlappedIO
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  name: UseOnlyOverlappedIO
  nameWithType: Socket.UseOnlyOverlappedIO
  fullName: System.Net.Sockets.Socket.UseOnlyOverlappedIO
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: Specifies whether the socket should only use Overlapped I/O mode.
  remarks: Set this property to `true` for a <xref:System.Net.Sockets.Socket> you intend to call <xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>. Otherwise, the Framework may assign a completion port to the socket, which would prohibit the use of <xref:System.Net.Sockets.Socket.DuplicateAndClose%2A>.
  syntax:
    content: public bool UseOnlyOverlappedIO { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Net.Sockets.Socket"></xref> uses only overlapped I/O; otherwise, `false`. The default is `false`.'
  overload: System.Net.Sockets.Socket.UseOnlyOverlappedIO*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The socket has been bound to a completion port.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.Sockets\Socket.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.Sockets/Socket.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.Sockets.SocketException
  parent: System.Net.Sockets
  isExternal: false
  name: SocketException
  nameWithType: SocketException
  fullName: System.Net.Sockets.SocketException
- uid: System.ObjectDisposedException
  parent: System
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.IO.FileNotFoundException
  parent: System.IO
  isExternal: false
  name: FileNotFoundException
  nameWithType: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.PlatformNotSupportedException
  parent: System
  isExternal: false
  name: PlatformNotSupportedException
  nameWithType: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.Net.WebException
  parent: System.Net
  isExternal: false
  name: WebException
  nameWithType: WebException
  fullName: System.Net.WebException
- uid: System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketInformation)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Socket(SocketInformation)
  nameWithType: Socket.Socket(SocketInformation)
  fullName: System.Net.Sockets.Socket.Socket(SocketInformation)
- uid: System.Net.Sockets.SocketInformation
  parent: System.Net.Sockets
  isExternal: false
  name: SocketInformation
  nameWithType: SocketInformation
  fullName: System.Net.Sockets.SocketInformation
- uid: System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Socket(SocketType,ProtocolType)
  nameWithType: Socket.Socket(SocketType,ProtocolType)
  fullName: System.Net.Sockets.Socket.Socket(SocketType,ProtocolType)
- uid: System.Net.Sockets.SocketType
  parent: System.Net.Sockets
  isExternal: false
  name: SocketType
  nameWithType: SocketType
  fullName: System.Net.Sockets.SocketType
- uid: System.Net.Sockets.ProtocolType
  parent: System.Net.Sockets
  isExternal: false
  name: ProtocolType
  nameWithType: ProtocolType
  fullName: System.Net.Sockets.ProtocolType
- uid: System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Socket(AddressFamily,SocketType,ProtocolType)
  nameWithType: Socket.Socket(AddressFamily,SocketType,ProtocolType)
  fullName: System.Net.Sockets.Socket.Socket(AddressFamily,SocketType,ProtocolType)
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: false
  name: AddressFamily
  nameWithType: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets.Socket.Accept
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Accept()
  nameWithType: Socket.Accept()
  fullName: System.Net.Sockets.Socket.Accept()
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: false
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: AcceptAsync(SocketAsyncEventArgs)
  nameWithType: Socket.AcceptAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.AcceptAsync(SocketAsyncEventArgs)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.SocketAsyncEventArgs
  parent: System.Net.Sockets
  isExternal: false
  name: SocketAsyncEventArgs
  nameWithType: SocketAsyncEventArgs
  fullName: System.Net.Sockets.SocketAsyncEventArgs
- uid: System.Net.Sockets.Socket.AddressFamily
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: AddressFamily
  nameWithType: Socket.AddressFamily
  fullName: System.Net.Sockets.Socket.AddressFamily
- uid: System.Net.Sockets.Socket.Available
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Available
  nameWithType: Socket.Available
  fullName: System.Net.Sockets.Socket.Available
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginAccept(AsyncCallback,Object)
  nameWithType: Socket.BeginAccept(AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginAccept(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: false
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.Socket.BeginAccept(System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginAccept(Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginAccept(Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginAccept(Int32,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginAccept(Socket,Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginAccept(Socket,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginAccept(Socket,Int32,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginConnect(EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(EndPoint,AsyncCallback,Object)
- uid: System.Net.EndPoint
  parent: System.Net
  isExternal: false
  name: EndPoint
  nameWithType: EndPoint
  fullName: System.Net.EndPoint
- uid: System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginConnect(IPAddress,Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(IPAddress,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(IPAddress,Int32,AsyncCallback,Object)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginConnect(IPAddress[],Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(IPAddress[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(IPAddress[],Int32,AsyncCallback,Object)
- uid: System.Net.IPAddress[]
  parent: System.Net
  isExternal: false
  name: IPAddress[]
  nameWithType: IPAddress[]
  fullName: System.Net.IPAddress[]
  spec.csharp:
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: IPAddress[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginConnect(String,Int32,AsyncCallback,Object)
  nameWithType: Socket.BeginConnect(String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginConnect(String,Int32,AsyncCallback,Object)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginDisconnect(Boolean,AsyncCallback,Object)
  nameWithType: Socket.BeginDisconnect(Boolean,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginDisconnect(Boolean,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
- uid: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<ArraySegment<Byte>>
  nameWithType: IList<ArraySegment<Byte>>
  fullName: System.Collections.Generic.IList<System.ArraySegment<System.Byte>>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.ArraySegment<System.Byte>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.SocketFlags
  parent: System.Net.Sockets
  isExternal: false
  name: SocketFlags
  nameWithType: SocketFlags
  fullName: System.Net.Sockets.SocketFlags
- uid: System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
- uid: System.Net.Sockets.SocketError
  parent: System.Net.Sockets
  isExternal: false
  name: SocketError
  nameWithType: SocketError
  fullName: System.Net.Sockets.SocketError
- uid: System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceive(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceive(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceive(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSend(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSend(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(IList<ArraySegment<Byte>>,SocketFlags,SocketError,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSend(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSend(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  nameWithType: Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSend(Byte[],Int32,Int32,SocketFlags,SocketError,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSendFile(String,AsyncCallback,Object)
  nameWithType: Socket.BeginSendFile(String,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSendFile(String,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSendFile(String,Byte[],Byte[],TransmitFileOptions,AsyncCallback,Object)
  nameWithType: Socket.BeginSendFile(String,Byte[],Byte[],TransmitFileOptions,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSendFile(String,Byte[],Byte[],TransmitFileOptions,AsyncCallback,Object)
- uid: System.Net.Sockets.TransmitFileOptions
  parent: System.Net.Sockets
  isExternal: false
  name: TransmitFileOptions
  nameWithType: TransmitFileOptions
  fullName: System.Net.Sockets.TransmitFileOptions
- uid: System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSendTo(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  nameWithType: Socket.BeginSendTo(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.Socket.BeginSendTo(Byte[],Int32,Int32,SocketFlags,EndPoint,AsyncCallback,Object)
- uid: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Bind(EndPoint)
  nameWithType: Socket.Bind(EndPoint)
  fullName: System.Net.Sockets.Socket.Bind(EndPoint)
- uid: System.Net.Sockets.Socket.Blocking
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Blocking
  nameWithType: Socket.Blocking
  fullName: System.Net.Sockets.Socket.Blocking
- uid: System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: CancelConnectAsync(SocketAsyncEventArgs)
  nameWithType: Socket.CancelConnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.CancelConnectAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.Close
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Close()
  nameWithType: Socket.Close()
  fullName: System.Net.Sockets.Socket.Close()
- uid: System.Net.Sockets.Socket.Close(System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Close(Int32)
  nameWithType: Socket.Close(Int32)
  fullName: System.Net.Sockets.Socket.Close(Int32)
- uid: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Connect(EndPoint)
  nameWithType: Socket.Connect(EndPoint)
  fullName: System.Net.Sockets.Socket.Connect(EndPoint)
- uid: System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Connect(IPAddress,Int32)
  nameWithType: Socket.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.Socket.Connect(IPAddress,Int32)
- uid: System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Connect(IPAddress[],Int32)
  nameWithType: Socket.Connect(IPAddress[],Int32)
  fullName: System.Net.Sockets.Socket.Connect(IPAddress[],Int32)
- uid: System.Net.Sockets.Socket.Connect(System.String,System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Connect(String,Int32)
  nameWithType: Socket.Connect(String,Int32)
  fullName: System.Net.Sockets.Socket.Connect(String,Int32)
- uid: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ConnectAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ConnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ConnectAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ConnectAsync(SocketType,ProtocolType,SocketAsyncEventArgs)
  nameWithType: Socket.ConnectAsync(SocketType,ProtocolType,SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ConnectAsync(SocketType,ProtocolType,SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.Connected
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Connected
  nameWithType: Socket.Connected
  fullName: System.Net.Sockets.Socket.Connected
- uid: System.Net.Sockets.Socket.Disconnect(System.Boolean)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Disconnect(Boolean)
  nameWithType: Socket.Disconnect(Boolean)
  fullName: System.Net.Sockets.Socket.Disconnect(Boolean)
- uid: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: DisconnectAsync(SocketAsyncEventArgs)
  nameWithType: Socket.DisconnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.DisconnectAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.Dispose
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Dispose()
  nameWithType: Socket.Dispose()
  fullName: System.Net.Sockets.Socket.Dispose()
- uid: System.Net.Sockets.Socket.Dispose(System.Boolean)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Socket.Dispose(Boolean)
  fullName: System.Net.Sockets.Socket.Dispose(Boolean)
- uid: System.Net.Sockets.Socket.DontFragment
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: DontFragment
  nameWithType: Socket.DontFragment
  fullName: System.Net.Sockets.Socket.DontFragment
- uid: System.Net.Sockets.Socket.DualMode
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: DualMode
  nameWithType: Socket.DualMode
  fullName: System.Net.Sockets.Socket.DualMode
- uid: System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: DuplicateAndClose(Int32)
  nameWithType: Socket.DuplicateAndClose(Int32)
  fullName: System.Net.Sockets.Socket.DuplicateAndClose(Int32)
- uid: System.Net.Sockets.Socket.EnableBroadcast
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EnableBroadcast
  nameWithType: Socket.EnableBroadcast
  fullName: System.Net.Sockets.Socket.EnableBroadcast
- uid: System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndAccept(IAsyncResult)
  nameWithType: Socket.EndAccept(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndAccept(IAsyncResult)
- uid: System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndAccept(Byte[],IAsyncResult)
  nameWithType: Socket.EndAccept(Byte[],IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndAccept(Byte[],IAsyncResult)
- uid: System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndAccept(Byte[],Int32,IAsyncResult)
  nameWithType: Socket.EndAccept(Byte[],Int32,IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndAccept(Byte[],Int32,IAsyncResult)
- uid: System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndConnect(IAsyncResult)
  nameWithType: Socket.EndConnect(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndConnect(IAsyncResult)
- uid: System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndDisconnect(IAsyncResult)
  nameWithType: Socket.EndDisconnect(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndDisconnect(IAsyncResult)
- uid: System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndReceive(IAsyncResult)
  nameWithType: Socket.EndReceive(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndReceive(IAsyncResult)
- uid: System.Net.Sockets.Socket.EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndReceive(IAsyncResult,SocketError)
  nameWithType: Socket.EndReceive(IAsyncResult,SocketError)
  fullName: System.Net.Sockets.Socket.EndReceive(IAsyncResult,SocketError)
- uid: System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndReceiveFrom(IAsyncResult,EndPoint)
  nameWithType: Socket.EndReceiveFrom(IAsyncResult,EndPoint)
  fullName: System.Net.Sockets.Socket.EndReceiveFrom(IAsyncResult,EndPoint)
- uid: System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndReceiveMessageFrom(IAsyncResult,SocketFlags,EndPoint,IPPacketInformation)
  nameWithType: Socket.EndReceiveMessageFrom(IAsyncResult,SocketFlags,EndPoint,IPPacketInformation)
  fullName: System.Net.Sockets.Socket.EndReceiveMessageFrom(IAsyncResult,SocketFlags,EndPoint,IPPacketInformation)
- uid: System.Net.Sockets.IPPacketInformation
  parent: System.Net.Sockets
  isExternal: false
  name: IPPacketInformation
  nameWithType: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
- uid: System.Net.Sockets.Socket.EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndSend(IAsyncResult)
  nameWithType: Socket.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndSend(IAsyncResult)
- uid: System.Net.Sockets.Socket.EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndSend(IAsyncResult,SocketError)
  nameWithType: Socket.EndSend(IAsyncResult,SocketError)
  fullName: System.Net.Sockets.Socket.EndSend(IAsyncResult,SocketError)
- uid: System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndSendFile(IAsyncResult)
  nameWithType: Socket.EndSendFile(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndSendFile(IAsyncResult)
- uid: System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndSendTo(IAsyncResult)
  nameWithType: Socket.EndSendTo(IAsyncResult)
  fullName: System.Net.Sockets.Socket.EndSendTo(IAsyncResult)
- uid: System.Net.Sockets.Socket.ExclusiveAddressUse
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: Socket.ExclusiveAddressUse
  fullName: System.Net.Sockets.Socket.ExclusiveAddressUse
- uid: System.Net.Sockets.Socket.Finalize
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Finalize()
  nameWithType: Socket.Finalize()
  fullName: System.Net.Sockets.Socket.Finalize()
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: GetSocketOption(SocketOptionLevel,SocketOptionName)
  nameWithType: Socket.GetSocketOption(SocketOptionLevel,SocketOptionName)
  fullName: System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel,SocketOptionName)
- uid: System.Net.Sockets.SocketOptionLevel
  parent: System.Net.Sockets
  isExternal: false
  name: SocketOptionLevel
  nameWithType: SocketOptionLevel
  fullName: System.Net.Sockets.SocketOptionLevel
- uid: System.Net.Sockets.SocketOptionName
  parent: System.Net.Sockets
  isExternal: false
  name: SocketOptionName
  nameWithType: SocketOptionName
  fullName: System.Net.Sockets.SocketOptionName
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: GetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  nameWithType: Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  fullName: System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: GetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  nameWithType: Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  fullName: System.Net.Sockets.Socket.GetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
- uid: System.Net.Sockets.Socket.Handle
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Handle
  nameWithType: Socket.Handle
  fullName: System.Net.Sockets.Socket.Handle
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: IOControl(Int32,Byte[],Byte[])
  nameWithType: Socket.IOControl(Int32,Byte[],Byte[])
  fullName: System.Net.Sockets.Socket.IOControl(Int32,Byte[],Byte[])
- uid: System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: IOControl(IOControlCode,Byte[],Byte[])
  nameWithType: Socket.IOControl(IOControlCode,Byte[],Byte[])
  fullName: System.Net.Sockets.Socket.IOControl(IOControlCode,Byte[],Byte[])
- uid: System.Net.Sockets.IOControlCode
  parent: System.Net.Sockets
  isExternal: false
  name: IOControlCode
  nameWithType: IOControlCode
  fullName: System.Net.Sockets.IOControlCode
- uid: System.Net.Sockets.Socket.IsBound
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: IsBound
  nameWithType: Socket.IsBound
  fullName: System.Net.Sockets.Socket.IsBound
- uid: System.Net.Sockets.Socket.LingerState
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: LingerState
  nameWithType: Socket.LingerState
  fullName: System.Net.Sockets.Socket.LingerState
- uid: System.Net.Sockets.LingerOption
  parent: System.Net.Sockets
  isExternal: false
  name: LingerOption
  nameWithType: LingerOption
  fullName: System.Net.Sockets.LingerOption
- uid: System.Net.Sockets.Socket.Listen(System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Listen(Int32)
  nameWithType: Socket.Listen(Int32)
  fullName: System.Net.Sockets.Socket.Listen(Int32)
- uid: System.Net.Sockets.Socket.LocalEndPoint
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: LocalEndPoint
  nameWithType: Socket.LocalEndPoint
  fullName: System.Net.Sockets.Socket.LocalEndPoint
- uid: System.Net.Sockets.Socket.MulticastLoopback
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: MulticastLoopback
  nameWithType: Socket.MulticastLoopback
  fullName: System.Net.Sockets.Socket.MulticastLoopback
- uid: System.Net.Sockets.Socket.NoDelay
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: NoDelay
  nameWithType: Socket.NoDelay
  fullName: System.Net.Sockets.Socket.NoDelay
- uid: System.Net.Sockets.Socket.OSSupportsIPv4
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: OSSupportsIPv4
  nameWithType: Socket.OSSupportsIPv4
  fullName: System.Net.Sockets.Socket.OSSupportsIPv4
- uid: System.Net.Sockets.Socket.OSSupportsIPv6
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: OSSupportsIPv6
  nameWithType: Socket.OSSupportsIPv6
  fullName: System.Net.Sockets.Socket.OSSupportsIPv6
- uid: System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Poll(Int32,SelectMode)
  nameWithType: Socket.Poll(Int32,SelectMode)
  fullName: System.Net.Sockets.Socket.Poll(Int32,SelectMode)
- uid: System.Net.Sockets.SelectMode
  parent: System.Net.Sockets
  isExternal: false
  name: SelectMode
  nameWithType: SelectMode
  fullName: System.Net.Sockets.SelectMode
- uid: System.Net.Sockets.Socket.ProtocolType
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ProtocolType
  nameWithType: Socket.ProtocolType
  fullName: System.Net.Sockets.Socket.ProtocolType
- uid: System.Net.Sockets.Socket.Receive(System.Byte[])
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(Byte[])
  nameWithType: Socket.Receive(Byte[])
  fullName: System.Net.Sockets.Socket.Receive(Byte[])
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(IList<ArraySegment<Byte>>)
  nameWithType: Socket.Receive(IList<ArraySegment<Byte>>)
  fullName: System.Net.Sockets.Socket.Receive(IList<ArraySegment<Byte>>)
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(Byte[],SocketFlags)
  nameWithType: Socket.Receive(Byte[],SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],SocketFlags)
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(IList<ArraySegment<Byte>>,SocketFlags)
  nameWithType: Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags)
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(Byte[],Int32,SocketFlags)
  nameWithType: Socket.Receive(Byte[],Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],Int32,SocketFlags)
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  nameWithType: Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Receive(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(Byte[],Int32,Int32,SocketFlags)
  nameWithType: Socket.Receive(Byte[],Int32,Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],Int32,Int32,SocketFlags)
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive(Byte[],Int32,Int32,SocketFlags,SocketError)
  nameWithType: Socket.Receive(Byte[],Int32,Int32,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Receive(Byte[],Int32,Int32,SocketFlags,SocketError)
- uid: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ReceiveAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.ReceiveBufferSize
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: Socket.ReceiveBufferSize
  fullName: System.Net.Sockets.Socket.ReceiveBufferSize
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveFrom(Byte[],EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],EndPoint)
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveFrom(Byte[],SocketFlags,EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],SocketFlags,EndPoint)
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveFrom(Byte[],Int32,SocketFlags,EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],Int32,SocketFlags,EndPoint)
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(Byte[],Int32,Int32,SocketFlags,EndPoint)
- uid: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveFromAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ReceiveFromAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveFromAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,IPPacketInformation)
  nameWithType: Socket.ReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,IPPacketInformation)
  fullName: System.Net.Sockets.Socket.ReceiveMessageFrom(Byte[],Int32,Int32,SocketFlags,EndPoint,IPPacketInformation)
- uid: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveMessageFromAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ReceiveMessageFromAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveMessageFromAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.ReceiveTimeout
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveTimeout
  nameWithType: Socket.ReceiveTimeout
  fullName: System.Net.Sockets.Socket.ReceiveTimeout
- uid: System.Net.Sockets.Socket.RemoteEndPoint
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: RemoteEndPoint
  nameWithType: Socket.RemoteEndPoint
  fullName: System.Net.Sockets.Socket.RemoteEndPoint
- uid: System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Select(IList,IList,IList,Int32)
  nameWithType: Socket.Select(IList,IList,IList,Int32)
  fullName: System.Net.Sockets.Socket.Select(IList,IList,IList,Int32)
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Net.Sockets.Socket.Send(System.Byte[])
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(Byte[])
  nameWithType: Socket.Send(Byte[])
  fullName: System.Net.Sockets.Socket.Send(Byte[])
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(IList<ArraySegment<Byte>>)
  nameWithType: Socket.Send(IList<ArraySegment<Byte>>)
  fullName: System.Net.Sockets.Socket.Send(IList<ArraySegment<Byte>>)
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(Byte[],SocketFlags)
  nameWithType: Socket.Send(Byte[],SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(Byte[],SocketFlags)
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(IList<ArraySegment<Byte>>,SocketFlags)
  nameWithType: Socket.Send(IList<ArraySegment<Byte>>,SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(IList<ArraySegment<Byte>>,SocketFlags)
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(Byte[],Int32,SocketFlags)
  nameWithType: Socket.Send(Byte[],Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(Byte[],Int32,SocketFlags)
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  nameWithType: Socket.Send(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Send(IList<ArraySegment<Byte>>,SocketFlags,SocketError)
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(Byte[],Int32,Int32,SocketFlags)
  nameWithType: Socket.Send(Byte[],Int32,Int32,SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(Byte[],Int32,Int32,SocketFlags)
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send(Byte[],Int32,Int32,SocketFlags,SocketError)
  nameWithType: Socket.Send(Byte[],Int32,Int32,SocketFlags,SocketError)
  fullName: System.Net.Sockets.Socket.Send(Byte[],Int32,Int32,SocketFlags,SocketError)
- uid: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendAsync(SocketAsyncEventArgs)
  nameWithType: Socket.SendAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.SendBufferSize
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendBufferSize
  nameWithType: Socket.SendBufferSize
  fullName: System.Net.Sockets.Socket.SendBufferSize
- uid: System.Net.Sockets.Socket.SendFile(System.String)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendFile(String)
  nameWithType: Socket.SendFile(String)
  fullName: System.Net.Sockets.Socket.SendFile(String)
- uid: System.Net.Sockets.Socket.SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendFile(String,Byte[],Byte[],TransmitFileOptions)
  nameWithType: Socket.SendFile(String,Byte[],Byte[],TransmitFileOptions)
  fullName: System.Net.Sockets.Socket.SendFile(String,Byte[],Byte[],TransmitFileOptions)
- uid: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendPacketsAsync(SocketAsyncEventArgs)
  nameWithType: Socket.SendPacketsAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendPacketsAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.SendTimeout
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendTimeout
  nameWithType: Socket.SendTimeout
  fullName: System.Net.Sockets.Socket.SendTimeout
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendTo(Byte[],EndPoint)
  nameWithType: Socket.SendTo(Byte[],EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],EndPoint)
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendTo(Byte[],SocketFlags,EndPoint)
  nameWithType: Socket.SendTo(Byte[],SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],SocketFlags,EndPoint)
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendTo(Byte[],Int32,SocketFlags,EndPoint)
  nameWithType: Socket.SendTo(Byte[],Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],Int32,SocketFlags,EndPoint)
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendTo(Byte[],Int32,Int32,SocketFlags,EndPoint)
  nameWithType: Socket.SendTo(Byte[],Int32,Int32,SocketFlags,EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(Byte[],Int32,Int32,SocketFlags,EndPoint)
- uid: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendToAsync(SocketAsyncEventArgs)
  nameWithType: Socket.SendToAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendToAsync(SocketAsyncEventArgs)
- uid: System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SetIPProtectionLevel(IPProtectionLevel)
  nameWithType: Socket.SetIPProtectionLevel(IPProtectionLevel)
  fullName: System.Net.Sockets.Socket.SetIPProtectionLevel(IPProtectionLevel)
- uid: System.Net.Sockets.IPProtectionLevel
  parent: System.Net.Sockets
  isExternal: false
  name: IPProtectionLevel
  nameWithType: IPProtectionLevel
  fullName: System.Net.Sockets.IPProtectionLevel
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Boolean)
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Boolean)
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Boolean)
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Byte[])
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Int32)
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SetSocketOption(SocketOptionLevel,SocketOptionName,Object)
  nameWithType: Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Object)
  fullName: System.Net.Sockets.Socket.SetSocketOption(SocketOptionLevel,SocketOptionName,Object)
- uid: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Shutdown(SocketShutdown)
  nameWithType: Socket.Shutdown(SocketShutdown)
  fullName: System.Net.Sockets.Socket.Shutdown(SocketShutdown)
- uid: System.Net.Sockets.SocketShutdown
  parent: System.Net.Sockets
  isExternal: false
  name: SocketShutdown
  nameWithType: SocketShutdown
  fullName: System.Net.Sockets.SocketShutdown
- uid: System.Net.Sockets.Socket.SocketType
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SocketType
  nameWithType: Socket.SocketType
  fullName: System.Net.Sockets.Socket.SocketType
- uid: System.Net.Sockets.Socket.SupportsIPv4
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SupportsIPv4
  nameWithType: Socket.SupportsIPv4
  fullName: System.Net.Sockets.Socket.SupportsIPv4
- uid: System.Net.Sockets.Socket.SupportsIPv6
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SupportsIPv6
  nameWithType: Socket.SupportsIPv6
  fullName: System.Net.Sockets.Socket.SupportsIPv6
- uid: System.Net.Sockets.Socket.Ttl
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Ttl
  nameWithType: Socket.Ttl
  fullName: System.Net.Sockets.Socket.Ttl
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Net.Sockets.Socket.UseOnlyOverlappedIO
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: UseOnlyOverlappedIO
  nameWithType: Socket.UseOnlyOverlappedIO
  fullName: System.Net.Sockets.Socket.UseOnlyOverlappedIO
- uid: System.Net.Sockets.Socket.#ctor*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Socket
  nameWithType: Socket.Socket
- uid: System.Net.Sockets.Socket.Accept*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Accept
  nameWithType: Socket.Accept
- uid: System.Net.Sockets.Socket.AcceptAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: AcceptAsync
  nameWithType: Socket.AcceptAsync
- uid: System.Net.Sockets.Socket.AddressFamily*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: AddressFamily
  nameWithType: Socket.AddressFamily
- uid: System.Net.Sockets.Socket.Available*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Available
  nameWithType: Socket.Available
- uid: System.Net.Sockets.Socket.BeginAccept*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginAccept
  nameWithType: Socket.BeginAccept
- uid: System.Net.Sockets.Socket.BeginConnect*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginConnect
  nameWithType: Socket.BeginConnect
- uid: System.Net.Sockets.Socket.BeginDisconnect*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginDisconnect
  nameWithType: Socket.BeginDisconnect
- uid: System.Net.Sockets.Socket.BeginReceive*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceive
  nameWithType: Socket.BeginReceive
- uid: System.Net.Sockets.Socket.BeginReceiveFrom*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceiveFrom
  nameWithType: Socket.BeginReceiveFrom
- uid: System.Net.Sockets.Socket.BeginReceiveMessageFrom*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginReceiveMessageFrom
  nameWithType: Socket.BeginReceiveMessageFrom
- uid: System.Net.Sockets.Socket.BeginSend*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSend
  nameWithType: Socket.BeginSend
- uid: System.Net.Sockets.Socket.BeginSendFile*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSendFile
  nameWithType: Socket.BeginSendFile
- uid: System.Net.Sockets.Socket.BeginSendTo*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: BeginSendTo
  nameWithType: Socket.BeginSendTo
- uid: System.Net.Sockets.Socket.Bind*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Bind
  nameWithType: Socket.Bind
- uid: System.Net.Sockets.Socket.Blocking*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Blocking
  nameWithType: Socket.Blocking
- uid: System.Net.Sockets.Socket.CancelConnectAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: CancelConnectAsync
  nameWithType: Socket.CancelConnectAsync
- uid: System.Net.Sockets.Socket.Close*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Close
  nameWithType: Socket.Close
- uid: System.Net.Sockets.Socket.Connect*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Connect
  nameWithType: Socket.Connect
- uid: System.Net.Sockets.Socket.ConnectAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ConnectAsync
  nameWithType: Socket.ConnectAsync
- uid: System.Net.Sockets.Socket.Connected*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Connected
  nameWithType: Socket.Connected
- uid: System.Net.Sockets.Socket.Disconnect*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Disconnect
  nameWithType: Socket.Disconnect
- uid: System.Net.Sockets.Socket.DisconnectAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: DisconnectAsync
  nameWithType: Socket.DisconnectAsync
- uid: System.Net.Sockets.Socket.Dispose*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Dispose
  nameWithType: Socket.Dispose
- uid: System.Net.Sockets.Socket.DontFragment*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: DontFragment
  nameWithType: Socket.DontFragment
- uid: System.Net.Sockets.Socket.DualMode*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: DualMode
  nameWithType: Socket.DualMode
- uid: System.Net.Sockets.Socket.DuplicateAndClose*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: DuplicateAndClose
  nameWithType: Socket.DuplicateAndClose
- uid: System.Net.Sockets.Socket.EnableBroadcast*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EnableBroadcast
  nameWithType: Socket.EnableBroadcast
- uid: System.Net.Sockets.Socket.EndAccept*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndAccept
  nameWithType: Socket.EndAccept
- uid: System.Net.Sockets.Socket.EndConnect*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndConnect
  nameWithType: Socket.EndConnect
- uid: System.Net.Sockets.Socket.EndDisconnect*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndDisconnect
  nameWithType: Socket.EndDisconnect
- uid: System.Net.Sockets.Socket.EndReceive*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndReceive
  nameWithType: Socket.EndReceive
- uid: System.Net.Sockets.Socket.EndReceiveFrom*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndReceiveFrom
  nameWithType: Socket.EndReceiveFrom
- uid: System.Net.Sockets.Socket.EndReceiveMessageFrom*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndReceiveMessageFrom
  nameWithType: Socket.EndReceiveMessageFrom
- uid: System.Net.Sockets.Socket.EndSend*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndSend
  nameWithType: Socket.EndSend
- uid: System.Net.Sockets.Socket.EndSendFile*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndSendFile
  nameWithType: Socket.EndSendFile
- uid: System.Net.Sockets.Socket.EndSendTo*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: EndSendTo
  nameWithType: Socket.EndSendTo
- uid: System.Net.Sockets.Socket.ExclusiveAddressUse*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: Socket.ExclusiveAddressUse
- uid: System.Net.Sockets.Socket.Finalize*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Finalize
  nameWithType: Socket.Finalize
- uid: System.Net.Sockets.Socket.GetSocketOption*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: GetSocketOption
  nameWithType: Socket.GetSocketOption
- uid: System.Net.Sockets.Socket.Handle*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Handle
  nameWithType: Socket.Handle
- uid: System.Net.Sockets.Socket.IOControl*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: IOControl
  nameWithType: Socket.IOControl
- uid: System.Net.Sockets.Socket.IsBound*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: IsBound
  nameWithType: Socket.IsBound
- uid: System.Net.Sockets.Socket.LingerState*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: LingerState
  nameWithType: Socket.LingerState
- uid: System.Net.Sockets.Socket.Listen*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Listen
  nameWithType: Socket.Listen
- uid: System.Net.Sockets.Socket.LocalEndPoint*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: LocalEndPoint
  nameWithType: Socket.LocalEndPoint
- uid: System.Net.Sockets.Socket.MulticastLoopback*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: MulticastLoopback
  nameWithType: Socket.MulticastLoopback
- uid: System.Net.Sockets.Socket.NoDelay*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: NoDelay
  nameWithType: Socket.NoDelay
- uid: System.Net.Sockets.Socket.OSSupportsIPv4*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: OSSupportsIPv4
  nameWithType: Socket.OSSupportsIPv4
- uid: System.Net.Sockets.Socket.OSSupportsIPv6*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: OSSupportsIPv6
  nameWithType: Socket.OSSupportsIPv6
- uid: System.Net.Sockets.Socket.Poll*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Poll
  nameWithType: Socket.Poll
- uid: System.Net.Sockets.Socket.ProtocolType*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ProtocolType
  nameWithType: Socket.ProtocolType
- uid: System.Net.Sockets.Socket.Receive*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Receive
  nameWithType: Socket.Receive
- uid: System.Net.Sockets.Socket.ReceiveAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveAsync
  nameWithType: Socket.ReceiveAsync
- uid: System.Net.Sockets.Socket.ReceiveBufferSize*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: Socket.ReceiveBufferSize
- uid: System.Net.Sockets.Socket.ReceiveFrom*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveFrom
  nameWithType: Socket.ReceiveFrom
- uid: System.Net.Sockets.Socket.ReceiveFromAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveFromAsync
  nameWithType: Socket.ReceiveFromAsync
- uid: System.Net.Sockets.Socket.ReceiveMessageFrom*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveMessageFrom
  nameWithType: Socket.ReceiveMessageFrom
- uid: System.Net.Sockets.Socket.ReceiveMessageFromAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveMessageFromAsync
  nameWithType: Socket.ReceiveMessageFromAsync
- uid: System.Net.Sockets.Socket.ReceiveTimeout*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: ReceiveTimeout
  nameWithType: Socket.ReceiveTimeout
- uid: System.Net.Sockets.Socket.RemoteEndPoint*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: RemoteEndPoint
  nameWithType: Socket.RemoteEndPoint
- uid: System.Net.Sockets.Socket.Select*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Select
  nameWithType: Socket.Select
- uid: System.Net.Sockets.Socket.Send*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Send
  nameWithType: Socket.Send
- uid: System.Net.Sockets.Socket.SendAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendAsync
  nameWithType: Socket.SendAsync
- uid: System.Net.Sockets.Socket.SendBufferSize*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendBufferSize
  nameWithType: Socket.SendBufferSize
- uid: System.Net.Sockets.Socket.SendFile*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendFile
  nameWithType: Socket.SendFile
- uid: System.Net.Sockets.Socket.SendPacketsAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendPacketsAsync
  nameWithType: Socket.SendPacketsAsync
- uid: System.Net.Sockets.Socket.SendTimeout*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendTimeout
  nameWithType: Socket.SendTimeout
- uid: System.Net.Sockets.Socket.SendTo*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendTo
  nameWithType: Socket.SendTo
- uid: System.Net.Sockets.Socket.SendToAsync*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SendToAsync
  nameWithType: Socket.SendToAsync
- uid: System.Net.Sockets.Socket.SetIPProtectionLevel*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SetIPProtectionLevel
  nameWithType: Socket.SetIPProtectionLevel
- uid: System.Net.Sockets.Socket.SetSocketOption*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SetSocketOption
  nameWithType: Socket.SetSocketOption
- uid: System.Net.Sockets.Socket.Shutdown*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Shutdown
  nameWithType: Socket.Shutdown
- uid: System.Net.Sockets.Socket.SocketType*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SocketType
  nameWithType: Socket.SocketType
- uid: System.Net.Sockets.Socket.SupportsIPv4*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SupportsIPv4
  nameWithType: Socket.SupportsIPv4
- uid: System.Net.Sockets.Socket.SupportsIPv6*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: SupportsIPv6
  nameWithType: Socket.SupportsIPv6
- uid: System.Net.Sockets.Socket.Ttl*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: Ttl
  nameWithType: Socket.Ttl
- uid: System.Net.Sockets.Socket.UseOnlyOverlappedIO*
  parent: System.Net.Sockets.Socket
  isExternal: false
  name: UseOnlyOverlappedIO
  nameWithType: Socket.UseOnlyOverlappedIO
