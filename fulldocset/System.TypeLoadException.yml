### YamlMime:ManagedReference
items:
- uid: System.TypeLoadException
  id: TypeLoadException
  children:
  - System.TypeLoadException.#ctor
  - System.TypeLoadException.#ctor(System.String)
  - System.TypeLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.TypeLoadException.#ctor(System.String,System.Exception)
  - System.TypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.TypeLoadException.Message
  - System.TypeLoadException.TypeName
  langs:
  - csharp
  name: TypeLoadException
  nameWithType: TypeLoadException
  fullName: System.TypeLoadException
  type: Class
  summary: The exception that is thrown when type-loading failures occur.
  remarks: "TypeLoadException is thrown when the common language runtime cannot find the assembly, the type within the assembly, or cannot load the type. The <xref:System.TypeLoadException.Message%2A> property contains more detailed information that can help you identify the cause of the exception.  \n  \n TypeLoadException uses the HRESULT COR_E_TYPELOAD, that has the value 0x80131522.  \n  \n For a list of initial property values for an instance of TypeLoadException, see the <xref:System.TypeLoadException.%23ctor%2A> constructors."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class TypeLoadException : SystemException
  inheritance:
  - System.Object
  - System.Exception
  - System.SystemException
  implements: []
  inheritedMembers:
  - System.Exception.Data
  - System.Exception.GetBaseException
  - System.Exception.GetType
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.SerializeObjectState
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.TargetSite
  - System.Exception.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.TypeLoadException.#ctor
  id: '#ctor'
  parent: System.TypeLoadException
  langs:
  - csharp
  name: TypeLoadException()
  nameWithType: TypeLoadException.TypeLoadException()
  fullName: System.TypeLoadException.TypeLoadException()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="System.TypeLoadException"></xref> class.
  remarks: "This constructor initializes the <xref:System.TypeLoadException.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"A failure has occurred while loading a type.\" This message takes into account the current system culture.  \n  \n The following table shows the initial property values for an instance of <xref:System.TypeLoadException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.TypeLoadException.Message%2A>|The localized error message string.|"
  syntax:
    content: public TypeLoadException ();
    parameters: []
  overload: System.TypeLoadException.#ctor*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.TypeLoadException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.TypeLoadException
  langs:
  - csharp
  name: TypeLoadException(String)
  nameWithType: TypeLoadException.TypeLoadException(String)
  fullName: System.TypeLoadException.TypeLoadException(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="System.TypeLoadException"></xref> class with a specified error message.
  remarks: "The content of the `message` parameter should be understandable to the user. The caller of this constructor is required to ensure that this string has been localized for the current system culture.  \n  \n The following table shows the initial property values for an instance of <xref:System.TypeLoadException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.TypeLoadException.Message%2A>|The error message string.|"
  example:
  - "The following code example demonstrates the TypeLoadException constructor. It contains a method that generates a <xref:System.TypeLoadException> with a custom message, and displays the error message to the console.  \n  \n [!code-vb[TypeLoadException_Constructor2#1](~/add/codesnippet/visualbasic/m-system.typeloadexcepti_1_1.vb)]\n [!code-cpp[TypeLoadException_Constructor2#1](~/add/codesnippet/cpp/m-system.typeloadexcepti_1_1.cpp)]\n [!code-cs[TypeLoadException_Constructor2#1](~/add/codesnippet/csharp/m-system.typeloadexcepti_1_1.cs)]"
  syntax:
    content: public TypeLoadException (string message);
    parameters:
    - id: message
      type: System.String
      description: The message that describes the error.
  overload: System.TypeLoadException.#ctor*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.TypeLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.TypeLoadException
  langs:
  - csharp
  name: TypeLoadException(SerializationInfo,StreamingContext)
  nameWithType: TypeLoadException.TypeLoadException(SerializationInfo,StreamingContext)
  fullName: System.TypeLoadException.TypeLoadException(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="System.TypeLoadException"></xref> class with serialized data.
  remarks: This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see [XML and SOAP Serialization](~/add/includes/ajax-current-ext-md.md).
  example:
  - "The following example generates an exception, and serializes the exception data to a file, and then reconstitutes the exception. For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[TypeLoadException_GetObjectData#1](~/add/codesnippet/csharp/a47ac21b-d5c2-4151-9121-_1.cs)]\n [!code-cpp[TypeLoadException_GetObjectData#1](~/add/codesnippet/cpp/a47ac21b-d5c2-4151-9121-_1.cpp)]\n [!code-vb[TypeLoadException_GetObjectData#1](~/add/codesnippet/visualbasic/a47ac21b-d5c2-4151-9121-_1.vb)]"
  syntax:
    content: protected TypeLoadException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The object that holds the serialized object data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The contextual information about the source or destination.
  overload: System.TypeLoadException.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>info</code> object is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.TypeLoadException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.TypeLoadException
  langs:
  - csharp
  name: TypeLoadException(String,Exception)
  nameWithType: TypeLoadException.TypeLoadException(String,Exception)
  fullName: System.TypeLoadException.TypeLoadException(String,Exception)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="System.TypeLoadException"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.
  remarks: "An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \n  \n The following table shows the initial property values for an instance of <xref:System.TypeLoadException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|The inner exception reference.|  \n|<xref:System.TypeLoadException.Message%2A>|The error message string.|"
  example:
  - "The following code example demonstrates the TypeLoadException constructor. It contains a method that generates a <xref:System.TypeLoadException>, catches that exception, and throws a new <xref:System.TypeLoadException> with a custom message, including the original <xref:System.TypeLoadException> as the inner exception.  \n  \n [!code-cs[TypeLoadException_Constructor3#1](~/add/codesnippet/csharp/m-system.typeloadexcepti_0_1.cs)]\n [!code-cpp[TypeLoadException_Constructor3#1](~/add/codesnippet/cpp/m-system.typeloadexcepti_0_1.cpp)]\n [!code-vb[TypeLoadException_Constructor3#1](~/add/codesnippet/visualbasic/m-system.typeloadexcepti_0_1.vb)]"
  syntax:
    content: public TypeLoadException (string message, Exception inner);
    parameters:
    - id: message
      type: System.String
      description: The error message that explains the reason for the exception.
    - id: inner
      type: System.Exception
      description: The exception that is the cause of the current exception. If the `inner` parameter is not <xref uid="langword_csharp_null" name="null" href=""></xref>, the current exception is raised in a <xref uid="langword_csharp_catch" name="catch" href=""></xref> block that handles the inner exception.
  overload: System.TypeLoadException.#ctor*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.TypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.TypeLoadException
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: TypeLoadException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.TypeLoadException.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Sets the <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object with the class name, method name, resource ID, and additional exception information.
  remarks: "GetObjectData sets a <xref:System.Runtime.Serialization.SerializationInfo> with all the exception object data targeted for serialization. During deserialization, the exception object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.  \n  \n For more information, see [XML and SOAP Serialization](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "[Visual Basic, C#]  \n  \n The following example generates an exception, and serializes the exception data to a file, and then reconstitutes the exception. For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[TypeLoadException_GetObjectData#1](~/add/codesnippet/csharp/a7ffe8df-c978-4be5-b45e-_1.cs)]\n [!code-cpp[TypeLoadException_GetObjectData#1](~/add/codesnippet/cpp/a7ffe8df-c978-4be5-b45e-_1.cpp)]\n [!code-vb[TypeLoadException_GetObjectData#1](~/add/codesnippet/visualbasic/a7ffe8df-c978-4be5-b45e-_1.vb)]"
  syntax:
    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The object that holds the serialized object data.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The contextual information about the source or destination.
  overload: System.TypeLoadException.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>info</code> object is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.TypeLoadException.Message
  id: Message
  parent: System.TypeLoadException
  langs:
  - csharp
  name: Message
  nameWithType: TypeLoadException.Message
  fullName: System.TypeLoadException.Message
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the error message for this exception.
  remarks: "This property overrides <xref:System.Exception.Message%2A>. The error message should be localized.  \n  \n This property is read-only."
  example:
  - "The following example attempts to load a non-existent type from the mscorlib assembly. The resulting exception is caught, and the <xref:System.TypeLoadException.TypeName%2A> and Message values are displayed. For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[TypeLoadException_TypeName#1](~/add/codesnippet/csharp/p-system.typeloadexcepti_0_1.cs)]\n [!code-cpp[TypeLoadException_TypeName#1](~/add/codesnippet/cpp/p-system.typeloadexcepti_0_1.cpp)]\n [!code-vb[TypeLoadException_TypeName#1](~/add/codesnippet/visualbasic/p-system.typeloadexcepti_0_1.vb)]"
  syntax:
    content: public override string Message { get; }
    return:
      type: System.String
      description: The error message string.
  overload: System.TypeLoadException.Message*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.TypeLoadException.TypeName
  id: TypeName
  parent: System.TypeLoadException
  langs:
  - csharp
  name: TypeName
  nameWithType: TypeLoadException.TypeName
  fullName: System.TypeLoadException.TypeName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the fully qualified name of the type that causes the exception.
  remarks: ''
  example:
  - "The following example attempts to load a non-existent type from the mscorlib assembly. The resulting exception is caught, and the TypeName and <xref:System.TypeLoadException.Message%2A> values are displayed. For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[TypeLoadException_TypeName#1](~/add/codesnippet/csharp/p-system.typeloadexcepti_1_1.cs)]\n [!code-cpp[TypeLoadException_TypeName#1](~/add/codesnippet/cpp/p-system.typeloadexcepti_1_1.cpp)]\n [!code-vb[TypeLoadException_TypeName#1](~/add/codesnippet/visualbasic/p-system.typeloadexcepti_1_1.vb)]"
  syntax:
    content: public string TypeName { get; }
    return:
      type: System.String
      description: The fully qualified type name.
  overload: System.TypeLoadException.TypeName*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
references:
- uid: System.SystemException
  isExternal: false
  name: System.SystemException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.TypeLoadException.#ctor
  parent: System.TypeLoadException
  isExternal: false
  name: TypeLoadException()
  nameWithType: TypeLoadException.TypeLoadException()
  fullName: System.TypeLoadException.TypeLoadException()
- uid: System.TypeLoadException.#ctor(System.String)
  parent: System.TypeLoadException
  isExternal: false
  name: TypeLoadException(String)
  nameWithType: TypeLoadException.TypeLoadException(String)
  fullName: System.TypeLoadException.TypeLoadException(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.TypeLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.TypeLoadException
  isExternal: false
  name: TypeLoadException(SerializationInfo,StreamingContext)
  nameWithType: TypeLoadException.TypeLoadException(SerializationInfo,StreamingContext)
  fullName: System.TypeLoadException.TypeLoadException(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.TypeLoadException.#ctor(System.String,System.Exception)
  parent: System.TypeLoadException
  isExternal: false
  name: TypeLoadException(String,Exception)
  nameWithType: TypeLoadException.TypeLoadException(String,Exception)
  fullName: System.TypeLoadException.TypeLoadException(String,Exception)
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.TypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.TypeLoadException
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: TypeLoadException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.TypeLoadException.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.TypeLoadException.Message
  parent: System.TypeLoadException
  isExternal: false
  name: Message
  nameWithType: TypeLoadException.Message
  fullName: System.TypeLoadException.Message
- uid: System.TypeLoadException.TypeName
  parent: System.TypeLoadException
  isExternal: false
  name: TypeName
  nameWithType: TypeLoadException.TypeName
  fullName: System.TypeLoadException.TypeName
- uid: System.TypeLoadException.#ctor*
  parent: System.TypeLoadException
  isExternal: false
  name: TypeLoadException
  nameWithType: TypeLoadException.TypeLoadException
- uid: System.TypeLoadException.GetObjectData*
  parent: System.TypeLoadException
  isExternal: false
  name: GetObjectData
  nameWithType: TypeLoadException.GetObjectData
- uid: System.TypeLoadException.Message*
  parent: System.TypeLoadException
  isExternal: false
  name: Message
  nameWithType: TypeLoadException.Message
- uid: System.TypeLoadException.TypeName*
  parent: System.TypeLoadException
  isExternal: false
  name: TypeName
  nameWithType: TypeLoadException.TypeName
