### YamlMime:ManagedReference
items:
- uid: System.Data.Objects.DataClasses.EntityCollection`1
  id: EntityCollection`1
  children:
  - System.Data.Objects.DataClasses.EntityCollection`1.#ctor
  - System.Data.Objects.DataClasses.EntityCollection`1.Add(`0)
  - System.Data.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})
  - System.Data.Objects.DataClasses.EntityCollection`1.Attach(`0)
  - System.Data.Objects.DataClasses.EntityCollection`1.Clear
  - System.Data.Objects.DataClasses.EntityCollection`1.Contains(`0)
  - System.Data.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)
  - System.Data.Objects.DataClasses.EntityCollection`1.Count
  - System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery
  - System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator
  - System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly
  - System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)
  - System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)
  - System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)
  - System.Data.Objects.DataClasses.EntityCollection`1.Remove(`0)
  - System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection
  - System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList
  langs:
  - csharp
  name: EntityCollection<TEntity>
  nameWithType: EntityCollection<TEntity>
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>
  type: Class
  summary: Represents a collection of objects on the "many" end of a relationship.
  remarks: "An EntityCollection(TEntity) is a collection of objects of a particular entity type that represents the \"many\" end of a one-to-many or many-to-many relationship.  \n  \n An EntityCollection(TEntity) is returned by a navigation property. Use the <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> method to load related objects into an EntityCollection(TEntity). To store an unrelated collection of objects of a specific entity type, such as the result of an <xref:System.Data.Objects.ObjectQuery%601>, use an instance of the <xref:System.Collections.Generic.List%601> class.  \n  \n An EntityCollection(TEntity) might have a corresponding <xref:System.Data.Objects.DataClasses.EntityReference%601>. When an EntityCollection(TEntity) and an <xref:System.Data.Objects.DataClasses.EntityReference%601> model opposite ends of the same relationship, the integrity of the relationship is maintained at the object level. The two classes are synchronized automatically.  \n  \n This class cannot be inherited."
  example:
  - "This example is based on the . To run the code in this example, you must have already added the AdventureWorks Sales Model to your project and configured your project to use the Entity Framework. To do this, complete the procedures in [How to: Manually Configure an Entity Framework Project](http://msdn.microsoft.com/en-us/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) and [How to: Manually Define the Model and Mapping Files](http://msdn.microsoft.com/en-us/d4fd6864-f2a1-48f0-aa32-1e318775a99a).  \n  \n This example does the following:  \n  \n1.  Creates two new `SalesOrderHeader` entities and adds them to the `Contact` entity.  \n  \n2.  Gets all related ends from the <xref:System.Data.Objects.DataClasses.RelationshipManager> that is associated with the `Contact` entity.  \n  \n3.  Iterates through the collection of <xref:System.Data.Objects.DataClasses.IRelatedEnd>s.  \n  \n4.  Gets the EntityCollection(TEntity) for each related end.  \n  \n5.  Uses the <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> method to remove one of the entities from the collection.  \n  \n6.  Calls the <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A> method to determine whether the object was removed from the collection.  \n  \n7.  Uses the <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> method to add the entity back.  \n  \n [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#irelatedend_add)]\n [!code-cs[DP ObjectServices Concepts#IRelatedEnd_Add](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#irelatedend_add)]"
  syntax:
    content: 'public sealed class EntityCollection<TEntity> : System.Data.Objects.DataClasses.RelatedEnd, System.Collections.Generic.ICollection<TEntity>, System.Collections.Generic.IEnumerable<TEntity>, System.ComponentModel.IListSource where TEntity : class'
    typeParameters:
    - id: TEntity
      description: The entity type of the collection.
  inheritance:
  - System.Object
  - System.Data.Objects.DataClasses.RelatedEnd
  implements:
  - System.Collections.Generic.ICollection<TEntity>
  - System.Collections.Generic.IEnumerable<TEntity>
  - System.ComponentModel.IListSource
  inheritedMembers:
  - System.Data.Objects.DataClasses.RelatedEnd.AssociationChanged
  - System.Data.Objects.DataClasses.RelatedEnd.IsLoaded
  - System.Data.Objects.DataClasses.RelatedEnd.Load
  - System.Data.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  - System.Data.Objects.DataClasses.RelatedEnd.RelationshipName
  - System.Data.Objects.DataClasses.RelatedEnd.RelationshipSet
  - System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName
  - System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Data.Objects.DataClasses.IEntityWithRelationships)
  - System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Object)
  - System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)
  - System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Object)
  - System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#CreateSourceQuery
  - System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)
  - System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Object)
  - System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.#ctor
  id: '#ctor'
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: EntityCollection<TEntity>()
  nameWithType: EntityCollection<TEntity>.EntityCollection<TEntity>()
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.EntityCollection<TEntity>()
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Initializes a new instance of the <xref href="stem.Data.Objects.DataClasses.EntityCollection%601"></xref> class.
  remarks: "This public constructor for <xref:System.Data.Objects.DataClasses.EntityCollection%601> is intended to be used by Object Services when deserializing object graphs. You should access an instance of <xref:System.Data.Objects.DataClasses.EntityCollection%601> from a navigation property instead of using this constructor.  \n  \n To store an unrelated collection of objects of a specific entity type, such as the result of an <xref:System.Data.Objects.ObjectQuery%601>, use an instance of <xref:System.Collections.Generic.List%601>."
  syntax:
    content: public EntityCollection ();
    parameters: []
  overload: System.Data.Objects.DataClasses.EntityCollection`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Add(`0)
  id: Add(`0)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: Add(TEntity)
  nameWithType: EntityCollection<TEntity>.Add(TEntity)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Add(TEntity)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Adds an object to the collection.
  remarks: "The Add method adds an object to an <xref:System.Data.Objects.DataClasses.EntityCollection%601> and creates a relationship between the two objects. When the source object is attached to an <xref:System.Data.Objects.ObjectContext> instance, the Add method also adds the object to the <xref:System.Data.Objects.ObjectContext>. This operation is translated into an insert operation in the data source when <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> is called. For more information, see [Creating, Adding, Modifying, and Deleting Objects](http://msdn.microsoft.com/en-us/f76f1fad-c553-4b59-820b-89b3dec2fad1).  \n  \n The Add method can be called multiple times on the same object instance."
  example:
  - "This example is based on the . To run the code in this example, you must have already added the AdventureWorks Sales Model to your project and configured your project to use the Entity Framework. To do this, complete the procedures in [How to: Manually Configure an Entity Framework Project](http://msdn.microsoft.com/en-us/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) and [How to: Manually Define the Model and Mapping Files](http://msdn.microsoft.com/en-us/d4fd6864-f2a1-48f0-aa32-1e318775a99a).  \n  \n This example creates two new `SalesOrderHeader` entities, adds them to the `Contact` entity, and, after removing an object, uses the Add method to add the object back to the collection.  \n  \n [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#irelatedend_add)]\n [!code-cs[DP ObjectServices Concepts#IRelatedEnd_Add](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#irelatedend_add)]"
  syntax:
    content: public void Add (TEntity entity);
    parameters:
    - id: entity
      type: TEntity
      description: An object to add to the collection. <code>entity</code> must implement <xref href="System.Data.Objects.DataClasses.IEntityWithRelationships"></xref>.
  overload: System.Data.Objects.DataClasses.EntityCollection`1.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>entity </code>is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})
  id: Attach(System.Collections.Generic.IEnumerable{`0})
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: Attach(IEnumerable<TEntity>)
  nameWithType: EntityCollection<TEntity>.Attach(IEnumerable<TEntity>)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Attach(IEnumerable<TEntity>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Defines relationships between an object and a collection of related objects in an object context.
  remarks: "The <xref:System.Data.Objects.ObjectContext.Attach%2A> method is used to define relationships between an object and a collection of related objects when both the source object and the collection of related objects already exist in the object context. To attach an object or an object graph where the relationships are already defined, call the <xref:System.Data.Objects.ObjectContext.Attach%2A> method on the <xref:System.Data.Objects.ObjectContext>. To create a new object that is related to the source object, call the <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> method on the <xref:System.Data.Objects.DataClasses.EntityCollection%601>. For more information, see [Attaching and Detaching Objects](http://msdn.microsoft.com/en-us/41d5c1ef-1b78-4502-aa10-7e1438d62d23).  \n  \n If the collection is already filled or partially filled, the <xref:System.Data.Objects.DataClasses.EntityCollection%601.Attach%2A> method merges existing entities with the given entities. The given entities are not assumed to be the complete set of related entities.  \n  \n All entities passed in must be in the <xref:System.Data.EntityState> or <xref:System.Data.EntityState> state. Objects in the <xref:System.Data.EntityState> state are only allowed when the state manager is already tracking the relationship instance."
  syntax:
    content: public void Attach (System.Collections.Generic.IEnumerable<TEntity> entities);
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{TEntity}
      description: Collection of objects in the object context that are related to the source object.
  overload: System.Data.Objects.DataClasses.EntityCollection`1.Attach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>entities</code> collection is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The source object or an object in the <code>entities</code> collection is `null` or is not in an <xref href=\"System.Data.EntityState\"></xref> or <xref href=\"System.Data.EntityState\"></xref> state.  \n  \n -or-  \n  \n The relationship cannot be defined based on the EDM metadata. This can occur when the association in the conceptual schema does not support a relationship between the two types."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Attach(`0)
  id: Attach(`0)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: Attach(TEntity)
  nameWithType: EntityCollection<TEntity>.Attach(TEntity)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Attach(TEntity)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Defines a relationship between two attached objects in an object context.
  remarks: "The Attach method is used to define relationships between two objects when both objects already exist in the object context. To attach an object or an object graph where the relationships are already defined, call the <xref:System.Data.Objects.ObjectContext.Attach%2A> method on the <xref:System.Data.Objects.ObjectContext>. To create a new object that is related to the source object, call the <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> method on the <xref:System.Data.Objects.DataClasses.EntityCollection%601>. For more information, see [Attaching and Detaching Objects](http://msdn.microsoft.com/en-us/41d5c1ef-1b78-4502-aa10-7e1438d62d23).  \n  \n If the <xref:System.Data.Objects.DataClasses.EntityCollection%601> already has loaded objects, the Attach method merges the object together with the existing objects in the <xref:System.Data.Objects.DataClasses.EntityCollection%601>.  \n  \n The attached object is not assumed to be the complete set of related entity objects.  \n  \n The object associated with this <xref:System.Data.Objects.DataClasses.EntityCollection%601> and all objects being attached to it must be in an <xref:System.Data.EntityState> or <xref:System.Data.EntityState> state.  \n  \n Objects in the <xref:System.Data.EntityState> state can only be attached when the <xref:System.Data.Objects.ObjectStateManager> is already tracking the relationship instance."
  example:
  - "This example is based on the . To run the code in this example, you must have already added the AdventureWorks Sales Model to your project and configured your project to use the Entity Framework. To do this, complete the procedures in [How to: Manually Configure an Entity Framework Project](http://msdn.microsoft.com/en-us/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) and [How to: Manually Define the Model and Mapping Files](http://msdn.microsoft.com/en-us/d4fd6864-f2a1-48f0-aa32-1e318775a99a).  \n  \n This example attaches a collection of detached `SalesOrderDetail` objects and a detached `SalesOrderHeader` object to an object context, and then defines the relationships between the `SalesOrderHeader` object and each `SalesOrderDetail` object.  \n  \n [!code-vb[DP ObjectServices Concepts#AttachRelatedObjects](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#attachrelatedobjects)]\n [!code-cs[DP ObjectServices Concepts#AttachRelatedObjects](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#attachrelatedobjects)]"
  syntax:
    content: public void Attach (TEntity entity);
    parameters:
    - id: entity
      type: TEntity
      description: The object being attached.
  overload: System.Data.Objects.DataClasses.EntityCollection`1.Attach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: When the <code>entity</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "When the <code>entity</code> cannot be related to the source object. This can occur when the association in the conceptual schema does not support a relationship between the two types.  \n  \n -or-  \n  \n When either object is `null` or is not in an <xref href=\"System.Data.EntityState\"></xref> or <xref href=\"System.Data.EntityState\"></xref> state."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Clear
  id: Clear
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: Clear()
  nameWithType: EntityCollection<TEntity>.Clear()
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Clear()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Removes all entities from the collection.
  remarks: "Clear does the following:  \n  \n-   Sets the <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A> flag to `false`.  \n  \n-   Removes all entities from the collection.  \n  \n-   Detaches relationships between removed entities and the owner of the <xref:System.Data.Objects.DataClasses.EntityCollection%601> from the <xref:System.Data.Objects.ObjectStateManager>.  \n  \n-   Removes the owner of the <xref:System.Data.Objects.DataClasses.EntityCollection%601> from the related entities."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Data.Objects.DataClasses.EntityCollection`1.Clear*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Contains(`0)
  id: Contains(`0)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: Contains(TEntity)
  nameWithType: EntityCollection<TEntity>.Contains(TEntity)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Contains(TEntity)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Determines whether a specific object exists in the collection.
  remarks: Uses the <xref:System.Object.Equals> method to compare the specified object with the objects already in the collection.
  example:
  - "This example is based on the . To run the code in this example, you must have already added the AdventureWorks Sales Model to your project and configured your project to use the Entity Framework. To do this, complete the procedures in [How to: Manually Configure an Entity Framework Project](http://msdn.microsoft.com/en-us/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) and [How to: Manually Define the Model and Mapping Files](http://msdn.microsoft.com/en-us/d4fd6864-f2a1-48f0-aa32-1e318775a99a).  \n  \n This example does the following:  \n  \n1.  Creates two new `SalesOrderHeader` entities and adds them to the `Contact` entity.  \n  \n2.  Gets all related ends from the <xref:System.Data.Objects.DataClasses.RelationshipManager> that is associated with the Contact entity.  \n  \n3.  Iterates through the collection of <xref:System.Data.Objects.DataClasses.IRelatedEnd>s.  \n  \n4.  Gets the <xref:System.Data.Objects.DataClasses.EntityCollection%601> for each related end.  \n  \n5.  Uses the <xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A> method to remove one of the entities from the collection.  \n  \n6.  Calls the Contains method to determine whether the object was removed from the collection.  \n  \n7.  Uses the <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> method to add the entity back.  \n  \n [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#irelatedend_add)]\n [!code-cs[DP ObjectServices Concepts#IRelatedEnd_Add](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#irelatedend_add)]"
  syntax:
    content: public bool Contains (TEntity entity);
    parameters:
    - id: entity
      type: TEntity
      description: The object to locate in the <xref href="stem.Data.Objects.DataClasses.EntityCollection%601"></xref>.
    return:
      type: System.Boolean
      description: '`true` if the object is found in the <xref href="stem.Data.Objects.DataClasses.EntityCollection%601"></xref>; otherwise, `false`.'
  overload: System.Data.Objects.DataClasses.EntityCollection`1.Contains*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: CopyTo(TEntity[],Int32)
  nameWithType: EntityCollection<TEntity>.CopyTo(TEntity[],Int32)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.CopyTo(TEntity[],Int32)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Copies all the contents of the collection to an array, starting at the specified index of the target array.
  syntax:
    content: public void CopyTo (TEntity[] array, int arrayIndex);
    parameters:
    - id: array
      type: TEntity[]
      description: The array to copy to.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in the array at which copying begins.
  overload: System.Data.Objects.DataClasses.EntityCollection`1.CopyTo*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Count
  id: Count
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: Count
  nameWithType: EntityCollection<TEntity>.Count
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Count
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Gets the number of objects that are contained in the collection.
  remarks: The Count property gets the number of entities currently in the local collection and does not reflect the size of the collection in the data source. A count of zero does not necessarily indicate that the related collection is empty. To determine the collection size in the data source, call the <xref:System.Data.Objects.DataClasses.EntityCollection%601.Load%2A> method or include the related object in the query path. For more information, see [Loading Related Objects](http://msdn.microsoft.com/en-us/452347d2-7b3b-44cd-9001-231299a28cb1).
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of elements that are contained in the <xref href="stem.Data.Objects.DataClasses.EntityCollection%601"></xref>.
  overload: System.Data.Objects.DataClasses.EntityCollection`1.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery
  id: CreateSourceQuery
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: CreateSourceQuery()
  nameWithType: EntityCollection<TEntity>.CreateSourceQuery()
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.CreateSourceQuery()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Returns an object query that, when it is executed, returns the same set of objects that exists in the current collection.
  remarks: "This property is used to obtain a new instance of <xref:System.Data.Objects.ObjectQuery%601> that returns the same set of objects. This is useful as the starting point for a more complex join, union, or filtered query, or to return the same objects in a detached state by using the <xref:System.Data.Objects.MergeOption> option.  \n  \n CreateSourceQuery is used to filter objects in an <xref:System.Data.Objects.DataClasses.EntityCollection%601> to enable you to bind only objects of a specific type. For more information, see [Binding Objects to Controls](http://msdn.microsoft.com/en-us/2fd34855-929b-4303-a91e-4bb69d958f2b)."
  example:
  - "This example is based on a modified version of the . This version supports table-per-type inheritance with `Course` as an abstract type. Complete the  walkthrough to modify the School model to support the table-per-type inheritance example used in this topic.  \n  \n This example shows how to use CreateSourceQuery to filter objects in an <xref:System.Data.Objects.DataClasses.EntityCollection%601> and bind only to objects of a specific type. For a complete version of this example, see [How to: Bind Controls to Derived Types](http://msdn.microsoft.com/en-us/09730c14-3b7b-4563-af4a-7ecfa4e34bd5).  \n  \n [!CODE [DP ObjectServices Concepts#BindToExecution_Specific](../CodeSnippet/VS_Snippets_Data/DP ObjectServices Concepts#bindtoexecution_specific)]"
  syntax:
    content: public System.Data.Objects.ObjectQuery<TEntity> CreateSourceQuery ();
    parameters: []
    return:
      type: System.Data.Objects.ObjectQuery{TEntity}
      description: An <xref href="stem.Data.Objects.ObjectQuery%601"></xref> that represents the entity collection.
  overload: System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "When the object is in an <xref href=\"System.Data.EntityState\"></xref> state.  \n  \n -or-  \n  \n When the object is in a <xref href=\"System.Data.EntityState\"></xref> state with a <xref href=\"System.Data.Objects.MergeOption\"></xref> other than <xref href=\"System.Data.Objects.MergeOption\"></xref>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator
  id: GetEnumerator
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: EntityCollection<TEntity>.GetEnumerator()
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.GetEnumerator()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Returns an enumerator that is used to iterate through the objects in the collection.
  syntax:
    content: public System.Collections.Generic.IEnumerator<TEntity> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{TEntity}
      description: An <xref href="System.Collections.IEnumerator"></xref> that iterates through the set of values cached by <xref href="stem.Data.Objects.DataClasses.EntityCollection%601"></xref>.
  overload: System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly
  id: IsReadOnly
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: EntityCollection<TEntity>.IsReadOnly
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.IsReadOnly
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Gets a value that indicates whether the <xref href="stem.Data.Objects.DataClasses.EntityCollection%601"></xref> is read-only.
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: Always returns `false`.
  overload: System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)
  id: Load(System.Data.Objects.MergeOption)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: Load(MergeOption)
  nameWithType: EntityCollection<TEntity>.Load(MergeOption)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Load(MergeOption)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Loads related objects into the collection, using the specified merge option.
  remarks: "This method calls the <xref:System.Data.Objects.DataClasses.RelatedEnd.ValidateLoad%2A> method before loading the collection. See this method for a list of possible exceptions.  \n  \n When objects in the collection are already loaded into the <xref:System.Data.Objects.ObjectContext>, the Load method enforces the <xref:System.Data.Objects.MergeOption> specified by the `mergeOption` parameter. For more information, see [Identity Resolution, State Management, and Change Tracking](http://msdn.microsoft.com/en-us/3bd49311-0e72-4ea4-8355-38fe57036ba0).  \n  \n To explicitly load related objects, you must call the `Load` method on the related end returned by the navigation property. For a one-to-many relationship, call the Load method on <xref:System.Data.Objects.DataClasses.EntityCollection%601>. For a one-to-one relationship, call the <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A> on <xref:System.Data.Objects.DataClasses.EntityReference%601>. This loads the related object data into the object context. You can enumerate through the collection of returned results using a `foreach` loop (`For Each...Next` in Visual Basic) and conditionally call the `Load` method on <xref:System.Data.Objects.DataClasses.EntityReference%601> and <xref:System.Data.Objects.DataClasses.EntityCollection%601> properties for each entity in the results.  \n  \n The Load method loads related objects from the data source whether or not <xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A> is `true`.  \n  \n> [!NOTE]\n>  When you call the Load method during a `foreach` (C#) or `For Each` (Visual Basic) enumeration, Object Services tries to open a new data reader. This operation will fail unless you have enabled multiple active results sets by specifying `multipleactiveresultsets=true` in the connection string. You can also load the result of the query into a <xref:System.Collections.Generic.List%601> collection. This closes the data reader and enables you to enumerate over the collection to load referenced objects.  \n  \n The Load method is synchronized with the <xref:System.Data.Objects.DataClasses.EntityReference%601.Load%2A?displayProperty=fullName> method."
  example:
  - "This example is based on the . To run the code in this example, you must have already added the AdventureWorks Sales Model to your project and configured your project to use the Entity Framework. To do this, complete the procedures in [How to: Manually Configure an Entity Framework Project](http://msdn.microsoft.com/en-us/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) and [How to: Manually Define the Model and Mapping Files](http://msdn.microsoft.com/en-us/d4fd6864-f2a1-48f0-aa32-1e318775a99a).  \n  \n This example loads the related `SalesOrderHeader` objects for the `Contact` entity.  \n  \n [!code-vb[DP ObjectServices Concepts#QueryWithLoad](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#querywithload)]\n [!code-cs[DP ObjectServices Concepts#QueryWithLoad](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#querywithload)]"
  syntax:
    content: public override void Load (System.Data.Objects.MergeOption mergeOption);
    parameters:
    - id: mergeOption
      type: System.Data.Objects.MergeOption
      description: Specifies how the objects in this collection should be merged with the objects that might have been returned from previous queries against the same <xref href="System.Data.Objects.ObjectContext"></xref>.
  overload: System.Data.Objects.DataClasses.EntityCollection`1.Load*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)
  id: OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: OnCollectionDeserialized(StreamingContext)
  nameWithType: EntityCollection<TEntity>.OnCollectionDeserialized(StreamingContext)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.OnCollectionDeserialized(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Used internally to deserialize entity objects.
  syntax:
    content: public void OnCollectionDeserialized (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The streaming context.
  overload: System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)
  id: OnSerializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: OnSerializing(StreamingContext)
  nameWithType: EntityCollection<TEntity>.OnSerializing(StreamingContext)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.OnSerializing(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Used internally to serialize entity objects.
  syntax:
    content: public void OnSerializing (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The streaming context.
  overload: System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Remove(`0)
  id: Remove(`0)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: Remove(TEntity)
  nameWithType: EntityCollection<TEntity>.Remove(TEntity)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Remove(TEntity)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Removes an object from the collection and marks the relationship for deletion.
  remarks: "The Remove method also deletes the relationship between the source object and the object being removed from the collection. If the relationship has a referential integrity constraint, calling the Remove method on a dependent object marks both the relationship and the dependent object for deletion. This occurs because the constraint indicates that the dependent object cannot exist without a relationship to the parent. For more information, see [ReferentialConstraint Element (CSDL)](http://msdn.microsoft.com/en-us/24f96a80-85b5-4f2e-a14c-0e3eb6796fa0).  \n  \n Remove returns `false` when the specified object is not in the collection."
  example:
  - "This example is based on the . To run the code in this example, you must have already added the AdventureWorks Sales Model to your project and configured your project to use the Entity Framework. To do this, complete the procedures in [How to: Manually Configure an Entity Framework Project](http://msdn.microsoft.com/en-us/73f6ae1d-b3b2-4577-aebd-ad5a75954e9e) and [How to: Manually Define the Model and Mapping Files](http://msdn.microsoft.com/en-us/d4fd6864-f2a1-48f0-aa32-1e318775a99a).  \n  \n This example uses the Remove method to remove one of the entities from the collection and then calls the <xref:System.Data.Objects.DataClasses.EntityCollection%601.Contains%2A> method to determine whether the object was removed from the collection.  \n  \n [!code-vb[DP ObjectServices Concepts#IRelatedEnd_Add](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#irelatedend_add)]\n [!code-cs[DP ObjectServices Concepts#IRelatedEnd_Add](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#irelatedend_add)]"
  syntax:
    content: public bool Remove (TEntity entity);
    parameters:
    - id: entity
      type: TEntity
      description: The object to remove from the collection.
    return:
      type: System.Boolean
      description: '`true` if item was successfully removed; otherwise, `false`.'
  overload: System.Data.Objects.DataClasses.EntityCollection`1.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>entity</code> object is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The<code> entity </code>object is not attached to the same object context.  \n  \n -or-  \n  \n The <code>entity </code>object does not have a valid relationship manager."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: EntityCollection<TEntity>.IEnumerable.GetEnumerator()
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Returns an enumerator that is used to iterate through the set of values cached by <xref href="stem.Data.Objects.DataClasses.EntityCollection%601"></xref>.
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator"></xref> that iterates through the set of values cached by <xref href="stem.Data.Objects.DataClasses.EntityCollection%601"></xref>.
  overload: System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection
  id: System#ComponentModel#IListSource#ContainsListCollection
  isEii: true
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: IListSource.ContainsListCollection
  nameWithType: EntityCollection<TEntity>.IListSource.ContainsListCollection
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.IListSource.ContainsListCollection
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Gets a value that indicates whether the related entity collection consists of collection objects.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Objects.DataClasses.EntityCollection%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.
  syntax:
    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    return:
      type: System.Boolean
      description: This property always returns `false` because the <xref href="stem.Data.Objects.DataClasses.EntityCollection%601"></xref> contains objects and not collections.
  overload: System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList
  id: System#ComponentModel#IListSource#GetList
  isEii: true
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  langs:
  - csharp
  name: IListSource.GetList()
  nameWithType: EntityCollection<TEntity>.IListSource.GetList()
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.IListSource.GetList()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: Returns the collection as an <xref href="System.Collections.IList"></xref> used for data binding.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Data.Objects.DataClasses.EntityCollection%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.  \n  \n This method enables data binding to an <xref:System.Data.Objects.DataClasses.EntityCollection%601>. It is called by the control bound to the collection. For more information, see [Binding Objects to Controls](http://msdn.microsoft.com/en-us/2fd34855-929b-4303-a91e-4bb69d958f2b)."
  syntax:
    content: System.Collections.IList IListSource.GetList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: An <xref href="System.Collections.IList"></xref> of entity objects.
  overload: System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects.DataClasses\EntityCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects.DataClasses/EntityCollection`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Data.Objects.DataClasses.RelatedEnd
  isExternal: false
  name: System.Data.Objects.DataClasses.RelatedEnd
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Data.Objects.DataClasses.EntityCollection`1.#ctor
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: EntityCollection<TEntity>()
  nameWithType: EntityCollection<TEntity>.EntityCollection<TEntity>()
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.EntityCollection<TEntity>()
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Add(`0)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: Add(TEntity)
  nameWithType: EntityCollection<TEntity>.Add(TEntity)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Add(TEntity)
- uid: TEntity
  isExternal: true
  name: TEntity
  nameWithType: TEntity
  fullName: TEntity
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: Attach(IEnumerable<TEntity>)
  nameWithType: EntityCollection<TEntity>.Attach(IEnumerable<TEntity>)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Attach(IEnumerable<TEntity>)
- uid: System.Collections.Generic.IEnumerable{TEntity}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TEntity>
  nameWithType: IEnumerable<TEntity>
  fullName: System.Collections.Generic.IEnumerable<TEntity>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TEntity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TEntity
    name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Attach(`0)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: Attach(TEntity)
  nameWithType: EntityCollection<TEntity>.Attach(TEntity)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Attach(TEntity)
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Clear
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: Clear()
  nameWithType: EntityCollection<TEntity>.Clear()
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Clear()
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Contains(`0)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: Contains(TEntity)
  nameWithType: EntityCollection<TEntity>.Contains(TEntity)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Contains(TEntity)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: CopyTo(TEntity[],Int32)
  nameWithType: EntityCollection<TEntity>.CopyTo(TEntity[],Int32)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.CopyTo(TEntity[],Int32)
- uid: TEntity[]
  isExternal: true
  name: TEntity[]
  nameWithType: TEntity[]
  fullName: TEntity[]
  spec.csharp:
  - uid: TEntity
    name: TEntity
    nameWithType: TEntity
    fullName: TEntity[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Count
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: Count
  nameWithType: EntityCollection<TEntity>.Count
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Count
- uid: System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: CreateSourceQuery()
  nameWithType: EntityCollection<TEntity>.CreateSourceQuery()
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.CreateSourceQuery()
- uid: System.Data.Objects.ObjectQuery{TEntity}
  parent: System.Data.Objects
  isExternal: false
  name: ObjectQuery<TEntity>
  nameWithType: ObjectQuery<TEntity>
  fullName: System.Data.Objects.ObjectQuery<TEntity>
  spec.csharp:
  - uid: System.Data.Objects.ObjectQuery`1
    name: ObjectQuery
    nameWithType: ObjectQuery
    fullName: ObjectQuery<TEntity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TEntity
    name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: EntityCollection<TEntity>.GetEnumerator()
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{TEntity}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<TEntity>
  nameWithType: IEnumerator<TEntity>
  fullName: System.Collections.Generic.IEnumerator<TEntity>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<TEntity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TEntity
    name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: IsReadOnly
  nameWithType: EntityCollection<TEntity>.IsReadOnly
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.IsReadOnly
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: Load(MergeOption)
  nameWithType: EntityCollection<TEntity>.Load(MergeOption)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Load(MergeOption)
- uid: System.Data.Objects.MergeOption
  parent: System.Data.Objects
  isExternal: false
  name: MergeOption
  nameWithType: MergeOption
  fullName: System.Data.Objects.MergeOption
- uid: System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: OnCollectionDeserialized(StreamingContext)
  nameWithType: EntityCollection<TEntity>.OnCollectionDeserialized(StreamingContext)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.OnCollectionDeserialized(StreamingContext)
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: OnSerializing(StreamingContext)
  nameWithType: EntityCollection<TEntity>.OnSerializing(StreamingContext)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.OnSerializing(StreamingContext)
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Remove(`0)
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: Remove(TEntity)
  nameWithType: EntityCollection<TEntity>.Remove(TEntity)
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.Remove(TEntity)
- uid: System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: EntityCollection<TEntity>.IEnumerable.GetEnumerator()
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: IListSource.ContainsListCollection
  nameWithType: EntityCollection<TEntity>.IListSource.ContainsListCollection
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.IListSource.ContainsListCollection
- uid: System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: IListSource.GetList()
  nameWithType: EntityCollection<TEntity>.IListSource.GetList()
  fullName: System.Data.Objects.DataClasses.EntityCollection<TEntity>.IListSource.GetList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Data.Objects.DataClasses.EntityCollection`1.#ctor*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: EntityCollection<TEntity>
  nameWithType: EntityCollection<TEntity>.EntityCollection<TEntity>
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Add*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: Add
  nameWithType: EntityCollection<TEntity>.Add
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Attach*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: Attach
  nameWithType: EntityCollection<TEntity>.Attach
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Clear*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: Clear
  nameWithType: EntityCollection<TEntity>.Clear
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Contains*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: Contains
  nameWithType: EntityCollection<TEntity>.Contains
- uid: System.Data.Objects.DataClasses.EntityCollection`1.CopyTo*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: CopyTo
  nameWithType: EntityCollection<TEntity>.CopyTo
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Count*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: Count
  nameWithType: EntityCollection<TEntity>.Count
- uid: System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: CreateSourceQuery
  nameWithType: EntityCollection<TEntity>.CreateSourceQuery
- uid: System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: GetEnumerator
  nameWithType: EntityCollection<TEntity>.GetEnumerator
- uid: System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: IsReadOnly
  nameWithType: EntityCollection<TEntity>.IsReadOnly
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Load*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: Load
  nameWithType: EntityCollection<TEntity>.Load
- uid: System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: OnCollectionDeserialized
  nameWithType: EntityCollection<TEntity>.OnCollectionDeserialized
- uid: System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: OnSerializing
  nameWithType: EntityCollection<TEntity>.OnSerializing
- uid: System.Data.Objects.DataClasses.EntityCollection`1.Remove*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: Remove
  nameWithType: EntityCollection<TEntity>.Remove
- uid: System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: EntityCollection<TEntity>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: EntityCollection<TEntity>.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList*
  parent: System.Data.Objects.DataClasses.EntityCollection`1
  isExternal: false
  name: System.ComponentModel.IListSource.GetList
  nameWithType: EntityCollection<TEntity>.System.ComponentModel.IListSource.GetList
