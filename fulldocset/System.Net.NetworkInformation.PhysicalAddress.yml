### YamlMime:ManagedReference
items:
- uid: System.Net.NetworkInformation.PhysicalAddress
  id: PhysicalAddress
  children:
  - System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])
  - System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)
  - System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes
  - System.Net.NetworkInformation.PhysicalAddress.GetHashCode
  - System.Net.NetworkInformation.PhysicalAddress.None
  - System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)
  - System.Net.NetworkInformation.PhysicalAddress.ToString
  langs:
  - csharp
  name: PhysicalAddress
  nameWithType: PhysicalAddress
  fullName: System.Net.NetworkInformation.PhysicalAddress
  type: Class
  summary: Provides the Media Access Control (MAC) address for a network interface (adapter).
  remarks: "The MAC address, or physical address, is a hardware address that uniquely identifies each node, such as a computer or printer, on a network.  \n  \n Instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=fullName> method."
  example:
  - "The following code example displays the physical addresses of all interfaces on the local computer.  \n  \n [!code-cpp[NCLPhysicalAddress#2](~/add/codesnippet/cpp/t-system.net.networkinfo_27_1.cpp)]\n [!code-cs[NCLPhysicalAddress#2](~/add/codesnippet/csharp/t-system.net.networkinfo_27_1.cs)]"
  syntax:
    content: public class PhysicalAddress
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.NetworkInformation\PhysicalAddress.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.NetworkInformation/PhysicalAddress.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Net.NetworkInformation.PhysicalAddress
  langs:
  - csharp
  name: PhysicalAddress(Byte[])
  nameWithType: PhysicalAddress.PhysicalAddress(Byte[])
  fullName: System.Net.NetworkInformation.PhysicalAddress.PhysicalAddress(Byte[])
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.NetworkInformation
  summary: Initializes a new instance of the <xref href="System.Net.NetworkInformation.PhysicalAddress"></xref> class.
  remarks: "In common scenarios, applications do not need to call this constructor; instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A> method.  \n  \n Note that you can also use the <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method to create a new instance of <xref:System.Net.NetworkInformation.PhysicalAddress>."
  example:
  - "The following code example creates a new <xref:System.Net.NetworkInformation.PhysicalAddress> object.  \n  \n [!code-cpp[NCLPhysicalAddress#4](~/add/codesnippet/cpp/m-system.net.networkinfo_13_1.cpp)]\n [!code-cs[NCLPhysicalAddress#4](~/add/codesnippet/csharp/m-system.net.networkinfo_13_1.cs)]"
  syntax:
    content: public PhysicalAddress (byte[] address);
    parameters:
    - id: address
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the address.
  overload: System.Net.NetworkInformation.PhysicalAddress.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.NetworkInformation\PhysicalAddress.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.NetworkInformation/PhysicalAddress.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.NetworkInformation.PhysicalAddress
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: PhysicalAddress.Equals(Object)
  fullName: System.Net.NetworkInformation.PhysicalAddress.Equals(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.NetworkInformation
  summary: Compares two <xref href="System.Net.NetworkInformation.PhysicalAddress"></xref> instances.
  remarks: ''
  example:
  - "The following code example compares two <xref:System.Net.NetworkInformation.PhysicalAddress> instances.  \n  \n [!code-cpp[NCLPhysicalAddress#3](~/add/codesnippet/cpp/m-system.net.networkinfo_23_1.cpp)]\n [!code-cs[NCLPhysicalAddress#3](~/add/codesnippet/csharp/m-system.net.networkinfo_23_1.cs)]"
  syntax:
    content: public override bool Equals (object comparand);
    parameters:
    - id: comparand
      type: System.Object
      description: The <xref href="System.Net.NetworkInformation.PhysicalAddress"></xref> to compare to the current instance.
    return:
      type: System.Boolean
      description: '`true` if this instance and the specified instance contain the same address; otherwise `false`.'
  overload: System.Net.NetworkInformation.PhysicalAddress.Equals*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.NetworkInformation\PhysicalAddress.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.NetworkInformation/PhysicalAddress.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes
  id: GetAddressBytes
  parent: System.Net.NetworkInformation.PhysicalAddress
  langs:
  - csharp
  name: GetAddressBytes()
  nameWithType: PhysicalAddress.GetAddressBytes()
  fullName: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes()
  type: Method
  assemblies:
  - System
  namespace: System.Net.NetworkInformation
  summary: Returns the address of the current instance.
  remarks: ''
  example:
  - "The following code example calls this method to retrieve the address of a <xref:System.Net.NetworkInformation.PhysicalAddress> and formats the address for display.  \n  \n [!code-cpp[NCLPhysicalAddress#2](~/add/codesnippet/cpp/m-system.net.networkinfo_19_1.cpp)]\n [!code-cs[NCLPhysicalAddress#2](~/add/codesnippet/csharp/m-system.net.networkinfo_19_1.cs)]"
  syntax:
    content: public byte[] GetAddressBytes ();
    parameters: []
    return:
      type: System.Byte[]
      description: A <xref href="System.Byte"></xref> array containing the address.
  overload: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.NetworkInformation\PhysicalAddress.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.NetworkInformation/PhysicalAddress.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.NetworkInformation.PhysicalAddress.GetHashCode
  id: GetHashCode
  parent: System.Net.NetworkInformation.PhysicalAddress
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: PhysicalAddress.GetHashCode()
  fullName: System.Net.NetworkInformation.PhysicalAddress.GetHashCode()
  type: Method
  assemblies:
  - System
  namespace: System.Net.NetworkInformation
  summary: Returns the hash value of a physical address.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: An integer hash value.
  overload: System.Net.NetworkInformation.PhysicalAddress.GetHashCode*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.NetworkInformation\PhysicalAddress.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.NetworkInformation/PhysicalAddress.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.NetworkInformation.PhysicalAddress.None
  id: None
  parent: System.Net.NetworkInformation.PhysicalAddress
  langs:
  - csharp
  name: None
  nameWithType: PhysicalAddress.None
  fullName: System.Net.NetworkInformation.PhysicalAddress.None
  type: Field
  assemblies:
  - System
  namespace: System.Net.NetworkInformation
  summary: Returns a new <xref href="System.Net.NetworkInformation.PhysicalAddress"></xref> instance with a zero length address. This field is read-only.
  remarks: The <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method returns None if you specify `null` address.
  example:
  - "The following code example demonstrates using this field to test the result of parsing an address.  \n  \n [!code-cpp[NCLPhysicalAddress#5](~/add/codesnippet/cpp/f-system.net.networkinfo_1.cpp)]\n [!code-cs[NCLPhysicalAddress#5](~/add/codesnippet/csharp/f-system.net.networkinfo_1.cs)]"
  syntax:
    content: public static readonly System.Net.NetworkInformation.PhysicalAddress None;
    return:
      type: System.Net.NetworkInformation.PhysicalAddress
      description: To be added.
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.NetworkInformation\PhysicalAddress.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.NetworkInformation/PhysicalAddress.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)
  id: Parse(System.String)
  parent: System.Net.NetworkInformation.PhysicalAddress
  langs:
  - csharp
  name: Parse(String)
  nameWithType: PhysicalAddress.Parse(String)
  fullName: System.Net.NetworkInformation.PhysicalAddress.Parse(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.NetworkInformation
  summary: Parses the specified <xref href="System.String"></xref> and stores its contents as the address bytes of the <xref href="System.Net.NetworkInformation.PhysicalAddress"></xref> returned by this method.
  remarks: "The `address` parameter must contain a string that can only consist of numbers and upper-case letters as hexadecimal digits. Some examples of string formats that are acceptable are as follows:  \n  \n `001122334455`  \n  \n `00-11-22-33-44-55`  \n  \n `F0-E1-D2-C3-B4-A5`  \n  \n Note that an address that contains `f0-e1-d2-c3-b4-a5` will fail to parse and throw an exception.  \n  \n Use the <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> method to retrieve the address from an existing <xref:System.Net.NetworkInformation.PhysicalAddress> instance."
  example:
  - "The following code example creates a <xref:System.Net.NetworkInformation.PhysicalAddress> instance by calling the Parse method.  \n  \n [!code-cpp[NCLPhysicalAddress#5](~/add/codesnippet/cpp/m-system.net.networkinfo_0_1.cpp)]\n [!code-cs[NCLPhysicalAddress#5](~/add/codesnippet/csharp/m-system.net.networkinfo_0_1.cs)]"
  syntax:
    content: public static System.Net.NetworkInformation.PhysicalAddress Parse (string address);
    parameters:
    - id: address
      type: System.String
      description: A <xref href="System.String"></xref> containing the address that will be used to initialize the <xref href="System.Net.NetworkInformation.PhysicalAddress"></xref> instance returned by this method.
    return:
      type: System.Net.NetworkInformation.PhysicalAddress
      description: A <xref href="System.Net.NetworkInformation.PhysicalAddress"></xref> instance with the specified address.
  overload: System.Net.NetworkInformation.PhysicalAddress.Parse*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "The <code>address</code> parameter contains an illegal hardware address.  \n  \n This exception also occurs if the <code>address</code> parameter contains a string in the incorrect format."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.NetworkInformation\PhysicalAddress.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.NetworkInformation/PhysicalAddress.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.NetworkInformation.PhysicalAddress.ToString
  id: ToString
  parent: System.Net.NetworkInformation.PhysicalAddress
  langs:
  - csharp
  name: ToString()
  nameWithType: PhysicalAddress.ToString()
  fullName: System.Net.NetworkInformation.PhysicalAddress.ToString()
  type: Method
  assemblies:
  - System
  namespace: System.Net.NetworkInformation
  summary: Returns the <xref href="System.String"></xref> representation of the address of this instance.
  remarks: ''
  example:
  - "The following code example demonstrates displaying the address in a <xref:System.Net.NetworkInformation.PhysicalAddress> instance.  \n  \n [!code-cpp[NCLPhysicalAddress#3](~/add/codesnippet/cpp/m-system.net.networkinfo_14_1.cpp)]\n [!code-cs[NCLPhysicalAddress#3](~/add/codesnippet/csharp/m-system.net.networkinfo_14_1.cs)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A <xref href="System.String"></xref> containing the address contained in this instance.
  overload: System.Net.NetworkInformation.PhysicalAddress.ToString*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net.NetworkInformation\PhysicalAddress.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net.NetworkInformation/PhysicalAddress.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
- uid: System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: PhysicalAddress(Byte[])
  nameWithType: PhysicalAddress.PhysicalAddress(Byte[])
  fullName: System.Net.NetworkInformation.PhysicalAddress.PhysicalAddress(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: Equals(Object)
  nameWithType: PhysicalAddress.Equals(Object)
  fullName: System.Net.NetworkInformation.PhysicalAddress.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: GetAddressBytes()
  nameWithType: PhysicalAddress.GetAddressBytes()
  fullName: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes()
- uid: System.Net.NetworkInformation.PhysicalAddress.GetHashCode
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: GetHashCode()
  nameWithType: PhysicalAddress.GetHashCode()
  fullName: System.Net.NetworkInformation.PhysicalAddress.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.NetworkInformation.PhysicalAddress.None
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: None
  nameWithType: PhysicalAddress.None
  fullName: System.Net.NetworkInformation.PhysicalAddress.None
- uid: System.Net.NetworkInformation.PhysicalAddress
  parent: System.Net.NetworkInformation
  isExternal: false
  name: PhysicalAddress
  nameWithType: PhysicalAddress
  fullName: System.Net.NetworkInformation.PhysicalAddress
- uid: System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: Parse(String)
  nameWithType: PhysicalAddress.Parse(String)
  fullName: System.Net.NetworkInformation.PhysicalAddress.Parse(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.NetworkInformation.PhysicalAddress.ToString
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: ToString()
  nameWithType: PhysicalAddress.ToString()
  fullName: System.Net.NetworkInformation.PhysicalAddress.ToString()
- uid: System.Net.NetworkInformation.PhysicalAddress.#ctor*
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: PhysicalAddress
  nameWithType: PhysicalAddress.PhysicalAddress
- uid: System.Net.NetworkInformation.PhysicalAddress.Equals*
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: Equals
  nameWithType: PhysicalAddress.Equals
- uid: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes*
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: GetAddressBytes
  nameWithType: PhysicalAddress.GetAddressBytes
- uid: System.Net.NetworkInformation.PhysicalAddress.GetHashCode*
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: GetHashCode
  nameWithType: PhysicalAddress.GetHashCode
- uid: System.Net.NetworkInformation.PhysicalAddress.Parse*
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: Parse
  nameWithType: PhysicalAddress.Parse
- uid: System.Net.NetworkInformation.PhysicalAddress.ToString*
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: ToString
  nameWithType: PhysicalAddress.ToString
