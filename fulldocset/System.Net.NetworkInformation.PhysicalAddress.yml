### YamlMime:ManagedReference
items:
- uid: System.Net.NetworkInformation.PhysicalAddress
  id: PhysicalAddress
  children:
  - System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])
  - System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)
  - System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes
  - System.Net.NetworkInformation.PhysicalAddress.GetHashCode
  - System.Net.NetworkInformation.PhysicalAddress.None
  - System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)
  - System.Net.NetworkInformation.PhysicalAddress.ToString
  langs:
  - csharp
  name: PhysicalAddress
  nameWithType: PhysicalAddress
  fullName: System.Net.NetworkInformation.PhysicalAddress
  type: Class
  summary: Provides the Media Access Control (MAC) address for a network interface (adapter).
  syntax:
    content: public class PhysicalAddress
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Net.NetworkInformation.PhysicalAddress
  langs:
  - csharp
  name: PhysicalAddress(Byte[])
  nameWithType: PhysicalAddress.PhysicalAddress(Byte[])
  fullName: System.Net.NetworkInformation.PhysicalAddress.PhysicalAddress(Byte[])
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.NetworkInformation
  summary: Initializes a new instance of the <xref href="System.Net.NetworkInformation.PhysicalAddress"></xref> class.
  syntax:
    content: public PhysicalAddress (byte[] address);
    parameters:
    - id: address
      type: System.Byte[]
      description: To be added.
  overload: System.Net.NetworkInformation.PhysicalAddress.#ctor*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.NetworkInformation.PhysicalAddress
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: PhysicalAddress.Equals(Object)
  fullName: System.Net.NetworkInformation.PhysicalAddress.Equals(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.NetworkInformation
  summary: Compares two <xref href="System.Net.NetworkInformation.PhysicalAddress"></xref> instances.
  syntax:
    content: public override bool Equals (object comparand);
    parameters:
    - id: comparand
      type: System.Object
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Net.NetworkInformation.PhysicalAddress.Equals*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes
  id: GetAddressBytes
  parent: System.Net.NetworkInformation.PhysicalAddress
  langs:
  - csharp
  name: GetAddressBytes()
  nameWithType: PhysicalAddress.GetAddressBytes()
  fullName: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes()
  type: Method
  assemblies:
  - System
  namespace: System.Net.NetworkInformation
  summary: Returns the address of the current instance.
  syntax:
    content: public byte[] GetAddressBytes ();
    parameters: []
    return:
      type: System.Byte[]
      description: To be added.
  overload: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.NetworkInformation.PhysicalAddress.GetHashCode
  id: GetHashCode
  parent: System.Net.NetworkInformation.PhysicalAddress
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: PhysicalAddress.GetHashCode()
  fullName: System.Net.NetworkInformation.PhysicalAddress.GetHashCode()
  type: Method
  assemblies:
  - System
  namespace: System.Net.NetworkInformation
  summary: Returns the hash value of a physical address.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: To be added.
  overload: System.Net.NetworkInformation.PhysicalAddress.GetHashCode*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.NetworkInformation.PhysicalAddress.None
  id: None
  parent: System.Net.NetworkInformation.PhysicalAddress
  langs:
  - csharp
  name: None
  nameWithType: PhysicalAddress.None
  fullName: System.Net.NetworkInformation.PhysicalAddress.None
  type: Field
  assemblies:
  - System
  namespace: System.Net.NetworkInformation
  summary: Returns a new <xref href="System.Net.NetworkInformation.PhysicalAddress"></xref> instance with a zero length address. This field is read-only.
  syntax:
    content: public static readonly System.Net.NetworkInformation.PhysicalAddress None;
    return:
      type: System.Net.NetworkInformation.PhysicalAddress
      description: To be added.
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)
  id: Parse(System.String)
  parent: System.Net.NetworkInformation.PhysicalAddress
  langs:
  - csharp
  name: Parse(String)
  nameWithType: PhysicalAddress.Parse(String)
  fullName: System.Net.NetworkInformation.PhysicalAddress.Parse(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.NetworkInformation
  summary: Parses the specified <xref href="System.String"></xref> and stores its contents as the address bytes of the <xref href="System.Net.NetworkInformation.PhysicalAddress"></xref> returned by this method.
  syntax:
    content: public static System.Net.NetworkInformation.PhysicalAddress Parse (string address);
    parameters:
    - id: address
      type: System.String
      description: To be added.
    return:
      type: System.Net.NetworkInformation.PhysicalAddress
      description: To be added.
  overload: System.Net.NetworkInformation.PhysicalAddress.Parse*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Net.NetworkInformation.PhysicalAddress.ToString
  id: ToString
  parent: System.Net.NetworkInformation.PhysicalAddress
  langs:
  - csharp
  name: ToString()
  nameWithType: PhysicalAddress.ToString()
  fullName: System.Net.NetworkInformation.PhysicalAddress.ToString()
  type: Method
  assemblies:
  - System
  namespace: System.Net.NetworkInformation
  summary: Returns the <xref href="System.String"></xref> representation of the address of this instance.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: To be added.
  overload: System.Net.NetworkInformation.PhysicalAddress.ToString*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: PhysicalAddress(Byte[])
  nameWithType: PhysicalAddress.PhysicalAddress(Byte[])
  fullName: System.Net.NetworkInformation.PhysicalAddress.PhysicalAddress(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: Equals(Object)
  nameWithType: PhysicalAddress.Equals(Object)
  fullName: System.Net.NetworkInformation.PhysicalAddress.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: GetAddressBytes()
  nameWithType: PhysicalAddress.GetAddressBytes()
  fullName: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes()
- uid: System.Net.NetworkInformation.PhysicalAddress.GetHashCode
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: GetHashCode()
  nameWithType: PhysicalAddress.GetHashCode()
  fullName: System.Net.NetworkInformation.PhysicalAddress.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.NetworkInformation.PhysicalAddress.None
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: None
  nameWithType: PhysicalAddress.None
  fullName: System.Net.NetworkInformation.PhysicalAddress.None
- uid: System.Net.NetworkInformation.PhysicalAddress
  parent: System.Net.NetworkInformation
  isExternal: false
  name: PhysicalAddress
  nameWithType: PhysicalAddress
  fullName: System.Net.NetworkInformation.PhysicalAddress
- uid: System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: Parse(String)
  nameWithType: PhysicalAddress.Parse(String)
  fullName: System.Net.NetworkInformation.PhysicalAddress.Parse(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.NetworkInformation.PhysicalAddress.ToString
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: ToString()
  nameWithType: PhysicalAddress.ToString()
  fullName: System.Net.NetworkInformation.PhysicalAddress.ToString()
- uid: System.Net.NetworkInformation.PhysicalAddress.#ctor*
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: PhysicalAddress
  nameWithType: PhysicalAddress.PhysicalAddress
- uid: System.Net.NetworkInformation.PhysicalAddress.Equals*
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: Equals
  nameWithType: PhysicalAddress.Equals
- uid: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes*
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: GetAddressBytes
  nameWithType: PhysicalAddress.GetAddressBytes
- uid: System.Net.NetworkInformation.PhysicalAddress.GetHashCode*
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: GetHashCode
  nameWithType: PhysicalAddress.GetHashCode
- uid: System.Net.NetworkInformation.PhysicalAddress.Parse*
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: Parse
  nameWithType: PhysicalAddress.Parse
- uid: System.Net.NetworkInformation.PhysicalAddress.ToString*
  parent: System.Net.NetworkInformation.PhysicalAddress
  isExternal: false
  name: ToString
  nameWithType: PhysicalAddress.ToString
