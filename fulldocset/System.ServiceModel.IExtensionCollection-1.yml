### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.IExtensionCollection`1
  id: IExtensionCollection`1
  children:
  - System.ServiceModel.IExtensionCollection`1.Find``1
  - System.ServiceModel.IExtensionCollection`1.FindAll``1
  langs:
  - csharp
  name: IExtensionCollection<T>
  nameWithType: IExtensionCollection<T>
  fullName: System.ServiceModel.IExtensionCollection<T>
  type: Interface
  syntax:
    content: 'public interface IExtensionCollection<T> : System.Collections.Generic.ICollection<System.ServiceModel.IExtension<T>>, System.Collections.Generic.IEnumerable<System.ServiceModel.IExtension<T>> where T : IExtensibleObject<T>'
    typeParameters:
    - id: T
      description: To be added.
  implements:
  - System.Collections.Generic.ICollection<System.ServiceModel.IExtension<T>>
  - System.Collections.Generic.IEnumerable<System.ServiceModel.IExtension<T>>
  platform:
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.ServiceModel.IExtensionCollection`1.Find``1
  id: Find``1
  parent: System.ServiceModel.IExtensionCollection`1
  langs:
  - csharp
  name: Find()
  nameWithType: IExtensionCollection<T>.Find()
  fullName: System.ServiceModel.IExtensionCollection<T>.Find()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  syntax:
    content: public E Find<E> ();
    parameters: []
    return:
      type: E
      description: To be added.
  overload: System.ServiceModel.IExtensionCollection`1.Find<E>*
  exceptions: []
  platform:
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.ServiceModel.IExtensionCollection`1.FindAll``1
  id: FindAll``1
  parent: System.ServiceModel.IExtensionCollection`1
  langs:
  - csharp
  name: FindAll()
  nameWithType: IExtensionCollection<T>.FindAll()
  fullName: System.ServiceModel.IExtensionCollection<T>.FindAll()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  syntax:
    content: public System.Collections.ObjectModel.Collection<E> FindAll<E> ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{E}
      description: To be added.
  overload: System.ServiceModel.IExtensionCollection`1.FindAll<E>*
  exceptions: []
  platform:
  - netframework-30
  - netframework-35
  - netframework-40
references:
- uid: System.ServiceModel.IExtensionCollection`1.Find``1
  parent: System.ServiceModel.IExtensionCollection`1
  isExternal: false
  name: Find()
  nameWithType: IExtensionCollection<T>.Find()
  fullName: System.ServiceModel.IExtensionCollection<T>.Find()
- uid: E
  isExternal: true
  name: E
  nameWithType: E
  fullName: E
- uid: System.ServiceModel.IExtensionCollection`1.FindAll``1
  parent: System.ServiceModel.IExtensionCollection`1
  isExternal: false
  name: FindAll()
  nameWithType: IExtensionCollection<T>.FindAll()
  fullName: System.ServiceModel.IExtensionCollection<T>.FindAll()
- uid: System.Collections.ObjectModel.Collection{E}
  parent: System.Collections.ObjectModel
  isExternal: false
  name: Collection<E>
  nameWithType: Collection<E>
  fullName: System.Collections.ObjectModel.Collection<E>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<E>
  - name: <
    nameWithType: <
    fullName: <
  - uid: E
    name: E
    nameWithType: E
    fullName: E
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.IExtensionCollection`1.Find<E>*
  parent: System.ServiceModel.IExtensionCollection`1
  isExternal: false
  name: Find<E>
  nameWithType: IExtensionCollection<T>.Find<E>
- uid: System.ServiceModel.IExtensionCollection`1.FindAll<E>*
  parent: System.ServiceModel.IExtensionCollection`1
  isExternal: false
  name: FindAll<E>
  nameWithType: IExtensionCollection<T>.FindAll<E>
