### YamlMime:ManagedReference
items:
- uid: System.Numerics.Complex
  id: Complex
  children:
  - System.Numerics.Complex.#ctor(System.Double,System.Double)
  - System.Numerics.Complex.Abs(System.Numerics.Complex)
  - System.Numerics.Complex.Acos(System.Numerics.Complex)
  - System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Asin(System.Numerics.Complex)
  - System.Numerics.Complex.Atan(System.Numerics.Complex)
  - System.Numerics.Complex.Conjugate(System.Numerics.Complex)
  - System.Numerics.Complex.Cos(System.Numerics.Complex)
  - System.Numerics.Complex.Cosh(System.Numerics.Complex)
  - System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Equals(System.Numerics.Complex)
  - System.Numerics.Complex.Equals(System.Object)
  - System.Numerics.Complex.Exp(System.Numerics.Complex)
  - System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)
  - System.Numerics.Complex.GetHashCode
  - System.Numerics.Complex.Imaginary
  - System.Numerics.Complex.ImaginaryOne
  - System.Numerics.Complex.Log(System.Numerics.Complex)
  - System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)
  - System.Numerics.Complex.Log10(System.Numerics.Complex)
  - System.Numerics.Complex.Magnitude
  - System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Negate(System.Numerics.Complex)
  - System.Numerics.Complex.One
  - System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Explicit(System.Decimal to System.Numerics.Complex)
  - System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger to System.Numerics.Complex)
  - System.Numerics.Complex.op_Implicit(System.Byte)
  - System.Numerics.Complex.op_Implicit(System.Double)
  - System.Numerics.Complex.op_Implicit(System.Int16)
  - System.Numerics.Complex.op_Implicit(System.Int32)
  - System.Numerics.Complex.op_Implicit(System.Int64)
  - System.Numerics.Complex.op_Implicit(System.SByte)
  - System.Numerics.Complex.op_Implicit(System.Single)
  - System.Numerics.Complex.op_Implicit(System.UInt16)
  - System.Numerics.Complex.op_Implicit(System.UInt32)
  - System.Numerics.Complex.op_Implicit(System.UInt64)
  - System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
  - System.Numerics.Complex.Phase
  - System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)
  - System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Real
  - System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
  - System.Numerics.Complex.Sin(System.Numerics.Complex)
  - System.Numerics.Complex.Sinh(System.Numerics.Complex)
  - System.Numerics.Complex.Sqrt(System.Numerics.Complex)
  - System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Tan(System.Numerics.Complex)
  - System.Numerics.Complex.Tanh(System.Numerics.Complex)
  - System.Numerics.Complex.ToString
  - System.Numerics.Complex.ToString(System.IFormatProvider)
  - System.Numerics.Complex.ToString(System.String)
  - System.Numerics.Complex.ToString(System.String,System.IFormatProvider)
  - System.Numerics.Complex.Zero
  langs:
  - csharp
  name: Complex
  nameWithType: Complex
  fullName: System.Numerics.Complex
  type: Struct
  summary: Represents a complex number.
  syntax:
    content: 'public struct Complex : IEquatable<System.Numerics.Complex>, IFormattable'
  inheritance:
  - System.Object
  - System.ValueType
  implements:
  - System.IEquatable<System.Numerics.Complex>
  - System.IFormattable
  platform:
  - netframework-40
- uid: System.Numerics.Complex.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Complex(Double,Double)
  nameWithType: Complex.Complex(Double,Double)
  fullName: System.Numerics.Complex.Complex(Double,Double)
  type: Constructor
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.Complex"></xref> structure using the specified real and imaginary values.
  syntax:
    content: public Complex (double real, double imaginary);
    parameters:
    - id: real
      type: System.Double
      description: To be added.
    - id: imaginary
      type: System.Double
      description: To be added.
  overload: System.Numerics.Complex.#ctor*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Abs(System.Numerics.Complex)
  id: Abs(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Abs(Complex)
  nameWithType: Complex.Abs(Complex)
  fullName: System.Numerics.Complex.Abs(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Gets the absolute value (or magnitude) of a complex number.
  syntax:
    content: public static double Abs (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Double
      description: To be added.
  overload: System.Numerics.Complex.Abs*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Acos(System.Numerics.Complex)
  id: Acos(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Acos(Complex)
  nameWithType: Complex.Acos(Complex)
  fullName: System.Numerics.Complex.Acos(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the angle that is the arc cosine of the specified complex number.
  syntax:
    content: public static System.Numerics.Complex Acos (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Acos*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
  id: Add(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Add(Complex,Complex)
  nameWithType: Complex.Add(Complex,Complex)
  fullName: System.Numerics.Complex.Add(Complex,Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Adds two complex numbers and returns the result.
  syntax:
    content: public static System.Numerics.Complex Add (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: To be added.
    - id: right
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Add*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Asin(System.Numerics.Complex)
  id: Asin(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Asin(Complex)
  nameWithType: Complex.Asin(Complex)
  fullName: System.Numerics.Complex.Asin(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the angle that is the arc sine of the specified complex number.
  syntax:
    content: public static System.Numerics.Complex Asin (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Asin*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Atan(System.Numerics.Complex)
  id: Atan(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Atan(Complex)
  nameWithType: Complex.Atan(Complex)
  fullName: System.Numerics.Complex.Atan(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the angle that is the arc tangent of the specified complex number.
  syntax:
    content: public static System.Numerics.Complex Atan (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Atan*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Conjugate(System.Numerics.Complex)
  id: Conjugate(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Conjugate(Complex)
  nameWithType: Complex.Conjugate(Complex)
  fullName: System.Numerics.Complex.Conjugate(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Computes the conjugate of a complex number and returns the result.
  syntax:
    content: public static System.Numerics.Complex Conjugate (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Conjugate*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Cos(System.Numerics.Complex)
  id: Cos(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Cos(Complex)
  nameWithType: Complex.Cos(Complex)
  fullName: System.Numerics.Complex.Cos(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the cosine of the specified complex number.
  syntax:
    content: public static System.Numerics.Complex Cos (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Cos*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Cosh(System.Numerics.Complex)
  id: Cosh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Cosh(Complex)
  nameWithType: Complex.Cosh(Complex)
  fullName: System.Numerics.Complex.Cosh(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the hyperbolic cosine of the specified complex number.
  syntax:
    content: public static System.Numerics.Complex Cosh (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Cosh*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
  id: Divide(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Divide(Complex,Complex)
  nameWithType: Complex.Divide(Complex,Complex)
  fullName: System.Numerics.Complex.Divide(Complex,Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Divides one complex number by another and returns the result.
  syntax:
    content: public static System.Numerics.Complex Divide (System.Numerics.Complex dividend, System.Numerics.Complex divisor);
    parameters:
    - id: dividend
      type: System.Numerics.Complex
      description: To be added.
    - id: divisor
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Divide*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Equals(System.Numerics.Complex)
  id: Equals(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Equals(Complex)
  nameWithType: Complex.Equals(Complex)
  fullName: System.Numerics.Complex.Equals(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether the current instance and a specified complex number have the same value.
  syntax:
    content: public bool Equals (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Numerics.Complex.Equals*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Complex.Equals(Object)
  fullName: System.Numerics.Complex.Equals(Object)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether the current instance and a specified object have the same value.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Numerics.Complex.Equals*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Exp(System.Numerics.Complex)
  id: Exp(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Exp(Complex)
  nameWithType: Complex.Exp(Complex)
  fullName: System.Numerics.Complex.Exp(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns `e` raised to the power specified by a complex number.
  syntax:
    content: public static System.Numerics.Complex Exp (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Exp*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)
  id: FromPolarCoordinates(System.Double,System.Double)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: FromPolarCoordinates(Double,Double)
  nameWithType: Complex.FromPolarCoordinates(Double,Double)
  fullName: System.Numerics.Complex.FromPolarCoordinates(Double,Double)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Creates a complex number from a point's polar coordinates.
  syntax:
    content: public static System.Numerics.Complex FromPolarCoordinates (double magnitude, double phase);
    parameters:
    - id: magnitude
      type: System.Double
      description: To be added.
    - id: phase
      type: System.Double
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.FromPolarCoordinates*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.GetHashCode
  id: GetHashCode
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Complex.GetHashCode()
  fullName: System.Numerics.Complex.GetHashCode()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the hash code for the current <xref href="System.Numerics.Complex"></xref> object.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: To be added.
  overload: System.Numerics.Complex.GetHashCode*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Imaginary
  id: Imaginary
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Imaginary
  nameWithType: Complex.Imaginary
  fullName: System.Numerics.Complex.Imaginary
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Gets the imaginary component of the current <xref href="System.Numerics.Complex"></xref> object.
  syntax:
    content: public double Imaginary { get; }
    return:
      type: System.Double
      description: To be added.
  overload: System.Numerics.Complex.Imaginary*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.ImaginaryOne
  id: ImaginaryOne
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: ImaginaryOne
  nameWithType: Complex.ImaginaryOne
  fullName: System.Numerics.Complex.ImaginaryOne
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns a new <xref href="System.Numerics.Complex"></xref> instance with a real number equal to zero and an imaginary number equal to one.
  syntax:
    content: public static readonly System.Numerics.Complex ImaginaryOne;
    return:
      type: System.Numerics.Complex
      description: To be added.
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Log(System.Numerics.Complex)
  id: Log(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Log(Complex)
  nameWithType: Complex.Log(Complex)
  fullName: System.Numerics.Complex.Log(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the natural (base `e`) logarithm of a specified complex number.
  syntax:
    content: public static System.Numerics.Complex Log (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Log*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)
  id: Log(System.Numerics.Complex,System.Double)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Log(Complex,Double)
  nameWithType: Complex.Log(Complex,Double)
  fullName: System.Numerics.Complex.Log(Complex,Double)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the logarithm of a specified complex number in a specified base.
  syntax:
    content: public static System.Numerics.Complex Log (System.Numerics.Complex value, double baseValue);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    - id: baseValue
      type: System.Double
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Log*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Log10(System.Numerics.Complex)
  id: Log10(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Log10(Complex)
  nameWithType: Complex.Log10(Complex)
  fullName: System.Numerics.Complex.Log10(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the base-10 logarithm of a specified complex number.
  syntax:
    content: public static System.Numerics.Complex Log10 (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Log10*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Magnitude
  id: Magnitude
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Magnitude
  nameWithType: Complex.Magnitude
  fullName: System.Numerics.Complex.Magnitude
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Gets the magnitude (or absolute value) of a complex number.
  syntax:
    content: public double Magnitude { get; }
    return:
      type: System.Double
      description: To be added.
  overload: System.Numerics.Complex.Magnitude*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
  id: Multiply(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Multiply(Complex,Complex)
  nameWithType: Complex.Multiply(Complex,Complex)
  fullName: System.Numerics.Complex.Multiply(Complex,Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the product of two complex numbers.
  syntax:
    content: public static System.Numerics.Complex Multiply (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: To be added.
    - id: right
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Multiply*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Negate(System.Numerics.Complex)
  id: Negate(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Negate(Complex)
  nameWithType: Complex.Negate(Complex)
  fullName: System.Numerics.Complex.Negate(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the additive inverse of a specified complex number.
  syntax:
    content: public static System.Numerics.Complex Negate (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Negate*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.One
  id: One
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: One
  nameWithType: Complex.One
  fullName: System.Numerics.Complex.One
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns a new <xref href="System.Numerics.Complex"></xref> instance with a real number equal to one and an imaginary number equal to zero.
  syntax:
    content: public static readonly System.Numerics.Complex One;
    return:
      type: System.Numerics.Complex
      description: To be added.
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Addition(Complex,Complex)
  nameWithType: Complex.op_Addition(Complex,Complex)
  fullName: System.Numerics.Complex.op_Addition(Complex,Complex)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Adds two complex numbers.
  syntax:
    content: public static System.Numerics.Complex op_Addition (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: To be added.
    - id: right
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Addition*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Division(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Division(Complex,Complex)
  nameWithType: Complex.op_Division(Complex,Complex)
  fullName: System.Numerics.Complex.op_Division(Complex,Complex)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Divides a specified complex number by another specified complex number.
  syntax:
    content: public static System.Numerics.Complex op_Division (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: To be added.
    - id: right
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Division*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Equality(Complex,Complex)
  nameWithType: Complex.op_Equality(Complex,Complex)
  fullName: System.Numerics.Complex.op_Equality(Complex,Complex)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether two complex numbers are equal.
  syntax:
    content: public static bool op_Equality (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: To be added.
    - id: right
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Numerics.Complex.op_Equality*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Explicit(System.Decimal to System.Numerics.Complex)
  id: op_Explicit(System.Decimal to System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Explicit(Decimal)
  nameWithType: Complex.op_Explicit(Decimal)
  fullName: System.Numerics.Complex.op_Explicit(Decimal)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Explicit (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Explicit*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger to System.Numerics.Complex)
  id: op_Explicit(System.Numerics.BigInteger to System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Explicit(BigInteger)
  nameWithType: Complex.op_Explicit(BigInteger)
  fullName: System.Numerics.Complex.op_Explicit(BigInteger)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Explicit (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Explicit*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Implicit(System.Byte)
  id: op_Implicit(System.Byte)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(Byte)
  nameWithType: Complex.op_Implicit(Byte)
  fullName: System.Numerics.Complex.op_Implicit(Byte)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Implicit(System.Double)
  id: op_Implicit(System.Double)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(Double)
  nameWithType: Complex.op_Implicit(Double)
  fullName: System.Numerics.Complex.op_Implicit(Double)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (double value);
    parameters:
    - id: value
      type: System.Double
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Implicit(System.Int16)
  id: op_Implicit(System.Int16)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(Int16)
  nameWithType: Complex.op_Implicit(Int16)
  fullName: System.Numerics.Complex.op_Implicit(Int16)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (short value);
    parameters:
    - id: value
      type: System.Int16
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Implicit(System.Int32)
  id: op_Implicit(System.Int32)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(Int32)
  nameWithType: Complex.op_Implicit(Int32)
  fullName: System.Numerics.Complex.op_Implicit(Int32)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (int value);
    parameters:
    - id: value
      type: System.Int32
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Implicit(System.Int64)
  id: op_Implicit(System.Int64)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(Int64)
  nameWithType: Complex.op_Implicit(Int64)
  fullName: System.Numerics.Complex.op_Implicit(Int64)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (long value);
    parameters:
    - id: value
      type: System.Int64
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Implicit(System.SByte)
  id: op_Implicit(System.SByte)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(SByte)
  nameWithType: Complex.op_Implicit(SByte)
  fullName: System.Numerics.Complex.op_Implicit(SByte)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Implicit(System.Single)
  id: op_Implicit(System.Single)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(Single)
  nameWithType: Complex.op_Implicit(Single)
  fullName: System.Numerics.Complex.op_Implicit(Single)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (float value);
    parameters:
    - id: value
      type: System.Single
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Implicit(System.UInt16)
  id: op_Implicit(System.UInt16)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(UInt16)
  nameWithType: Complex.op_Implicit(UInt16)
  fullName: System.Numerics.Complex.op_Implicit(UInt16)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Implicit(System.UInt32)
  id: op_Implicit(System.UInt32)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(UInt32)
  nameWithType: Complex.op_Implicit(UInt32)
  fullName: System.Numerics.Complex.op_Implicit(UInt32)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Implicit(System.UInt64)
  id: op_Implicit(System.UInt64)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Implicit(UInt64)
  nameWithType: Complex.op_Implicit(UInt64)
  fullName: System.Numerics.Complex.op_Implicit(UInt64)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.Complex op_Implicit (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Implicit*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Inequality(Complex,Complex)
  nameWithType: Complex.op_Inequality(Complex,Complex)
  fullName: System.Numerics.Complex.op_Inequality(Complex,Complex)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether two complex numbers are not equal.
  syntax:
    content: public static bool op_Inequality (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: To be added.
    - id: right
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Numerics.Complex.op_Inequality*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Multiply(Complex,Complex)
  nameWithType: Complex.op_Multiply(Complex,Complex)
  fullName: System.Numerics.Complex.op_Multiply(Complex,Complex)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Multiplies two specified complex numbers.
  syntax:
    content: public static System.Numerics.Complex op_Multiply (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: To be added.
    - id: right
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Multiply*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_Subtraction(Complex,Complex)
  nameWithType: Complex.op_Subtraction(Complex,Complex)
  fullName: System.Numerics.Complex.op_Subtraction(Complex,Complex)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Subtracts a complex number from another complex number.
  syntax:
    content: public static System.Numerics.Complex op_Subtraction (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: To be added.
    - id: right
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_Subtraction*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
  id: op_UnaryNegation(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: op_UnaryNegation(Complex)
  nameWithType: Complex.op_UnaryNegation(Complex)
  fullName: System.Numerics.Complex.op_UnaryNegation(Complex)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the additive inverse of a specified complex number.
  syntax:
    content: public static System.Numerics.Complex op_UnaryNegation (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.op_UnaryNegation*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Phase
  id: Phase
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Phase
  nameWithType: Complex.Phase
  fullName: System.Numerics.Complex.Phase
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Gets the phase of a complex number.
  syntax:
    content: public double Phase { get; }
    return:
      type: System.Double
      description: To be added.
  overload: System.Numerics.Complex.Phase*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)
  id: Pow(System.Numerics.Complex,System.Double)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Pow(Complex,Double)
  nameWithType: Complex.Pow(Complex,Double)
  fullName: System.Numerics.Complex.Pow(Complex,Double)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns a specified complex number raised to a power specified by a double-precision floating-point number.
  syntax:
    content: public static System.Numerics.Complex Pow (System.Numerics.Complex value, double power);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    - id: power
      type: System.Double
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Pow*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)
  id: Pow(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Pow(Complex,Complex)
  nameWithType: Complex.Pow(Complex,Complex)
  fullName: System.Numerics.Complex.Pow(Complex,Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns a specified complex number raised to a power specified by a complex number.
  syntax:
    content: public static System.Numerics.Complex Pow (System.Numerics.Complex value, System.Numerics.Complex power);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    - id: power
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Pow*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Real
  id: Real
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Real
  nameWithType: Complex.Real
  fullName: System.Numerics.Complex.Real
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Gets the real component of the current <xref href="System.Numerics.Complex"></xref> object.
  syntax:
    content: public double Real { get; }
    return:
      type: System.Double
      description: To be added.
  overload: System.Numerics.Complex.Real*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
  id: Reciprocal(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Reciprocal(Complex)
  nameWithType: Complex.Reciprocal(Complex)
  fullName: System.Numerics.Complex.Reciprocal(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the multiplicative inverse of a complex number.
  syntax:
    content: public static System.Numerics.Complex Reciprocal (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Reciprocal*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Sin(System.Numerics.Complex)
  id: Sin(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Sin(Complex)
  nameWithType: Complex.Sin(Complex)
  fullName: System.Numerics.Complex.Sin(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the sine of the specified complex number.
  syntax:
    content: public static System.Numerics.Complex Sin (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Sin*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Sinh(System.Numerics.Complex)
  id: Sinh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Sinh(Complex)
  nameWithType: Complex.Sinh(Complex)
  fullName: System.Numerics.Complex.Sinh(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the hyperbolic sine of the specified complex number.
  syntax:
    content: public static System.Numerics.Complex Sinh (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Sinh*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Sqrt(System.Numerics.Complex)
  id: Sqrt(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Sqrt(Complex)
  nameWithType: Complex.Sqrt(Complex)
  fullName: System.Numerics.Complex.Sqrt(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the square root of a specified complex number.
  syntax:
    content: public static System.Numerics.Complex Sqrt (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Sqrt*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
  id: Subtract(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Subtract(Complex,Complex)
  nameWithType: Complex.Subtract(Complex,Complex)
  fullName: System.Numerics.Complex.Subtract(Complex,Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Subtracts one complex number from another and returns the result.
  syntax:
    content: public static System.Numerics.Complex Subtract (System.Numerics.Complex left, System.Numerics.Complex right);
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: To be added.
    - id: right
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Subtract*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Tan(System.Numerics.Complex)
  id: Tan(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Tan(Complex)
  nameWithType: Complex.Tan(Complex)
  fullName: System.Numerics.Complex.Tan(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the tangent of the specified complex number.
  syntax:
    content: public static System.Numerics.Complex Tan (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Tan*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Tanh(System.Numerics.Complex)
  id: Tanh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Tanh(Complex)
  nameWithType: Complex.Tanh(Complex)
  fullName: System.Numerics.Complex.Tanh(Complex)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns the hyperbolic tangent of the specified complex number.
  syntax:
    content: public static System.Numerics.Complex Tanh (System.Numerics.Complex value);
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: To be added.
    return:
      type: System.Numerics.Complex
      description: To be added.
  overload: System.Numerics.Complex.Tanh*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.ToString
  id: ToString
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: ToString()
  nameWithType: Complex.ToString()
  fullName: System.Numerics.Complex.ToString()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Converts the value of the current complex number to its equivalent string representation in Cartesian form.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: To be added.
  overload: System.Numerics.Complex.ToString*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: ToString(IFormatProvider)
  nameWithType: Complex.ToString(IFormatProvider)
  fullName: System.Numerics.Complex.ToString(IFormatProvider)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.
  syntax:
    content: public string ToString (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: To be added.
    return:
      type: System.String
      description: To be added.
  overload: System.Numerics.Complex.ToString*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.ToString(System.String)
  id: ToString(System.String)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: ToString(String)
  nameWithType: Complex.ToString(String)
  fullName: System.Numerics.Complex.ToString(String)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.
  syntax:
    content: public string ToString (string format);
    parameters:
    - id: format
      type: System.String
      description: To be added.
    return:
      type: System.String
      description: To be added.
  overload: System.Numerics.Complex.ToString*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: ToString(String,IFormatProvider)
  nameWithType: Complex.ToString(String,IFormatProvider)
  fullName: System.Numerics.Complex.ToString(String,IFormatProvider)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.
  syntax:
    content: public string ToString (string format, IFormatProvider provider);
    parameters:
    - id: format
      type: System.String
      description: To be added.
    - id: provider
      type: System.IFormatProvider
      description: To be added.
    return:
      type: System.String
      description: To be added.
  overload: System.Numerics.Complex.ToString*
  exceptions: []
  platform:
  - netframework-40
- uid: System.Numerics.Complex.Zero
  id: Zero
  parent: System.Numerics.Complex
  langs:
  - csharp
  name: Zero
  nameWithType: Complex.Zero
  fullName: System.Numerics.Complex.Zero
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: Returns a new <xref href="System.Numerics.Complex"></xref> instance with a real number equal to zero and an imaginary number equal to zero.
  syntax:
    content: public static readonly System.Numerics.Complex Zero;
    return:
      type: System.Numerics.Complex
      description: To be added.
  exceptions: []
  platform:
  - netframework-40
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Numerics.Complex.#ctor(System.Double,System.Double)
  parent: System.Numerics.Complex
  isExternal: false
  name: Complex(Double,Double)
  nameWithType: Complex.Complex(Double,Double)
  fullName: System.Numerics.Complex.Complex(Double,Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Numerics.Complex.Abs(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Abs(Complex)
  nameWithType: Complex.Abs(Complex)
  fullName: System.Numerics.Complex.Abs(Complex)
- uid: System.Numerics.Complex
  parent: System.Numerics
  isExternal: false
  name: Complex
  nameWithType: Complex
  fullName: System.Numerics.Complex
- uid: System.Numerics.Complex.Acos(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Acos(Complex)
  nameWithType: Complex.Acos(Complex)
  fullName: System.Numerics.Complex.Acos(Complex)
- uid: System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Add(Complex,Complex)
  nameWithType: Complex.Add(Complex,Complex)
  fullName: System.Numerics.Complex.Add(Complex,Complex)
- uid: System.Numerics.Complex.Asin(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Asin(Complex)
  nameWithType: Complex.Asin(Complex)
  fullName: System.Numerics.Complex.Asin(Complex)
- uid: System.Numerics.Complex.Atan(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Atan(Complex)
  nameWithType: Complex.Atan(Complex)
  fullName: System.Numerics.Complex.Atan(Complex)
- uid: System.Numerics.Complex.Conjugate(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Conjugate(Complex)
  nameWithType: Complex.Conjugate(Complex)
  fullName: System.Numerics.Complex.Conjugate(Complex)
- uid: System.Numerics.Complex.Cos(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Cos(Complex)
  nameWithType: Complex.Cos(Complex)
  fullName: System.Numerics.Complex.Cos(Complex)
- uid: System.Numerics.Complex.Cosh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Cosh(Complex)
  nameWithType: Complex.Cosh(Complex)
  fullName: System.Numerics.Complex.Cosh(Complex)
- uid: System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Divide(Complex,Complex)
  nameWithType: Complex.Divide(Complex,Complex)
  fullName: System.Numerics.Complex.Divide(Complex,Complex)
- uid: System.Numerics.Complex.Equals(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Equals(Complex)
  nameWithType: Complex.Equals(Complex)
  fullName: System.Numerics.Complex.Equals(Complex)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Numerics.Complex.Equals(System.Object)
  parent: System.Numerics.Complex
  isExternal: false
  name: Equals(Object)
  nameWithType: Complex.Equals(Object)
  fullName: System.Numerics.Complex.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Numerics.Complex.Exp(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Exp(Complex)
  nameWithType: Complex.Exp(Complex)
  fullName: System.Numerics.Complex.Exp(Complex)
- uid: System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)
  parent: System.Numerics.Complex
  isExternal: false
  name: FromPolarCoordinates(Double,Double)
  nameWithType: Complex.FromPolarCoordinates(Double,Double)
  fullName: System.Numerics.Complex.FromPolarCoordinates(Double,Double)
- uid: System.Numerics.Complex.GetHashCode
  parent: System.Numerics.Complex
  isExternal: false
  name: GetHashCode()
  nameWithType: Complex.GetHashCode()
  fullName: System.Numerics.Complex.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Numerics.Complex.Imaginary
  parent: System.Numerics.Complex
  isExternal: false
  name: Imaginary
  nameWithType: Complex.Imaginary
  fullName: System.Numerics.Complex.Imaginary
- uid: System.Numerics.Complex.ImaginaryOne
  parent: System.Numerics.Complex
  isExternal: false
  name: ImaginaryOne
  nameWithType: Complex.ImaginaryOne
  fullName: System.Numerics.Complex.ImaginaryOne
- uid: System.Numerics.Complex.Log(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Log(Complex)
  nameWithType: Complex.Log(Complex)
  fullName: System.Numerics.Complex.Log(Complex)
- uid: System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)
  parent: System.Numerics.Complex
  isExternal: false
  name: Log(Complex,Double)
  nameWithType: Complex.Log(Complex,Double)
  fullName: System.Numerics.Complex.Log(Complex,Double)
- uid: System.Numerics.Complex.Log10(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Log10(Complex)
  nameWithType: Complex.Log10(Complex)
  fullName: System.Numerics.Complex.Log10(Complex)
- uid: System.Numerics.Complex.Magnitude
  parent: System.Numerics.Complex
  isExternal: false
  name: Magnitude
  nameWithType: Complex.Magnitude
  fullName: System.Numerics.Complex.Magnitude
- uid: System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Multiply(Complex,Complex)
  nameWithType: Complex.Multiply(Complex,Complex)
  fullName: System.Numerics.Complex.Multiply(Complex,Complex)
- uid: System.Numerics.Complex.Negate(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Negate(Complex)
  nameWithType: Complex.Negate(Complex)
  fullName: System.Numerics.Complex.Negate(Complex)
- uid: System.Numerics.Complex.One
  parent: System.Numerics.Complex
  isExternal: false
  name: One
  nameWithType: Complex.One
  fullName: System.Numerics.Complex.One
- uid: System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Addition(Complex,Complex)
  nameWithType: Complex.op_Addition(Complex,Complex)
  fullName: System.Numerics.Complex.op_Addition(Complex,Complex)
- uid: System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Division(Complex,Complex)
  nameWithType: Complex.op_Division(Complex,Complex)
  fullName: System.Numerics.Complex.op_Division(Complex,Complex)
- uid: System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Equality(Complex,Complex)
  nameWithType: Complex.op_Equality(Complex,Complex)
  fullName: System.Numerics.Complex.op_Equality(Complex,Complex)
- uid: System.Numerics.Complex.op_Explicit(System.Decimal to System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Explicit(Decimal)
  nameWithType: Complex.op_Explicit(Decimal)
  fullName: System.Numerics.Complex.op_Explicit(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger to System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Explicit(BigInteger)
  nameWithType: Complex.op_Explicit(BigInteger)
  fullName: System.Numerics.Complex.op_Explicit(BigInteger)
- uid: System.Numerics.BigInteger
  parent: System.Numerics
  isExternal: false
  name: BigInteger
  nameWithType: BigInteger
  fullName: System.Numerics.BigInteger
- uid: System.Numerics.Complex.op_Implicit(System.Byte)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(Byte)
  nameWithType: Complex.op_Implicit(Byte)
  fullName: System.Numerics.Complex.op_Implicit(Byte)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Numerics.Complex.op_Implicit(System.Double)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(Double)
  nameWithType: Complex.op_Implicit(Double)
  fullName: System.Numerics.Complex.op_Implicit(Double)
- uid: System.Numerics.Complex.op_Implicit(System.Int16)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(Int16)
  nameWithType: Complex.op_Implicit(Int16)
  fullName: System.Numerics.Complex.op_Implicit(Int16)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Numerics.Complex.op_Implicit(System.Int32)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(Int32)
  nameWithType: Complex.op_Implicit(Int32)
  fullName: System.Numerics.Complex.op_Implicit(Int32)
- uid: System.Numerics.Complex.op_Implicit(System.Int64)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(Int64)
  nameWithType: Complex.op_Implicit(Int64)
  fullName: System.Numerics.Complex.op_Implicit(Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Numerics.Complex.op_Implicit(System.SByte)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(SByte)
  nameWithType: Complex.op_Implicit(SByte)
  fullName: System.Numerics.Complex.op_Implicit(SByte)
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Numerics.Complex.op_Implicit(System.Single)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(Single)
  nameWithType: Complex.op_Implicit(Single)
  fullName: System.Numerics.Complex.op_Implicit(Single)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Numerics.Complex.op_Implicit(System.UInt16)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(UInt16)
  nameWithType: Complex.op_Implicit(UInt16)
  fullName: System.Numerics.Complex.op_Implicit(UInt16)
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.Numerics.Complex.op_Implicit(System.UInt32)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(UInt32)
  nameWithType: Complex.op_Implicit(UInt32)
  fullName: System.Numerics.Complex.op_Implicit(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Numerics.Complex.op_Implicit(System.UInt64)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit(UInt64)
  nameWithType: Complex.op_Implicit(UInt64)
  fullName: System.Numerics.Complex.op_Implicit(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Inequality(Complex,Complex)
  nameWithType: Complex.op_Inequality(Complex,Complex)
  fullName: System.Numerics.Complex.op_Inequality(Complex,Complex)
- uid: System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Multiply(Complex,Complex)
  nameWithType: Complex.op_Multiply(Complex,Complex)
  fullName: System.Numerics.Complex.op_Multiply(Complex,Complex)
- uid: System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Subtraction(Complex,Complex)
  nameWithType: Complex.op_Subtraction(Complex,Complex)
  fullName: System.Numerics.Complex.op_Subtraction(Complex,Complex)
- uid: System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: op_UnaryNegation(Complex)
  nameWithType: Complex.op_UnaryNegation(Complex)
  fullName: System.Numerics.Complex.op_UnaryNegation(Complex)
- uid: System.Numerics.Complex.Phase
  parent: System.Numerics.Complex
  isExternal: false
  name: Phase
  nameWithType: Complex.Phase
  fullName: System.Numerics.Complex.Phase
- uid: System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)
  parent: System.Numerics.Complex
  isExternal: false
  name: Pow(Complex,Double)
  nameWithType: Complex.Pow(Complex,Double)
  fullName: System.Numerics.Complex.Pow(Complex,Double)
- uid: System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Pow(Complex,Complex)
  nameWithType: Complex.Pow(Complex,Complex)
  fullName: System.Numerics.Complex.Pow(Complex,Complex)
- uid: System.Numerics.Complex.Real
  parent: System.Numerics.Complex
  isExternal: false
  name: Real
  nameWithType: Complex.Real
  fullName: System.Numerics.Complex.Real
- uid: System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Reciprocal(Complex)
  nameWithType: Complex.Reciprocal(Complex)
  fullName: System.Numerics.Complex.Reciprocal(Complex)
- uid: System.Numerics.Complex.Sin(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Sin(Complex)
  nameWithType: Complex.Sin(Complex)
  fullName: System.Numerics.Complex.Sin(Complex)
- uid: System.Numerics.Complex.Sinh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Sinh(Complex)
  nameWithType: Complex.Sinh(Complex)
  fullName: System.Numerics.Complex.Sinh(Complex)
- uid: System.Numerics.Complex.Sqrt(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Sqrt(Complex)
  nameWithType: Complex.Sqrt(Complex)
  fullName: System.Numerics.Complex.Sqrt(Complex)
- uid: System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Subtract(Complex,Complex)
  nameWithType: Complex.Subtract(Complex,Complex)
  fullName: System.Numerics.Complex.Subtract(Complex,Complex)
- uid: System.Numerics.Complex.Tan(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Tan(Complex)
  nameWithType: Complex.Tan(Complex)
  fullName: System.Numerics.Complex.Tan(Complex)
- uid: System.Numerics.Complex.Tanh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  isExternal: false
  name: Tanh(Complex)
  nameWithType: Complex.Tanh(Complex)
  fullName: System.Numerics.Complex.Tanh(Complex)
- uid: System.Numerics.Complex.ToString
  parent: System.Numerics.Complex
  isExternal: false
  name: ToString()
  nameWithType: Complex.ToString()
  fullName: System.Numerics.Complex.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Numerics.Complex.ToString(System.IFormatProvider)
  parent: System.Numerics.Complex
  isExternal: false
  name: ToString(IFormatProvider)
  nameWithType: Complex.ToString(IFormatProvider)
  fullName: System.Numerics.Complex.ToString(IFormatProvider)
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Numerics.Complex.ToString(System.String)
  parent: System.Numerics.Complex
  isExternal: false
  name: ToString(String)
  nameWithType: Complex.ToString(String)
  fullName: System.Numerics.Complex.ToString(String)
- uid: System.Numerics.Complex.ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.Complex
  isExternal: false
  name: ToString(String,IFormatProvider)
  nameWithType: Complex.ToString(String,IFormatProvider)
  fullName: System.Numerics.Complex.ToString(String,IFormatProvider)
- uid: System.Numerics.Complex.Zero
  parent: System.Numerics.Complex
  isExternal: false
  name: Zero
  nameWithType: Complex.Zero
  fullName: System.Numerics.Complex.Zero
- uid: System.Numerics.Complex.#ctor*
  parent: System.Numerics.Complex
  isExternal: false
  name: Complex
  nameWithType: Complex.Complex
- uid: System.Numerics.Complex.Abs*
  parent: System.Numerics.Complex
  isExternal: false
  name: Abs
  nameWithType: Complex.Abs
- uid: System.Numerics.Complex.Acos*
  parent: System.Numerics.Complex
  isExternal: false
  name: Acos
  nameWithType: Complex.Acos
- uid: System.Numerics.Complex.Add*
  parent: System.Numerics.Complex
  isExternal: false
  name: Add
  nameWithType: Complex.Add
- uid: System.Numerics.Complex.Asin*
  parent: System.Numerics.Complex
  isExternal: false
  name: Asin
  nameWithType: Complex.Asin
- uid: System.Numerics.Complex.Atan*
  parent: System.Numerics.Complex
  isExternal: false
  name: Atan
  nameWithType: Complex.Atan
- uid: System.Numerics.Complex.Conjugate*
  parent: System.Numerics.Complex
  isExternal: false
  name: Conjugate
  nameWithType: Complex.Conjugate
- uid: System.Numerics.Complex.Cos*
  parent: System.Numerics.Complex
  isExternal: false
  name: Cos
  nameWithType: Complex.Cos
- uid: System.Numerics.Complex.Cosh*
  parent: System.Numerics.Complex
  isExternal: false
  name: Cosh
  nameWithType: Complex.Cosh
- uid: System.Numerics.Complex.Divide*
  parent: System.Numerics.Complex
  isExternal: false
  name: Divide
  nameWithType: Complex.Divide
- uid: System.Numerics.Complex.Equals*
  parent: System.Numerics.Complex
  isExternal: false
  name: Equals
  nameWithType: Complex.Equals
- uid: System.Numerics.Complex.Exp*
  parent: System.Numerics.Complex
  isExternal: false
  name: Exp
  nameWithType: Complex.Exp
- uid: System.Numerics.Complex.FromPolarCoordinates*
  parent: System.Numerics.Complex
  isExternal: false
  name: FromPolarCoordinates
  nameWithType: Complex.FromPolarCoordinates
- uid: System.Numerics.Complex.GetHashCode*
  parent: System.Numerics.Complex
  isExternal: false
  name: GetHashCode
  nameWithType: Complex.GetHashCode
- uid: System.Numerics.Complex.Imaginary*
  parent: System.Numerics.Complex
  isExternal: false
  name: Imaginary
  nameWithType: Complex.Imaginary
- uid: System.Numerics.Complex.Log*
  parent: System.Numerics.Complex
  isExternal: false
  name: Log
  nameWithType: Complex.Log
- uid: System.Numerics.Complex.Log10*
  parent: System.Numerics.Complex
  isExternal: false
  name: Log10
  nameWithType: Complex.Log10
- uid: System.Numerics.Complex.Magnitude*
  parent: System.Numerics.Complex
  isExternal: false
  name: Magnitude
  nameWithType: Complex.Magnitude
- uid: System.Numerics.Complex.Multiply*
  parent: System.Numerics.Complex
  isExternal: false
  name: Multiply
  nameWithType: Complex.Multiply
- uid: System.Numerics.Complex.Negate*
  parent: System.Numerics.Complex
  isExternal: false
  name: Negate
  nameWithType: Complex.Negate
- uid: System.Numerics.Complex.op_Addition*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Addition
  nameWithType: Complex.op_Addition
- uid: System.Numerics.Complex.op_Division*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Division
  nameWithType: Complex.op_Division
- uid: System.Numerics.Complex.op_Equality*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Equality
  nameWithType: Complex.op_Equality
- uid: System.Numerics.Complex.op_Explicit*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Explicit
  nameWithType: Complex.op_Explicit
- uid: System.Numerics.Complex.op_Implicit*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Implicit
  nameWithType: Complex.op_Implicit
- uid: System.Numerics.Complex.op_Inequality*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Inequality
  nameWithType: Complex.op_Inequality
- uid: System.Numerics.Complex.op_Multiply*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Multiply
  nameWithType: Complex.op_Multiply
- uid: System.Numerics.Complex.op_Subtraction*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_Subtraction
  nameWithType: Complex.op_Subtraction
- uid: System.Numerics.Complex.op_UnaryNegation*
  parent: System.Numerics.Complex
  isExternal: false
  name: op_UnaryNegation
  nameWithType: Complex.op_UnaryNegation
- uid: System.Numerics.Complex.Phase*
  parent: System.Numerics.Complex
  isExternal: false
  name: Phase
  nameWithType: Complex.Phase
- uid: System.Numerics.Complex.Pow*
  parent: System.Numerics.Complex
  isExternal: false
  name: Pow
  nameWithType: Complex.Pow
- uid: System.Numerics.Complex.Real*
  parent: System.Numerics.Complex
  isExternal: false
  name: Real
  nameWithType: Complex.Real
- uid: System.Numerics.Complex.Reciprocal*
  parent: System.Numerics.Complex
  isExternal: false
  name: Reciprocal
  nameWithType: Complex.Reciprocal
- uid: System.Numerics.Complex.Sin*
  parent: System.Numerics.Complex
  isExternal: false
  name: Sin
  nameWithType: Complex.Sin
- uid: System.Numerics.Complex.Sinh*
  parent: System.Numerics.Complex
  isExternal: false
  name: Sinh
  nameWithType: Complex.Sinh
- uid: System.Numerics.Complex.Sqrt*
  parent: System.Numerics.Complex
  isExternal: false
  name: Sqrt
  nameWithType: Complex.Sqrt
- uid: System.Numerics.Complex.Subtract*
  parent: System.Numerics.Complex
  isExternal: false
  name: Subtract
  nameWithType: Complex.Subtract
- uid: System.Numerics.Complex.Tan*
  parent: System.Numerics.Complex
  isExternal: false
  name: Tan
  nameWithType: Complex.Tan
- uid: System.Numerics.Complex.Tanh*
  parent: System.Numerics.Complex
  isExternal: false
  name: Tanh
  nameWithType: Complex.Tanh
- uid: System.Numerics.Complex.ToString*
  parent: System.Numerics.Complex
  isExternal: false
  name: ToString
  nameWithType: Complex.ToString
