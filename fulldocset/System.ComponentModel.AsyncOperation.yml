### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.AsyncOperation
  id: AsyncOperation
  children:
  - System.ComponentModel.AsyncOperation.Finalize
  - System.ComponentModel.AsyncOperation.OperationCompleted
  - System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)
  - System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)
  - System.ComponentModel.AsyncOperation.SynchronizationContext
  - System.ComponentModel.AsyncOperation.UserSuppliedState
  langs:
  - csharp
  name: AsyncOperation
  nameWithType: AsyncOperation
  fullName: System.ComponentModel.AsyncOperation
  type: Class
  summary: Tracks the lifetime of an asynchronous operation.
  remarks: "When you implement a class according to the [Event-based Asynchronous Pattern Overview](../Topic/Event-based%20Asynchronous%20Pattern%20Overview.md), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class. The AsyncOperation class provides ways to track and report the progress of an asynchronous task.  \n  \n The following list identifies ways to use an AsyncOperation object:  \n  \n-   To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code.  \n  \n-   To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.  \n  \n Your class should get an AsyncOperation object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName> when each task starts. To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property. It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events."
  example:
  - "The following code example demonstrates using an AsyncOperation object to track the lifetime of asynchronous operations. This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> class.  \n  \n For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](../Topic/How%20to:%20Implement%20a%20Component%20That%20Supports%20the%20Event-based%20Asynchronous%20Pattern.md). For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](../Topic/How%20to:%20Implement%20a%20Client%20of%20the%20Event-based%20Asynchronous%20Pattern.md).  \n  \n [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/add/codesnippet/visualbasic/t-system.componentmodel._10_1.vb)]\n [!code-cs[System.ComponentModel.AsyncOperationManager#3](~/add/codesnippet/csharp/t-system.componentmodel._10_1.cs)]"
  syntax:
    content: public sealed class AsyncOperation
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ComponentModel\AsyncOperation.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ComponentModel/AsyncOperation.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ComponentModel.AsyncOperation.Finalize
  id: Finalize
  parent: System.ComponentModel.AsyncOperation
  langs:
  - csharp
  name: Finalize()
  nameWithType: AsyncOperation.Finalize()
  fullName: System.ComponentModel.AsyncOperation.Finalize()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: Finalizes the asynchronous operation.
  syntax:
    content: ~AsyncOperation ();
    parameters: []
  overload: System.ComponentModel.AsyncOperation.Finalize*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ComponentModel\AsyncOperation.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ComponentModel/AsyncOperation.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ComponentModel.AsyncOperation.OperationCompleted
  id: OperationCompleted
  parent: System.ComponentModel.AsyncOperation
  langs:
  - csharp
  name: OperationCompleted()
  nameWithType: AsyncOperation.OperationCompleted()
  fullName: System.ComponentModel.AsyncOperation.OperationCompleted()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: Ends the lifetime of an asynchronous operation.
  remarks: Call the OperationCompleted method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.
  syntax:
    content: public void OperationCompleted ();
    parameters: []
  overload: System.ComponentModel.AsyncOperation.OperationCompleted*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: OperationCompleted has been called previously for this task.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ComponentModel\AsyncOperation.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ComponentModel/AsyncOperation.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)
  id: Post(System.Threading.SendOrPostCallback,System.Object)
  parent: System.ComponentModel.AsyncOperation
  langs:
  - csharp
  name: Post(SendOrPostCallback,Object)
  nameWithType: AsyncOperation.Post(SendOrPostCallback,Object)
  fullName: System.ComponentModel.AsyncOperation.Post(SendOrPostCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: Invokes a delegate on the thread or context appropriate for the application model.
  remarks: "The Post method invokes the delegate specified by the `arg` parameter without ending the lifetime of the asynchronous operation.  \n  \n You can call the Post method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>. You can use the method to report progress or interim results back to clients.  \n  \n The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task. The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model. Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.  \n  \n The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter. It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=fullName> object. It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=fullName> to provide additional state storage."
  example:
  - "The following code example demonstrates using the Post method for reporting progress and incremental results of an asynchronous operation. This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> class.  \n  \n [!CODE [System.ComponentModel.AsyncOperationManager#2](../CodeSnippet/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager#2)]  \n[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/add/codesnippet/visualbasic/6e46cbd8-ab2d-4ee2-9f4a-_2.vb)]\n[!code-cs[System.ComponentModel.AsyncOperationManager#5](~/add/codesnippet/csharp/6e46cbd8-ab2d-4ee2-9f4a-_2.cs)]"
  syntax:
    content: public void Post (System.Threading.SendOrPostCallback d, object arg);
    parameters:
    - id: d
      type: System.Threading.SendOrPostCallback
      description: A <xref href="System.Threading.SendOrPostCallback"></xref> object that wraps the delegate to be called when the operation ends.
    - id: arg
      type: System.Object
      description: An argument for the delegate contained in the <code>d</code> parameter.
  overload: System.ComponentModel.AsyncOperation.Post*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="stem.ComponentModel.AsyncOperation.PostOperationCompleted%2A"></xref> method has been called previously for this task.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>d</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ComponentModel\AsyncOperation.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ComponentModel/AsyncOperation.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)
  id: PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)
  parent: System.ComponentModel.AsyncOperation
  langs:
  - csharp
  name: PostOperationCompleted(SendOrPostCallback,Object)
  nameWithType: AsyncOperation.PostOperationCompleted(SendOrPostCallback,Object)
  fullName: System.ComponentModel.AsyncOperation.PostOperationCompleted(SendOrPostCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: Ends the lifetime of an asynchronous operation.
  remarks: "Call the PostOperationCompleted method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.  \n  \n The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task. The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model. Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.  \n  \n The `arg` parameter is used to pass state information to the completion delegate `d`. You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=fullName> object as the parameter value. Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=fullName> class."
  example:
  - "The following code example demonstrates using the PostOperationCompleted method to end the lifetime of an asynchronous operation. This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> class.  \n  \n [!CODE [System.ComponentModel.AsyncOperationManager#2](../CodeSnippet/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager#2)]  \n[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/add/codesnippet/visualbasic/cb25cde7-a1c3-416e-a9be-_2.vb)]\n[!code-cs[System.ComponentModel.AsyncOperationManager#4](~/add/codesnippet/csharp/cb25cde7-a1c3-416e-a9be-_2.cs)]"
  syntax:
    content: public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);
    parameters:
    - id: d
      type: System.Threading.SendOrPostCallback
      description: A <xref href="System.Threading.SendOrPostCallback"></xref> object that wraps the delegate to be called when the operation ends.
    - id: arg
      type: System.Object
      description: An argument for the delegate contained in the <code>d</code> parameter.
  overload: System.ComponentModel.AsyncOperation.PostOperationCompleted*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <xref href="stem.ComponentModel.AsyncOperation.OperationCompleted%2A"></xref> has been called previously for this task.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>d</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ComponentModel\AsyncOperation.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ComponentModel/AsyncOperation.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ComponentModel.AsyncOperation.SynchronizationContext
  id: SynchronizationContext
  parent: System.ComponentModel.AsyncOperation
  langs:
  - csharp
  name: SynchronizationContext
  nameWithType: AsyncOperation.SynchronizationContext
  fullName: System.ComponentModel.AsyncOperation.SynchronizationContext
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: Gets the <xref href="System.Threading.SynchronizationContext"></xref> object that was passed to the constructor.
  syntax:
    content: public System.Threading.SynchronizationContext SynchronizationContext { get; }
    return:
      type: System.Threading.SynchronizationContext
      description: The <xref href="System.Threading.SynchronizationContext"></xref> object that was passed to the constructor.
  overload: System.ComponentModel.AsyncOperation.SynchronizationContext*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ComponentModel\AsyncOperation.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ComponentModel/AsyncOperation.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ComponentModel.AsyncOperation.UserSuppliedState
  id: UserSuppliedState
  parent: System.ComponentModel.AsyncOperation
  langs:
  - csharp
  name: UserSuppliedState
  nameWithType: AsyncOperation.UserSuppliedState
  fullName: System.ComponentModel.AsyncOperation.UserSuppliedState
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: Gets or sets an object used to uniquely identify an asynchronous operation.
  remarks: "If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events. Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID. You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=fullName>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation. This task ID is made available to your implementation through the UserSuppliedState property.  \n  \n> [!CAUTION]\n>  Client code must be careful to provide a unique value for the UserSuppliedState property. Non-unique task IDs may cause your implementation to report progress and other events incorrectly. Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected."
  example:
  - "The following code example demonstrates using UserSuppliedState to track the lifetime of asynchronous operations. This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=fullName> class.  \n  \n [!CODE [System.ComponentModel.AsyncOperationManager#2](../CodeSnippet/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager#2)]  \n[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/add/codesnippet/visualbasic/p-system.componentmodel._34_2.vb)]\n[!code-cs[System.ComponentModel.AsyncOperationManager#4](~/add/codesnippet/csharp/p-system.componentmodel._34_2.cs)]"
  syntax:
    content: public object UserSuppliedState { get; }
    return:
      type: System.Object
      description: The state object passed to the asynchronous method invocation.
  overload: System.ComponentModel.AsyncOperation.UserSuppliedState*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.ComponentModel\AsyncOperation.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.ComponentModel/AsyncOperation.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ComponentModel.AsyncOperation.Finalize
  parent: System.ComponentModel.AsyncOperation
  isExternal: false
  name: Finalize()
  nameWithType: AsyncOperation.Finalize()
  fullName: System.ComponentModel.AsyncOperation.Finalize()
- uid: System.ComponentModel.AsyncOperation.OperationCompleted
  parent: System.ComponentModel.AsyncOperation
  isExternal: false
  name: OperationCompleted()
  nameWithType: AsyncOperation.OperationCompleted()
  fullName: System.ComponentModel.AsyncOperation.OperationCompleted()
- uid: System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)
  parent: System.ComponentModel.AsyncOperation
  isExternal: false
  name: Post(SendOrPostCallback,Object)
  nameWithType: AsyncOperation.Post(SendOrPostCallback,Object)
  fullName: System.ComponentModel.AsyncOperation.Post(SendOrPostCallback,Object)
- uid: System.Threading.SendOrPostCallback
  parent: System.Threading
  isExternal: false
  name: SendOrPostCallback
  nameWithType: SendOrPostCallback
  fullName: System.Threading.SendOrPostCallback
- uid: System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)
  parent: System.ComponentModel.AsyncOperation
  isExternal: false
  name: PostOperationCompleted(SendOrPostCallback,Object)
  nameWithType: AsyncOperation.PostOperationCompleted(SendOrPostCallback,Object)
  fullName: System.ComponentModel.AsyncOperation.PostOperationCompleted(SendOrPostCallback,Object)
- uid: System.ComponentModel.AsyncOperation.SynchronizationContext
  parent: System.ComponentModel.AsyncOperation
  isExternal: false
  name: SynchronizationContext
  nameWithType: AsyncOperation.SynchronizationContext
  fullName: System.ComponentModel.AsyncOperation.SynchronizationContext
- uid: System.Threading.SynchronizationContext
  parent: System.Threading
  isExternal: false
  name: SynchronizationContext
  nameWithType: SynchronizationContext
  fullName: System.Threading.SynchronizationContext
- uid: System.ComponentModel.AsyncOperation.UserSuppliedState
  parent: System.ComponentModel.AsyncOperation
  isExternal: false
  name: UserSuppliedState
  nameWithType: AsyncOperation.UserSuppliedState
  fullName: System.ComponentModel.AsyncOperation.UserSuppliedState
- uid: System.ComponentModel.AsyncOperation.Finalize*
  parent: System.ComponentModel.AsyncOperation
  isExternal: false
  name: Finalize
  nameWithType: AsyncOperation.Finalize
- uid: System.ComponentModel.AsyncOperation.OperationCompleted*
  parent: System.ComponentModel.AsyncOperation
  isExternal: false
  name: OperationCompleted
  nameWithType: AsyncOperation.OperationCompleted
- uid: System.ComponentModel.AsyncOperation.Post*
  parent: System.ComponentModel.AsyncOperation
  isExternal: false
  name: Post
  nameWithType: AsyncOperation.Post
- uid: System.ComponentModel.AsyncOperation.PostOperationCompleted*
  parent: System.ComponentModel.AsyncOperation
  isExternal: false
  name: PostOperationCompleted
  nameWithType: AsyncOperation.PostOperationCompleted
- uid: System.ComponentModel.AsyncOperation.SynchronizationContext*
  parent: System.ComponentModel.AsyncOperation
  isExternal: false
  name: SynchronizationContext
  nameWithType: AsyncOperation.SynchronizationContext
- uid: System.ComponentModel.AsyncOperation.UserSuppliedState*
  parent: System.ComponentModel.AsyncOperation
  isExternal: false
  name: UserSuppliedState
  nameWithType: AsyncOperation.UserSuppliedState
