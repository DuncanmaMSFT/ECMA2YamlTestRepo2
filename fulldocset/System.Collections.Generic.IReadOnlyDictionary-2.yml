### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  id: IReadOnlyDictionary`2
  children:
  - System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
  - System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
  - System.Collections.Generic.IReadOnlyDictionary`2.Keys
  - System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
  - System.Collections.Generic.IReadOnlyDictionary`2.Values
  langs:
  - csharp
  name: IReadOnlyDictionary<TKey,TValue>
  nameWithType: IReadOnlyDictionary<TKey,TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>
  type: Interface
  summary: Represents a generic read-only collection of key/value pairs.
  remarks: "Each element is a key/value pair that is stored in a <xref:System.Collections.Generic.KeyValuePair%602> object.  \n  \n Each pair must have a unique key. Implementations can vary in whether they allow you to specify a key that is `null`. The value can be `null` and does not have to be unique. The <xref:System.Collections.Generic.IDictionary%602> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.  \n  \n The `foreach` statement of the C# language (`For Each` in Visual Basic, `for each` in C++) requires the type of each element in the collection. Because each element of the IReadOnlyDictionary(TKey, interface is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref:System.Collections.Generic.KeyValuePair%602>, as the following example illustrates.  \n  \n [!code-cpp[Generic.IDictionary#11](~/add/codesnippet/cpp/t-system.collections.gen_13_1.cpp)]\n [!code-cs[Generic.IDictionary#11](~/add/codesnippet/csharp/t-system.collections.gen_13_1.cs)]\n [!code-vb[Generic.IDictionary#11](~/add/codesnippet/visualbasic/t-system.collections.gen_13_1.vb)]  \n  \n The `foreach` statement is a wrapper around the enumerator; it allows only reading from the collection, not writing to the collection."
  syntax:
    content: 'public interface IReadOnlyDictionary<TKey,TValue> : System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>'
    typeParameters:
    - id: TKey
      description: The type of keys in the read-only dictionary.
    - id: TValue
      description: The type of values in the read-only dictionary.
  implements:
  - System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  - System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\IReadOnlyDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/IReadOnlyDictionary`2.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  langs:
  - csharp
  name: ContainsKey(TKey)
  nameWithType: IReadOnlyDictionary<TKey,TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.ContainsKey(TKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Determines whether the read-only dictionary contains an element that has the specified key.
  remarks: "Implementations can vary in how they determine the equality of objects; for example, the class that implements <xref:System.Collections.Generic.IReadOnlyDictionary%602> might use the <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property, or it might implement the <xref:System.Collections.Generic.IComparer%601> method.  \n  \n Implementations can vary in whether they allow `key` to be `null`."
  syntax:
    content: public bool ContainsKey (TKey key);
    parameters:
    - id: key
      type: TKey
      description: The key to locate.
    return:
      type: System.Boolean
      description: '`true` if the read-only dictionary contains an element that has the specified key; otherwise, `false`.'
  overload: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\IReadOnlyDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/IReadOnlyDictionary`2.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  langs:
  - csharp
  name: Item(TKey)
  nameWithType: IReadOnlyDictionary<TKey,TValue>.Item(TKey)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Item(TKey)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets the element that has the specified key in the read-only dictionary.
  remarks: "This property lets you access a specific element in the collection by using the following syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).  \n  \n Implementations can vary in how they determine the equality of objects: for example, the class that implements <xref:System.Collections.Generic.IReadOnlyDictionary%602> might use the <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property, or it might implement the <xref:System.Collections.Generic.IComparer%601> method.  \n  \n Implementations can vary in whether they allow `key` to be `null`."
  syntax:
    content: public TValue this[TKey key] { get; }
    parameters:
    - id: key
      type: TKey
      description: The key to locate.
    return:
      type: TValue
      description: The element that has the specified key in the read-only dictionary.
  overload: System.Collections.Generic.IReadOnlyDictionary`2.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: The property is retrieved and <code>key</code> is not found.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\IReadOnlyDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/IReadOnlyDictionary`2.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Keys
  id: Keys
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  langs:
  - csharp
  name: Keys
  nameWithType: IReadOnlyDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets an enumerable collection that contains the keys in the read-only dictionary.
  remarks: The order of the keys in the enumerable collection is unspecified, but the implementation must guarantee that the keys are in the same order as the corresponding values in the enumerable collection that is returned by the <xref:System.Collections.Generic.IReadOnlyDictionary%602.Values%2A> property.
  syntax:
    content: public System.Collections.Generic.IEnumerable<TKey> Keys { get; }
    return:
      type: System.Collections.Generic.IEnumerable{TKey}
      description: An enumerable collection that contains the keys in the read-only dictionary.
  overload: System.Collections.Generic.IReadOnlyDictionary`2.Keys*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\IReadOnlyDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/IReadOnlyDictionary`2.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  langs:
  - csharp
  name: TryGetValue(TKey,TValue)
  nameWithType: IReadOnlyDictionary<TKey,TValue>.TryGetValue(TKey,TValue)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.TryGetValue(TKey,TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets the value that is associated with the specified key.
  remarks: "This method combines the functionality of the <xref:System.Collections.Generic.IReadOnlyDictionary%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.IReadOnlyDictionary%602.Item%2A> property.  \n  \n If the key is not found, the `value` parameter gets the appropriate default value for the type `TValue`: for example, 0 (zero) for integer types, `false` for Boolean types, and `null` for reference types."
  syntax:
    content: public bool TryGetValue (TKey key, out TValue value);
    parameters:
    - id: key
      type: TKey
      description: The key to locate.
    - id: value
      type: TValue
      description: When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <code>value</code> parameter. This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: '`true` if the object that implements the <xref href="stem.Collections.Generic.IReadOnlyDictionary%602"></xref> interface contains an element that has the specified key; otherwise, `false`.'
  overload: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\IReadOnlyDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/IReadOnlyDictionary`2.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Values
  id: Values
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  langs:
  - csharp
  name: Values
  nameWithType: IReadOnlyDictionary<TKey,TValue>.Values
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets an enumerable collection that contains the values in the read-only dictionary.
  remarks: The order of the values in the enumerable collection is unspecified, but the implementation must guarantee that the values are in the same order as the corresponding keys in the enumerable collection that is returned by the <xref:System.Collections.Generic.IReadOnlyDictionary%602.Keys%2A> property.
  syntax:
    content: public System.Collections.Generic.IEnumerable<TValue> Values { get; }
    return:
      type: System.Collections.Generic.IEnumerable{TValue}
      description: An enumerable collection that contains the values in the read-only dictionary.
  overload: System.Collections.Generic.IReadOnlyDictionary`2.Values*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\IReadOnlyDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/IReadOnlyDictionary`2.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Collections.Generic.KeyNotFoundException
  parent: System.Collections.Generic
  isExternal: false
  name: KeyNotFoundException
  nameWithType: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
- uid: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: ContainsKey(TKey)
  nameWithType: IReadOnlyDictionary<TKey,TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.ContainsKey(TKey)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TKey
  isExternal: true
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: Item(TKey)
  nameWithType: IReadOnlyDictionary<TKey,TValue>.Item(TKey)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Item(TKey)
- uid: TValue
  isExternal: true
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Keys
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: Keys
  nameWithType: IReadOnlyDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.IEnumerable{TKey}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TKey>
  nameWithType: IEnumerable<TKey>
  fullName: System.Collections.Generic.IEnumerable<TKey>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: TryGetValue(TKey,TValue)
  nameWithType: IReadOnlyDictionary<TKey,TValue>.TryGetValue(TKey,TValue)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.TryGetValue(TKey,TValue)
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Values
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: Values
  nameWithType: IReadOnlyDictionary<TKey,TValue>.Values
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.IEnumerable{TValue}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TValue>
  nameWithType: IEnumerable<TValue>
  fullName: System.Collections.Generic.IEnumerable<TValue>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey*
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: ContainsKey
  nameWithType: IReadOnlyDictionary<TKey,TValue>.ContainsKey
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Item*
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: Item
  nameWithType: IReadOnlyDictionary<TKey,TValue>.Item
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Keys*
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: Keys
  nameWithType: IReadOnlyDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue*
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: TryGetValue
  nameWithType: IReadOnlyDictionary<TKey,TValue>.TryGetValue
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Values*
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: Values
  nameWithType: IReadOnlyDictionary<TKey,TValue>.Values
