### YamlMime:ManagedReference
items:
- uid: System.Lazy`1
  id: Lazy`1
  children:
  - System.Lazy`1.#ctor
  - System.Lazy`1.#ctor(System.Boolean)
  - System.Lazy`1.#ctor(System.Func{`0})
  - System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)
  - System.Lazy`1.#ctor(System.Func{`0},System.Boolean)
  - System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)
  - System.Lazy`1.IsValueCreated
  - System.Lazy`1.ToString
  - System.Lazy`1.Value
  langs:
  - csharp
  name: Lazy<T>
  nameWithType: Lazy<T>
  fullName: System.Lazy<T>
  type: Class
  summary: Provides support for lazy initialization.
  remarks: "Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.  \n  \n To prepare for lazy initialization, you create an instance of Lazy(T). The type argument of the Lazy(T) object that you create specifies the type of the object that you want to initialize lazily. The constructor that you use to create the Lazy(T) object determines the characteristics of the initialization. Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=fullName> property is accessed.  \n  \n In most cases, choosing a constructor depends on your answers to two questions:  \n  \n-   Will the lazily initialized object be accessed from more than one thread? If so, the Lazy(T) object might create it on any thread. You can use one of the simple constructors whose default behavior is to create a thread-safe Lazy(T) object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it. To create a Lazy(T) object that is not thread safe, you must use a constructor that enables you to specify no thread safety.  \n  \n    > [!CAUTION]\n    >  Making the Lazy(T) object thread safe does not protect the lazily initialized object. If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.  \n  \n-   Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions? If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method. Write your initialization code in the factory method.  \n  \n The following table shows which constructor to choose, based on these two factors:  \n  \n|Object will be accessed by|If no initialization code is required (default constructor), use|If initialization code is required, use|  \n|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  \n|Multiple threads|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  \n|One thread|<xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.|  \n  \n You can use a lambda expression to specify the factory method. This keeps all the initialization code in one place. The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.  \n  \n **Exception caching** When you use factory methods, exceptions are cached. That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the Lazy(T) object, the same exception is thrown on every subsequent attempt. This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results. The Lazy(T) stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup. A failure at that earlier point is usually fatal. If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you werenâ€™t using lazy initialization.  \n  \n **Alternative to locking** In certain situations, you might want to avoid the overhead of the Lazy(T) object's default locking behavior. In rare situations, there might be a potential for deadlocks. In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. This enables the Lazy(T) object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously. The Lazy(T) object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used. Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object. In most cases, this is unlikely. The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.  \n  \n> [!IMPORTANT]\n>  When you specify <xref:System.Threading.LazyThreadSafetyMode>, exceptions are never cached, even if you specify a factory method.  \n  \n **Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors. The following table shows the parameter values that produce equivalent behavior.  \n  \n|To create a Lazy(T) object that is|For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to|For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to|For constructors with no thread safety parameters|  \n|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  \n|Fully thread safe; uses locking to ensure that only one thread initializes the value.|<xref:System.Threading.LazyThreadSafetyMode>|`true`|All such constructors are fully thread safe.|  \n|Not thread safe.|<xref:System.Threading.LazyThreadSafetyMode>|`false`|Not applicable.|  \n|Fully thread safe; threads race to initialize the value.|<xref:System.Threading.LazyThreadSafetyMode>|Not applicable.|Not applicable.|  \n  \n **Other capabilities** For information about the use of Lazy(T) with thread-static fields, or as the backing store for properties, see [Lazy Initialization](../Topic/Lazy%20Initialization.md)."
  example:
  - "The following example demonstrates the use of the Lazy(T) class to provide lazy initialization with access from multiple threads.  \n  \n> [!NOTE]\n>  The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor. It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`). To switch to a different constructor, just change which constructors are commented out.  \n>   \n>  For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.  \n  \n The example defines a `LargeObject` class that will be initialized lazily by one of several threads. The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created. At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:  \n  \n [!code-cs[System.Lazy`1#NewLazy](~/add/codesnippet/csharp/t-system.lazy`1_1.cs)]\n [!code-vb[System.Lazy`1#NewLazy](~/add/codesnippet/visualbasic/t-system.lazy`1_1.vb)]  \n  \n The factory method shows the creation of the object, with a placeholder for further initialization:  \n  \n [!code-cs[System.Lazy`1#FactoryFunc](~/add/codesnippet/csharp/t-system.lazy`1_2.cs)]\n [!code-vb[System.Lazy`1#FactoryFunc](~/add/codesnippet/visualbasic/t-system.lazy`1_2.vb)]  \n  \n Note that the first two code sections could be combined by using a lambda function, as shown here:  \n  \n [!code-cs[System.Lazy`1#InitWithLambda](~/add/codesnippet/csharp/t-system.lazy`1_3.cs)]\n [!code-vb[System.Lazy`1#InitWithLambda](~/add/codesnippet/visualbasic/t-system.lazy`1_3.vb)]  \n  \n The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs. When you press the **Enter** key, the example creates and starts three threads. The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property. The first time this happens, the `LargeObject` instance is created:  \n  \n [!code-cs[System.Lazy`1#ValueProp](~/add/codesnippet/csharp/t-system.lazy`1_4.cs)]\n [!code-vb[System.Lazy`1#ValueProp](~/add/codesnippet/visualbasic/t-system.lazy`1_4.vb)]  \n  \n The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread. The output from the program appears at the end of the full code listing.  \n  \n [!code-cs[System.Lazy`1#LargeCtor](~/add/codesnippet/csharp/t-system.lazy`1_5.cs)]\n [!code-vb[System.Lazy`1#LargeCtor](~/add/codesnippet/visualbasic/t-system.lazy`1_5.vb)]  \n  \n> [!NOTE]\n>  For simplicity, this example uses a global instance of Lazy(T), and all the methods are `static` (`Shared` in Visual Basic). These are not requirements for the use of lazy initialization.  \n  \n [!code-cs[System.Lazy`1#All](~/add/codesnippet/csharp/t-system.lazy`1_6.cs)]\n [!code-vb[System.Lazy`1#All](~/add/codesnippet/visualbasic/t-system.lazy`1_6.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))]

      [System.Runtime.InteropServices.ComVisible(false)]

      public class Lazy<T>
    typeParameters:
    - id: T
      description: The type of object that is being lazily initialized.
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Lazy`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Lazy`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Lazy`1.#ctor
  id: '#ctor'
  parent: System.Lazy`1
  langs:
  - csharp
  name: Lazy<T>()
  nameWithType: Lazy<T>.Lazy<T>()
  fullName: System.Lazy<T>.Lazy<T>()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="stem.Lazy%601"></xref> class. When lazy initialization occurs, the default constructor of the target type is used.
  remarks: "An instance that is created with this constructor may be used concurrently from multiple threads.  \n  \n The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.  \n  \n A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions. For more information, see the <xref:System.Lazy%601>class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration."
  example:
  - "The following example demonstrates the use of this constructor. It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`). To switch to a different constructor, just change which constructors are commented out.  \n  \n The example defines a `LargeObject` class that will be initialized lazily by one of several threads. The two key lines of code in this example are the creation of the initializer and the actual initialization. At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:  \n  \n [!code-vb[System.Lazy`1.ctor#NewLazy](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpctor_1.vb)]\n [!code-cs[System.Lazy`1.ctor#NewLazy](~/add/codesnippet/csharp/m-system.lazy`1.sharpctor_1.cs)]  \n  \n The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once. The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:  \n  \n [!code-vb[System.Lazy`1.ctor#ValueProp](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpctor_2.vb)]\n [!code-cs[System.Lazy`1.ctor#ValueProp](~/add/codesnippet/csharp/m-system.lazy`1.sharpctor_2.cs)]  \n  \n The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance. The example demonstrates that the other threads all get the same instance.  \n  \n> [!NOTE]\n>  For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic). These are not requirements for the use of lazy initialization.  \n  \n [!code-vb[System.Lazy`1.ctor#All](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpctor_3.vb)]\n [!code-cs[System.Lazy`1.ctor#All](~/add/codesnippet/csharp/m-system.lazy`1.sharpctor_3.cs)]"
  syntax:
    content: public Lazy ();
    parameters: []
  overload: System.Lazy`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Lazy`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Lazy`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Lazy`1.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Lazy`1
  langs:
  - csharp
  name: Lazy<T>(Boolean)
  nameWithType: Lazy<T>.Lazy<T>(Boolean)
  fullName: System.Lazy<T>.Lazy<T>(Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="stem.Lazy%601"></xref> class. When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.
  remarks: "The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance. To specify the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.  \n  \n A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions. For more information, see the<xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration."
  example:
  - "The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread. It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`. To switch to a different constructor, just change which constructor is commented out.  \n  \n> [!NOTE]\n>  For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.  \n  \n The example defines a `LargeObject` class that will be initialized lazily. In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses. When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur. The constructor of the `LargeObject` class displays a console message.  \n  \n> [!NOTE]\n>  For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic). These are not requirements for the use of lazy initialization.  \n  \n [!code-cs[System.Lazy`1.ctorBool#All](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_3_1.cs)]\n [!code-vb[System.Lazy`1.ctorBool#All](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_3_1.vb)]"
  syntax:
    content: public Lazy (bool isThreadSafe);
    parameters:
    - id: isThreadSafe
      type: System.Boolean
      description: '`true` to make this instance usable concurrently by multiple threads; `false` to make the instance usable by only one thread at a time.'
  overload: System.Lazy`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Lazy`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Lazy`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Lazy`1.#ctor(System.Func{`0})
  id: '#ctor(System.Func{`0})'
  parent: System.Lazy`1
  langs:
  - csharp
  name: Lazy<T>(Func<T>)
  nameWithType: Lazy<T>.Lazy<T>(Func<T>)
  fullName: System.Lazy<T>.Lazy<T>(Func<T>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="stem.Lazy%601"></xref> class. When lazy initialization occurs, the specified initialization function is used.
  remarks: "An instance that is created with this constructor may be used concurrently from multiple threads.  \n  \n The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.  \n  \n Exceptions that are thrown by `valueFactory` are cached. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration."
  example:
  - "The following example demonstrates the use of this constructor to provide lazy initialization with exception caching. It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`). To switch to a different constructor, just change which constructors are commented out.  \n  \n The example defines a `LargeObject` class that will be initialized lazily by one of several threads. The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching. At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:  \n  \n [!code-cs[System.Lazy`1.ctorFunc#NewLazy](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_0_1.cs)]\n [!code-vb[System.Lazy`1.ctorFunc#NewLazy](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_0_1.vb)]  \n  \n The example creates and starts three threads. The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:  \n  \n [!code-cs[System.Lazy`1.ctorFunc#ValueProp](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_0_2.cs)]\n [!code-vb[System.Lazy`1.ctorFunc#ValueProp](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_0_2.vb)]  \n  \n In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:  \n  \n [!code-cs[System.Lazy`1.ctorFunc#LargeCtor](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_0_3.cs)]\n [!code-vb[System.Lazy`1.ctorFunc#LargeCtor](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_0_3.vb)]  \n  \n When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught. You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception. Because of this, all three threads throw the exception.  \n  \n> [!NOTE]\n>  For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic). These are not requirements for the use of lazy initialization.  \n  \n [!code-cs[System.Lazy`1.ctorFunc#All](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_0_4.cs)]\n [!code-vb[System.Lazy`1.ctorFunc#All](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_0_4.vb)]"
  syntax:
    content: public Lazy (Func<T> valueFactory);
    parameters:
    - id: valueFactory
      type: System.Func{T}
      description: The delegate that is invoked to produce the lazily initialized value when it is needed.
  overload: System.Lazy`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>valueFactory</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Lazy`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Lazy`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)
  id: '#ctor(System.Threading.LazyThreadSafetyMode)'
  parent: System.Lazy`1
  langs:
  - csharp
  name: Lazy<T>(LazyThreadSafetyMode)
  nameWithType: Lazy<T>.Lazy<T>(LazyThreadSafetyMode)
  fullName: System.Lazy<T>.Lazy<T>(LazyThreadSafetyMode)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="stem.Lazy%601"></xref> class that uses the default constructor of <code>T</code> and the specified thread-safety mode.
  remarks: "The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.  \n  \n A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration."
  example:
  - "The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily. Multiple threads might succeed in creating instances, but all threads use the instance that was created first.  \n  \n> [!NOTE]\n>  For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor. For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.  \n  \n The example defines a `LargeObject` class that will be initialized lazily by any of several threads. The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class. At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:  \n  \n [!code-vb[System.Lazy`1.ctorLTSM#NewLazy](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_4_1.vb)]\n [!code-cs[System.Lazy`1.ctorLTSM#NewLazy](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_4_1.cs)]  \n  \n The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once. In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:  \n  \n [!code-vb[System.Lazy`1.ctorLTSM#ValueProp](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_4_2.vb)]\n [!code-cs[System.Lazy`1.ctorLTSM#ValueProp](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_4_2.cs)]  \n  \n Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>, all three threads are allowed to create `LargeObject` instances. The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:  \n  \n [!code-vb[System.Lazy`1.ctorLTSM#CtorFinalizer](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_4_3.vb)]\n [!code-cs[System.Lazy`1.ctorLTSM#CtorFinalizer](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_4_3.cs)]  \n  \n However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads. The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.  \n  \n> [!NOTE]\n>  For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic). These are not requirements for the use of lazy initialization.  \n  \n [!code-vb[System.Lazy`1.ctorLTSM#All](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_4_4.vb)]\n [!code-cs[System.Lazy`1.ctorLTSM#All](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_4_4.cs)]"
  syntax:
    content: public Lazy (System.Threading.LazyThreadSafetyMode mode);
    parameters:
    - id: mode
      type: System.Threading.LazyThreadSafetyMode
      description: One of the enumeration values that specifies the thread safety mode.
  overload: System.Lazy`1.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>mode</code> contains an invalid value.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Lazy`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Lazy`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Lazy`1.#ctor(System.Func{`0},System.Boolean)
  id: '#ctor(System.Func{`0},System.Boolean)'
  parent: System.Lazy`1
  langs:
  - csharp
  name: Lazy<T>(Func<T>,Boolean)
  nameWithType: Lazy<T>.Lazy<T>(Func<T>,Boolean)
  fullName: System.Lazy<T>.Lazy<T>(Func<T>,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="stem.Lazy%601"></xref> class. When lazy initialization occurs, the specified initialization function and initialization mode are used.
  remarks: "The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.  \n  \n To specify the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.  \n  \n Exceptions that are thrown by `valueFactory` are cached. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration."
  example:
  - "The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread. It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A>constructor (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`). To switch to that constructor, just change which constructor is commented out.  \n  \n> [!NOTE]\n>  For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.  \n  \n The example defines a `LargeObject` class that will be initialized lazily by one of several threads. The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching. At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:  \n  \n [!code-vb[System.Lazy`1.ctorFuncBool#NewLazy](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_2_1.vb)]\n [!code-cs[System.Lazy`1.ctorFuncBool#NewLazy](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_2_1.cs)]  \n  \n In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe. Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:  \n  \n [!code-vb[System.Lazy`1.ctorFuncBool#ValueProp](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_2_2.vb)]\n [!code-cs[System.Lazy`1.ctorFuncBool#ValueProp](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_2_2.cs)]  \n  \n In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:  \n  \n [!code-vb[System.Lazy`1.ctorFuncBool#LargeCtor](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_2_3.vb)]\n [!code-cs[System.Lazy`1.ctorFuncBool#LargeCtor](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_2_3.cs)]  \n  \n When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught. You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception. Because of this, all three attempts throw the exception.  \n  \n> [!NOTE]\n>  For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic). These are not requirements for the use of lazy initialization.  \n  \n [!code-vb[System.Lazy`1.ctorFuncBool#All](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_2_4.vb)]\n [!code-cs[System.Lazy`1.ctorFuncBool#All](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_2_4.cs)]"
  syntax:
    content: public Lazy (Func<T> valueFactory, bool isThreadSafe);
    parameters:
    - id: valueFactory
      type: System.Func{T}
      description: The delegate that is invoked to produce the lazily initialized value when it is needed.
    - id: isThreadSafe
      type: System.Boolean
      description: '`true` to make this instance usable concurrently by multiple threads; `false` to make this instance usable by only one thread at a time.'
  overload: System.Lazy`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>valueFactory</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Lazy`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Lazy`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)
  id: '#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)'
  parent: System.Lazy`1
  langs:
  - csharp
  name: Lazy<T>(Func<T>,LazyThreadSafetyMode)
  nameWithType: Lazy<T>.Lazy<T>(Func<T>,LazyThreadSafetyMode)
  fullName: System.Lazy<T>.Lazy<T>(Func<T>,LazyThreadSafetyMode)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="stem.Lazy%601"></xref> class that uses the specified initialization function and thread-safety mode.
  remarks: "The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.  \n  \n Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode>. For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> enumeration."
  example:
  - "The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily. Multiple threads might succeed in creating instances, but all threads use the instance that was created first. In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.  \n  \n> [!NOTE]\n>  For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor. For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.  \n  \n The example defines a `LargeObject` class that will be initialized lazily by any of several threads. The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class. At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:  \n  \n [!code-vb[System.Lazy`1.ctorFuncLTSM#NewLazy](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_1_1.vb)]\n [!code-cs[System.Lazy`1.ctorFuncLTSM#NewLazy](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_1_1.cs)]  \n  \n The lazy initializer uses a function to perform the initialization. In this case, a function is required because there is no default constructor for the `LargeObject` class.  \n  \n The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once. In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:  \n  \n [!code-vb[System.Lazy`1.ctorFuncLTSM#ValueProp](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_1_2.vb)]\n [!code-cs[System.Lazy`1.ctorFuncLTSM#ValueProp](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_1_2.cs)]  \n  \n In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance. The function throws an exception the first time it's called:  \n  \n [!code-vb[System.Lazy`1.ctorFuncLTSM#FactoryFunc](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_1_3.vb)]\n [!code-cs[System.Lazy`1.ctorFuncLTSM#FactoryFunc](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_1_3.cs)]  \n  \n With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached. However, <xref:System.Threading.LazyThreadSafetyMode> suppresses exception caching. The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.  \n  \n> [!NOTE]\n>  The exception message usually appears after messages indicating that other threads have successfully initialized the object. This is because of the delay introduced by throwing and catching the exception.  \n  \n Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>, all three threads are allowed to create `LargeObject` instances. The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:  \n  \n [!code-vb[System.Lazy`1.ctorFuncLTSM#CtorFinalizer](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_1_4.vb)]\n [!code-cs[System.Lazy`1.ctorFuncLTSM#CtorFinalizer](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_1_4.cs)]  \n  \n The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception). The output from the example shows this.  \n  \n> [!NOTE]\n>  For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic). These are not requirements for the use of lazy initialization.  \n  \n [!code-vb[System.Lazy`1.ctorFuncLTSM#All](~/add/codesnippet/visualbasic/m-system.lazy`1.sharpcto_1_5.vb)]\n [!code-cs[System.Lazy`1.ctorFuncLTSM#All](~/add/codesnippet/csharp/m-system.lazy`1.sharpcto_1_5.cs)]"
  syntax:
    content: public Lazy (Func<T> valueFactory, System.Threading.LazyThreadSafetyMode mode);
    parameters:
    - id: valueFactory
      type: System.Func{T}
      description: The delegate that is invoked to produce the lazily initialized value when it is needed.
    - id: mode
      type: System.Threading.LazyThreadSafetyMode
      description: One of the enumeration values that specifies the thread safety mode.
  overload: System.Lazy`1.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>mode</code> contains an invalid value.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>valueFactory</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Lazy`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Lazy`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Lazy`1.IsValueCreated
  id: IsValueCreated
  parent: System.Lazy`1
  langs:
  - csharp
  name: IsValueCreated
  nameWithType: Lazy<T>.IsValueCreated
  fullName: System.Lazy<T>.IsValueCreated
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value that indicates whether a value has been created for this <xref href="stem.Lazy%601"></xref> instance.
  remarks: "When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown. If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect. If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect. A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the IsValueCreated property returns `true`. If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.  \n  \n-   If the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName> or <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>, there is no second chance to initialize the <xref:System.Lazy%601> instance. If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=fullName>property. No value is created if an exception is thrown, so in such cases IsValueCreated returns `false`.  \n  \n-   If the mode is <xref:System.Threading.LazyThreadSafetyMode?displayProperty=fullName>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance. If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance. Until the value is created, the IsValueCreated property returns `false`."
  syntax:
    content: public bool IsValueCreated { get; }
    return:
      type: System.Boolean
      description: '`true` if a value has been created for this <xref href="stem.Lazy%601"></xref> instance; otherwise, `false`.'
  overload: System.Lazy`1.IsValueCreated*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Lazy`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Lazy`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Lazy`1.ToString
  id: ToString
  parent: System.Lazy`1
  langs:
  - csharp
  name: ToString()
  nameWithType: Lazy<T>.ToString()
  fullName: System.Lazy<T>.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates and returns a string representation of the <xref href="stem.Lazy%601.Value%2A"></xref> property for this instance.
  remarks: "Calling this method does not cause initialization.  \n  \n The <xref:System.Lazy%601.Value%2A?displayProperty=fullName> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The result of calling the <xref href="stem.Object.ToString%2A"></xref> method on the <xref href="stem.Lazy%601.Value%2A"></xref> property for this instance, if the value has been created (that is, if the <xref href="stem.Lazy%601.IsValueCreated%2A"></xref> property returns `true`). Otherwise, a string indicating that the value has not been created.
  overload: System.Lazy`1.ToString*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: The <xref href="stem.Lazy%601.Value%2A"></xref> property is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Lazy`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Lazy`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Lazy`1.Value
  id: Value
  parent: System.Lazy`1
  langs:
  - csharp
  name: Value
  nameWithType: Lazy<T>.Value
  fullName: System.Lazy<T>.Value
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the lazily initialized value of the current <xref href="stem.Lazy%601"></xref> instance.
  remarks: "If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=fullName> property is `false`, accessing the Value property forces initialization.  \n  \n In addition to the exceptions that are listed, the Value property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor."
  syntax:
    content: public T Value { get; }
    return:
      type: T
      description: The lazily initialized value of the current <xref href="stem.Lazy%601"></xref> instance.
  overload: System.Lazy`1.Value*
  exceptions:
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: The <xref href="stem.Lazy%601"></xref> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.
  - type: System.MissingMemberException
    commentId: T:System.MissingMemberException
    description: The <xref href="stem.Lazy%601"></xref> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The initialization function tries to access Value on this instance.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Lazy`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Lazy`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NullReferenceException
  parent: System
  isExternal: false
  name: NullReferenceException
  nameWithType: NullReferenceException
  fullName: System.NullReferenceException
- uid: System.MemberAccessException
  parent: System
  isExternal: false
  name: MemberAccessException
  nameWithType: MemberAccessException
  fullName: System.MemberAccessException
- uid: System.MissingMemberException
  parent: System
  isExternal: false
  name: MissingMemberException
  nameWithType: MissingMemberException
  fullName: System.MissingMemberException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Lazy`1.#ctor
  parent: System.Lazy`1
  isExternal: false
  name: Lazy<T>()
  nameWithType: Lazy<T>.Lazy<T>()
  fullName: System.Lazy<T>.Lazy<T>()
- uid: System.Lazy`1.#ctor(System.Boolean)
  parent: System.Lazy`1
  isExternal: false
  name: Lazy<T>(Boolean)
  nameWithType: Lazy<T>.Lazy<T>(Boolean)
  fullName: System.Lazy<T>.Lazy<T>(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Lazy`1.#ctor(System.Func{`0})
  parent: System.Lazy`1
  isExternal: false
  name: Lazy<T>(Func<T>)
  nameWithType: Lazy<T>.Lazy<T>(Func<T>)
  fullName: System.Lazy<T>.Lazy<T>(Func<T>)
- uid: System.Func{T}
  parent: System
  isExternal: false
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)
  parent: System.Lazy`1
  isExternal: false
  name: Lazy<T>(LazyThreadSafetyMode)
  nameWithType: Lazy<T>.Lazy<T>(LazyThreadSafetyMode)
  fullName: System.Lazy<T>.Lazy<T>(LazyThreadSafetyMode)
- uid: System.Threading.LazyThreadSafetyMode
  parent: System.Threading
  isExternal: false
  name: LazyThreadSafetyMode
  nameWithType: LazyThreadSafetyMode
  fullName: System.Threading.LazyThreadSafetyMode
- uid: System.Lazy`1.#ctor(System.Func{`0},System.Boolean)
  parent: System.Lazy`1
  isExternal: false
  name: Lazy<T>(Func<T>,Boolean)
  nameWithType: Lazy<T>.Lazy<T>(Func<T>,Boolean)
  fullName: System.Lazy<T>.Lazy<T>(Func<T>,Boolean)
- uid: System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)
  parent: System.Lazy`1
  isExternal: false
  name: Lazy<T>(Func<T>,LazyThreadSafetyMode)
  nameWithType: Lazy<T>.Lazy<T>(Func<T>,LazyThreadSafetyMode)
  fullName: System.Lazy<T>.Lazy<T>(Func<T>,LazyThreadSafetyMode)
- uid: System.Lazy`1.IsValueCreated
  parent: System.Lazy`1
  isExternal: false
  name: IsValueCreated
  nameWithType: Lazy<T>.IsValueCreated
  fullName: System.Lazy<T>.IsValueCreated
- uid: System.Lazy`1.ToString
  parent: System.Lazy`1
  isExternal: false
  name: ToString()
  nameWithType: Lazy<T>.ToString()
  fullName: System.Lazy<T>.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Lazy`1.Value
  parent: System.Lazy`1
  isExternal: false
  name: Value
  nameWithType: Lazy<T>.Value
  fullName: System.Lazy<T>.Value
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Lazy`1.#ctor*
  parent: System.Lazy`1
  isExternal: false
  name: Lazy<T>
  nameWithType: Lazy<T>.Lazy<T>
- uid: System.Lazy`1.IsValueCreated*
  parent: System.Lazy`1
  isExternal: false
  name: IsValueCreated
  nameWithType: Lazy<T>.IsValueCreated
- uid: System.Lazy`1.ToString*
  parent: System.Lazy`1
  isExternal: false
  name: ToString
  nameWithType: Lazy<T>.ToString
- uid: System.Lazy`1.Value*
  parent: System.Lazy`1
  isExternal: false
  name: Value
  nameWithType: Lazy<T>.Value
