### YamlMime:ManagedReference
items:
- uid: System.Version
  id: Version
  children:
  - System.Version.#ctor
  - System.Version.#ctor(System.String)
  - System.Version.#ctor(System.Int32,System.Int32)
  - System.Version.#ctor(System.Int32,System.Int32,System.Int32)
  - System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Version.Build
  - System.Version.Clone
  - System.Version.CompareTo(System.Object)
  - System.Version.CompareTo(System.Version)
  - System.Version.Equals(System.Object)
  - System.Version.Equals(System.Version)
  - System.Version.GetHashCode
  - System.Version.Major
  - System.Version.MajorRevision
  - System.Version.Minor
  - System.Version.MinorRevision
  - System.Version.op_Equality(System.Version,System.Version)
  - System.Version.op_GreaterThan(System.Version,System.Version)
  - System.Version.op_GreaterThanOrEqual(System.Version,System.Version)
  - System.Version.op_Inequality(System.Version,System.Version)
  - System.Version.op_LessThan(System.Version,System.Version)
  - System.Version.op_LessThanOrEqual(System.Version,System.Version)
  - System.Version.Parse(System.String)
  - System.Version.Revision
  - System.Version.ToString
  - System.Version.ToString(System.Int32)
  - System.Version.TryParse(System.String,System.Version@)
  langs:
  - csharp
  name: Version
  nameWithType: Version
  fullName: System.Version
  type: Class
  summary: Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited.
  remarks: "Version numbers consist of two to four components: major, minor, build, and revision. The major and minor components are required; the build and revision components are optional, but the build component is required if the revision component is defined. All defined components must be integers greater than or equal to 0. The format of the version number is as follows (optional components are shown in square brackets ([ and ]):  \n  \n *major*.*minor*[.*build*[.*revision*]]  \n  \n The components are used by convention as follows:  \n  \n-   *Major*: Assemblies with the same name but different major versions are not interchangeable. A higher version number might indicate a major rewrite of a product where backward compatibility cannot be assumed.  \n  \n-   *Minor*: If the name and major version number on two assemblies are the same, but the minor version number is different, this indicates significant enhancement with the intention of backward compatibility. This higher minor version number might indicate a point release of a product or a fully backward-compatible new version of a product.  \n  \n-   *Build*: A difference in build number represents a recompilation of the same source. Different build numbers might be used when the processor, platform, or compiler changes.  \n  \n-   *Revision*: Assemblies with the same name, major, and minor version numbers but different revisions are intended to be fully interchangeable. A higher revision number might be used in a build that fixes a security hole in a previously released assembly.  \n  \n Subsequent versions of an assembly that differ only by build or revision numbers are considered to be Hotfix updates of the prior version.  \n  \n> [!IMPORTANT]\n>  The value of Version properties that have not been explicitly assigned a value is undefined (-1).  \n  \n Starting with .NET Framework 2.0, the <xref:System.Version.MajorRevision%2A> and <xref:System.Version.MinorRevision%2A> properties enable you to identify a temporary version of your application that, for example, corrects a problem until you can release a permanent solution.  Furthermore, the Windows NT operating system uses the <xref:System.Version.MajorRevision%2A> property to encode the service pack number.  \n  \n## Assigning Version Information to Assemblies  \n Ordinarily, the Version class is not used to assign a version number to an assembly. Instead, the <xref:System.Reflection.AssemblyVersionAttribute> class is used to define an assembly's version, as illustrated by the example in this topic.  \n  \n## Retrieving Version Information  \n Version objects are most frequently used to store version information about some system or application component (such as the operating system), the common language runtime, the current application's executable, or a particular assembly. The following examples illustrate some of the most common scenarios:  \n  \n-   Retrieving the operating system version. The following example uses the <xref:System.OperatingSystem.Version%2A?displayProperty=fullName> property to retrieve the version number of the operating system.  \n  \n     [!code-vb[System.Version.Class#1](~/add/codesnippet/visualbasic/t-system.version_1.vb)]\n     [!code-cs[System.Version.Class#1](~/add/codesnippet/csharp/t-system.version_1.cs)]  \n  \n-   Retrieving the version of the common language runtime. The following example uses the <xref:System.Environment.Version%2A?displayProperty=fullName> property to retrieve version information about the common language runtime.  \n  \n     [!code-vb[System.Version.Class#2](~/add/codesnippet/visualbasic/t-system.version_2.vb)]\n     [!code-cs[System.Version.Class#2](~/add/codesnippet/csharp/t-system.version_2.cs)]  \n  \n-   Retrieving the current application's assembly version. The following example uses the <xref:System.Reflection.Assembly.GetEntryAssembly%2A?displayProperty=fullName> method to obtain a reference to an <xref:System.Reflection.Assembly> object that represents the application executable and then retrieves its assembly version number.  \n  \n     [!code-cs[System.Version.Class#5](~/add/codesnippet/csharp/t-system.version_3.cs)]\n     [!code-vb[System.Version.Class#5](~/add/codesnippet/visualbasic/t-system.version_3.vb)]  \n  \n-   Retrieving the current assembly's assembly version. The following example uses the <xref:System.Type.Assembly%2A?displayProperty=fullName> property to obtain a reference to an <xref:System.Reflection.Assembly> object that represents the assembly that contains the application entry point, and then retrieves its version information.  \n  \n     [!code-cs[System.Version.Class#4](~/add/codesnippet/csharp/t-system.version_4.cs)]\n     [!code-vb[System.Version.Class#4](~/add/codesnippet/visualbasic/t-system.version_4.vb)]  \n  \n-   Retrieving the version of a specific assembly. The following example uses the <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A?displayProperty=fullName> method to obtain a reference to an <xref:System.Reflection.Assembly> object that has a particular file name, and then retrieves its version information. Note that several other methods also exist to instantiate an <xref:System.Reflection.Assembly> object by file name or by strong name.  \n  \n     [!code-cs[System.Version.Class#3](~/add/codesnippet/csharp/t-system.version_5.cs)]\n     [!code-vb[System.Version.Class#3](~/add/codesnippet/visualbasic/t-system.version_5.vb)]  \n  \n-   Retrieving the Publish Version of a ClickOnce application. The following example uses the <xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A?displayProperty=fullName> property to display an application's Publish Version. Note that its successful execution requires the example's application identity to be set. This is handled automatically by the Visual Studio Publish Wizard.  \n  \n     [!code-cs[System.Version.Class#7](~/add/codesnippet/csharp/t-system.version_6.cs)]\n     [!code-vb[System.Version.Class#7](~/add/codesnippet/visualbasic/t-system.version_6.vb)]  \n  \n    > [!IMPORTANT]\n    >  The Publish Version of an application for ClickOnce deployment is completely independent of its assembly version.  \n  \n## Comparing Version Objects  \n You can use the <xref:System.Version.CompareTo%2A> method to determine whether one Version object is earlier than, the same as, or later than a second Version object. The following example indicates that Version 2.1 is later than Version 2.0.  \n  \n [!code-vb[System.Version.Class.Comparing#1](~/add/codesnippet/visualbasic/t-system.version_7.vb)]\n [!code-cs[System.Version.Class.Comparing#1](~/add/codesnippet/csharp/t-system.version_7.cs)]  \n  \n For two versions to be equal, the major, minor, build, and revision numbers of the first Version object must be identical to those of the second Version object. If the build or revision number of a Version object is undefined, that Version object is considered to be earlier than a Version object whose build or revision number is equal to zero. The following example illustrates this by comparing three Version objects that have undefined version components.  \n  \n [!code-cs[System.Version.Class.Comparing#2](~/add/codesnippet/csharp/t-system.version_8.cs)]\n [!code-vb[System.Version.Class.Comparing#2](~/add/codesnippet/visualbasic/t-system.version_8.vb)]"
  example:
  - "The following example uses the <xref:System.Reflection.AssemblyVersionAttribute> attribute to assign a version number to an assembly. At compile time, this version information is stored with the assembly's metadata. At run time, the example retrieves the value of the <xref:System.Type.Assembly%2A?displayProperty=fullName> property on a type found in the assembly to get a reference to the executing assembly, and it retrieves the assembly's version information from the <xref:System.Reflection.AssemblyName.Version%2A> property of the <xref:System.Reflection.AssemblyName> object returned by the <xref:System.Reflection.Assembly.GetName%2A?displayProperty=fullName> method.  \n  \n [!code-vb[System.Version.Class#6](~/add/codesnippet/visualbasic/t-system.version_9.vb)]\n [!code-cs[System.Version.Class#6](~/add/codesnippet/csharp/t-system.version_9.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class Version : ICloneable, IComparable, IComparable<Version>, IEquatable<Version>
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.IComparable
  - System.IComparable<System.Version>
  - System.IEquatable<System.Version>
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.#ctor
  id: '#ctor'
  parent: System.Version
  langs:
  - csharp
  name: Version()
  nameWithType: Version.Version()
  fullName: System.Version.Version()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="System.Version"></xref> class.
  remarks: "This constructor creates a <xref:System.Version> object with the following property values.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Version.Major%2A>|0|  \n|<xref:System.Version.Minor%2A>|0|  \n|<xref:System.Version.Build%2A>|undefined (-1)|  \n|<xref:System.Version.Revision%2A>|undefined (-1)|"
  syntax:
    content: public Version ();
    parameters: []
  overload: System.Version.#ctor*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Version
  langs:
  - csharp
  name: Version(String)
  nameWithType: Version.Version(String)
  fullName: System.Version.Version(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="System.Version"></xref> class using the specified string.
  remarks: "The `version` parameter can contain only the components major, minor, build, and revision, in that order, and all separated by periods. There must be at least two components, and at most four. The first two components are assumed to be major and minor. The value of unspecified components is undefined.  \n  \n The format of the version number is as follows. Optional components are shown in square brackets ('[' and ']'):  \n  \n major.minor[.build[.revision]]  \n  \n All defined components must be integers greater than or equal to 0. For example, if the major number is 6, the minor number is 2, the build number is 1, and the revision number is 3, then `version` should be \"6.2.1.3\"."
  syntax:
    content: public Version (string version);
    parameters:
    - id: version
      type: System.String
      description: A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.').
  overload: System.Version.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>version</code> has fewer than two components or more than four components.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>version</code> is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: A major, minor, build, or revision component is less than zero.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: At least one component of <code>version</code> does not parse to an integer.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: At least one component of <code>version</code> represents a number greater than <xref href="System.Int32.MaxValue"></xref>.
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Version
  langs:
  - csharp
  name: Version(Int32,Int32)
  nameWithType: Version.Version(Int32,Int32)
  fullName: System.Version.Version(Int32,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="System.Version"></xref> class using the specified major and minor values.
  remarks: "This constructor creates a <xref:System.Version> object with the following property values.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Version.Major%2A>|`major`|  \n|<xref:System.Version.Minor%2A>|`minor`|  \n|<xref:System.Version.Build%2A>|undefined (-1)|  \n|<xref:System.Version.Revision%2A>|undefined (-1)|"
  syntax:
    content: public Version (int major, int minor);
    parameters:
    - id: major
      type: System.Int32
      description: The major version number.
    - id: minor
      type: System.Int32
      description: The minor version number.
  overload: System.Version.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>major</code> or <code>minor</code> is less than zero.
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: System.Version
  langs:
  - csharp
  name: Version(Int32,Int32,Int32)
  nameWithType: Version.Version(Int32,Int32,Int32)
  fullName: System.Version.Version(Int32,Int32,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="System.Version"></xref> class using the specified major, minor, and build values.
  remarks: "This constructor creates a <xref:System.Version> object with the following property values.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Version.Major%2A>|`major`|  \n|<xref:System.Version.Minor%2A>|`minor`|  \n|<xref:System.Version.Build%2A>|`build`|  \n|<xref:System.Version.Revision%2A>|undefined (-1)|"
  syntax:
    content: public Version (int major, int minor, int build);
    parameters:
    - id: major
      type: System.Int32
      description: The major version number.
    - id: minor
      type: System.Int32
      description: The minor version number.
    - id: build
      type: System.Int32
      description: The build number.
  overload: System.Version.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>major</code>, <code>minor</code>, or <code>build</code> is less than zero.
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: System.Version
  langs:
  - csharp
  name: Version(Int32,Int32,Int32,Int32)
  nameWithType: Version.Version(Int32,Int32,Int32,Int32)
  fullName: System.Version.Version(Int32,Int32,Int32,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="System.Version"></xref> class with the specified major, minor, build, and revision numbers.
  remarks: "This constructor creates a <xref:System.Version> object with the following property values.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Version.Major%2A>|`major`|  \n|<xref:System.Version.Minor%2A>|`minor`|  \n|<xref:System.Version.Build%2A>|`build`|  \n|<xref:System.Version.Revision%2A>|`revision`|"
  example:
  - "The following code example demonstrates the Version constructor, and <xref:System.Version.Major%2A>, <xref:System.Version.Minor%2A>, <xref:System.Version.Build%2A>, <xref:System.Version.Revision%2A>, <xref:System.Version.MajorRevision%2A>, and <xref:System.Version.MinorRevision%2A> properties.  \n  \n [!code-cpp[system.version.revision#1](~/add/codesnippet/cpp/m-system.version.sharpct_1.cpp)]\n [!code-vb[system.version.revision#1](~/add/codesnippet/visualbasic/m-system.version.sharpct_1.vb)]\n [!code-cs[system.version.revision#1](~/add/codesnippet/csharp/m-system.version.sharpct_1.cs)]"
  syntax:
    content: public Version (int major, int minor, int build, int revision);
    parameters:
    - id: major
      type: System.Int32
      description: The major version number.
    - id: minor
      type: System.Int32
      description: The minor version number.
    - id: build
      type: System.Int32
      description: The build number.
    - id: revision
      type: System.Int32
      description: The revision number.
  overload: System.Version.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>major</code>, <code>minor</code>, <code>build</code>, or <code>revision</code> is less than zero.
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.Build
  id: Build
  parent: System.Version
  langs:
  - csharp
  name: Build
  nameWithType: Version.Build
  fullName: System.Version.Build
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value of the build component of the version number for the current <xref href="System.Version"></xref> object.
  remarks: For example, if the version number is 6.2.1.3, the build number is 1. If the version number is 6.2, the build number is undefined.
  example:
  - "The following code example demonstrates the <xref:System.Version.%23ctor%2A> constructor, and <xref:System.Version.Major%2A>, <xref:System.Version.Minor%2A>, Build, <xref:System.Version.Revision%2A>, <xref:System.Version.MajorRevision%2A>, and <xref:System.Version.MinorRevision%2A> properties.  \n  \n [!code-cpp[system.version.revision#1](~/add/codesnippet/cpp/p-system.version.build_1.cpp)]\n [!code-vb[system.version.revision#1](~/add/codesnippet/visualbasic/p-system.version.build_1.vb)]\n [!code-cs[system.version.revision#1](~/add/codesnippet/csharp/p-system.version.build_1.cs)]"
  syntax:
    content: public int Build { get; }
    return:
      type: System.Int32
      description: The build number, or -1 if the build number is undefined.
  overload: System.Version.Build*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.Clone
  id: Clone
  parent: System.Version
  langs:
  - csharp
  name: Clone()
  nameWithType: Version.Clone()
  fullName: System.Version.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a new <xref href="System.Version"></xref> object whose value is the same as the current <xref href="System.Version"></xref> object.
  remarks: If the type of the return value is important, cast the <xref:System.Object> instance that is returned by this method to a <xref:System.Version> object.
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: A new <xref href="System.Object"></xref> whose values are a copy of the current <xref href="System.Version"></xref> object.
  overload: System.Version.Clone*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: System.Version
  langs:
  - csharp
  name: CompareTo(Object)
  nameWithType: Version.CompareTo(Object)
  fullName: System.Version.CompareTo(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares the current <xref href="System.Version"></xref> object to a specified object and returns an indication of their relative values.
  remarks: "The components of `Version` in decreasing order of importance are: major, minor, build, and revision. An unknown component is assumed to be older than any known component.  \n  \n For example:  \n  \n-   Version 1.1 is older than version 1.1.0  \n  \n-   Version 1.1 is older than version 1.1.1  \n  \n-   Version 1.1 is older than version 1.1.2.3  \n  \n-   Version 1.1.2 is older than version 1.1.2.4  \n  \n-   Version 1.2.5 is newer than version 1.2.3.4"
  syntax:
    content: public int CompareTo (object version);
    parameters:
    - id: version
      type: System.Object
      description: An object to compare, or <xref uid="langword_csharp_null" name="null" href=""></xref>.
    return:
      type: System.Int32
      description: "A signed integer that indicates the relative values of the two objects, as shown in the following table.  \n  \n|Return value|Meaning|  \n|------------------|-------------|  \n|Less than zero|The current <xref href=\"System.Version\"></xref> object is a version before <code>version</code>.|  \n|Zero|The current <xref href=\"System.Version\"></xref> object is the same version as <code>version</code>.|  \n|Greater than zero|The current <xref href=\"System.Version\"></xref> object is a version subsequent to <code>version</code>.<br /><br /> -or-<br /><br /><code>version</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.|"
  overload: System.Version.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>version</code> is not of type <xref href="System.Version"></xref>.
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.CompareTo(System.Version)
  id: CompareTo(System.Version)
  parent: System.Version
  langs:
  - csharp
  name: CompareTo(Version)
  nameWithType: Version.CompareTo(Version)
  fullName: System.Version.CompareTo(Version)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares the current <xref href="System.Version"></xref> object to a specified <xref href="System.Version"></xref> object and returns an indication of their relative values.
  remarks: "This method implements the <xref:System.IComparable%601?displayProperty=fullName> interface, and performs slightly better than the <xref:System.Version.CompareTo%2A> method because it does not have to unbox the `value` parameter.  \n  \n The components of `Version` in decreasing order of importance are: major, minor, build, and revision. An unknown component is assumed to be older than any known component. For example:  \n  \n-   Version 1.1 is older than version 1.1.0.  \n  \n-   Version 1.1 is older than version 1.1.1.  \n  \n-   Version 1.1 is older than version 1.1.2.3.  \n  \n-   Version 1.1.2 is older than version 1.1.2.4.  \n  \n-   Version 1.2.5 is newer than version 1.2.3.4."
  example:
  - "The following code example demonstrates generic and nongeneric versions of the `CompareTo` method for several value and reference types.  \n  \n [!code-vb[T.CompareTo#1](~/add/codesnippet/visualbasic/m-system.version.compare_1.vb)]\n [!code-cpp[T.CompareTo#1](~/add/codesnippet/cpp/m-system.version.compare_1.cpp)]\n [!code-cs[T.CompareTo#1](~/add/codesnippet/csharp/m-system.version.compare_1.cs)]"
  syntax:
    content: public int CompareTo (Version value);
    parameters:
    - id: value
      type: System.Version
      description: A <xref href="System.Version"></xref> object to compare to the current <xref href="System.Version"></xref> object, or <xref uid="langword_csharp_null" name="null" href=""></xref>.
    return:
      type: System.Int32
      description: "A signed integer that indicates the relative values of the two objects, as shown in the following table.  \n  \n|Return value|Meaning|  \n|------------------|-------------|  \n|Less than zero|The current <xref href=\"System.Version\"></xref> object is a version before <code>value</code>.|  \n|Zero|The current <xref href=\"System.Version\"></xref> object is the same version as <code>value</code>.|  \n|Greater than zero|The current <xref href=\"System.Version\"></xref> object is a version subsequent to <code>value</code>.<br /><br /> -or-<br /><br /><code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.|"
  overload: System.Version.CompareTo*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Version
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Version.Equals(Object)
  fullName: System.Version.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value indicating whether the current <xref href="System.Version"></xref> object is equal to a specified object.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with the current <xref href="System.Version"></xref> object, or <xref uid="langword_csharp_null" name="null" href=""></xref>.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if the current <xref href="System.Version"></xref> object and <code>obj</code> are both <xref href="System.Version"></xref> objects, and every component of the current <xref href="System.Version"></xref> object matches the corresponding component of <code>obj</code>; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Version.Equals*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.Equals(System.Version)
  id: Equals(System.Version)
  parent: System.Version
  langs:
  - csharp
  name: Equals(Version)
  nameWithType: Version.Equals(Version)
  fullName: System.Version.Equals(Version)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value indicating whether the current <xref href="System.Version"></xref> object and a specified <xref href="System.Version"></xref> object represent the same value.
  remarks: This method implements the <xref:System.IEquatable%601> interface, and performs slightly better than the <xref:System.Version.Equals%2A> method because it does not have to unbox the `obj` parameter.
  syntax:
    content: public bool Equals (Version obj);
    parameters:
    - id: obj
      type: System.Version
      description: A <xref href="System.Version"></xref> object to compare to the current <xref href="System.Version"></xref> object, or <xref uid="langword_csharp_null" name="null" href=""></xref>.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if every component of the current <xref href="System.Version"></xref> object matches the corresponding component of the <code>obj</code> parameter; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Version.Equals*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.GetHashCode
  id: GetHashCode
  parent: System.Version
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Version.GetHashCode()
  fullName: System.Version.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a hash code for the current <xref href="System.Version"></xref> object.
  remarks: ''
  example:
  - "The following code example demonstrates the <xref:System.Version.%23ctor%2A> constructor, and <xref:System.Version.Major%2A>, <xref:System.Version.Minor%2A>, <xref:System.Version.Build%2A>, <xref:System.Version.Revision%2A>, <xref:System.Version.MajorRevision%2A>, and <xref:System.Version.MinorRevision%2A> properties.  \n  \n [!code-cpp[system.version.revision#1](~/add/codesnippet/cpp/m-system.version.gethash_1.cpp)]\n [!code-vb[system.version.revision#1](~/add/codesnippet/visualbasic/m-system.version.gethash_1.vb)]\n [!code-cs[system.version.revision#1](~/add/codesnippet/csharp/m-system.version.gethash_1.cs)]"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Version.GetHashCode*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.Major
  id: Major
  parent: System.Version
  langs:
  - csharp
  name: Major
  nameWithType: Version.Major
  fullName: System.Version.Major
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value of the major component of the version number for the current <xref href="System.Version"></xref> object.
  remarks: For example, if the version number is 6.2, the major version is 6.
  syntax:
    content: public int Major { get; }
    return:
      type: System.Int32
      description: The major version number.
  overload: System.Version.Major*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.MajorRevision
  id: MajorRevision
  parent: System.Version
  langs:
  - csharp
  name: MajorRevision
  nameWithType: Version.MajorRevision
  fullName: System.Version.MajorRevision
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the high 16 bits of the revision number.
  remarks: "Suppose you release an interim version of your application to temporarily correct a problem until you can release a permanent solution. The temporary version does not warrant a new revision number, but it does need to be identified as a different version. In this case, encode the identification information in the high and low 16-bit portions of the 32-bit revision number. Use the <xref:System.Version.Revision%2A> property to obtain the entire revision number, use the MajorRevision property to obtain the high 16 bits, and use the <xref:System.Version.MinorRevision%2A> property to obtain the low 16 bits.  \n  \n Starting in the .NET Framework version 2.0, the Windows NT operating system uses the MajorRevision property to encode the service pack number."
  example:
  - "The following code example demonstrates the <xref:System.Version.%23ctor%2A> constructor, and the <xref:System.Version.Major%2A>, <xref:System.Version.Minor%2A>, <xref:System.Version.Build%2A>, <xref:System.Version.Revision%2A>, MajorRevision, and <xref:System.Version.MinorRevision%2A> properties.  \n  \n [!code-cpp[system.version.revision#1](~/add/codesnippet/cpp/p-system.version.majorre_1.cpp)]\n [!code-vb[system.version.revision#1](~/add/codesnippet/visualbasic/p-system.version.majorre_1.vb)]\n [!code-cs[system.version.revision#1](~/add/codesnippet/csharp/p-system.version.majorre_1.cs)]"
  syntax:
    content: public short MajorRevision { get; }
    return:
      type: System.Int16
      description: A 16-bit signed integer.
  overload: System.Version.MajorRevision*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.Minor
  id: Minor
  parent: System.Version
  langs:
  - csharp
  name: Minor
  nameWithType: Version.Minor
  fullName: System.Version.Minor
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value of the minor component of the version number for the current <xref href="System.Version"></xref> object.
  remarks: For example, if the version number is 6.2, the minor version is 2.
  example:
  - "The following code example demonstrates the <xref:System.Version.%23ctor%2A> constructor, and <xref:System.Version.Major%2A>, Minor, <xref:System.Version.Build%2A>, <xref:System.Version.Revision%2A>, <xref:System.Version.MajorRevision%2A>, and <xref:System.Version.MinorRevision%2A> properties.  \n  \n [!code-cpp[system.version.revision#1](~/add/codesnippet/cpp/p-system.version.minor_1.cpp)]\n [!code-vb[system.version.revision#1](~/add/codesnippet/visualbasic/p-system.version.minor_1.vb)]\n [!code-cs[system.version.revision#1](~/add/codesnippet/csharp/p-system.version.minor_1.cs)]"
  syntax:
    content: public int Minor { get; }
    return:
      type: System.Int32
      description: The minor version number.
  overload: System.Version.Minor*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.MinorRevision
  id: MinorRevision
  parent: System.Version
  langs:
  - csharp
  name: MinorRevision
  nameWithType: Version.MinorRevision
  fullName: System.Version.MinorRevision
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the low 16 bits of the revision number.
  remarks: Suppose you release an interim version of your application to temporarily correct a problem until you can release a permanent solution. The temporary version does not warrant a new revision number, but it does need to be identified as a different version. In this case, encode the identification information in the high and low 16-bit portions of the 32-bit revision number. Use the <xref:System.Version.Revision%2A> property to obtain the entire revision number, use the <xref:System.Version.MajorRevision%2A> property to obtain the high 16 bits, and use the MinorRevision property to obtain the low 16 bits.
  example:
  - "The following code example demonstrates the <xref:System.Version.%23ctor%2A> constructor, and the <xref:System.Version.Major%2A>, <xref:System.Version.Minor%2A>, <xref:System.Version.Build%2A>, <xref:System.Version.Revision%2A>, <xref:System.Version.MajorRevision%2A>, and MinorRevision properties.  \n  \n [!code-cpp[system.version.revision#1](~/add/codesnippet/cpp/p-system.version.minorre_1.cpp)]\n [!code-vb[system.version.revision#1](~/add/codesnippet/visualbasic/p-system.version.minorre_1.vb)]\n [!code-cs[system.version.revision#1](~/add/codesnippet/csharp/p-system.version.minorre_1.cs)]"
  syntax:
    content: public short MinorRevision { get; }
    return:
      type: System.Int16
      description: A 16-bit signed integer.
  overload: System.Version.MinorRevision*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.op_Equality(System.Version,System.Version)
  id: op_Equality(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  name: op_Equality(Version,Version)
  nameWithType: Version.op_Equality(Version,Version)
  fullName: System.Version.op_Equality(Version,Version)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether two specified <xref href="System.Version"></xref> objects are equal.
  syntax:
    content: public static bool op_Equality (Version v1, Version v2);
    parameters:
    - id: v1
      type: System.Version
      description: The first <xref href="System.Version"></xref> object.
    - id: v2
      type: System.Version
      description: The second <xref href="System.Version"></xref> object.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if <code>v1</code> equals <code>v2</code>; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Version.op_Equality*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.op_GreaterThan(System.Version,System.Version)
  id: op_GreaterThan(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  name: op_GreaterThan(Version,Version)
  nameWithType: Version.op_GreaterThan(Version,Version)
  fullName: System.Version.op_GreaterThan(Version,Version)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether the first specified <xref href="System.Version"></xref> object is greater than the second specified <xref href="System.Version"></xref> object.
  syntax:
    content: public static bool op_GreaterThan (Version v1, Version v2);
    parameters:
    - id: v1
      type: System.Version
      description: The first <xref href="System.Version"></xref> object.
    - id: v2
      type: System.Version
      description: The second <xref href="System.Version"></xref> object.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if <code>v1</code> is greater than <code>v2</code>; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Version.op_GreaterThan*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.op_GreaterThanOrEqual(System.Version,System.Version)
  id: op_GreaterThanOrEqual(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  name: op_GreaterThanOrEqual(Version,Version)
  nameWithType: Version.op_GreaterThanOrEqual(Version,Version)
  fullName: System.Version.op_GreaterThanOrEqual(Version,Version)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether the first specified <xref href="System.Version"></xref> object is greater than or equal to the second specified <xref href="System.Version"></xref> object.
  syntax:
    content: public static bool op_GreaterThanOrEqual (Version v1, Version v2);
    parameters:
    - id: v1
      type: System.Version
      description: The first <xref href="System.Version"></xref> object.
    - id: v2
      type: System.Version
      description: The second <xref href="System.Version"></xref> object.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if <code>v1</code> is greater than or equal to <code>v2</code>; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Version.op_GreaterThanOrEqual*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.op_Inequality(System.Version,System.Version)
  id: op_Inequality(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  name: op_Inequality(Version,Version)
  nameWithType: Version.op_Inequality(Version,Version)
  fullName: System.Version.op_Inequality(Version,Version)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether two specified <xref href="System.Version"></xref> objects are not equal.
  syntax:
    content: public static bool op_Inequality (Version v1, Version v2);
    parameters:
    - id: v1
      type: System.Version
      description: The first <xref href="System.Version"></xref> object.
    - id: v2
      type: System.Version
      description: The second <xref href="System.Version"></xref> object.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if <code>v1</code> does not equal <code>v2</code>; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Version.op_Inequality*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.op_LessThan(System.Version,System.Version)
  id: op_LessThan(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  name: op_LessThan(Version,Version)
  nameWithType: Version.op_LessThan(Version,Version)
  fullName: System.Version.op_LessThan(Version,Version)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether the first specified <xref href="System.Version"></xref> object is less than the second specified <xref href="System.Version"></xref> object.
  syntax:
    content: public static bool op_LessThan (Version v1, Version v2);
    parameters:
    - id: v1
      type: System.Version
      description: The first <xref href="System.Version"></xref> object.
    - id: v2
      type: System.Version
      description: The second <xref href="System.Version"></xref> object.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if <code>v1</code> is less than <code>v2</code>; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Version.op_LessThan*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>v1</code> is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.op_LessThanOrEqual(System.Version,System.Version)
  id: op_LessThanOrEqual(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  name: op_LessThanOrEqual(Version,Version)
  nameWithType: Version.op_LessThanOrEqual(Version,Version)
  fullName: System.Version.op_LessThanOrEqual(Version,Version)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether the first specified <xref href="System.Version"></xref> object is less than or equal to the second <xref href="System.Version"></xref> object.
  syntax:
    content: public static bool op_LessThanOrEqual (Version v1, Version v2);
    parameters:
    - id: v1
      type: System.Version
      description: The first <xref href="System.Version"></xref> object.
    - id: v2
      type: System.Version
      description: The second <xref href="System.Version"></xref> object.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if <code>v1</code> is less than or equal to <code>v2</code>; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Version.op_LessThanOrEqual*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>v1</code> is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.Parse(System.String)
  id: Parse(System.String)
  parent: System.Version
  langs:
  - csharp
  name: Parse(String)
  nameWithType: Version.Parse(String)
  fullName: System.Version.Parse(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a version number to an equivalent <xref href="System.Version"></xref> object.
  remarks: "The `input` parameter must have the following format:  \n  \n```  \n  \nmajor.minor[.build[.revision]]  \n```  \n  \n where *major*, *minor*, *build*, and *revision* are the string representations of the version number's four components: major version number, minor version number, build number, and revision number. Optional components are shown in square brackets ([ and ]). The components must appear in the specified order, and must be separated by periods.  \n  \n> [!IMPORTANT]\n>  Because the string representation of a version number must conform to a recognized pattern, applications should always use exception handling when calling the Parse method to parse user input. Alternatively, you can call the <xref:System.Version.TryParse%2A> method to parse the string representation of a version number and return a value that indicates whether the parse operation succeeded.  \n  \n The Parse method is a convenience method; it is equivalent to calling the <xref:System.Version.%23ctor%28System.String%29> constructor."
  example:
  - "The following example uses the Parse method to parse a number of strings that contain version information.  \n  \n [!code-cs[System.Version.Parse#1](~/add/codesnippet/csharp/m-system.version.parse-s_1.cs)]\n [!code-vb[System.Version.Parse#1](~/add/codesnippet/visualbasic/m-system.version.parse-s_1.vb)]"
  syntax:
    content: public static Version Parse (string input);
    parameters:
    - id: input
      type: System.String
      description: A string that contains a version number to convert.
    return:
      type: System.Version
      description: An object that is equivalent to the version number specified in the <code>input</code> parameter.
  overload: System.Version.Parse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>input</code> is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>input</code> has fewer than two or more than four version components.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: At least one component in <code>input</code> is less than zero.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: At least one component in <code>input</code> is not an integer.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: At least one component in <code>input</code> represents a number that is greater than <xref href="System.Int32.MaxValue"></xref>.
  platform:
  - netframework-40
- uid: System.Version.Revision
  id: Revision
  parent: System.Version
  langs:
  - csharp
  name: Revision
  nameWithType: Version.Revision
  fullName: System.Version.Revision
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value of the revision component of the version number for the current <xref href="System.Version"></xref> object.
  remarks: For example, if the version number is 6.2.1.3, the revision number is 3. If the version number is 6.2, the revision number is undefined.
  example:
  - "The following code example demonstrates the <xref:System.Version.%23ctor%2A> constructor, and <xref:System.Version.Major%2A>, <xref:System.Version.Minor%2A>, <xref:System.Version.Build%2A>, Revision, <xref:System.Version.MajorRevision%2A>, and <xref:System.Version.MinorRevision%2A> properties.  \n  \n [!code-cpp[system.version.revision#1](~/add/codesnippet/cpp/p-system.version.revision_1.cpp)]\n [!code-vb[system.version.revision#1](~/add/codesnippet/visualbasic/p-system.version.revision_1.vb)]\n [!code-cs[system.version.revision#1](~/add/codesnippet/csharp/p-system.version.revision_1.cs)]"
  syntax:
    content: public int Revision { get; }
    return:
      type: System.Int32
      description: The revision number, or -1 if the revision number is undefined.
  overload: System.Version.Revision*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.ToString
  id: ToString
  parent: System.Version
  langs:
  - csharp
  name: ToString()
  nameWithType: Version.ToString()
  fullName: System.Version.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of the current <xref href="System.Version"></xref> object to its equivalent <xref href="System.String"></xref> representation.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "The <xref href=\"System.String\"></xref> representation of the values of the major, minor, build, and revision components of the current <xref href=\"System.Version\"></xref> object, as depicted in the following format. Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined:  \n  \n major.minor[.build[.revision]]  \n  \n For example, if you create a <xref href=\"System.Version\"></xref> object using the constructor `Version(1,1)`, the returned string is \"1.1\". If you create a <xref href=\"System.Version\"></xref> object using the constructor `Version(1,3,4,2)`, the returned string is \"1.3.4.2\"."
  overload: System.Version.ToString*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.ToString(System.Int32)
  id: ToString(System.Int32)
  parent: System.Version
  langs:
  - csharp
  name: ToString(Int32)
  nameWithType: Version.ToString(Int32)
  fullName: System.Version.ToString(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the value of the current <xref href="System.Version"></xref> object to its equivalent <xref href="System.String"></xref> representation. A specified count indicates the number of components to return.
  syntax:
    content: public string ToString (int fieldCount);
    parameters:
    - id: fieldCount
      type: System.Int32
      description: The number of components to return. The `fieldCount` ranges from 0 to 4.
    return:
      type: System.String
      description: "The <xref href=\"System.String\"></xref> representation of the values of the major, minor, build, and revision components of the current <xref href=\"System.Version\"></xref> object, each separated by a period character ('.'). The <code>fieldCount</code> parameter determines how many components are returned.  \n  \n|fieldCount|Return Value|  \n|----------------|------------------|  \n|0|An empty string (\"\").|  \n|1|major|  \n|2|major.minor|  \n|3|major.minor.build|  \n|4|major.minor.build.revision|  \n  \n For example, if you create <xref href=\"System.Version\"></xref> object using the constructor `Version(1,3,5)`, `ToString(2)` returns \"1.3\" and `ToString(4)` throws an exception."
  overload: System.Version.ToString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>fieldCount</code> is less than 0, or more than 4.  \n  \n -or-  \n  \n <code>fieldCount</code> is more than the number of components defined in the current <xref href=\"System.Version\"></xref> object."
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Version.TryParse(System.String,System.Version@)
  id: TryParse(System.String,System.Version@)
  parent: System.Version
  langs:
  - csharp
  name: TryParse(String,Version)
  nameWithType: Version.TryParse(String,Version)
  fullName: System.Version.TryParse(String,Version)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Tries to convert the string representation of a version number to an equivalent <xref href="System.Version"></xref> object, and returns a value that indicates whether the conversion succeeded.
  remarks: "The TryParse method is similar to the <xref:System.Version.Parse%2A> method, except that it does not throw an exception if the conversion fails. Instead, it returns `false` if `input` is null, has fewer than two or more than four components, has at least one component that is not an integer, has at least one component that is less than zero, or has at least one component that is greater than <xref:System.Int32.MaxValue?displayProperty=fullName>.  \n  \n For the parse operation to succeed, the `input` parameter must be in the following format:  \n  \n```  \n  \nmajor.minor[.build[.revision]]  \n```  \n  \n where *major*, *minor*, *build*, and *revision* are the string representations of the version number's four components: major version number, minor version number, build number, and revision number. Optional components are shown in square brackets ([ and ]). The components must appear in order, and must be separated by periods."
  example:
  - "The following example uses the TryParse method to parse a number of strings that contain version information.  \n  \n [!code-cs[System.Version.TryParse#1](~/add/codesnippet/csharp/m-system.version.trypars_1.cs)]\n [!code-vb[System.Version.TryParse#1](~/add/codesnippet/visualbasic/m-system.version.trypars_1.vb)]"
  syntax:
    content: public static bool TryParse (string input, out Version result);
    parameters:
    - id: input
      type: System.String
      description: A string that contains a version number to convert.
    - id: result
      type: System.Version
      description: When this method returns, contains the <xref href="System.Version"></xref> equivalent of the number that is contained in `input`, if the conversion succeeded, or a <xref href="System.Version"></xref> object whose major and minor version numbers are 0 if the conversion failed. If `input` is <xref uid="langword_csharp_null" name="null" href=""></xref> or <xref href="System.String.Empty"></xref>, `result` is <xref uid="langword_csharp_null" name="null" href=""></xref> when the method returns.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if the <code>input</code> parameter was converted successfully; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Version.TryParse*
  exceptions: []
  platform:
  - netframework-40
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
- uid: System.OverflowException
  parent: System
  isExternal: false
  name: OverflowException
  nameWithType: OverflowException
  fullName: System.OverflowException
- uid: System.Version.#ctor
  parent: System.Version
  isExternal: false
  name: Version()
  nameWithType: Version.Version()
  fullName: System.Version.Version()
- uid: System.Version.#ctor(System.String)
  parent: System.Version
  isExternal: false
  name: Version(String)
  nameWithType: Version.Version(String)
  fullName: System.Version.Version(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Version.#ctor(System.Int32,System.Int32)
  parent: System.Version
  isExternal: false
  name: Version(Int32,Int32)
  nameWithType: Version.Version(Int32,Int32)
  fullName: System.Version.Version(Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Version.#ctor(System.Int32,System.Int32,System.Int32)
  parent: System.Version
  isExternal: false
  name: Version(Int32,Int32,Int32)
  nameWithType: Version.Version(Int32,Int32,Int32)
  fullName: System.Version.Version(Int32,Int32,Int32)
- uid: System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Version
  isExternal: false
  name: Version(Int32,Int32,Int32,Int32)
  nameWithType: Version.Version(Int32,Int32,Int32,Int32)
  fullName: System.Version.Version(Int32,Int32,Int32,Int32)
- uid: System.Version.Build
  parent: System.Version
  isExternal: false
  name: Build
  nameWithType: Version.Build
  fullName: System.Version.Build
- uid: System.Version.Clone
  parent: System.Version
  isExternal: false
  name: Clone()
  nameWithType: Version.Clone()
  fullName: System.Version.Clone()
- uid: System.Version.CompareTo(System.Object)
  parent: System.Version
  isExternal: false
  name: CompareTo(Object)
  nameWithType: Version.CompareTo(Object)
  fullName: System.Version.CompareTo(Object)
- uid: System.Version.CompareTo(System.Version)
  parent: System.Version
  isExternal: false
  name: CompareTo(Version)
  nameWithType: Version.CompareTo(Version)
  fullName: System.Version.CompareTo(Version)
- uid: System.Version
  parent: System
  isExternal: false
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Version.Equals(System.Object)
  parent: System.Version
  isExternal: false
  name: Equals(Object)
  nameWithType: Version.Equals(Object)
  fullName: System.Version.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Version.Equals(System.Version)
  parent: System.Version
  isExternal: false
  name: Equals(Version)
  nameWithType: Version.Equals(Version)
  fullName: System.Version.Equals(Version)
- uid: System.Version.GetHashCode
  parent: System.Version
  isExternal: false
  name: GetHashCode()
  nameWithType: Version.GetHashCode()
  fullName: System.Version.GetHashCode()
- uid: System.Version.Major
  parent: System.Version
  isExternal: false
  name: Major
  nameWithType: Version.Major
  fullName: System.Version.Major
- uid: System.Version.MajorRevision
  parent: System.Version
  isExternal: false
  name: MajorRevision
  nameWithType: Version.MajorRevision
  fullName: System.Version.MajorRevision
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Version.Minor
  parent: System.Version
  isExternal: false
  name: Minor
  nameWithType: Version.Minor
  fullName: System.Version.Minor
- uid: System.Version.MinorRevision
  parent: System.Version
  isExternal: false
  name: MinorRevision
  nameWithType: Version.MinorRevision
  fullName: System.Version.MinorRevision
- uid: System.Version.op_Equality(System.Version,System.Version)
  parent: System.Version
  isExternal: false
  name: op_Equality(Version,Version)
  nameWithType: Version.op_Equality(Version,Version)
  fullName: System.Version.op_Equality(Version,Version)
- uid: System.Version.op_GreaterThan(System.Version,System.Version)
  parent: System.Version
  isExternal: false
  name: op_GreaterThan(Version,Version)
  nameWithType: Version.op_GreaterThan(Version,Version)
  fullName: System.Version.op_GreaterThan(Version,Version)
- uid: System.Version.op_GreaterThanOrEqual(System.Version,System.Version)
  parent: System.Version
  isExternal: false
  name: op_GreaterThanOrEqual(Version,Version)
  nameWithType: Version.op_GreaterThanOrEqual(Version,Version)
  fullName: System.Version.op_GreaterThanOrEqual(Version,Version)
- uid: System.Version.op_Inequality(System.Version,System.Version)
  parent: System.Version
  isExternal: false
  name: op_Inequality(Version,Version)
  nameWithType: Version.op_Inequality(Version,Version)
  fullName: System.Version.op_Inequality(Version,Version)
- uid: System.Version.op_LessThan(System.Version,System.Version)
  parent: System.Version
  isExternal: false
  name: op_LessThan(Version,Version)
  nameWithType: Version.op_LessThan(Version,Version)
  fullName: System.Version.op_LessThan(Version,Version)
- uid: System.Version.op_LessThanOrEqual(System.Version,System.Version)
  parent: System.Version
  isExternal: false
  name: op_LessThanOrEqual(Version,Version)
  nameWithType: Version.op_LessThanOrEqual(Version,Version)
  fullName: System.Version.op_LessThanOrEqual(Version,Version)
- uid: System.Version.Parse(System.String)
  parent: System.Version
  isExternal: false
  name: Parse(String)
  nameWithType: Version.Parse(String)
  fullName: System.Version.Parse(String)
- uid: System.Version.Revision
  parent: System.Version
  isExternal: false
  name: Revision
  nameWithType: Version.Revision
  fullName: System.Version.Revision
- uid: System.Version.ToString
  parent: System.Version
  isExternal: false
  name: ToString()
  nameWithType: Version.ToString()
  fullName: System.Version.ToString()
- uid: System.Version.ToString(System.Int32)
  parent: System.Version
  isExternal: false
  name: ToString(Int32)
  nameWithType: Version.ToString(Int32)
  fullName: System.Version.ToString(Int32)
- uid: System.Version.TryParse(System.String,System.Version@)
  parent: System.Version
  isExternal: false
  name: TryParse(String,Version)
  nameWithType: Version.TryParse(String,Version)
  fullName: System.Version.TryParse(String,Version)
- uid: System.Version.#ctor*
  parent: System.Version
  isExternal: false
  name: Version
  nameWithType: Version.Version
- uid: System.Version.Build*
  parent: System.Version
  isExternal: false
  name: Build
  nameWithType: Version.Build
- uid: System.Version.Clone*
  parent: System.Version
  isExternal: false
  name: Clone
  nameWithType: Version.Clone
- uid: System.Version.CompareTo*
  parent: System.Version
  isExternal: false
  name: CompareTo
  nameWithType: Version.CompareTo
- uid: System.Version.Equals*
  parent: System.Version
  isExternal: false
  name: Equals
  nameWithType: Version.Equals
- uid: System.Version.GetHashCode*
  parent: System.Version
  isExternal: false
  name: GetHashCode
  nameWithType: Version.GetHashCode
- uid: System.Version.Major*
  parent: System.Version
  isExternal: false
  name: Major
  nameWithType: Version.Major
- uid: System.Version.MajorRevision*
  parent: System.Version
  isExternal: false
  name: MajorRevision
  nameWithType: Version.MajorRevision
- uid: System.Version.Minor*
  parent: System.Version
  isExternal: false
  name: Minor
  nameWithType: Version.Minor
- uid: System.Version.MinorRevision*
  parent: System.Version
  isExternal: false
  name: MinorRevision
  nameWithType: Version.MinorRevision
- uid: System.Version.op_Equality*
  parent: System.Version
  isExternal: false
  name: op_Equality
  nameWithType: Version.op_Equality
- uid: System.Version.op_GreaterThan*
  parent: System.Version
  isExternal: false
  name: op_GreaterThan
  nameWithType: Version.op_GreaterThan
- uid: System.Version.op_GreaterThanOrEqual*
  parent: System.Version
  isExternal: false
  name: op_GreaterThanOrEqual
  nameWithType: Version.op_GreaterThanOrEqual
- uid: System.Version.op_Inequality*
  parent: System.Version
  isExternal: false
  name: op_Inequality
  nameWithType: Version.op_Inequality
- uid: System.Version.op_LessThan*
  parent: System.Version
  isExternal: false
  name: op_LessThan
  nameWithType: Version.op_LessThan
- uid: System.Version.op_LessThanOrEqual*
  parent: System.Version
  isExternal: false
  name: op_LessThanOrEqual
  nameWithType: Version.op_LessThanOrEqual
- uid: System.Version.Parse*
  parent: System.Version
  isExternal: false
  name: Parse
  nameWithType: Version.Parse
- uid: System.Version.Revision*
  parent: System.Version
  isExternal: false
  name: Revision
  nameWithType: Version.Revision
- uid: System.Version.ToString*
  parent: System.Version
  isExternal: false
  name: ToString
  nameWithType: Version.ToString
- uid: System.Version.TryParse*
  parent: System.Version
  isExternal: false
  name: TryParse
  nameWithType: Version.TryParse
