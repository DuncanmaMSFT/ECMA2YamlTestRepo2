### YamlMime:ManagedReference
items:
- uid: System.StringComparer
  id: StringComparer
  children:
  - System.StringComparer.#ctor
  - System.StringComparer.Compare(System.Object,System.Object)
  - System.StringComparer.Compare(System.String,System.String)
  - System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)
  - System.StringComparer.CurrentCulture
  - System.StringComparer.CurrentCultureIgnoreCase
  - System.StringComparer.Equals(System.Object,System.Object)
  - System.StringComparer.Equals(System.String,System.String)
  - System.StringComparer.GetHashCode(System.Object)
  - System.StringComparer.GetHashCode(System.String)
  - System.StringComparer.InvariantCulture
  - System.StringComparer.InvariantCultureIgnoreCase
  - System.StringComparer.Ordinal
  - System.StringComparer.OrdinalIgnoreCase
  langs:
  - csharp
  name: StringComparer
  nameWithType: StringComparer
  fullName: System.StringComparer
  type: Class
  summary: Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.
  remarks: "An object derived from the StringComparer class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules. You can use the StringComparer class to create a type-specific comparison to sort the elements in a generic collection. Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the StringComparer class for sorting purposes.  \n  \n A comparison operation that is represented by the StringComparer class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules. For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=fullName>.  \n  \n## Implemented Properties  \n You might be confused about how to use the StringComparer class properties because of a seeming contradiction. The StringComparer class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the StringComparer class. The contradiction is that each property of the StringComparer class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class.  \n  \n You can call a StringComparer property directly because each property actually returns an instance of an anonymous class that is derived from the StringComparer class. Consequently, the type of each property value is StringComparer, which is the base class of the anonymous class, not the type of the anonymous class itself. Each StringComparer class property returns a StringComparer object that supports predefined case and comparison rules."
  example:
  - "The following example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the StringComparer class. The example illustrates how different StringComparer objects sort three versions of the Latin letter I.  \n  \n [!code-cs[System.StringComparer#1](~/add/codesnippet/csharp/t-system.stringcomparer_1.cs)]\n [!code-cpp[System.StringComparer#1](~/add/codesnippet/cpp/t-system.stringcomparer_1.cpp)]\n [!code-vb[System.StringComparer#1](~/add/codesnippet/visualbasic/t-system.stringcomparer_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class StringComparer : System.Collections.Generic.IComparer<string>, System.Collections.Generic.IEqualityComparer<string>, System.Collections.IComparer, System.Collections.IEqualityComparer
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IComparer<System.String>
  - System.Collections.Generic.IEqualityComparer<System.String>
  - System.Collections.IComparer
  - System.Collections.IEqualityComparer
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.StringComparer.#ctor
  id: '#ctor'
  parent: System.StringComparer
  langs:
  - csharp
  name: StringComparer()
  nameWithType: StringComparer.StringComparer()
  fullName: System.StringComparer.StringComparer()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="System.StringComparer"></xref> class.
  syntax:
    content: protected StringComparer ();
    parameters: []
  overload: System.StringComparer.#ctor*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.StringComparer.Compare(System.Object,System.Object)
  id: Compare(System.Object,System.Object)
  parent: System.StringComparer
  langs:
  - csharp
  name: Compare(Object,Object)
  nameWithType: StringComparer.Compare(Object,Object)
  fullName: System.StringComparer.Compare(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, compares two objects and returns an indication of their relative sort order.
  remarks: The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=fullName> method is slightly more efficient than the Compare method because no conversion of the `x` and `y` arguments is needed to perform the comparison.
  syntax:
    content: public int Compare (object x, object y);
    parameters:
    - id: x
      type: System.Object
      description: An object to compare to `y`.
    - id: y
      type: System.Object
      description: An object to compare to `x`.
    return:
      type: System.Int32
      description: "A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|Less than zero|<code>x</code> precedes  <code>y</code> in the sort order.<br /><br /> -or-<br /><br /><code>x</code> is `null` and <code>y</code> is not `null`.|  \n|Zero|<code>x</code> is equal to <code>y</code>.<br /><br /> -or-<br /><br /><code>x</code> and <code>y</code> are both `null`.|  \n|Greater than zero|<code>x</code> follows <code>y</code> in the sort order.<br /><br /> -or-<br /><br /><code>y</code> is `null` and <code>x</code> is not `null`.|"
  overload: System.StringComparer.Compare*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Neither <code>x</code> nor <code>y</code> is a <xref href="System.String"></xref> object, and neither <code>x</code> nor <code>y</code> implements the <xref href="System.IComparable"></xref> interface.
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.StringComparer.Compare(System.String,System.String)
  id: Compare(System.String,System.String)
  parent: System.StringComparer
  langs:
  - csharp
  name: Compare(String,String)
  nameWithType: StringComparer.Compare(String,String)
  fullName: System.StringComparer.Compare(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, compares two strings and returns an indication of their relative sort order.
  remarks: The Compare method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=fullName> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.
  syntax:
    content: public abstract int Compare (string x, string y);
    parameters:
    - id: x
      type: System.String
      description: A string to compare to `y`.
    - id: y
      type: System.String
      description: A string to compare to `x`.
    return:
      type: System.Int32
      description: "A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  \n  \n|Value|Meaning|  \n|-----------|-------------|  \n|Less than zero|<code>x</code> precedes <code>y</code> in the sort order.<br /><br /> -or-<br /><br /><code>x</code> is `null` and <code>y</code> is not `null`.|  \n|Zero|<code>x</code> is equal to <code>y</code>.<br /><br /> -or-<br /><br /><code>x</code> and <code>y</code> are both `null`.|  \n|Greater than zero|<code>x</code> follows <code>y</code> in the sort order.<br /><br /> -or-<br /><br /><code>y</code> is `null` and <code>x</code> is not `null`.|"
  overload: System.StringComparer.Compare*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)
  id: Create(System.Globalization.CultureInfo,System.Boolean)
  parent: System.StringComparer
  langs:
  - csharp
  name: Create(CultureInfo,Boolean)
  nameWithType: StringComparer.Create(CultureInfo,Boolean)
  fullName: System.StringComparer.Create(CultureInfo,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a <xref href="System.StringComparer"></xref> object that compares strings according to the rules of a specified culture.
  remarks: ''
  example:
  - "The following code example demonstrates the properties and the Create method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \n  \n [!code-cs[System.StringComparer#1](~/add/codesnippet/csharp/m-system.stringcomparer._1.cs)]\n [!code-cpp[System.StringComparer#1](~/add/codesnippet/cpp/m-system.stringcomparer._1.cpp)]\n [!code-vb[System.StringComparer#1](~/add/codesnippet/visualbasic/m-system.stringcomparer._1.vb)]"
  syntax:
    content: public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: A culture whose linguistic rules are used to perform a string comparison.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to specify that comparison operations be case-insensitive; `false` to specify that comparison operations be case-sensitive.'
    return:
      type: System.StringComparer
      description: A new <xref href="System.StringComparer"></xref> object that performs string comparisons according to the comparison rules used by the <code>culture</code> parameter and the case rule specified by the <code>ignoreCase</code> parameter.
  overload: System.StringComparer.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>culture</code> is `null`.
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.StringComparer.CurrentCulture
  id: CurrentCulture
  parent: System.StringComparer
  langs:
  - csharp
  name: CurrentCulture
  nameWithType: StringComparer.CurrentCulture
  fullName: System.StringComparer.CurrentCulture
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a <xref href="System.StringComparer"></xref> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.
  remarks: "The<xref:System.StringComparer> returned by the CurrentCulture property can be used when strings are linguistically relevant. For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.  \n  \n The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.  \n  \n The CurrentCulture property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.  \n  \n Each call to the CurrentCulture property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.  \n  \n [!code-vb[System.StringComparer.CurrentCulture#1](~/add/codesnippet/visualbasic/p-system.stringcomparer._3_1.vb)]\n [!code-cs[System.StringComparer.CurrentCulture#1](~/add/codesnippet/csharp/p-system.stringcomparer._3_1.cs)]  \n  \n To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the CurrentCulture property multiple times."
  example:
  - "The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \n  \n [!code-cs[System.StringComparer#1](~/add/codesnippet/csharp/p-system.stringcomparer._3_2.cs)]\n [!code-cpp[System.StringComparer#1](~/add/codesnippet/cpp/p-system.stringcomparer._3_2.cpp)]\n [!code-vb[System.StringComparer#1](~/add/codesnippet/visualbasic/p-system.stringcomparer._3_2.vb)]"
  syntax:
    content: public static StringComparer CurrentCulture { get; }
    return:
      type: System.StringComparer
      description: A new <xref href="System.StringComparer"></xref> object.
  overload: System.StringComparer.CurrentCulture*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.StringComparer.CurrentCultureIgnoreCase
  id: CurrentCultureIgnoreCase
  parent: System.StringComparer
  langs:
  - csharp
  name: CurrentCultureIgnoreCase
  nameWithType: StringComparer.CurrentCultureIgnoreCase
  fullName: System.StringComparer.CurrentCultureIgnoreCase
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a <xref href="System.StringComparer"></xref> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.
  remarks: "The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.  \n  \n The<xref:System.StringComparer> returned by the CurrentCultureIgnoreCase property can be used when strings are linguistically relevant but their case is not. For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.  \n  \n The CurrentCultureIgnoreCase property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.  \n  \n Each call to the CurrentCultureIgnoreCase property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.  \n  \n [!code-vb[System.StringComparer.CurrentCulture#2](~/add/codesnippet/visualbasic/p-system.stringcomparer._2_1.vb)]\n [!code-cs[System.StringComparer.CurrentCulture#2](~/add/codesnippet/csharp/p-system.stringcomparer._2_1.cs)]  \n  \n To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the CurrentCultureIgnoreCase property multiple times."
  syntax:
    content: public static StringComparer CurrentCultureIgnoreCase { get; }
    return:
      type: System.StringComparer
      description: A new <xref href="System.StringComparer"></xref> object.
  overload: System.StringComparer.CurrentCultureIgnoreCase*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.StringComparer.Equals(System.Object,System.Object)
  id: Equals(System.Object,System.Object)
  parent: System.StringComparer
  langs:
  - csharp
  name: Equals(Object,Object)
  nameWithType: StringComparer.Equals(Object,Object)
  fullName: System.StringComparer.Equals(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, indicates whether two objects are equal.
  remarks: Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the Equals method.
  syntax:
    content: public bool Equals (object x, object y);
    parameters:
    - id: x
      type: System.Object
      description: An object to compare to `y`.
    - id: y
      type: System.Object
      description: An object to compare to `x`.
    return:
      type: System.Boolean
      description: '`true` if <code>x</code> and <code>y</code> refer to the same object, or <code>x</code> and <code>y</code> are both the same type of object and those objects are equal, or both <code>x</code> and <code>y</code> are `null`; otherwise, `false`.'
  overload: System.StringComparer.Equals*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.StringComparer.Equals(System.String,System.String)
  id: Equals(System.String,System.String)
  parent: System.StringComparer
  langs:
  - csharp
  name: Equals(String,String)
  nameWithType: StringComparer.Equals(String,String)
  fullName: System.StringComparer.Equals(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, indicates whether two strings are equal.
  remarks: Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the Equals method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.
  syntax:
    content: public abstract bool Equals (string x, string y);
    parameters:
    - id: x
      type: System.String
      description: A string to compare to `y`.
    - id: y
      type: System.String
      description: A string to compare to `x`.
    return:
      type: System.Boolean
      description: '`true` if <code>x</code> and <code>y</code> refer to the same object, or <code>x</code> and <code>y</code> are equal, or <code>x</code> and <code>y</code> are `null`; otherwise, `false`.'
  overload: System.StringComparer.Equals*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.StringComparer.GetHashCode(System.Object)
  id: GetHashCode(System.Object)
  parent: System.StringComparer
  langs:
  - csharp
  name: GetHashCode(Object)
  nameWithType: StringComparer.GetHashCode(Object)
  fullName: System.StringComparer.GetHashCode(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, gets the hash code for the specified object.
  remarks: "The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the GetHashCode method because the `obj` parameter does not have to be unboxed to perform the operation.  \n  \n The GetHashCode method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`. In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>. Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes. To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](../Topic/%3CNetFx45_CultureAwareComparerGetHashCode_LongStrings%3E%20Element.md) element to the [\\<runtime>](../Topic/%3Cruntime%3E%20Element.md) section of your application's configuration file."
  syntax:
    content: public int GetHashCode (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object.
    return:
      type: System.Int32
      description: A 32-bit signed hash code calculated from the value of the <code>obj</code> parameter.
  overload: System.StringComparer.GetHashCode*
  exceptions:
  - type: System.ArgumentException
    commentId: "  \n            T:System.ArgumentException"
    description: Not enough memory is available to allocate the buffer that is required to compute the hash code.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>obj</code> is `null`.
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.StringComparer.GetHashCode(System.String)
  id: GetHashCode(System.String)
  parent: System.StringComparer
  langs:
  - csharp
  name: GetHashCode(String)
  nameWithType: StringComparer.GetHashCode(String)
  fullName: System.StringComparer.GetHashCode(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: When overridden in a derived class, gets the hash code for the specified string.
  remarks: "The GetHashCode method is more efficient than the <xref:System.StringComparer.GetHashCode%28System.Object%29> method because the `obj` parameter does not have to be unboxed to perform the operation.  \n  \n The GetHashCode method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`. In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>. Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes. To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](../Topic/%3CNetFx45_CultureAwareComparerGetHashCode_LongStrings%3E%20Element.md) element to the [\\<runtime>](../Topic/%3Cruntime%3E%20Element.md) section of your application's configuration file."
  syntax:
    content: public abstract int GetHashCode (string obj);
    parameters:
    - id: obj
      type: System.String
      description: A string.
    return:
      type: System.Int32
      description: A 32-bit signed hash code calculated from the value of the <code>obj</code> parameter.
  overload: System.StringComparer.GetHashCode*
  exceptions:
  - type: System.ArgumentException
    commentId: "  \n            T:System.ArgumentException"
    description: Not enough memory is available to allocate the buffer that is required to compute the hash code.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>obj</code> is `null`.
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.StringComparer.InvariantCulture
  id: InvariantCulture
  parent: System.StringComparer
  langs:
  - csharp
  name: InvariantCulture
  nameWithType: StringComparer.InvariantCulture
  fullName: System.StringComparer.InvariantCulture
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a <xref href="System.StringComparer"></xref> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.
  remarks: "The<xref:System.StringComparer> returned by the InvariantCulture property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture. Its major application is to order strings in a way that will be identical across cultures.  \n  \n The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.  \n  \n The InvariantCulture property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class."
  example:
  - "The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \n  \n [!code-cs[System.StringComparer#1](~/add/codesnippet/csharp/p-system.stringcomparer._0_1.cs)]\n [!code-cpp[System.StringComparer#1](~/add/codesnippet/cpp/p-system.stringcomparer._0_1.cpp)]\n [!code-vb[System.StringComparer#1](~/add/codesnippet/visualbasic/p-system.stringcomparer._0_1.vb)]"
  syntax:
    content: public static StringComparer InvariantCulture { get; }
    return:
      type: System.StringComparer
      description: A new <xref href="System.StringComparer"></xref> object.
  overload: System.StringComparer.InvariantCulture*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.StringComparer.InvariantCultureIgnoreCase
  id: InvariantCultureIgnoreCase
  parent: System.StringComparer
  langs:
  - csharp
  name: InvariantCultureIgnoreCase
  nameWithType: StringComparer.InvariantCultureIgnoreCase
  fullName: System.StringComparer.InvariantCultureIgnoreCase
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a <xref href="System.StringComparer"></xref> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.
  remarks: "The<xref:System.StringComparer> returned by the InvariantCultureIgnoreCase property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture. Its major application is to order strings in a way that will be identical across cultures.  \n  \n The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.  \n  \n The InvariantCultureIgnoreCase property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class."
  syntax:
    content: public static StringComparer InvariantCultureIgnoreCase { get; }
    return:
      type: System.StringComparer
      description: A new <xref href="System.StringComparer"></xref> object.
  overload: System.StringComparer.InvariantCultureIgnoreCase*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.StringComparer.Ordinal
  id: Ordinal
  parent: System.StringComparer
  langs:
  - csharp
  name: Ordinal
  nameWithType: StringComparer.Ordinal
  fullName: System.StringComparer.Ordinal
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a <xref href="System.StringComparer"></xref> object that performs a case-sensitive ordinal string comparison.
  remarks: "The <xref:System.StringComparer> returned by the Ordinal property performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.  \n  \n The Ordinal property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class."
  example:
  - "The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \n  \n [!code-cs[System.StringComparer#1](~/add/codesnippet/csharp/p-system.stringcomparer._4_1.cs)]\n [!code-cpp[System.StringComparer#1](~/add/codesnippet/cpp/p-system.stringcomparer._4_1.cpp)]\n [!code-vb[System.StringComparer#1](~/add/codesnippet/visualbasic/p-system.stringcomparer._4_1.vb)]"
  syntax:
    content: public static StringComparer Ordinal { get; }
    return:
      type: System.StringComparer
      description: A <xref href="System.StringComparer"></xref> object.
  overload: System.StringComparer.Ordinal*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.StringComparer.OrdinalIgnoreCase
  id: OrdinalIgnoreCase
  parent: System.StringComparer
  langs:
  - csharp
  name: OrdinalIgnoreCase
  nameWithType: StringComparer.OrdinalIgnoreCase
  fullName: System.StringComparer.OrdinalIgnoreCase
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a <xref href="System.StringComparer"></xref> object that performs a case-insensitive ordinal string comparison.
  remarks: "The<xref:System.StringComparer> returned by the OrdinalIgnoreCase property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language. This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.  \n  \n The OrdinalIgnoreCase property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class."
  example:
  - "The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class. The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.  \n  \n [!code-cs[System.StringComparer#1](~/add/codesnippet/csharp/p-system.stringcomparer._1_1.cs)]\n [!code-cpp[System.StringComparer#1](~/add/codesnippet/cpp/p-system.stringcomparer._1_1.cpp)]\n [!code-vb[System.StringComparer#1](~/add/codesnippet/visualbasic/p-system.stringcomparer._1_1.vb)]"
  syntax:
    content: public static StringComparer OrdinalIgnoreCase { get; }
    return:
      type: System.StringComparer
      description: A <xref href="System.StringComparer"></xref> object.
  overload: System.StringComparer.OrdinalIgnoreCase*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.StringComparer.#ctor
  parent: System.StringComparer
  isExternal: false
  name: StringComparer()
  nameWithType: StringComparer.StringComparer()
  fullName: System.StringComparer.StringComparer()
- uid: System.StringComparer.Compare(System.Object,System.Object)
  parent: System.StringComparer
  isExternal: false
  name: Compare(Object,Object)
  nameWithType: StringComparer.Compare(Object,Object)
  fullName: System.StringComparer.Compare(Object,Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.StringComparer.Compare(System.String,System.String)
  parent: System.StringComparer
  isExternal: false
  name: Compare(String,String)
  nameWithType: StringComparer.Compare(String,String)
  fullName: System.StringComparer.Compare(String,String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)
  parent: System.StringComparer
  isExternal: false
  name: Create(CultureInfo,Boolean)
  nameWithType: StringComparer.Create(CultureInfo,Boolean)
  fullName: System.StringComparer.Create(CultureInfo,Boolean)
- uid: System.StringComparer
  parent: System
  isExternal: false
  name: StringComparer
  nameWithType: StringComparer
  fullName: System.StringComparer
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.StringComparer.CurrentCulture
  parent: System.StringComparer
  isExternal: false
  name: CurrentCulture
  nameWithType: StringComparer.CurrentCulture
  fullName: System.StringComparer.CurrentCulture
- uid: System.StringComparer.CurrentCultureIgnoreCase
  parent: System.StringComparer
  isExternal: false
  name: CurrentCultureIgnoreCase
  nameWithType: StringComparer.CurrentCultureIgnoreCase
  fullName: System.StringComparer.CurrentCultureIgnoreCase
- uid: System.StringComparer.Equals(System.Object,System.Object)
  parent: System.StringComparer
  isExternal: false
  name: Equals(Object,Object)
  nameWithType: StringComparer.Equals(Object,Object)
  fullName: System.StringComparer.Equals(Object,Object)
- uid: System.StringComparer.Equals(System.String,System.String)
  parent: System.StringComparer
  isExternal: false
  name: Equals(String,String)
  nameWithType: StringComparer.Equals(String,String)
  fullName: System.StringComparer.Equals(String,String)
- uid: System.StringComparer.GetHashCode(System.Object)
  parent: System.StringComparer
  isExternal: false
  name: GetHashCode(Object)
  nameWithType: StringComparer.GetHashCode(Object)
  fullName: System.StringComparer.GetHashCode(Object)
- uid: System.StringComparer.GetHashCode(System.String)
  parent: System.StringComparer
  isExternal: false
  name: GetHashCode(String)
  nameWithType: StringComparer.GetHashCode(String)
  fullName: System.StringComparer.GetHashCode(String)
- uid: System.StringComparer.InvariantCulture
  parent: System.StringComparer
  isExternal: false
  name: InvariantCulture
  nameWithType: StringComparer.InvariantCulture
  fullName: System.StringComparer.InvariantCulture
- uid: System.StringComparer.InvariantCultureIgnoreCase
  parent: System.StringComparer
  isExternal: false
  name: InvariantCultureIgnoreCase
  nameWithType: StringComparer.InvariantCultureIgnoreCase
  fullName: System.StringComparer.InvariantCultureIgnoreCase
- uid: System.StringComparer.Ordinal
  parent: System.StringComparer
  isExternal: false
  name: Ordinal
  nameWithType: StringComparer.Ordinal
  fullName: System.StringComparer.Ordinal
- uid: System.StringComparer.OrdinalIgnoreCase
  parent: System.StringComparer
  isExternal: false
  name: OrdinalIgnoreCase
  nameWithType: StringComparer.OrdinalIgnoreCase
  fullName: System.StringComparer.OrdinalIgnoreCase
- uid: System.StringComparer.#ctor*
  parent: System.StringComparer
  isExternal: false
  name: StringComparer
  nameWithType: StringComparer.StringComparer
- uid: System.StringComparer.Compare*
  parent: System.StringComparer
  isExternal: false
  name: Compare
  nameWithType: StringComparer.Compare
- uid: System.StringComparer.Create*
  parent: System.StringComparer
  isExternal: false
  name: Create
  nameWithType: StringComparer.Create
- uid: System.StringComparer.CurrentCulture*
  parent: System.StringComparer
  isExternal: false
  name: CurrentCulture
  nameWithType: StringComparer.CurrentCulture
- uid: System.StringComparer.CurrentCultureIgnoreCase*
  parent: System.StringComparer
  isExternal: false
  name: CurrentCultureIgnoreCase
  nameWithType: StringComparer.CurrentCultureIgnoreCase
- uid: System.StringComparer.Equals*
  parent: System.StringComparer
  isExternal: false
  name: Equals
  nameWithType: StringComparer.Equals
- uid: System.StringComparer.GetHashCode*
  parent: System.StringComparer
  isExternal: false
  name: GetHashCode
  nameWithType: StringComparer.GetHashCode
- uid: System.StringComparer.InvariantCulture*
  parent: System.StringComparer
  isExternal: false
  name: InvariantCulture
  nameWithType: StringComparer.InvariantCulture
- uid: System.StringComparer.InvariantCultureIgnoreCase*
  parent: System.StringComparer
  isExternal: false
  name: InvariantCultureIgnoreCase
  nameWithType: StringComparer.InvariantCultureIgnoreCase
- uid: System.StringComparer.Ordinal*
  parent: System.StringComparer
  isExternal: false
  name: Ordinal
  nameWithType: StringComparer.Ordinal
- uid: System.StringComparer.OrdinalIgnoreCase*
  parent: System.StringComparer
  isExternal: false
  name: OrdinalIgnoreCase
  nameWithType: StringComparer.OrdinalIgnoreCase
