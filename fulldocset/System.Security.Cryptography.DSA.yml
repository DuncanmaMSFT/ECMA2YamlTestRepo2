### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DSA
  id: DSA
  children:
  - System.Security.Cryptography.DSA.#ctor
  - System.Security.Cryptography.DSA.Create
  - System.Security.Cryptography.DSA.Create(System.String)
  - System.Security.Cryptography.DSA.CreateSignature(System.Byte[])
  - System.Security.Cryptography.DSA.ExportParameters(System.Boolean)
  - System.Security.Cryptography.DSA.FromXmlString(System.String)
  - System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)
  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  - System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: DSA
  nameWithType: DSA
  fullName: System.Security.Cryptography.DSA
  type: Class
  summary: Represents the abstract base class from which all implementations of the Digital Signature Algorithm (DSA) must inherit.
  remarks: "You can use the DSA class and derived classes to create digital signatures that help protect the integrity of your data.  The <xref:System.Security.Cryptography.DSACryptoServiceProvider> provides an implementation of this class.  \n  \n To use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender's private key to create the sender's personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender's public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes exactly matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit. Note that a signature can be verified by anyone, because the sender's public key is common knowledge.  \n  \n Newer asymmetric algorithms are available. Consider using the <xref:System.Security.Cryptography.RSA> class, the <xref:System.Security.Cryptography.ECDsa> class, or the <xref:System.Security.Cryptography.ECDiffieHellman> class instead of the DSA class. Use DSA only for compatibility with legacy applications and data.  \n  \n This algorithm supports key lengths from 512 bits to 1024 bits in increments of 64 bits."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class DSA : System.Security.Cryptography.AsymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Security.Cryptography.DSA.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: DSA()
  nameWithType: DSA.DSA()
  fullName: System.Security.Cryptography.DSA.DSA()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.DSA"></xref> class.
  syntax:
    content: protected DSA ();
    parameters: []
  overload: System.Security.Cryptography.DSA.#ctor*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Security.Cryptography.DSA.Create
  id: Create
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: Create()
  nameWithType: DSA.Create()
  fullName: System.Security.Cryptography.DSA.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Creates the default cryptographic object used to perform the asymmetric algorithm.
  syntax:
    content: public static System.Security.Cryptography.DSA Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.DSA
      description: A cryptographic object used to perform the asymmetric algorithm.
  overload: System.Security.Cryptography.DSA.Create*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Security.Cryptography.DSA.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: Create(String)
  nameWithType: DSA.Create(String)
  fullName: System.Security.Cryptography.DSA.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Creates the specified cryptographic object used to perform the asymmetric algorithm.
  remarks: For <xref:System.Security.Cryptography.DSA>, use the name System.Security.Cryptography.DSA.
  syntax:
    content: public static System.Security.Cryptography.DSA Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: The name of the specific implementation of <xref href="System.Security.Cryptography.DSA"></xref> to use.
    return:
      type: System.Security.Cryptography.DSA
      description: A cryptographic object used to perform the asymmetric algorithm.
  overload: System.Security.Cryptography.DSA.Create*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Security.Cryptography.DSA.CreateSignature(System.Byte[])
  id: CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: CreateSignature(Byte[])
  nameWithType: DSA.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSA.CreateSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, creates the <xref href="System.Security.Cryptography.DSA"></xref> signature for the specified data.
  syntax:
    content: public abstract byte[] CreateSignature (byte[] rgbHash);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: The data to be signed.
    return:
      type: System.Byte[]
      description: The digital signature for the specified data.
  overload: System.Security.Cryptography.DSA.CreateSignature*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Security.Cryptography.DSA.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: ExportParameters(Boolean)
  nameWithType: DSA.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSA.ExportParameters(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, exports the <xref href="System.Security.Cryptography.DSAParameters"></xref>.
  syntax:
    content: public abstract System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: '`true` to include private parameters; otherwise, `false`.'
    return:
      type: System.Security.Cryptography.DSAParameters
      description: The parameters for <xref href="System.Security.Cryptography.DSA"></xref>.
  overload: System.Security.Cryptography.DSA.ExportParameters*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Security.Cryptography.DSA.FromXmlString(System.String)
  id: FromXmlString(System.String)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: FromXmlString(String)
  nameWithType: DSA.FromXmlString(String)
  fullName: System.Security.Cryptography.DSA.FromXmlString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Reconstructs a <xref href="System.Security.Cryptography.DSA"></xref> object from an XML string.
  syntax:
    content: public override void FromXmlString (string xmlString);
    parameters:
    - id: xmlString
      type: System.String
      description: The XML string to use to reconstruct the <xref href="System.Security.Cryptography.DSA"></xref> object.
  overload: System.Security.Cryptography.DSA.FromXmlString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>xmlString</code> parameter is `null`.
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: The format of the <code>xmlString</code> parameter is not valid.
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)
  id: ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: ImportParameters(DSAParameters)
  nameWithType: DSA.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSA.ImportParameters(DSAParameters)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, imports the specified <xref href="System.Security.Cryptography.DSAParameters"></xref>.
  syntax:
    content: public abstract void ImportParameters (System.Security.Cryptography.DSAParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.DSAParameters
      description: The parameters for <xref href="System.Security.Cryptography.DSA"></xref>.
  overload: System.Security.Cryptography.DSA.ImportParameters*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  id: ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: ToXmlString(Boolean)
  nameWithType: DSA.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.DSA.ToXmlString(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: Creates and returns an XML string representation of the current <xref href="System.Security.Cryptography.DSA"></xref> object.
  syntax:
    content: public override string ToXmlString (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: '`true` to include private parameters; otherwise, `false`.'
    return:
      type: System.String
      description: An XML string encoding of the current <xref href="System.Security.Cryptography.DSA"></xref> object.
  overload: System.Security.Cryptography.DSA.ToXmlString*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])
  id: VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSA.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSA.VerifySignature(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, verifies the <xref href="System.Security.Cryptography.DSA"></xref> signature for the specified data.
  syntax:
    content: public abstract bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: The hash of the data signed with `rgbSignature`.
    - id: rgbSignature
      type: System.Byte[]
      description: The signature to be verified for `rgbData`.
    return:
      type: System.Boolean
      description: '`true` if <code>rgbSignature</code> matches the signature computed using the specified hash algorithm and key on <code>rgbHash</code>; otherwise, `false`.'
  overload: System.Security.Cryptography.DSA.VerifySignature*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
references:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.DSA.#ctor
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: DSA()
  nameWithType: DSA.DSA()
  fullName: System.Security.Cryptography.DSA.DSA()
- uid: System.Security.Cryptography.DSA.Create
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create()
  nameWithType: DSA.Create()
  fullName: System.Security.Cryptography.DSA.Create()
- uid: System.Security.Cryptography.DSA
  parent: System.Security.Cryptography
  isExternal: false
  name: DSA
  nameWithType: DSA
  fullName: System.Security.Cryptography.DSA
- uid: System.Security.Cryptography.DSA.Create(System.String)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create(String)
  nameWithType: DSA.Create(String)
  fullName: System.Security.Cryptography.DSA.Create(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.DSA.CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: CreateSignature(Byte[])
  nameWithType: DSA.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSA.CreateSignature(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DSA.ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ExportParameters(Boolean)
  nameWithType: DSA.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSA.ExportParameters(Boolean)
- uid: System.Security.Cryptography.DSAParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: DSAParameters
  nameWithType: DSAParameters
  fullName: System.Security.Cryptography.DSAParameters
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.DSA.FromXmlString(System.String)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: FromXmlString(String)
  nameWithType: DSA.FromXmlString(String)
  fullName: System.Security.Cryptography.DSA.FromXmlString(String)
- uid: System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ImportParameters(DSAParameters)
  nameWithType: DSA.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSA.ImportParameters(DSAParameters)
- uid: System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: DSA.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.DSA.ToXmlString(Boolean)
- uid: System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSA.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSA.VerifySignature(Byte[],Byte[])
- uid: System.Security.Cryptography.DSA.#ctor*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: DSA
  nameWithType: DSA.DSA
- uid: System.Security.Cryptography.DSA.Create*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create
  nameWithType: DSA.Create
- uid: System.Security.Cryptography.DSA.CreateSignature*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: CreateSignature
  nameWithType: DSA.CreateSignature
- uid: System.Security.Cryptography.DSA.ExportParameters*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ExportParameters
  nameWithType: DSA.ExportParameters
- uid: System.Security.Cryptography.DSA.FromXmlString*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: FromXmlString
  nameWithType: DSA.FromXmlString
- uid: System.Security.Cryptography.DSA.ImportParameters*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ImportParameters
  nameWithType: DSA.ImportParameters
- uid: System.Security.Cryptography.DSA.ToXmlString*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ToXmlString
  nameWithType: DSA.ToXmlString
- uid: System.Security.Cryptography.DSA.VerifySignature*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifySignature
  nameWithType: DSA.VerifySignature
