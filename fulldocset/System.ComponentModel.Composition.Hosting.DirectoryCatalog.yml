### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  id: DirectoryCatalog
  children:
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String)
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String)
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changed
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changing
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose(System.Boolean)
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.FullPath
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.LoadedFiles
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.Parts
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.Path
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.Refresh
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.SearchPattern
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin
  - System.ComponentModel.Composition.Hosting.DirectoryCatalog.ToString
  langs:
  - csharp
  name: DirectoryCatalog
  nameWithType: DirectoryCatalog
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  type: Class
  summary: Discovers attributed parts in the assemblies in a specified directory.
  remarks: "You can use a DirectoryCatalog object to parse the contents of a designated directory. Any attributed parts contained in dynamic link library (DLL) files are extracted and made available through the catalog.To restrict parsing to specific DLLs, you can specify a search pattern by using the same syntax as the <xref:System.IO.Directory.GetFiles%2A?displayProperty=fullName> method.  \n  \n> [!WARNING]\n>  The designated directory should not allow access to non-administrators. For example, using a folder that contains temporary Internet files could create vulnerabilities in your application.  \n  \n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic."
  example:
  - "The following example creates a DirectoryCatalog object that searches the directory the application runs from for parts. It uses a simple import to test the catalog. To fulfill this import, a DLL in the directory must have a matching export, as illustrated in the second code block.  \n  \n [!code-cs[Composition.DirectoryCatalog#1](~/add/codesnippet/csharp/consoleapplication7/program.cs#1)]\n [!code-vb[Composition.DirectoryCatalog#1](~/add/codesnippet/visualbasic/consoleapplication8/module1.vb#1)]  \n  \n To create the matching export, the following code must be in a DLL file. To create a DLL file in Visual Studio, add a new project of the type \"Class Library\" to your solution, and place this code in it.  \n  \n [!code-cs[Composition.DirectoryCatalog#2](~/add/codesnippet/csharp/classlibrary1/class1.cs#2)]\n [!code-vb[Composition.DirectoryCatalog#2](~/add/codesnippet/visualbasic/classlibrary1/class1.vb#2)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerTypeProxy(typeof(System.ComponentModel.Composition.Hosting.DirectoryCatalog/DirectoryCatalogDebuggerProxy))]

      public class DirectoryCatalog : System.ComponentModel.Composition.Primitives.ComposablePartCatalog, System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged, System.ComponentModel.Composition.Primitives.ICompositionElement
  inheritance:
  - System.Object
  - System.ComponentModel.Composition.Primitives.ComposablePartCatalog
  implements:
  - System.ComponentModel.Composition.Hosting.INotifyComposablePartCatalogChanged
  - System.ComponentModel.Composition.Primitives.ICompositionElement
  inheritedMembers:
  - System.ComponentModel.Composition.Primitives.ComposablePartCatalog.Dispose
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: DirectoryCatalog(String)
  nameWithType: DirectoryCatalog.DirectoryCatalog(String)
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.DirectoryCatalog(String)
  type: Constructor
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Initializes a new instance of the <xref href="System.ComponentModel.Composition.Hosting.DirectoryCatalog"></xref> class by using <xref href="System.ComponentModel.Composition.Primitives.ComposablePartDefinition"></xref> objects based on all the DLL files in the specified directory path.
  syntax:
    content: public DirectoryCatalog (string path);
    parameters:
    - id: path
      type: System.String
      description: "The path to the directory to scan for assemblies to add to the catalog.  \n  \n The path must be absolute or relative to <xref:System.AppDomain.BaseDirectory*>."
  overload: System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: The specified <code>path</code> is invalid (for example, it is on an unmapped drive).
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>path</code> is `null`.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: The caller does not have the required permission.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>path</code> is a zero-length string, contains only white space, or contains one or more implementation-specific invalid characters.
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: The specified <code>path</code>, file name, or both exceed the system-defined maximum length. For example, on Windows-based computers, paths must be less than 248 characters and file names must be less than 260 characters.
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: DirectoryCatalog(String,String)
  nameWithType: DirectoryCatalog.DirectoryCatalog(String,String)
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.DirectoryCatalog(String,String)
  type: Constructor
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Initializes a new instance of the <xref href="System.ComponentModel.Composition.Hosting.DirectoryCatalog"></xref> class by using <xref href="System.ComponentModel.Composition.Primitives.ComposablePartDefinition"></xref> objects that match a specified search pattern in the specified directory path.
  syntax:
    content: public DirectoryCatalog (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "The path to the directory to scan for assemblies to add to the catalog.  \n  \n The path must be absolute or relative to <xref:System.AppDomain.BaseDirectory*>."
    - id: searchPattern
      type: System.String
      description: The search string. The format of the string should be the same as specified for the <xref:System.IO.Directory.GetFiles*> method.
  overload: System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor*
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: The specified <code>path</code> is invalid (for example, it is on an unmapped drive).
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>path</code> or <code>searchPattern</code> is `null`.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: The caller does not have the required permission.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code> is a zero-length string, contains only white space, or contains one or more implementation-specific invalid characters.  \n  \n -or-  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: The specified <code>path</code>, file name, or both exceed the system-defined maximum length. For example, on Windows-based computers, paths must be less than 248 characters and file names must be less than 260 characters.
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changed
  id: Changed
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: Changed
  nameWithType: DirectoryCatalog.Changed
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changed
  type: Event
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Occurs when the contents of the catalog has changed.
  syntax:
    content: public event EventHandler<System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs> Changed;
    return:
      type: System.EventHandler{System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs}
      description: To be added.
  exceptions: []
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changing
  id: Changing
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: Changing
  nameWithType: DirectoryCatalog.Changing
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changing
  type: Event
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Occurs when the catalog is changing.
  syntax:
    content: public event EventHandler<System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs> Changing;
    return:
      type: System.EventHandler{System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs}
      description: To be added.
  exceptions: []
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DirectoryCatalog.Dispose(Boolean)
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose(Boolean)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Releases the unmanaged resources used by the <xref href="System.ComponentModel.Composition.Hosting.DirectoryCatalog"></xref> and optionally releases the managed resources.
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'
  overload: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose*
  exceptions: []
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.FullPath
  id: FullPath
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: FullPath
  nameWithType: DirectoryCatalog.FullPath
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.FullPath
  type: Property
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Gets the translated absolute path observed by the <xref href="System.ComponentModel.Composition.Hosting.DirectoryCatalog"></xref> object.
  syntax:
    content: public string FullPath { get; }
    return:
      type: System.String
      description: The translated absolute path observed by the catalog.
  overload: System.ComponentModel.Composition.Hosting.DirectoryCatalog.FullPath*
  exceptions: []
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)
  id: GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: GetExports(ImportDefinition)
  nameWithType: DirectoryCatalog.GetExports(ImportDefinition)
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetExports(ImportDefinition)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Gets the export definitions that match the constraint expressed by the specified import definition.
  syntax:
    content: public override System.Collections.Generic.IEnumerable<Tuple<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition>> GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition);
    parameters:
    - id: definition
      type: System.ComponentModel.Composition.Primitives.ImportDefinition
      description: The conditions of the <xref href="System.ComponentModel.Composition.Primitives.ExportDefinition"></xref> objects to be returned.
    return:
      type: System.Collections.Generic.IEnumerable{System.Tuple{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition}}
      description: A collection of objects that contain the <xref href="System.ComponentModel.Composition.Primitives.ExportDefinition"></xref> objects and their associated <xref href="System.ComponentModel.Composition.Primitives.ComposablePartDefinition"></xref> objects that match the constraint specified by <code>definition</code>.
  overload: System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetExports*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.ComponentModel.Composition.Hosting.DirectoryCatalog"></xref> object has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>definition</code> is `null`.
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.LoadedFiles
  id: LoadedFiles
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: LoadedFiles
  nameWithType: DirectoryCatalog.LoadedFiles
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.LoadedFiles
  type: Property
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Gets the collection of files currently loaded in the catalog.
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<string> LoadedFiles { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
      description: A collection of files currently loaded in the catalog.
  overload: System.ComponentModel.Composition.Hosting.DirectoryCatalog.LoadedFiles*
  exceptions: []
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  id: OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: OnChanged(ComposablePartCatalogChangeEventArgs)
  nameWithType: DirectoryCatalog.OnChanged(ComposablePartCatalogChangeEventArgs)
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanged(ComposablePartCatalogChangeEventArgs)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Raises the <xref href="System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changed"></xref> event.
  syntax:
    content: protected virtual void OnChanged (System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs
      description: An object  that contains the event data.
  overload: System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanged*
  exceptions: []
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  id: OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: OnChanging(ComposablePartCatalogChangeEventArgs)
  nameWithType: DirectoryCatalog.OnChanging(ComposablePartCatalogChangeEventArgs)
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanging(ComposablePartCatalogChangeEventArgs)
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Raises the <xref href="System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changing"></xref> event.
  syntax:
    content: protected virtual void OnChanging (System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs
      description: An object  that contains the event data.
  overload: System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanging*
  exceptions: []
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Parts
  id: Parts
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: Parts
  nameWithType: DirectoryCatalog.Parts
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Parts
  type: Property
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  syntax:
    content: public override System.Linq.IQueryable<System.ComponentModel.Composition.Primitives.ComposablePartDefinition> Parts { get; }
    return:
      type: System.Linq.IQueryable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition}
      description: To be added.
  overload: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Parts*
  exceptions: []
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Path
  id: Path
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: Path
  nameWithType: DirectoryCatalog.Path
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Path
  type: Property
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Gets the path observed by the <xref href="System.ComponentModel.Composition.Hosting.DirectoryCatalog"></xref> object.
  syntax:
    content: public string Path { get; }
    return:
      type: System.String
      description: The path observed by the catalog.
  overload: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Path*
  exceptions: []
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Refresh
  id: Refresh
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: Refresh()
  nameWithType: DirectoryCatalog.Refresh()
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Refresh()
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Refreshes the <xref href="System.ComponentModel.Composition.Primitives.ComposablePartDefinition"></xref> objects with the latest files in the directory that match the search pattern.
  remarks: If files were added to the directory, they are also added to the catalog. If files were removed from the directory, they are also removed from the catalog. For files that have been removed, the assembly cannot be unloaded from the process, so <xref:System.ComponentModel.Composition.Primitives.ComposablePartDefinition> objects for those files will be removed only from the catalog.
  syntax:
    content: public void Refresh ();
    parameters: []
  overload: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Refresh*
  exceptions: []
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.SearchPattern
  id: SearchPattern
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: SearchPattern
  nameWithType: DirectoryCatalog.SearchPattern
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.SearchPattern
  type: Property
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Gets the search pattern that is passed into the constructor of the <xref href="System.ComponentModel.Composition.Hosting.DirectoryCatalog"></xref> object.
  syntax:
    content: public string SearchPattern { get; }
    return:
      type: System.String
      description: The search pattern the catalog uses to find files. The default is *.dll, which returns all DLL files.
  overload: System.ComponentModel.Composition.Hosting.DirectoryCatalog.SearchPattern*
  exceptions: []
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName
  id: System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName
  isEii: true
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: ICompositionElement.DisplayName
  nameWithType: DirectoryCatalog.ICompositionElement.DisplayName
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.ICompositionElement.DisplayName
  type: Property
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Gets the display name of the directory catalog.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.ComponentModel.Composition.Hosting.DirectoryCatalog> instance is cast to an <xref:System.ComponentModel.Composition.Primitives.ICompositionElement> interface.
  syntax:
    content: string System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName { get; }
    return:
      type: System.String
      description: A string that contains a human-readable display name of the directory catalog.
  overload: System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName*
  exceptions: []
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin
  id: System#ComponentModel#Composition#Primitives#ICompositionElement#Origin
  isEii: true
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: ICompositionElement.Origin
  nameWithType: DirectoryCatalog.ICompositionElement.Origin
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.ICompositionElement.Origin
  type: Property
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Gets the composition element from which the directory catalog originated.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.ComponentModel.Composition.Hosting.DirectoryCatalog> instance is cast to an <xref:System.ComponentModel.Composition.Primitives.ICompositionElement> interface.
  syntax:
    content: System.ComponentModel.Composition.Primitives.ICompositionElement System.ComponentModel.Composition.Primitives.ICompositionElement.Origin { get; }
    return:
      type: System.ComponentModel.Composition.Primitives.ICompositionElement
      description: Always `null`.
  overload: System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin*
  exceptions: []
  version:
  - netframework-40
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.ToString
  id: ToString
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  langs:
  - csharp
  name: ToString()
  nameWithType: DirectoryCatalog.ToString()
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.ToString()
  type: Method
  assemblies:
  - System.ComponentModel.Composition
  namespace: System.ComponentModel.Composition.Hosting
  summary: Gets a string representation of the directory catalog.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string representation of the catalog.
  overload: System.ComponentModel.Composition.Hosting.DirectoryCatalog.ToString*
  exceptions: []
  version:
  - netframework-40
references:
- uid: System.ComponentModel.Composition.Primitives.ComposablePartCatalog
  isExternal: false
  name: System.ComponentModel.Composition.Primitives.ComposablePartCatalog
- uid: System.IO.DirectoryNotFoundException
  parent: System.IO
  isExternal: false
  name: DirectoryNotFoundException
  nameWithType: DirectoryNotFoundException
  fullName: System.IO.DirectoryNotFoundException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  nameWithType: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.IO.PathTooLongException
  parent: System.IO
  isExternal: false
  name: PathTooLongException
  nameWithType: PathTooLongException
  fullName: System.IO.PathTooLongException
- uid: System.ObjectDisposedException
  parent: System
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String)
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: DirectoryCatalog(String)
  nameWithType: DirectoryCatalog.DirectoryCatalog(String)
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.DirectoryCatalog(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor(System.String,System.String)
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: DirectoryCatalog(String,String)
  nameWithType: DirectoryCatalog.DirectoryCatalog(String,String)
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.DirectoryCatalog(String,String)
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changed
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: Changed
  nameWithType: DirectoryCatalog.Changed
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changed
- uid: System.EventHandler{System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs}
  parent: System
  isExternal: false
  name: EventHandler<ComposablePartCatalogChangeEventArgs>
  nameWithType: EventHandler<ComposablePartCatalogChangeEventArgs>
  fullName: System.EventHandler<System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs
    name: ComposablePartCatalogChangeEventArgs
    nameWithType: ComposablePartCatalogChangeEventArgs
    fullName: ComposablePartCatalogChangeEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changing
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: Changing
  nameWithType: DirectoryCatalog.Changing
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Changing
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose(System.Boolean)
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DirectoryCatalog.Dispose(Boolean)
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.FullPath
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: FullPath
  nameWithType: DirectoryCatalog.FullPath
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.FullPath
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: GetExports(ImportDefinition)
  nameWithType: DirectoryCatalog.GetExports(ImportDefinition)
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetExports(ImportDefinition)
- uid: System.Collections.Generic.IEnumerable{System.Tuple{System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Tuple<ComposablePartDefinition,ExportDefinition>>
  nameWithType: IEnumerable<Tuple<ComposablePartDefinition,ExportDefinition>>
  fullName: System.Collections.Generic.IEnumerable<System.Tuple<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Tuple<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple<System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.ComponentModel.Composition.Primitives.ExportDefinition>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.Composition.Primitives.ComposablePartDefinition
    name: ComposablePartDefinition
    nameWithType: ComposablePartDefinition
    fullName: ComposablePartDefinition
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.ComponentModel.Composition.Primitives.ExportDefinition
    name: ExportDefinition
    nameWithType: ExportDefinition
    fullName: ExportDefinition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Primitives.ImportDefinition
  parent: System.ComponentModel.Composition.Primitives
  isExternal: false
  name: ImportDefinition
  nameWithType: ImportDefinition
  fullName: System.ComponentModel.Composition.Primitives.ImportDefinition
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.LoadedFiles
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: LoadedFiles
  nameWithType: DirectoryCatalog.LoadedFiles
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.LoadedFiles
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.String}
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<String>
  nameWithType: ReadOnlyCollection<String>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.String>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanged(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: OnChanged(ComposablePartCatalogChangeEventArgs)
  nameWithType: DirectoryCatalog.OnChanged(ComposablePartCatalogChangeEventArgs)
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanged(ComposablePartCatalogChangeEventArgs)
- uid: System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs
  parent: System.ComponentModel.Composition.Hosting
  isExternal: false
  name: ComposablePartCatalogChangeEventArgs
  nameWithType: ComposablePartCatalogChangeEventArgs
  fullName: System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanging(System.ComponentModel.Composition.Hosting.ComposablePartCatalogChangeEventArgs)
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: OnChanging(ComposablePartCatalogChangeEventArgs)
  nameWithType: DirectoryCatalog.OnChanging(ComposablePartCatalogChangeEventArgs)
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanging(ComposablePartCatalogChangeEventArgs)
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Parts
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: Parts
  nameWithType: DirectoryCatalog.Parts
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Parts
- uid: System.Linq.IQueryable{System.ComponentModel.Composition.Primitives.ComposablePartDefinition}
  parent: System.Linq
  isExternal: true
  name: IQueryable<ComposablePartDefinition>
  nameWithType: IQueryable<ComposablePartDefinition>
  fullName: System.Linq.IQueryable<System.ComponentModel.Composition.Primitives.ComposablePartDefinition>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<System.ComponentModel.Composition.Primitives.ComposablePartDefinition>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.Composition.Primitives.ComposablePartDefinition
    name: ComposablePartDefinition
    nameWithType: ComposablePartDefinition
    fullName: ComposablePartDefinition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Path
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: Path
  nameWithType: DirectoryCatalog.Path
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Path
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Refresh
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: Refresh()
  nameWithType: DirectoryCatalog.Refresh()
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Refresh()
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.SearchPattern
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: SearchPattern
  nameWithType: DirectoryCatalog.SearchPattern
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.SearchPattern
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: ICompositionElement.DisplayName
  nameWithType: DirectoryCatalog.ICompositionElement.DisplayName
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.ICompositionElement.DisplayName
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: ICompositionElement.Origin
  nameWithType: DirectoryCatalog.ICompositionElement.Origin
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.ICompositionElement.Origin
- uid: System.ComponentModel.Composition.Primitives.ICompositionElement
  parent: System.ComponentModel.Composition.Primitives
  isExternal: false
  name: ICompositionElement
  nameWithType: ICompositionElement
  fullName: System.ComponentModel.Composition.Primitives.ICompositionElement
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.ToString
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: ToString()
  nameWithType: DirectoryCatalog.ToString()
  fullName: System.ComponentModel.Composition.Hosting.DirectoryCatalog.ToString()
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.#ctor*
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: DirectoryCatalog
  nameWithType: DirectoryCatalog.DirectoryCatalog
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Dispose*
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: Dispose
  nameWithType: DirectoryCatalog.Dispose
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.FullPath*
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: FullPath
  nameWithType: DirectoryCatalog.FullPath
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.GetExports*
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: GetExports
  nameWithType: DirectoryCatalog.GetExports
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.LoadedFiles*
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: LoadedFiles
  nameWithType: DirectoryCatalog.LoadedFiles
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanged*
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: OnChanged
  nameWithType: DirectoryCatalog.OnChanged
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.OnChanging*
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: OnChanging
  nameWithType: DirectoryCatalog.OnChanging
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Parts*
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: Parts
  nameWithType: DirectoryCatalog.Parts
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Path*
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: Path
  nameWithType: DirectoryCatalog.Path
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.Refresh*
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: Refresh
  nameWithType: DirectoryCatalog.Refresh
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.SearchPattern*
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: SearchPattern
  nameWithType: DirectoryCatalog.SearchPattern
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#DisplayName*
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName
  nameWithType: DirectoryCatalog.System.ComponentModel.Composition.Primitives.ICompositionElement.DisplayName
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.System#ComponentModel#Composition#Primitives#ICompositionElement#Origin*
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: System.ComponentModel.Composition.Primitives.ICompositionElement.Origin
  nameWithType: DirectoryCatalog.System.ComponentModel.Composition.Primitives.ICompositionElement.Origin
- uid: System.ComponentModel.Composition.Hosting.DirectoryCatalog.ToString*
  parent: System.ComponentModel.Composition.Hosting.DirectoryCatalog
  isExternal: false
  name: ToString
  nameWithType: DirectoryCatalog.ToString
