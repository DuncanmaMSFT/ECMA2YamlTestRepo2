### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.LinkedList`1
  id: LinkedList`1
  children:
  - System.Collections.Generic.LinkedList`1.#ctor
  - System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  - System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)
  - System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  - System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)
  - System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})
  - System.Collections.Generic.LinkedList`1.AddFirst(`0)
  - System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})
  - System.Collections.Generic.LinkedList`1.AddLast(`0)
  - System.Collections.Generic.LinkedList`1.Clear
  - System.Collections.Generic.LinkedList`1.Contains(`0)
  - System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.LinkedList`1.Count
  - System.Collections.Generic.LinkedList`1.Find(`0)
  - System.Collections.Generic.LinkedList`1.FindLast(`0)
  - System.Collections.Generic.LinkedList`1.First
  - System.Collections.Generic.LinkedList`1.GetEnumerator
  - System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.LinkedList`1.Last
  - System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)
  - System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})
  - System.Collections.Generic.LinkedList`1.Remove(`0)
  - System.Collections.Generic.LinkedList`1.RemoveFirst
  - System.Collections.Generic.LinkedList`1.RemoveLast
  - System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: LinkedList<T>
  nameWithType: LinkedList<T>
  fullName: System.Collections.Generic.LinkedList<T>
  type: Class
  summary: Represents a doubly linked list.
  remarks: "LinkedList(T) is a general-purpose linked list. It supports enumerators and implements the <xref:System.Collections.ICollection> interface, consistent with other collection classes in the .NET Framework.  \n  \n LinkedList(T) provides separate nodes of type <xref:System.Collections.Generic.LinkedListNode%601>, so insertion and removal are O(1) operations.  \n  \n You can remove nodes and reinsert them, either in the same list or in another list, which results in no additional objects allocated on the heap. Because the list also maintains an internal count, getting the <xref:System.Collections.Generic.LinkedList%601.Count%2A> property is an O(1) operation.  \n  \n Each node in a LinkedList(T) object is of the type <xref:System.Collections.Generic.LinkedListNode%601>. Because the LinkedList(T) is doubly linked, each node points forward to the <xref:System.Collections.Generic.LinkedListNode%601.Next%2A> node and backward to the <xref:System.Collections.Generic.LinkedListNode%601.Previous%2A> node.  \n  \n Lists that contain reference types perform better when a node and its value are created at the same time. LinkedList(T) accepts `null` as a valid <xref:System.Collections.Generic.LinkedListNode%601.Value%2A> property for reference types and allows duplicate values.  \n  \n If the LinkedList(T) is empty, the <xref:System.Collections.Generic.LinkedList%601.First%2A> and <xref:System.Collections.Generic.LinkedList%601.Last%2A> properties contain `null`.  \n  \n The LinkedList(T) class does not support chaining, splitting, cycles, or other features that can leave the list in an inconsistent state. The list remains consistent on a single thread. The only multithreaded scenario supported by LinkedList(T) is multithreaded read operations."
  example:
  - "The following code example demonstrates many features of the LinkedList(T) class.  \n  \n [!code-cpp[Generic.LinkedList#1](~/add/codesnippet/cpp/t-system.collections.gen_19_1.cpp)]\n [!code-vb[Generic.LinkedList#1](~/add/codesnippet/visualbasic/t-system.collections.gen_19_1.vb)]\n [!code-cs[Generic.LinkedList#1](~/add/codesnippet/csharp/t-system.collections.gen_19_1.cs)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_CollectionDebugView`1))]

      [System.Runtime.InteropServices.ComVisible(false)]

      public class LinkedList<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
    typeParameters:
    - id: T
      description: Specifies the element type of the linked list.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.IReadOnlyCollection<T>
  - System.Collections.ICollection
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: LinkedList<T>()
  nameWithType: LinkedList<T>.LinkedList<T>()
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList<T>()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.LinkedList%601"></xref> class that is empty.
  remarks: "<xref:System.Collections.Generic.LinkedList%601> accepts `null` as a valid <xref:System.Collections.Generic.LinkedListNode%601.Value%2A> for reference types and allows duplicate values.  \n  \n If the <xref:System.Collections.Generic.LinkedList%601> is empty, the <xref:System.Collections.Generic.LinkedList%601.First%2A> and <xref:System.Collections.Generic.LinkedList%601.Last%2A> properties contain `null`.  \n  \n This constructor is an O(1) operation."
  example:
  - "The following code example creates and initializes a <xref:System.Collections.Generic.LinkedList%601> of type <xref:System.String>, adds several nodes, and then displays its contents.  \n  \n [!code-cpp[System.Collections.Generic.LinkedList.ctor#1](~/add/codesnippet/cpp/m-system.collections.gen_8_1.cpp)]\n [!code-vb[System.Collections.Generic.LinkedList.ctor#1](~/add/codesnippet/visualbasic/m-system.collections.gen_8_1.vb)]\n [!code-cs[System.Collections.Generic.LinkedList.ctor#1](~/add/codesnippet/csharp/m-system.collections.gen_8_1.cs)]"
  syntax:
    content: public LinkedList ();
    parameters: []
  overload: System.Collections.Generic.LinkedList`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: LinkedList<T>(IEnumerable<T>)
  nameWithType: LinkedList<T>.LinkedList<T>(IEnumerable<T>)
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList<T>(IEnumerable<T>)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.LinkedList%601"></xref> class that contains elements copied from the specified <xref href="System.Collections.IEnumerable"></xref> and has sufficient capacity to accommodate the number of elements copied.
  remarks: "<xref:System.Collections.Generic.LinkedList%601> accepts `null` as a valid <xref:System.Collections.Generic.LinkedListNode%601.Value%2A> for reference types and allows duplicate values.  \n  \n If `collection` has no elements then the new <xref:System.Collections.Generic.LinkedList%601> is empty, and the <xref:System.Collections.Generic.LinkedList%601.First%2A> and <xref:System.Collections.Generic.LinkedList%601.Last%2A> properties contain `null`.  \n  \n This constructor is an O(n) operation, where `n` is the number of elements in `collection`."
  example:
  - For an example that includes this constructor, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public LinkedList (System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: The <xref href="System.Collections.IEnumerable"></xref> whose elements are copied to the new <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  overload: System.Collections.Generic.LinkedList`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>collection</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: LinkedList<T>(SerializationInfo,StreamingContext)
  nameWithType: LinkedList<T>.LinkedList<T>(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList<T>(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.LinkedList%601"></xref> class that is serializable with the specified <xref href="System.Runtime.Serialization.SerializationInfo"></xref> and <xref href="System.Runtime.Serialization.StreamingContext"></xref>.
  remarks: "<xref:System.Collections.Generic.LinkedList%601> accepts `null` as a valid <xref:System.Collections.Generic.LinkedListNode%601.Value%2A> for reference types and allows duplicate values.  \n  \n If the <xref:System.Collections.Generic.LinkedList%601> is empty, the <xref:System.Collections.Generic.LinkedList%601.First%2A> and <xref:System.Collections.Generic.LinkedList%601.Last%2A> properties contain `null`.  \n  \n This constructor is an O(n) operation."
  syntax:
    content: protected LinkedList (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: A <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object containing the information required to serialize the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: A <xref href="System.Runtime.Serialization.StreamingContext"></xref> object containing the source and destination of the serialized stream associated with the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  overload: System.Collections.Generic.LinkedList`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  id: AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddAfter(LinkedListNode<T>,LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddAfter(LinkedListNode<T>,LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddAfter(LinkedListNode<T>,LinkedListNode<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Adds the specified new node after the specified existing node in the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: "<xref:System.Collections.Generic.LinkedList%601> accepts `null` as a valid <xref:System.Collections.Generic.LinkedListNode%601.Value%2A> for reference types and allows duplicate values.  \n  \n This method is an O(1) operation."
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public void AddAfter (System.Collections.Generic.LinkedListNode<T> node, System.Collections.Generic.LinkedListNode<T> newNode);
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode`1
      description: The <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> after which to insert <code>newNode</code>.
    - id: newNode
      type: System.Collections.Generic.LinkedListNode`1
      description: The new <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> to add to the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  overload: System.Collections.Generic.LinkedList`1.AddAfter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>node</code> is `null`.  \n  \n -or-  \n  \n <code>newNode</code> is `null`."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>node</code> is not in the current <xref href=\"stem.Collections.Generic.LinkedList%601\"></xref>.  \n  \n -or-  \n  \n <code>newNode</code> belongs to another <xref href=\"stem.Collections.Generic.LinkedList%601\"></xref>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)
  id: AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddAfter(LinkedListNode<T>,T)
  nameWithType: LinkedList<T>.AddAfter(LinkedListNode<T>,T)
  fullName: System.Collections.Generic.LinkedList<T>.AddAfter(LinkedListNode<T>,T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Adds a new node containing the specified value after the specified existing node in the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: "<xref:System.Collections.Generic.LinkedList%601> accepts `null` as a valid <xref:System.Collections.Generic.LinkedListNode%601.Value%2A> for reference types and allows duplicate values.  \n  \n This method is an O(1) operation."
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> AddAfter (System.Collections.Generic.LinkedListNode<T> node, T value);
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode`1
      description: The <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> after which to insert a new <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> containing <code>value</code>.
    - id: value
      type: T
      description: The value to add to the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: The new <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> containing <code>value</code>.
  overload: System.Collections.Generic.LinkedList`1.AddAfter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>node</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>node</code> is not in the current <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  id: AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddBefore(LinkedListNode<T>,LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddBefore(LinkedListNode<T>,LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddBefore(LinkedListNode<T>,LinkedListNode<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Adds the specified new node before the specified existing node in the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: "<xref:System.Collections.Generic.LinkedList%601> accepts `null` as a valid <xref:System.Collections.Generic.LinkedListNode%601.Value%2A> for reference types and allows duplicate values.  \n  \n This method is an O(1) operation."
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public void AddBefore (System.Collections.Generic.LinkedListNode<T> node, System.Collections.Generic.LinkedListNode<T> newNode);
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode`1
      description: The <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> before which to insert <code>newNode</code>.
    - id: newNode
      type: System.Collections.Generic.LinkedListNode`1
      description: The new <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> to add to the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  overload: System.Collections.Generic.LinkedList`1.AddBefore*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>node</code> is `null`.  \n  \n -or-  \n  \n <code>newNode</code> is `null`."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>node</code> is not in the current <xref href=\"stem.Collections.Generic.LinkedList%601\"></xref>.  \n  \n -or-  \n  \n <code>newNode</code> belongs to another <xref href=\"stem.Collections.Generic.LinkedList%601\"></xref>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)
  id: AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddBefore(LinkedListNode<T>,T)
  nameWithType: LinkedList<T>.AddBefore(LinkedListNode<T>,T)
  fullName: System.Collections.Generic.LinkedList<T>.AddBefore(LinkedListNode<T>,T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Adds a new node containing the specified value before the specified existing node in the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: "<xref:System.Collections.Generic.LinkedList%601> accepts `null` as a valid <xref:System.Collections.Generic.LinkedListNode%601.Value%2A> for reference types and allows duplicate values.  \n  \n This method is an O(1) operation."
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> AddBefore (System.Collections.Generic.LinkedListNode<T> node, T value);
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode`1
      description: The <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> before which to insert a new <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> containing <code>value</code>.
    - id: value
      type: T
      description: The value to add to the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: The new <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> containing <code>value</code>.
  overload: System.Collections.Generic.LinkedList`1.AddBefore*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>node</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>node</code> is not in the current <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})
  id: AddFirst(System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddFirst(LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddFirst(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddFirst(LinkedListNode<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Adds the specified new node at the start of the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: "<xref:System.Collections.Generic.LinkedList%601> accepts `null` as a valid <xref:System.Collections.Generic.LinkedListNode%601.Value%2A> for reference types and allows duplicate values.  \n  \n If the <xref:System.Collections.Generic.LinkedList%601> is empty, the new node becomes the <xref:System.Collections.Generic.LinkedList%601.First%2A> and the <xref:System.Collections.Generic.LinkedList%601.Last%2A>.  \n  \n This method is an O(1) operation."
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public void AddFirst (System.Collections.Generic.LinkedListNode<T> node);
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode`1
      description: The new <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> to add at the start of the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  overload: System.Collections.Generic.LinkedList`1.AddFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>node</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>node</code> belongs to another <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.AddFirst(`0)
  id: AddFirst(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddFirst(T)
  nameWithType: LinkedList<T>.AddFirst(T)
  fullName: System.Collections.Generic.LinkedList<T>.AddFirst(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Adds a new node containing the specified value at the start of the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: "<xref:System.Collections.Generic.LinkedList%601> accepts `null` as a valid <xref:System.Collections.Generic.LinkedListNode%601.Value%2A> for reference types and allows duplicate values.  \n  \n If the <xref:System.Collections.Generic.LinkedList%601> is empty, the new node becomes the <xref:System.Collections.Generic.LinkedList%601.First%2A> and the <xref:System.Collections.Generic.LinkedList%601.Last%2A>.  \n  \n This method is an O(1) operation."
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> AddFirst (T value);
    parameters:
    - id: value
      type: T
      description: The value to add at the start of the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: The new <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> containing <code>value</code>.
  overload: System.Collections.Generic.LinkedList`1.AddFirst*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})
  id: AddLast(System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddLast(LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddLast(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddLast(LinkedListNode<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Adds the specified new node at the end of the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: "<xref:System.Collections.Generic.LinkedList%601> accepts `null` as a valid <xref:System.Collections.Generic.LinkedListNode%601.Value%2A> for reference types and allows duplicate values.  \n  \n If the <xref:System.Collections.Generic.LinkedList%601> is empty, the new node becomes the <xref:System.Collections.Generic.LinkedList%601.First%2A> and the <xref:System.Collections.Generic.LinkedList%601.Last%2A>.  \n  \n This method is an O(1) operation."
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public void AddLast (System.Collections.Generic.LinkedListNode<T> node);
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode`1
      description: The new <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> to add at the end of the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  overload: System.Collections.Generic.LinkedList`1.AddLast*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>node</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>node</code> belongs to another <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.AddLast(`0)
  id: AddLast(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddLast(T)
  nameWithType: LinkedList<T>.AddLast(T)
  fullName: System.Collections.Generic.LinkedList<T>.AddLast(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Adds a new node containing the specified value at the end of the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: "<xref:System.Collections.Generic.LinkedList%601> accepts `null` as a valid <xref:System.Collections.Generic.LinkedListNode%601.Value%2A> for reference types and allows duplicate values.  \n  \n If the <xref:System.Collections.Generic.LinkedList%601> is empty, the new node becomes the <xref:System.Collections.Generic.LinkedList%601.First%2A> and the <xref:System.Collections.Generic.LinkedList%601.Last%2A>.  \n  \n This method is an O(1) operation."
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> AddLast (T value);
    parameters:
    - id: value
      type: T
      description: The value to add at the end of the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: The new <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> containing <code>value</code>.
  overload: System.Collections.Generic.LinkedList`1.AddLast*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.Clear
  id: Clear
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: Clear()
  nameWithType: LinkedList<T>.Clear()
  fullName: System.Collections.Generic.LinkedList<T>.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Removes all nodes from the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: "<xref:System.Collections.Generic.LinkedList%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  <xref:System.Collections.Generic.LinkedList%601.First%2A> and <xref:System.Collections.Generic.LinkedList%601.Last%2A> are set to `null`.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.LinkedList%601.Count%2A>."
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Generic.LinkedList`1.Clear*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: LinkedList<T>.Contains(T)
  fullName: System.Collections.Generic.LinkedList<T>.Contains(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Determines whether a value is in the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.LinkedList%601.Count%2A>.
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public bool Contains (T value);
    parameters:
    - id: value
      type: T
      description: The value to locate in the <xref href="stem.Collections.Generic.LinkedList%601"></xref>. The value can be `null` for reference types.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is found in the <xref href="stem.Collections.Generic.LinkedList%601"></xref>; otherwise, `false`.'
  overload: System.Collections.Generic.LinkedList`1.Contains*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: LinkedList<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.LinkedList<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Copies the entire <xref href="stem.Collections.Generic.LinkedList%601"></xref> to a compatible one-dimensional <xref href="System.Array"></xref>, starting at the specified index of the target array.
  remarks: "This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.LinkedList%601>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.LinkedList%601.Count%2A>."
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="stem.Collections.Generic.LinkedList%601"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Generic.LinkedList`1.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source <xref href="stem.Collections.Generic.LinkedList%601"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.Count
  id: Count
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: Count
  nameWithType: LinkedList<T>.Count
  fullName: System.Collections.Generic.LinkedList<T>.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets the number of nodes actually contained in the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: Retrieving the value of this property is an O(1) operation.
  example:
  - For an example that includes this property, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of nodes actually contained in the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  overload: System.Collections.Generic.LinkedList`1.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.Find(`0)
  id: Find(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: Find(T)
  nameWithType: LinkedList<T>.Find(T)
  fullName: System.Collections.Generic.LinkedList<T>.Find(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Finds the first node that contains the specified value.
  remarks: "The <xref:System.Collections.Generic.LinkedList%601> is searched forward starting at <xref:System.Collections.Generic.LinkedList%601.First%2A> and ending at <xref:System.Collections.Generic.LinkedList%601.Last%2A>.  \n  \n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.LinkedList%601.Count%2A>."
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> Find (T value);
    parameters:
    - id: value
      type: T
      description: The value to locate in the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: The first <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> that contains the specified value, if found; otherwise, `null`.
  overload: System.Collections.Generic.LinkedList`1.Find*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.FindLast(`0)
  id: FindLast(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: FindLast(T)
  nameWithType: LinkedList<T>.FindLast(T)
  fullName: System.Collections.Generic.LinkedList<T>.FindLast(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Finds the last node that contains the specified value.
  remarks: "The <xref:System.Collections.Generic.LinkedList%601> is searched backward starting at <xref:System.Collections.Generic.LinkedList%601.Last%2A> and ending at <xref:System.Collections.Generic.LinkedList%601.First%2A>.  \n  \n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.LinkedList%601.Count%2A>."
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> FindLast (T value);
    parameters:
    - id: value
      type: T
      description: The value to locate in the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: The last <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> that contains the specified value, if found; otherwise, `null`.
  overload: System.Collections.Generic.LinkedList`1.FindLast*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.First
  id: First
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: First
  nameWithType: LinkedList<T>.First
  fullName: System.Collections.Generic.LinkedList<T>.First
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets the first node of the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: "<xref:System.Collections.Generic.LinkedList%601> accepts `null` as a valid <xref:System.Collections.Generic.LinkedListNode%601.Value%2A> for reference types and allows duplicate values.  \n  \n If the <xref:System.Collections.Generic.LinkedList%601> is empty, the First and <xref:System.Collections.Generic.LinkedList%601.Last%2A> properties contain `null`.  \n  \n Retrieving the value of this property is an O(1) operation."
  example:
  - For an example that includes this property, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> First { get; }
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: The first <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> of the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  overload: System.Collections.Generic.LinkedList`1.First*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: LinkedList<T>.GetEnumerator()
  fullName: System.Collections.Generic.LinkedList<T>.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A>.  \n  \n <xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A> is called. <xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: public System.Collections.Generic.LinkedList<T>.Enumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.LinkedList`1.Enumerator
      description: An <xref href="stem.Collections.Generic.LinkedList%601.Enumerator"></xref> for the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  overload: System.Collections.Generic.LinkedList`1.GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: LinkedList<T>.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.LinkedList<T>.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Implements the <xref href="System.Runtime.Serialization.ISerializable"></xref> interface and returns the data needed to serialize the <xref href="stem.Collections.Generic.LinkedList%601"></xref> instance.
  remarks: This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.LinkedList%601.Count%2A>.
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: A <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object that contains the information required to serialize the <xref href="stem.Collections.Generic.LinkedList%601"></xref> instance.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: A <xref href="System.Runtime.Serialization.StreamingContext"></xref> object that contains the source and destination of the serialized stream associated with the <xref href="stem.Collections.Generic.LinkedList%601"></xref> instance.
  overload: System.Collections.Generic.LinkedList`1.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>info</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.Last
  id: Last
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: Last
  nameWithType: LinkedList<T>.Last
  fullName: System.Collections.Generic.LinkedList<T>.Last
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets the last node of the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: "<xref:System.Collections.Generic.LinkedList%601> accepts `null` as a valid <xref:System.Collections.Generic.LinkedListNode%601.Value%2A> for reference types and allows duplicate values.  \n  \n If the <xref:System.Collections.Generic.LinkedList%601> is empty, the <xref:System.Collections.Generic.LinkedList%601.First%2A> and Last properties contain `null`.  \n  \n Retrieving the value of this property is an O(1) operation."
  example:
  - For an example that includes this property, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> Last { get; }
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: The last <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> of the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  overload: System.Collections.Generic.LinkedList`1.Last*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)
  id: OnDeserialization(System.Object)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: OnDeserialization(Object)
  nameWithType: LinkedList<T>.OnDeserialization(Object)
  fullName: System.Collections.Generic.LinkedList<T>.OnDeserialization(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Implements the <xref href="System.Runtime.Serialization.ISerializable"></xref> interface and raises the deserialization event when the deserialization is complete.
  remarks: This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.LinkedList%601.Count%2A>.
  syntax:
    content: public virtual void OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: The source of the deserialization event.
  overload: System.Collections.Generic.LinkedList`1.OnDeserialization*
  exceptions:
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: The <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object associated with the current <xref href="stem.Collections.Generic.LinkedList%601"></xref> instance is invalid.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})
  id: Remove(System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: Remove(LinkedListNode<T>)
  nameWithType: LinkedList<T>.Remove(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.Remove(LinkedListNode<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Removes the specified node from the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: This method is an O(1) operation.
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public void Remove (System.Collections.Generic.LinkedListNode<T> node);
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode`1
      description: The <xref href="stem.Collections.Generic.LinkedListNode%601"></xref> to remove from the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  overload: System.Collections.Generic.LinkedList`1.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>node</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>node</code> is not in the current <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: Remove(T)
  nameWithType: LinkedList<T>.Remove(T)
  fullName: System.Collections.Generic.LinkedList<T>.Remove(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Removes the first occurrence of the specified value from the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.LinkedList%601.Count%2A>.
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public bool Remove (T value);
    parameters:
    - id: value
      type: T
      description: The value to remove from the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
    return:
      type: System.Boolean
      description: '`true` if the element containing <code>value</code> is successfully removed; otherwise, `false`.  This method also returns `false` if <code>value</code> was not found in the original <xref href="stem.Collections.Generic.LinkedList%601"></xref>.'
  overload: System.Collections.Generic.LinkedList`1.Remove*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.RemoveFirst
  id: RemoveFirst
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: RemoveFirst()
  nameWithType: LinkedList<T>.RemoveFirst()
  fullName: System.Collections.Generic.LinkedList<T>.RemoveFirst()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Removes the node at the start of the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: This method is an O(1) operation.
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public void RemoveFirst ();
    parameters: []
  overload: System.Collections.Generic.LinkedList`1.RemoveFirst*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="stem.Collections.Generic.LinkedList%601"></xref> is empty.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.RemoveLast
  id: RemoveLast
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: RemoveLast()
  nameWithType: LinkedList<T>.RemoveLast()
  fullName: System.Collections.Generic.LinkedList<T>.RemoveLast()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Removes the node at the end of the <xref href="stem.Collections.Generic.LinkedList%601"></xref>.
  remarks: This method is an O(1) operation.
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: public void RemoveLast ();
    parameters: []
  overload: System.Collections.Generic.LinkedList`1.RemoveLast*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="stem.Collections.Generic.LinkedList%601"></xref> is empty.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: ICollection<T>.Add(T)
  nameWithType: LinkedList<T>.ICollection<T>.Add(T)
  fullName: System.Collections.Generic.LinkedList<T>.ICollection<T>.Add(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Adds an item at the end of the <xref href="stem.Collections.Generic.ICollection%601"></xref>.
  remarks: "<xref:System.Collections.Generic.LinkedList%601> accepts `null` as a valid <xref:System.Collections.Generic.LinkedListNode%601.Value%2A> for reference types and allows duplicate values.  \n  \n If the <xref:System.Collections.Generic.LinkedList%601> is empty, the new node becomes the <xref:System.Collections.Generic.LinkedList%601.First%2A> and the <xref:System.Collections.Generic.LinkedList%601.Last%2A>.  \n  \n This method is an O(1) operation."
  example:
  - For an example that includes this method, see the <xref:System.Collections.Generic.LinkedList%601> class.
  syntax:
    content: void ICollection<T>.Add (T value);
    parameters:
    - id: value
      type: T
      description: The value to add at the end of the <xref href="stem.Collections.Generic.ICollection%601"></xref>.
  overload: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection<T>#Add*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: ICollection<T>.IsReadOnly
  nameWithType: LinkedList<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.LinkedList<T>.ICollection<T>.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether the <xref href="stem.Collections.Generic.ICollection%601"></xref> is read-only.
  remarks: "A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.ICollection%601"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href="stem.Collections.Generic.LinkedList%601"></xref>, this property always returns `false`.'
  overload: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: LinkedList<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.LinkedList<T>.IEnumerable<T>.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through a collection.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  \n  \n <xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: An <xref href="stem.Collections.Generic.IEnumerator%601"></xref> that can be used to iterate through the collection.
  overload: System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: LinkedList<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.LinkedList<T>.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Copies the elements of the <xref href="System.Collections.ICollection"></xref> to an <xref href="System.Array"></xref>, starting at a particular <xref href="System.Array"></xref> index.
  remarks: "> [!NOTE]\n>  If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.LinkedList%601.Count%2A>."
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="System.Collections.ICollection"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.  \n  \n -or-  \n  \n <code>array</code> does not have zero-based indexing.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.  \n  \n -or-  \n  \n The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: LinkedList<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.LinkedList<T>.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe).
  remarks: "Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: '`true` if access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe); otherwise, `false`.  In the default implementation of <xref href="stem.Collections.Generic.LinkedList%601"></xref>, this property always returns `false`.'
  overload: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: LinkedList<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.LinkedList<T>.ICollection.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>.
  remarks: "Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.  \n  \n```c#  \nICollection ic = ...;  \nlock (ic.SyncRoot) {  \n   // Access the collection.  \n}  \n```  \n  \n```vb#  \nDim ic As ICollection = ...  \nSyncLock ic.SyncRoot  \n   ' Access the collection.  \nEnd SyncLock  \n```  \n  \n```cpp#  \nICollection^ ic = ...;  \ntry {  \n   Monitor::Enter(ic->SyncRoot);  \n   // Access the collection.  \n}  \nfinally {  \n   Monitor::Exit(ic->SyncRoot);  \n}  \n```  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>.  In the default implementation of <xref href="stem.Collections.Generic.LinkedList%601"></xref>, this property always returns the current instance.
  overload: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: LinkedList<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.LinkedList<T>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the linked list as a collection.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator"></xref> that can be used to iterate through the linked list as a collection.
  overload: System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\LinkedList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/LinkedList`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Runtime.Serialization.SerializationException
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationException
  nameWithType: SerializationException
  fullName: System.Runtime.Serialization.SerializationException
- uid: System.Collections.Generic.LinkedList`1.#ctor
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: LinkedList<T>()
  nameWithType: LinkedList<T>.LinkedList<T>()
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList<T>()
- uid: System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: LinkedList<T>(IEnumerable<T>)
  nameWithType: LinkedList<T>.LinkedList<T>(IEnumerable<T>)
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList<T>(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: LinkedList<T>(SerializationInfo,StreamingContext)
  nameWithType: LinkedList<T>.LinkedList<T>(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList<T>(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddAfter(LinkedListNode<T>,LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddAfter(LinkedListNode<T>,LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddAfter(LinkedListNode<T>,LinkedListNode<T>)
- uid: System.Collections.Generic.LinkedListNode`1
  parent: System.Collections.Generic
  isExternal: false
  name: LinkedListNode<T>
  nameWithType: LinkedListNode<T>
  fullName: System.Collections.Generic.LinkedListNode<T>
- uid: System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddAfter(LinkedListNode<T>,T)
  nameWithType: LinkedList<T>.AddAfter(LinkedListNode<T>,T)
  fullName: System.Collections.Generic.LinkedList<T>.AddAfter(LinkedListNode<T>,T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddBefore(LinkedListNode<T>,LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddBefore(LinkedListNode<T>,LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddBefore(LinkedListNode<T>,LinkedListNode<T>)
- uid: System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddBefore(LinkedListNode<T>,T)
  nameWithType: LinkedList<T>.AddBefore(LinkedListNode<T>,T)
  fullName: System.Collections.Generic.LinkedList<T>.AddBefore(LinkedListNode<T>,T)
- uid: System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddFirst(LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddFirst(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddFirst(LinkedListNode<T>)
- uid: System.Collections.Generic.LinkedList`1.AddFirst(`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddFirst(T)
  nameWithType: LinkedList<T>.AddFirst(T)
  fullName: System.Collections.Generic.LinkedList<T>.AddFirst(T)
- uid: System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddLast(LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddLast(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddLast(LinkedListNode<T>)
- uid: System.Collections.Generic.LinkedList`1.AddLast(`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddLast(T)
  nameWithType: LinkedList<T>.AddLast(T)
  fullName: System.Collections.Generic.LinkedList<T>.AddLast(T)
- uid: System.Collections.Generic.LinkedList`1.Clear
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Clear()
  nameWithType: LinkedList<T>.Clear()
  fullName: System.Collections.Generic.LinkedList<T>.Clear()
- uid: System.Collections.Generic.LinkedList`1.Contains(`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Contains(T)
  nameWithType: LinkedList<T>.Contains(T)
  fullName: System.Collections.Generic.LinkedList<T>.Contains(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: LinkedList<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.LinkedList<T>.CopyTo(T[],Int32)
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.LinkedList`1.Count
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Count
  nameWithType: LinkedList<T>.Count
  fullName: System.Collections.Generic.LinkedList<T>.Count
- uid: System.Collections.Generic.LinkedList`1.Find(`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Find(T)
  nameWithType: LinkedList<T>.Find(T)
  fullName: System.Collections.Generic.LinkedList<T>.Find(T)
- uid: System.Collections.Generic.LinkedList`1.FindLast(`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: FindLast(T)
  nameWithType: LinkedList<T>.FindLast(T)
  fullName: System.Collections.Generic.LinkedList<T>.FindLast(T)
- uid: System.Collections.Generic.LinkedList`1.First
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: First
  nameWithType: LinkedList<T>.First
  fullName: System.Collections.Generic.LinkedList<T>.First
- uid: System.Collections.Generic.LinkedList`1.GetEnumerator
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: LinkedList<T>.GetEnumerator()
  fullName: System.Collections.Generic.LinkedList<T>.GetEnumerator()
- uid: System.Collections.Generic.LinkedList`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: LinkedList<T>+Enumerator
  nameWithType: LinkedList<T>+Enumerator
  fullName: System.Collections.Generic.LinkedList<T>+Enumerator
- uid: System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: LinkedList<T>.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.LinkedList<T>.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Collections.Generic.LinkedList`1.Last
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Last
  nameWithType: LinkedList<T>.Last
  fullName: System.Collections.Generic.LinkedList<T>.Last
- uid: System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: OnDeserialization(Object)
  nameWithType: LinkedList<T>.OnDeserialization(Object)
  fullName: System.Collections.Generic.LinkedList<T>.OnDeserialization(Object)
- uid: System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Remove(LinkedListNode<T>)
  nameWithType: LinkedList<T>.Remove(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.Remove(LinkedListNode<T>)
- uid: System.Collections.Generic.LinkedList`1.Remove(`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Remove(T)
  nameWithType: LinkedList<T>.Remove(T)
  fullName: System.Collections.Generic.LinkedList<T>.Remove(T)
- uid: System.Collections.Generic.LinkedList`1.RemoveFirst
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: RemoveFirst()
  nameWithType: LinkedList<T>.RemoveFirst()
  fullName: System.Collections.Generic.LinkedList<T>.RemoveFirst()
- uid: System.Collections.Generic.LinkedList`1.RemoveLast
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: RemoveLast()
  nameWithType: LinkedList<T>.RemoveLast()
  fullName: System.Collections.Generic.LinkedList<T>.RemoveLast()
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: ICollection<T>.Add(T)
  nameWithType: LinkedList<T>.ICollection<T>.Add(T)
  fullName: System.Collections.Generic.LinkedList<T>.ICollection<T>.Add(T)
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: ICollection<T>.IsReadOnly
  nameWithType: LinkedList<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.LinkedList<T>.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: LinkedList<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.LinkedList<T>.IEnumerable<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: LinkedList<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.LinkedList<T>.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: LinkedList<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.LinkedList<T>.ICollection.IsSynchronized
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: LinkedList<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.LinkedList<T>.ICollection.SyncRoot
- uid: System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: LinkedList<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.LinkedList<T>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.LinkedList`1.#ctor*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: LinkedList<T>
  nameWithType: LinkedList<T>.LinkedList<T>
- uid: System.Collections.Generic.LinkedList`1.AddAfter*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddAfter
  nameWithType: LinkedList<T>.AddAfter
- uid: System.Collections.Generic.LinkedList`1.AddBefore*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddBefore
  nameWithType: LinkedList<T>.AddBefore
- uid: System.Collections.Generic.LinkedList`1.AddFirst*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddFirst
  nameWithType: LinkedList<T>.AddFirst
- uid: System.Collections.Generic.LinkedList`1.AddLast*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddLast
  nameWithType: LinkedList<T>.AddLast
- uid: System.Collections.Generic.LinkedList`1.Clear*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Clear
  nameWithType: LinkedList<T>.Clear
- uid: System.Collections.Generic.LinkedList`1.Contains*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Contains
  nameWithType: LinkedList<T>.Contains
- uid: System.Collections.Generic.LinkedList`1.CopyTo*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: CopyTo
  nameWithType: LinkedList<T>.CopyTo
- uid: System.Collections.Generic.LinkedList`1.Count*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Count
  nameWithType: LinkedList<T>.Count
- uid: System.Collections.Generic.LinkedList`1.Find*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Find
  nameWithType: LinkedList<T>.Find
- uid: System.Collections.Generic.LinkedList`1.FindLast*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: FindLast
  nameWithType: LinkedList<T>.FindLast
- uid: System.Collections.Generic.LinkedList`1.First*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: First
  nameWithType: LinkedList<T>.First
- uid: System.Collections.Generic.LinkedList`1.GetEnumerator*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: GetEnumerator
  nameWithType: LinkedList<T>.GetEnumerator
- uid: System.Collections.Generic.LinkedList`1.GetObjectData*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: GetObjectData
  nameWithType: LinkedList<T>.GetObjectData
- uid: System.Collections.Generic.LinkedList`1.Last*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Last
  nameWithType: LinkedList<T>.Last
- uid: System.Collections.Generic.LinkedList`1.OnDeserialization*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: OnDeserialization
  nameWithType: LinkedList<T>.OnDeserialization
- uid: System.Collections.Generic.LinkedList`1.Remove*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Remove
  nameWithType: LinkedList<T>.Remove
- uid: System.Collections.Generic.LinkedList`1.RemoveFirst*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: RemoveFirst
  nameWithType: LinkedList<T>.RemoveFirst
- uid: System.Collections.Generic.LinkedList`1.RemoveLast*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: RemoveLast
  nameWithType: LinkedList<T>.RemoveLast
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection<T>#Add*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Add
  nameWithType: LinkedList<T>.System.Collections.Generic.ICollection<T>.Add
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType: LinkedList<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType: LinkedList<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: LinkedList<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: LinkedList<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: LinkedList<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: LinkedList<T>.System.Collections.IEnumerable.GetEnumerator
