### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.LinkedList`1
  id: LinkedList`1
  children:
  - System.Collections.Generic.LinkedList`1.#ctor
  - System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable`1)
  - System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode`1,System.Collections.Generic.LinkedListNode`1)
  - System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode`1,`0)
  - System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode`1,System.Collections.Generic.LinkedListNode`1)
  - System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode`1,`0)
  - System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode`1)
  - System.Collections.Generic.LinkedList`1.AddFirst(`0)
  - System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode`1)
  - System.Collections.Generic.LinkedList`1.AddLast(`0)
  - System.Collections.Generic.LinkedList`1.Clear
  - System.Collections.Generic.LinkedList`1.Contains(`0)
  - System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.LinkedList`1.Count
  - System.Collections.Generic.LinkedList`1.Find(`0)
  - System.Collections.Generic.LinkedList`1.FindLast(`0)
  - System.Collections.Generic.LinkedList`1.First
  - System.Collections.Generic.LinkedList`1.GetEnumerator
  - System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.LinkedList`1.Last
  - System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)
  - System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode`1)
  - System.Collections.Generic.LinkedList`1.Remove(`0)
  - System.Collections.Generic.LinkedList`1.RemoveFirst
  - System.Collections.Generic.LinkedList`1.RemoveLast
  - System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: LinkedList<T>
  nameWithType: LinkedList<T>
  fullName: System.Collections.Generic.LinkedList<T>
  type: Class
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_CollectionDebugView`1))]

      [System.Runtime.InteropServices.ComVisible(false)]

      public class LinkedList<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
    typeParameters:
    - id: T
      description: To be added.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.ICollection
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: LinkedList()
  nameWithType: LinkedList<T>.LinkedList()
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public LinkedList ();
    parameters: []
  overload: System.Collections.Generic.LinkedList`1.#ctor*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable`1)
  id: '#ctor(System.Collections.Generic.IEnumerable`1)'
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: LinkedList(IEnumerable<T>)
  nameWithType: LinkedList<T>.LinkedList(IEnumerable<T>)
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList(IEnumerable<T>)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public LinkedList (System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.#ctor*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: LinkedList(SerializationInfo,StreamingContext)
  nameWithType: LinkedList<T>.LinkedList(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: protected LinkedList (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: To be added.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.#ctor*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode`1,System.Collections.Generic.LinkedListNode`1)
  id: AddAfter(System.Collections.Generic.LinkedListNode`1,System.Collections.Generic.LinkedListNode`1)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddAfter(LinkedListNode<T>,LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddAfter(LinkedListNode<T>,LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddAfter(LinkedListNode<T>,LinkedListNode<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void AddAfter (System.Collections.Generic.LinkedListNode<T> node, System.Collections.Generic.LinkedListNode<T> newNode);
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
    - id: newNode
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.AddAfter*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode`1,`0)
  id: AddAfter(System.Collections.Generic.LinkedListNode`1,`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddAfter(LinkedListNode<T>,T)
  nameWithType: LinkedList<T>.AddAfter(LinkedListNode<T>,T)
  fullName: System.Collections.Generic.LinkedList<T>.AddAfter(LinkedListNode<T>,T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> AddAfter (System.Collections.Generic.LinkedListNode<T> node, T value);
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.AddAfter*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode`1,System.Collections.Generic.LinkedListNode`1)
  id: AddBefore(System.Collections.Generic.LinkedListNode`1,System.Collections.Generic.LinkedListNode`1)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddBefore(LinkedListNode<T>,LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddBefore(LinkedListNode<T>,LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddBefore(LinkedListNode<T>,LinkedListNode<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void AddBefore (System.Collections.Generic.LinkedListNode<T> node, System.Collections.Generic.LinkedListNode<T> newNode);
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
    - id: newNode
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.AddBefore*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode`1,`0)
  id: AddBefore(System.Collections.Generic.LinkedListNode`1,`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddBefore(LinkedListNode<T>,T)
  nameWithType: LinkedList<T>.AddBefore(LinkedListNode<T>,T)
  fullName: System.Collections.Generic.LinkedList<T>.AddBefore(LinkedListNode<T>,T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> AddBefore (System.Collections.Generic.LinkedListNode<T> node, T value);
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.AddBefore*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode`1)
  id: AddFirst(System.Collections.Generic.LinkedListNode`1)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddFirst(LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddFirst(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddFirst(LinkedListNode<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void AddFirst (System.Collections.Generic.LinkedListNode<T> node);
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.AddFirst*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.AddFirst(`0)
  id: AddFirst(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddFirst(T)
  nameWithType: LinkedList<T>.AddFirst(T)
  fullName: System.Collections.Generic.LinkedList<T>.AddFirst(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> AddFirst (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.AddFirst*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode`1)
  id: AddLast(System.Collections.Generic.LinkedListNode`1)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddLast(LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddLast(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddLast(LinkedListNode<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void AddLast (System.Collections.Generic.LinkedListNode<T> node);
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.AddLast*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.AddLast(`0)
  id: AddLast(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: AddLast(T)
  nameWithType: LinkedList<T>.AddLast(T)
  fullName: System.Collections.Generic.LinkedList<T>.AddLast(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> AddLast (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.AddLast*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.Clear
  id: Clear
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: Clear()
  nameWithType: LinkedList<T>.Clear()
  fullName: System.Collections.Generic.LinkedList<T>.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Generic.LinkedList`1.Clear*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: LinkedList<T>.Contains(T)
  fullName: System.Collections.Generic.LinkedList<T>.Contains(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool Contains (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.Contains*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: LinkedList<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.LinkedList<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.CopyTo*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.Count
  id: Count
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: Count
  nameWithType: LinkedList<T>.Count
  fullName: System.Collections.Generic.LinkedList<T>.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.Count*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.Find(`0)
  id: Find(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: Find(T)
  nameWithType: LinkedList<T>.Find(T)
  fullName: System.Collections.Generic.LinkedList<T>.Find(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> Find (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.Find*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.FindLast(`0)
  id: FindLast(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: FindLast(T)
  nameWithType: LinkedList<T>.FindLast(T)
  fullName: System.Collections.Generic.LinkedList<T>.FindLast(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> FindLast (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.FindLast*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.First
  id: First
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: First
  nameWithType: LinkedList<T>.First
  fullName: System.Collections.Generic.LinkedList<T>.First
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> First { get; }
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.First*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: LinkedList<T>.GetEnumerator()
  fullName: System.Collections.Generic.LinkedList<T>.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.LinkedList<T>.Enumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.LinkedList`1.Enumerator
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.GetEnumerator*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: LinkedList<T>.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.LinkedList<T>.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: To be added.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.GetObjectData*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.Last
  id: Last
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: Last
  nameWithType: LinkedList<T>.Last
  fullName: System.Collections.Generic.LinkedList<T>.Last
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> Last { get; }
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.Last*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)
  id: OnDeserialization(System.Object)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: OnDeserialization(Object)
  nameWithType: LinkedList<T>.OnDeserialization(Object)
  fullName: System.Collections.Generic.LinkedList<T>.OnDeserialization(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public virtual void OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.OnDeserialization*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode`1)
  id: Remove(System.Collections.Generic.LinkedListNode`1)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: Remove(LinkedListNode<T>)
  nameWithType: LinkedList<T>.Remove(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.Remove(LinkedListNode<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void Remove (System.Collections.Generic.LinkedListNode<T> node);
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.Remove*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: Remove(T)
  nameWithType: LinkedList<T>.Remove(T)
  fullName: System.Collections.Generic.LinkedList<T>.Remove(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool Remove (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.Remove*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.RemoveFirst
  id: RemoveFirst
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: RemoveFirst()
  nameWithType: LinkedList<T>.RemoveFirst()
  fullName: System.Collections.Generic.LinkedList<T>.RemoveFirst()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void RemoveFirst ();
    parameters: []
  overload: System.Collections.Generic.LinkedList`1.RemoveFirst*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.RemoveLast
  id: RemoveLast
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: RemoveLast()
  nameWithType: LinkedList<T>.RemoveLast()
  fullName: System.Collections.Generic.LinkedList<T>.RemoveLast()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void RemoveLast ();
    parameters: []
  overload: System.Collections.Generic.LinkedList`1.RemoveLast*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: System.Collections.Generic.ICollection(T)
  nameWithType: LinkedList<T>.System.Collections.Generic.ICollection(T)
  fullName: System.Collections.Generic.LinkedList<T>.System.Collections.Generic.ICollection(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: void ICollection<T>.Add (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection<T>#Add*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: System.Collections.Generic.ICollection
  nameWithType: LinkedList<T>.System.Collections.Generic.ICollection
  fullName: System.Collections.Generic.LinkedList<T>.System.Collections.Generic.ICollection
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: System.Collections.Generic.IEnumerable()
  nameWithType: LinkedList<T>.System.Collections.Generic.IEnumerable()
  fullName: System.Collections.Generic.LinkedList<T>.System.Collections.Generic.IEnumerable()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: LinkedList<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.LinkedList<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: LinkedList<T>.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Generic.LinkedList<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: LinkedList<T>.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Generic.LinkedList<T>.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: LinkedList<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.LinkedList<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: To be added.
  overload: System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Collections.Generic.LinkedList`1.#ctor
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: LinkedList()
  nameWithType: LinkedList<T>.LinkedList()
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList()
- uid: System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable`1)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: LinkedList(IEnumerable<T>)
  nameWithType: LinkedList<T>.LinkedList(IEnumerable<T>)
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: LinkedList(SerializationInfo,StreamingContext)
  nameWithType: LinkedList<T>.LinkedList(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode`1,System.Collections.Generic.LinkedListNode`1)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddAfter(LinkedListNode<T>,LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddAfter(LinkedListNode<T>,LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddAfter(LinkedListNode<T>,LinkedListNode<T>)
- uid: System.Collections.Generic.LinkedListNode`1
  parent: System.Collections.Generic
  isExternal: false
  name: LinkedListNode<T>
  nameWithType: LinkedListNode<T>
  fullName: System.Collections.Generic.LinkedListNode<T>
- uid: System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode`1,`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddAfter(LinkedListNode<T>,T)
  nameWithType: LinkedList<T>.AddAfter(LinkedListNode<T>,T)
  fullName: System.Collections.Generic.LinkedList<T>.AddAfter(LinkedListNode<T>,T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode`1,System.Collections.Generic.LinkedListNode`1)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddBefore(LinkedListNode<T>,LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddBefore(LinkedListNode<T>,LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddBefore(LinkedListNode<T>,LinkedListNode<T>)
- uid: System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode`1,`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddBefore(LinkedListNode<T>,T)
  nameWithType: LinkedList<T>.AddBefore(LinkedListNode<T>,T)
  fullName: System.Collections.Generic.LinkedList<T>.AddBefore(LinkedListNode<T>,T)
- uid: System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode`1)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddFirst(LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddFirst(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddFirst(LinkedListNode<T>)
- uid: System.Collections.Generic.LinkedList`1.AddFirst(`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddFirst(T)
  nameWithType: LinkedList<T>.AddFirst(T)
  fullName: System.Collections.Generic.LinkedList<T>.AddFirst(T)
- uid: System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode`1)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddLast(LinkedListNode<T>)
  nameWithType: LinkedList<T>.AddLast(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddLast(LinkedListNode<T>)
- uid: System.Collections.Generic.LinkedList`1.AddLast(`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddLast(T)
  nameWithType: LinkedList<T>.AddLast(T)
  fullName: System.Collections.Generic.LinkedList<T>.AddLast(T)
- uid: System.Collections.Generic.LinkedList`1.Clear
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Clear()
  nameWithType: LinkedList<T>.Clear()
  fullName: System.Collections.Generic.LinkedList<T>.Clear()
- uid: System.Collections.Generic.LinkedList`1.Contains(`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Contains(T)
  nameWithType: LinkedList<T>.Contains(T)
  fullName: System.Collections.Generic.LinkedList<T>.Contains(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: LinkedList<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.LinkedList<T>.CopyTo(T[],Int32)
- uid: T[]
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.LinkedList`1.Count
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Count
  nameWithType: LinkedList<T>.Count
  fullName: System.Collections.Generic.LinkedList<T>.Count
- uid: System.Collections.Generic.LinkedList`1.Find(`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Find(T)
  nameWithType: LinkedList<T>.Find(T)
  fullName: System.Collections.Generic.LinkedList<T>.Find(T)
- uid: System.Collections.Generic.LinkedList`1.FindLast(`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: FindLast(T)
  nameWithType: LinkedList<T>.FindLast(T)
  fullName: System.Collections.Generic.LinkedList<T>.FindLast(T)
- uid: System.Collections.Generic.LinkedList`1.First
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: First
  nameWithType: LinkedList<T>.First
  fullName: System.Collections.Generic.LinkedList<T>.First
- uid: System.Collections.Generic.LinkedList`1.GetEnumerator
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: LinkedList<T>.GetEnumerator()
  fullName: System.Collections.Generic.LinkedList<T>.GetEnumerator()
- uid: System.Collections.Generic.LinkedList`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: LinkedList<T>+Enumerator
  nameWithType: LinkedList<T>+Enumerator
  fullName: System.Collections.Generic.LinkedList<T>+Enumerator
- uid: System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: LinkedList<T>.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.LinkedList<T>.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Collections.Generic.LinkedList`1.Last
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Last
  nameWithType: LinkedList<T>.Last
  fullName: System.Collections.Generic.LinkedList<T>.Last
- uid: System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: OnDeserialization(Object)
  nameWithType: LinkedList<T>.OnDeserialization(Object)
  fullName: System.Collections.Generic.LinkedList<T>.OnDeserialization(Object)
- uid: System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode`1)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Remove(LinkedListNode<T>)
  nameWithType: LinkedList<T>.Remove(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.Remove(LinkedListNode<T>)
- uid: System.Collections.Generic.LinkedList`1.Remove(`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Remove(T)
  nameWithType: LinkedList<T>.Remove(T)
  fullName: System.Collections.Generic.LinkedList<T>.Remove(T)
- uid: System.Collections.Generic.LinkedList`1.RemoveFirst
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: RemoveFirst()
  nameWithType: LinkedList<T>.RemoveFirst()
  fullName: System.Collections.Generic.LinkedList<T>.RemoveFirst()
- uid: System.Collections.Generic.LinkedList`1.RemoveLast
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: RemoveLast()
  nameWithType: LinkedList<T>.RemoveLast()
  fullName: System.Collections.Generic.LinkedList<T>.RemoveLast()
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.Generic.ICollection(T)
  nameWithType: LinkedList<T>.System.Collections.Generic.ICollection(T)
  fullName: System.Collections.Generic.LinkedList<T>.System.Collections.Generic.ICollection(T)
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.Generic.ICollection
  nameWithType: LinkedList<T>.System.Collections.Generic.ICollection
  fullName: System.Collections.Generic.LinkedList<T>.System.Collections.Generic.ICollection
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable()
  nameWithType: LinkedList<T>.System.Collections.Generic.IEnumerable()
  fullName: System.Collections.Generic.LinkedList<T>.System.Collections.Generic.IEnumerable()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: LinkedList<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.LinkedList<T>.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: LinkedList<T>.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Generic.LinkedList<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: LinkedList<T>.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Generic.LinkedList<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: LinkedList<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.LinkedList<T>.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.LinkedList`1.#ctor*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: LinkedList<T>
  nameWithType: LinkedList<T>.LinkedList<T>
- uid: System.Collections.Generic.LinkedList`1.AddAfter*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddAfter
  nameWithType: LinkedList<T>.AddAfter
- uid: System.Collections.Generic.LinkedList`1.AddBefore*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddBefore
  nameWithType: LinkedList<T>.AddBefore
- uid: System.Collections.Generic.LinkedList`1.AddFirst*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddFirst
  nameWithType: LinkedList<T>.AddFirst
- uid: System.Collections.Generic.LinkedList`1.AddLast*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: AddLast
  nameWithType: LinkedList<T>.AddLast
- uid: System.Collections.Generic.LinkedList`1.Clear*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Clear
  nameWithType: LinkedList<T>.Clear
- uid: System.Collections.Generic.LinkedList`1.Contains*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Contains
  nameWithType: LinkedList<T>.Contains
- uid: System.Collections.Generic.LinkedList`1.CopyTo*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: CopyTo
  nameWithType: LinkedList<T>.CopyTo
- uid: System.Collections.Generic.LinkedList`1.Count*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Count
  nameWithType: LinkedList<T>.Count
- uid: System.Collections.Generic.LinkedList`1.Find*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Find
  nameWithType: LinkedList<T>.Find
- uid: System.Collections.Generic.LinkedList`1.FindLast*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: FindLast
  nameWithType: LinkedList<T>.FindLast
- uid: System.Collections.Generic.LinkedList`1.First*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: First
  nameWithType: LinkedList<T>.First
- uid: System.Collections.Generic.LinkedList`1.GetEnumerator*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: GetEnumerator
  nameWithType: LinkedList<T>.GetEnumerator
- uid: System.Collections.Generic.LinkedList`1.GetObjectData*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: GetObjectData
  nameWithType: LinkedList<T>.GetObjectData
- uid: System.Collections.Generic.LinkedList`1.Last*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Last
  nameWithType: LinkedList<T>.Last
- uid: System.Collections.Generic.LinkedList`1.OnDeserialization*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: OnDeserialization
  nameWithType: LinkedList<T>.OnDeserialization
- uid: System.Collections.Generic.LinkedList`1.Remove*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: Remove
  nameWithType: LinkedList<T>.Remove
- uid: System.Collections.Generic.LinkedList`1.RemoveFirst*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: RemoveFirst
  nameWithType: LinkedList<T>.RemoveFirst
- uid: System.Collections.Generic.LinkedList`1.RemoveLast*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: RemoveLast
  nameWithType: LinkedList<T>.RemoveLast
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection<T>#Add*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Add
  nameWithType: LinkedList<T>.System.Collections.Generic.ICollection<T>.Add
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType: LinkedList<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType: LinkedList<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: LinkedList<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: LinkedList<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: LinkedList<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Generic.LinkedList`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: LinkedList<T>.System.Collections.IEnumerable.GetEnumerator
