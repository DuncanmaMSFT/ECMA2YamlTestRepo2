### YamlMime:ManagedReference
items:
- uid: System.Web.Profile.SettingsAllowAnonymousAttribute
  id: SettingsAllowAnonymousAttribute
  children:
  - System.Web.Profile.SettingsAllowAnonymousAttribute.#ctor(System.Boolean)
  - System.Web.Profile.SettingsAllowAnonymousAttribute.Allow
  - System.Web.Profile.SettingsAllowAnonymousAttribute.IsDefaultAttribute
  langs:
  - csharp
  name: SettingsAllowAnonymousAttribute
  nameWithType: SettingsAllowAnonymousAttribute
  fullName: System.Web.Profile.SettingsAllowAnonymousAttribute
  type: Class
  summary: Identifies whether a profile property can be set or accessed for an anonymous user.
  remarks: "The SettingsAllowAnonymousAttribute class is used to identify whether a property of a custom profile implementation can be accessed if the user is an anonymous user. For information about enabling anonymous identification, see the documentation provided for the  configuration element.  \n  \n If no SettingsAllowAnonymousAttribute is specified for a profile property, anonymous access of the profile property is not allowed.  \n  \n A custom profile implementation is a class that inherits from the <xref:System.Web.Profile.ProfileBase> abstract class and defines properties for the user profile that are not specified in the  configuration element. You can specify a custom user-profile type in the application's Web.config file with the `inherits` attribute of the  configuration element as shown in the following example.  \n  \n `<configuration>`  \n  \n `<connectionStrings>`  \n  \n `<add`  \n  \n `name=\"SqlServices\"`  \n  \n `connectionString=\"Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;\" />`  \n  \n `</connectionStrings>`  \n  \n `<system.web>`  \n  \n `<authentication mode=\"Forms\" >`  \n  \n `<forms`  \n  \n `loginUrl=\"login.aspx\"`  \n  \n `name=\".ASPXFORMSAUTH\" />`  \n  \n `</authentication>`  \n  \n `<authorization>`  \n  \n `<deny users=\"?\" />`  \n  \n `</authorization>`  \n  \n `<profile inherits=\"Samples.AspNet.Profile.EmployeeProfile\"`  \n  \n `defaultProvider=\"SqlProvider\">`  \n  \n `<providers>`  \n  \n `<clear />`  \n  \n `<add`  \n  \n `name=\"SqlProvider\"`  \n  \n `type=\"System.Web.Profile.SqlProfileProvider\"`  \n  \n `connectionStringName=\"SqlServices\"`  \n  \n `description=\"SQL Profile Provider for Sample\"/>`  \n  \n `<add`  \n  \n `name=\"EmployeeInfoProvider\"`  \n  \n `type=\"System.Web.Profile.SqlProfileProvider\"`  \n  \n `connectionStringName=\"SqlServices\"`  \n  \n `description=\"SQL Profile Provider for Employee Info\"/>`  \n  \n `</providers>`  \n  \n `<properties>`  \n  \n `<add name=\"GarmentSize\" />`  \n  \n `</properties>`  \n  \n `</profile>`  \n  \n `</system.web>`  \n  \n `</configuration>`"
  example:
  - "The following code example defines a class that inherits from the <xref:System.Web.Profile.ProfileBase> to create a custom profile. The type of the custom profile is specified in the `inherits` attribute of the  configuration element in the Web.config file for an application.  \n  \n [!code-cs[System.Web.Profile.ProfileBase#1](~/add/codesnippet/csharp/t-system.web.profile.set_1.cs)]\n [!code-vb[System.Web.Profile.ProfileBase#1](~/add/codesnippet/visualbasic/t-system.web.profile.set_1.vb)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Property)]

      public sealed class SettingsAllowAnonymousAttribute : Attribute
  inheritance:
  - System.Object
  - System.Attribute
  implements: []
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.GetHashCode
  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)
  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)
  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)
  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)
  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)
  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)
  - System.Attribute.Match(System.Object)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)
  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Attribute.TypeId
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Web.Profile.SettingsAllowAnonymousAttribute.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Web.Profile.SettingsAllowAnonymousAttribute
  langs:
  - csharp
  name: SettingsAllowAnonymousAttribute(Boolean)
  nameWithType: SettingsAllowAnonymousAttribute.SettingsAllowAnonymousAttribute(Boolean)
  fullName: System.Web.Profile.SettingsAllowAnonymousAttribute.SettingsAllowAnonymousAttribute(Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Profile
  summary: Creates a new instance of the <xref href="System.Web.Profile.SettingsAllowAnonymousAttribute"></xref> class and specifies whether to allow anonymous access to the associated profile property.
  remarks: "The <xref:System.Web.Profile.SettingsAllowAnonymousAttribute> class is used to identify whether a property of a custom profile implementation can be accessed if the user is an anonymous user. For information about enabling anonymous identification, see the  configuration element.  \n  \n If no <xref:System.Web.Profile.SettingsAllowAnonymousAttribute> is specified for a profile property, anonymous access to the profile property is not allowed.  \n  \n A custom profile implementation is a class that inherits from the <xref:System.Web.Profile.ProfileBase> abstract class and defines properties for the user profile that are not specified in the  configuration element."
  example:
  - "The following example defines a class that inherits from the <xref:System.Web.Profile.ProfileBase> class to create a custom profile. The type of the custom profile is specified in the `inherits` attribute of the  configuration element in the Web.config file for an application. For an example of a configuration file that specifies a custom profile implementation, see the <xref:System.Web.Profile.SettingsAllowAnonymousAttribute> class overview.  \n  \n [!code-cs[System.Web.Profile.ProfileBase#1](~/add/codesnippet/csharp/m-system.web.profile.set_1.cs)]\n [!code-vb[System.Web.Profile.ProfileBase#1](~/add/codesnippet/visualbasic/m-system.web.profile.set_1.vb)]"
  syntax:
    content: public SettingsAllowAnonymousAttribute (bool allow);
    parameters:
    - id: allow
      type: System.Boolean
      description: '`true` if anonymous users can access the associated profile property; otherwise `false`.'
  overload: System.Web.Profile.SettingsAllowAnonymousAttribute.#ctor*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Web.Profile.SettingsAllowAnonymousAttribute.Allow
  id: Allow
  parent: System.Web.Profile.SettingsAllowAnonymousAttribute
  langs:
  - csharp
  name: Allow
  nameWithType: SettingsAllowAnonymousAttribute.Allow
  fullName: System.Web.Profile.SettingsAllowAnonymousAttribute.Allow
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Profile
  summary: Gets a value indicating whether the associated property of a custom profile implementation can be accessed if the user is an anonymous user.
  syntax:
    content: public bool Allow { get; }
    return:
      type: System.Boolean
      description: '`true` if anonymous users can access the associated profile property; otherwise, `false`.'
  overload: System.Web.Profile.SettingsAllowAnonymousAttribute.Allow*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Web.Profile.SettingsAllowAnonymousAttribute.IsDefaultAttribute
  id: IsDefaultAttribute
  parent: System.Web.Profile.SettingsAllowAnonymousAttribute
  langs:
  - csharp
  name: IsDefaultAttribute()
  nameWithType: SettingsAllowAnonymousAttribute.IsDefaultAttribute()
  fullName: System.Web.Profile.SettingsAllowAnonymousAttribute.IsDefaultAttribute()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Profile
  summary: Gets a value indicating whether the <xref:System.Web.Profile.SettingsAllowAnonymousAttribute.Allow*> property is set to the default value.
  syntax:
    content: public override bool IsDefaultAttribute ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the <xref:System.Web.Profile.SettingsAllowAnonymousAttribute.Allow*> property is set to the default value; otherwise `false`.'
  overload: System.Web.Profile.SettingsAllowAnonymousAttribute.IsDefaultAttribute*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Web.Profile.SettingsAllowAnonymousAttribute.#ctor(System.Boolean)
  parent: System.Web.Profile.SettingsAllowAnonymousAttribute
  isExternal: false
  name: SettingsAllowAnonymousAttribute(Boolean)
  nameWithType: SettingsAllowAnonymousAttribute.SettingsAllowAnonymousAttribute(Boolean)
  fullName: System.Web.Profile.SettingsAllowAnonymousAttribute.SettingsAllowAnonymousAttribute(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Profile.SettingsAllowAnonymousAttribute.Allow
  parent: System.Web.Profile.SettingsAllowAnonymousAttribute
  isExternal: false
  name: Allow
  nameWithType: SettingsAllowAnonymousAttribute.Allow
  fullName: System.Web.Profile.SettingsAllowAnonymousAttribute.Allow
- uid: System.Web.Profile.SettingsAllowAnonymousAttribute.IsDefaultAttribute
  parent: System.Web.Profile.SettingsAllowAnonymousAttribute
  isExternal: false
  name: IsDefaultAttribute()
  nameWithType: SettingsAllowAnonymousAttribute.IsDefaultAttribute()
  fullName: System.Web.Profile.SettingsAllowAnonymousAttribute.IsDefaultAttribute()
- uid: System.Web.Profile.SettingsAllowAnonymousAttribute.#ctor*
  parent: System.Web.Profile.SettingsAllowAnonymousAttribute
  isExternal: false
  name: SettingsAllowAnonymousAttribute
  nameWithType: SettingsAllowAnonymousAttribute.SettingsAllowAnonymousAttribute
- uid: System.Web.Profile.SettingsAllowAnonymousAttribute.Allow*
  parent: System.Web.Profile.SettingsAllowAnonymousAttribute
  isExternal: false
  name: Allow
  nameWithType: SettingsAllowAnonymousAttribute.Allow
- uid: System.Web.Profile.SettingsAllowAnonymousAttribute.IsDefaultAttribute*
  parent: System.Web.Profile.SettingsAllowAnonymousAttribute
  isExternal: false
  name: IsDefaultAttribute
  nameWithType: SettingsAllowAnonymousAttribute.IsDefaultAttribute
