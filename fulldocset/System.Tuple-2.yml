### YamlMime:ManagedReference
items:
- uid: System.Tuple`2
  id: Tuple`2
  children:
  - System.Tuple`2.#ctor(`0,`1)
  - System.Tuple`2.Equals(System.Object)
  - System.Tuple`2.GetHashCode
  - System.Tuple`2.Item1
  - System.Tuple`2.Item2
  - System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  - System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  - System.Tuple`2.System#IComparable#CompareTo(System.Object)
  - System.Tuple`2.ToString
  langs:
  - csharp
  name: Tuple<T1,T2>
  nameWithType: Tuple<T1,T2>
  fullName: System.Tuple<T1,T2>
  type: Class
  summary: Represents a 2-tuple, or pair.
  remarks: "A tuple is a data structure that has a specific number and sequence of values. The Tuple(T1, class represents a 2-tuple, or pair, which is a tuple that has two components. A 2-tuple is similar to a <xref:System.Collections.Generic.KeyValuePair%602> structure.  \n  \n You can instantiate a Tuple(T1, object by calling either the <xref:System.Tuple%602.%23ctor%2A> constructor or the static <xref:System.Tuple.Create%60%602%28%60%600%2C%60%601%29?displayProperty=fullName> method. You can retrieve the values of the tuple's components by using the read-only <xref:System.Tuple%602.Item1%2A> and <xref:System.Tuple%602.Item2%2A> instance properties.  \n  \n Tuples are commonly used in four different ways:  \n  \n-   To represent a single set of data. For example, a tuple can represent a record in a database, and its components can represent that record's fields.  \n  \n-   To provide easy access to, and manipulation of, a data set. The following example defines an array of Tuple(T1, objects that contain the names of students and their corresponding test scores. It then iterates the array to calculate the mean test score.  \n  \n     [!code-vb[System.Tuple`2.Class#1](~/add/codesnippet/visualbasic/t-system.tuple`2_1.vb)]\n     [!code-cs[System.Tuple`2.Class#1](~/add/codesnippet/csharp/t-system.tuple`2_1.cs)]  \n  \n-   To return multiple values from a method without the use of `out` parameters (in C#) or `ByRef` parameters (in Visual Basic). For example, the following example uses a Tuple(T1, object to return the quotient and the remainder that result from integer division.  \n  \n     [!code-cs[System.Tuple`2.Item1#1](~/add/codesnippet/csharp/t-system.tuple`2_2.cs)]\n     [!code-vb[System.Tuple`2.Item1#1](~/add/codesnippet/visualbasic/t-system.tuple`2_2.vb)]  \n  \n-   To pass multiple values to a method through a single parameter. For example, the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> method has a single parameter that lets you supply one value to the method that the thread executes at startup. If you supply a Tuple(T1, object as the method argument, you can supply the threadâ€™s startup routine with two items of data."
  syntax:
    content: 'public class Tuple<T1,T2> : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable'
    typeParameters:
    - id: T1
      description: The type of the tuple's first component.
    - id: T2
      description: The type of the tuple's second component.
  inheritance:
  - System.Object
  implements:
  - System.Collections.IStructuralComparable
  - System.Collections.IStructuralEquatable
  - System.IComparable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`2.#ctor(`0,`1)
  id: '#ctor(`0,`1)'
  parent: System.Tuple`2
  langs:
  - csharp
  name: Tuple<T1,T2>(T1,T2)
  nameWithType: Tuple<T1,T2>.Tuple<T1,T2>(T1,T2)
  fullName: System.Tuple<T1,T2>.Tuple<T1,T2>(T1,T2)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="stem.Tuple%602"></xref> class.
  remarks: "You can also use the static <xref:System.Tuple.Create%60%602%28%60%600%2C%60%601%29?displayProperty=fullName> method to instantiate a 2-tuple object without having to explicitly specify the types of its components. The following example uses the <xref:System.Tuple.Create%60%602%28%60%600%2C%60%601%29?displayProperty=fullName> method to instantiate a 2-tuple whose components are of type <xref:System.String> and <xref:System.Double>.  \n  \n [!code-cs[System.Tuple.Create#3](~/add/codesnippet/csharp/m-system.tuple`2.sharpct_1.cs)]\n [!code-vb[System.Tuple.Create#3](~/add/codesnippet/visualbasic/m-system.tuple`2.sharpct_1.vb)]  \n  \n This is equivalent to the following call to the Tuple(T1, class constructor.  \n  \n [!code-cs[System.Tuple.Create#4](~/add/codesnippet/csharp/m-system.tuple`2.sharpct_2.cs)]\n [!code-vb[System.Tuple.Create#4](~/add/codesnippet/visualbasic/m-system.tuple`2.sharpct_2.vb)]"
  syntax:
    content: public Tuple (T1 item1, T2 item2);
    parameters:
    - id: item1
      type: T1
      description: The value of the tuple's first component.
    - id: item2
      type: T2
      description: The value of the tuple's second component.
  overload: System.Tuple`2.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`2.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Tuple`2
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Tuple<T1,T2>.Equals(Object)
  fullName: System.Tuple<T1,T2>.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether the current <xref href="stem.Tuple%602"></xref> object is equal to a specified object.
  remarks: "The `obj` parameter is considered to be equal to the current instance under the following conditions:  \n  \n-   It is a <xref:System.Tuple%602> object.  \n  \n-   Its two components are of the same types as the current instance.  \n  \n-   Its two components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component."
  example:
  - "The following example calls the Equals method to determine whether any of the objects in an array of <xref:System.Tuple%602> objects are equal to one another. The output reflects the fact that the Equals method returns `true` when comparing <xref:System.Tuple%602> objects whose components have equal values.  \n  \n [!code-vb[System.Tuple`2.Equals#1](~/add/codesnippet/visualbasic/m-system.tuple`2.equals-_1.vb)]\n [!code-cs[System.Tuple`2.Equals#1](~/add/codesnippet/csharp/m-system.tuple`2.equals-_1.cs)]"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with this instance.
    return:
      type: System.Boolean
      description: '`true` if the current instance is equal to the specified object; otherwise, `false`.'
  overload: System.Tuple`2.Equals*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`2.GetHashCode
  id: GetHashCode
  parent: System.Tuple`2
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Tuple<T1,T2>.GetHashCode()
  fullName: System.Tuple<T1,T2>.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the hash code for the current <xref href="stem.Tuple%602"></xref> object.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Tuple`2.GetHashCode*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`2.Item1
  id: Item1
  parent: System.Tuple`2
  langs:
  - csharp
  name: Item1
  nameWithType: Tuple<T1,T2>.Item1
  fullName: System.Tuple<T1,T2>.Item1
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value of the current <xref href="stem.Tuple%602"></xref> object's first component.
  remarks: "You can dynamically determine the type of the Item1 component in one of two ways:  \n  \n-   By calling the `GetType` method on the value that is returned by the Item1 property.  \n  \n-   By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%602> object, and retrieving the first element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method."
  example:
  - "The example illustrates the use of the Item1 and <xref:System.Tuple%602.Item2%2A> properties to define a method that returns multiple values in the form of a 2-tuple.  \n  \n [!code-cs[System.Tuple`2.Item1#1](~/add/codesnippet/csharp/p-system.tuple`2.item1_1.cs)]\n [!code-vb[System.Tuple`2.Item1#1](~/add/codesnippet/visualbasic/p-system.tuple`2.item1_1.vb)]"
  syntax:
    content: public T1 Item1 { get; }
    return:
      type: T1
      description: The value of the current <xref href="stem.Tuple%602"></xref> object's first component.
  overload: System.Tuple`2.Item1*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`2.Item2
  id: Item2
  parent: System.Tuple`2
  langs:
  - csharp
  name: Item2
  nameWithType: Tuple<T1,T2>.Item2
  fullName: System.Tuple<T1,T2>.Item2
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value of the current <xref href="stem.Tuple%602"></xref> object's second component.
  remarks: "You can dynamically determine the type of the Item2 component in one of two ways:  \n  \n-   By calling the `GetType` method on the value that is returned by the Item2 property.  \n  \n-   By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%602> object, and retrieving the second element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method."
  example:
  - "The example illustrates the use of the <xref:System.Tuple%602.Item1%2A> and Item2 properties to define a method that returns multiple values in the form of a 2-tuple.  \n  \n [!code-cs[System.Tuple`2.Item1#1](~/add/codesnippet/csharp/p-system.tuple`2.item2_1.cs)]\n [!code-vb[System.Tuple`2.Item1#1](~/add/codesnippet/visualbasic/p-system.tuple`2.item2_1.vb)]"
  syntax:
    content: public T2 Item2 { get; }
    return:
      type: T2
      description: The value of the current <xref href="stem.Tuple%602"></xref> object's second component.
  overload: System.Tuple`2.Item2*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  isEii: true
  parent: System.Tuple`2
  langs:
  - csharp
  name: IStructuralComparable.CompareTo(Object,IComparer)
  nameWithType: Tuple<T1,T2>.IStructuralComparable.CompareTo(Object,IComparer)
  fullName: System.Tuple<T1,T2>.IStructuralComparable.CompareTo(Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares the current <xref href="stem.Tuple%602"></xref> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Tuple%602> instance is cast to an <xref:System.Collections.IStructuralComparable> interface.  \n  \n Although this method can be called directly, it is most commonly called by collection sorting methods that include <xref:System.Collections.IComparer> parameters to order the members of a collection., For example, it is called by the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=fullName> method and the <xref:System.Collections.SortedList.Add%2A> method of a <xref:System.Collections.SortedList> object that is instantiated by using the <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=fullName> constructor.  \n  \n> [!CAUTION]\n>  The IStructuralComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <xref:System.Tuple%602.System%23Collections%23IStructuralEquatable%23Equals%2A> method."
  example:
  - "The following example creates an array of <xref:System.Tuple%602> objects that consist of a student's name and test score. It displays the component of each tuple in the array in unsorted order, sorts the array, and then calls <xref:System.Tuple%602.ToString%2A> to display the value of each tuple in sorted order. To sort the array, the example defines a generic `ScoreComparer` class that implements the <xref:System.Collections.IComparer> interface and sorts the <xref:System.Tuple%602> objects in ascending order by the value of their second component rather than their first component. Note that the example does not directly call the IStructuralComparable.CompareTo method. This method is called implicitly by the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=fullName> method for each element in the array.  \n  \n [!code-cs[System.Tuple`2.CompareTo#2](~/add/codesnippet/csharp/3a9145ce-8e8f-4729-be12-_1.cs)]\n [!code-vb[System.Tuple`2.CompareTo#2](~/add/codesnippet/visualbasic/3a9145ce-8e8f-4729-be12-_1.vb)]"
  syntax:
    content: int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);
    parameters:
    - id: other
      type: System.Object
      description: An object to compare with the current instance.
    - id: comparer
      type: System.Collections.IComparer
      description: An object that provides custom rules for comparison.
    return:
      type: System.Int32
      description: "A signed integer that indicates the relative position of this instance and <code>other</code> in the sort order, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> A negative integer  \n  \n </td><td> This instance precedes <code>other</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> This instance and <code>other</code> have the same position in the sort order.  \n  \n </td></tr><tr><td> A positive integer  \n  \n </td><td> This instance follows <code>other</code>.  \n  \n </td></tr></tbody></table>"
  overload: System.Tuple`2.System#Collections#IStructuralComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>other</code> is not a <xref href="stem.Tuple%602"></xref> object.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Tuple`2
  langs:
  - csharp
  name: IStructuralEquatable.Equals(Object,IEqualityComparer)
  nameWithType: Tuple<T1,T2>.IStructuralEquatable.Equals(Object,IEqualityComparer)
  fullName: System.Tuple<T1,T2>.IStructuralEquatable.Equals(Object,IEqualityComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether the current <xref href="stem.Tuple%602"></xref> object is equal to a specified object based on a specified comparison method.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Tuple%602> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.  \n  \n The IStructuralEquatable.Equals implementation is called only if `other` is not `null`, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <xref:System.Tuple%602> object whose components are of the same types as the current instance. The IStructuralEquatable.Equals method first passes the <xref:System.Tuple%602.Item1%2A> values of the <xref:System.Tuple%602> objects to be compared to the <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> implementation. If this method call returns `true`, the method is called again and passed the <xref:System.Tuple%602.Item2%2A> values of the two <xref:System.Tuple%602> objects."
  example:
  - "The following example defines an `Item2Comparer` class that implements the <xref:System.Collections.IEqualityComparer> interface and changes the way in which <xref:System.Tuple%602> objects are evaluated for equality. The method always returns `true` when it is passed the <xref:System.Tuple%602.Item1%2A> property values of two <xref:System.Tuple%602> objects, and it calls the IStructuralEquatable.Equals method to evaluate their <xref:System.Tuple%602.Item2%2A> property values. As a result, the method tests for equality based only on the value of the <xref:System.Tuple%602.Item2%2A> property. The output illustrates the result for a data set of <xref:System.Tuple%602> objects that record the names of runners and the distances that they ran.  \n  \n [!code-cs[System.Tuple`2.Equals#2](~/add/codesnippet/csharp/52146b7b-0ff6-4f0b-82b0-_1.cs)]\n [!code-vb[System.Tuple`2.Equals#2](~/add/codesnippet/visualbasic/52146b7b-0ff6-4f0b-82b0-_1.vb)]"
  syntax:
    content: bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);
    parameters:
    - id: other
      type: System.Object
      description: The object to compare with this instance.
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: An object that defines the method to use to evaluate whether the two objects are equal.
    return:
      type: System.Boolean
      description: '`true` if the current instance is equal to the specified object; otherwise, `false`.'
  overload: System.Tuple`2.System#Collections#IStructuralEquatable#Equals*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Tuple`2
  langs:
  - csharp
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType: Tuple<T1,T2>.IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Tuple<T1,T2>.IStructuralEquatable.GetHashCode(IEqualityComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Calculates the hash code for the current <xref href="stem.Tuple%602"></xref> object by using a specified computation method.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Tuple%602> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.  \n  \n The method simply wraps a call to the `comparer` object's <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=fullName> implementation.  \n  \n The algorithm used to compute the hash code should return the same hash code for two <xref:System.Tuple%602> objects that are considered to be equal."
  syntax:
    content: int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: An object whose <xref href="stem.Collections.IEqualityComparer.GetHashCode%2A"></xref> method calculates the hash code of the current <xref href="stem.Tuple%602"></xref> object.
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`2.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.Tuple`2
  langs:
  - csharp
  name: IComparable.CompareTo(Object)
  nameWithType: Tuple<T1,T2>.IComparable.CompareTo(Object)
  fullName: System.Tuple<T1,T2>.IComparable.CompareTo(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares the current <xref href="stem.Tuple%602"></xref> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Tuple%602> instance is cast to an <xref:System.IComparable> interface.  \n  \n This method provides the <xref:System.IComparable.CompareTo%2A?displayProperty=fullName> implementation for the <xref:System.Tuple%602> class. Although the method can be called directly, it is most commonly called by the default overloads of collection sorting methods, such as <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> and <xref:System.Collections.SortedList.Add%2A?displayProperty=fullName>, to order the members of a collection.  \n  \n> [!CAUTION]\n>  The IComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <xref:System.Tuple%602.Equals%2A> method.  \n  \n The IComparable.CompareTo method uses the default object comparer to compare each component."
  example:
  - "The following example creates an array of <xref:System.Tuple%602> objects that consist of a student's name and test score. It displays the component of each tuple in the array in unsorted order, sorts the array, and then calls <xref:System.Tuple%602.ToString%2A> to display the value of each tuple in sorted order. The output shows that the array has been sorted by its first component. Note that the example does not directly call the IComparable.CompareTo method. This method is called implicitly by the <xref:System.Array.Sort%28System.Array%29> method for each element in the array.  \n  \n [!code-cs[System.Tuple`2.CompareTo#1](~/add/codesnippet/csharp/m-system.tuple`2.systems_1.cs)]\n [!code-vb[System.Tuple`2.CompareTo#1](~/add/codesnippet/visualbasic/m-system.tuple`2.systems_1.vb)]"
  syntax:
    content: int IComparable.CompareTo (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with the current instance.
    return:
      type: System.Int32
      description: "A signed integer that indicates the relative position of this instance and <code>obj</code> in the sort order, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> A negative integer  \n  \n </td><td> This instance precedes <code>obj</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> This instance and <code>obj</code> have the same position in the sort order.  \n  \n </td></tr><tr><td> A positive integer  \n  \n </td><td> This instance follows <code>obj</code>.  \n  \n </td></tr></tbody></table>"
  overload: System.Tuple`2.System#IComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>obj</code> is not a <xref href="stem.Tuple%602"></xref> object.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`2.ToString
  id: ToString
  parent: System.Tuple`2
  langs:
  - csharp
  name: ToString()
  nameWithType: Tuple<T1,T2>.ToString()
  fullName: System.Tuple<T1,T2>.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a string that represents the value of this <xref href="stem.Tuple%602"></xref> instance.
  remarks: The string returned by this method takes the form (*Item1*, *Item2*), where *Item1* and *Item2* represent the values of the <xref:System.Tuple%602.Item1%2A> and <xref:System.Tuple%602.Item2%2A> properties. If either property value is `null`, it is represented as <xref:System.String.Empty?displayProperty=fullName>.
  example:
  - "The following example illustrates the ToString method.  \n  \n [!code-cs[System.Tuple`2.ToString#1](~/add/codesnippet/csharp/m-system.tuple`2.tostring_1.cs)]\n [!code-vb[System.Tuple`2.ToString#1](~/add/codesnippet/visualbasic/m-system.tuple`2.tostring_1.vb)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The string representation of this <xref href="stem.Tuple%602"></xref> object.
  overload: System.Tuple`2.ToString*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Tuple`2.#ctor(`0,`1)
  parent: System.Tuple`2
  isExternal: false
  name: Tuple<T1,T2>(T1,T2)
  nameWithType: Tuple<T1,T2>.Tuple<T1,T2>(T1,T2)
  fullName: System.Tuple<T1,T2>.Tuple<T1,T2>(T1,T2)
- uid: T1
  isExternal: true
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  isExternal: true
  name: T2
  nameWithType: T2
  fullName: T2
- uid: System.Tuple`2.Equals(System.Object)
  parent: System.Tuple`2
  isExternal: false
  name: Equals(Object)
  nameWithType: Tuple<T1,T2>.Equals(Object)
  fullName: System.Tuple<T1,T2>.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Tuple`2.GetHashCode
  parent: System.Tuple`2
  isExternal: false
  name: GetHashCode()
  nameWithType: Tuple<T1,T2>.GetHashCode()
  fullName: System.Tuple<T1,T2>.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Tuple`2.Item1
  parent: System.Tuple`2
  isExternal: false
  name: Item1
  nameWithType: Tuple<T1,T2>.Item1
  fullName: System.Tuple<T1,T2>.Item1
- uid: System.Tuple`2.Item2
  parent: System.Tuple`2
  isExternal: false
  name: Item2
  nameWithType: Tuple<T1,T2>.Item2
  fullName: System.Tuple<T1,T2>.Item2
- uid: System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Tuple`2
  isExternal: false
  name: IStructuralComparable.CompareTo(Object,IComparer)
  nameWithType: Tuple<T1,T2>.IStructuralComparable.CompareTo(Object,IComparer)
  fullName: System.Tuple<T1,T2>.IStructuralComparable.CompareTo(Object,IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Tuple`2
  isExternal: false
  name: IStructuralEquatable.Equals(Object,IEqualityComparer)
  nameWithType: Tuple<T1,T2>.IStructuralEquatable.Equals(Object,IEqualityComparer)
  fullName: System.Tuple<T1,T2>.IStructuralEquatable.Equals(Object,IEqualityComparer)
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Tuple`2
  isExternal: false
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType: Tuple<T1,T2>.IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Tuple<T1,T2>.IStructuralEquatable.GetHashCode(IEqualityComparer)
- uid: System.Tuple`2.System#IComparable#CompareTo(System.Object)
  parent: System.Tuple`2
  isExternal: false
  name: IComparable.CompareTo(Object)
  nameWithType: Tuple<T1,T2>.IComparable.CompareTo(Object)
  fullName: System.Tuple<T1,T2>.IComparable.CompareTo(Object)
- uid: System.Tuple`2.ToString
  parent: System.Tuple`2
  isExternal: false
  name: ToString()
  nameWithType: Tuple<T1,T2>.ToString()
  fullName: System.Tuple<T1,T2>.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Tuple`2.#ctor*
  parent: System.Tuple`2
  isExternal: false
  name: Tuple<T1,T2>
  nameWithType: Tuple<T1,T2>.Tuple<T1,T2>
- uid: System.Tuple`2.Equals*
  parent: System.Tuple`2
  isExternal: false
  name: Equals
  nameWithType: Tuple<T1,T2>.Equals
- uid: System.Tuple`2.GetHashCode*
  parent: System.Tuple`2
  isExternal: false
  name: GetHashCode
  nameWithType: Tuple<T1,T2>.GetHashCode
- uid: System.Tuple`2.Item1*
  parent: System.Tuple`2
  isExternal: false
  name: Item1
  nameWithType: Tuple<T1,T2>.Item1
- uid: System.Tuple`2.Item2*
  parent: System.Tuple`2
  isExternal: false
  name: Item2
  nameWithType: Tuple<T1,T2>.Item2
- uid: System.Tuple`2.System#Collections#IStructuralComparable#CompareTo*
  parent: System.Tuple`2
  isExternal: false
  name: System.Collections.IStructuralComparable.CompareTo
  nameWithType: Tuple<T1,T2>.System.Collections.IStructuralComparable.CompareTo
- uid: System.Tuple`2.System#Collections#IStructuralEquatable#Equals*
  parent: System.Tuple`2
  isExternal: false
  name: System.Collections.IStructuralEquatable.Equals
  nameWithType: Tuple<T1,T2>.System.Collections.IStructuralEquatable.Equals
- uid: System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode*
  parent: System.Tuple`2
  isExternal: false
  name: System.Collections.IStructuralEquatable.GetHashCode
  nameWithType: Tuple<T1,T2>.System.Collections.IStructuralEquatable.GetHashCode
- uid: System.Tuple`2.System#IComparable#CompareTo*
  parent: System.Tuple`2
  isExternal: false
  name: System.IComparable.CompareTo
  nameWithType: Tuple<T1,T2>.System.IComparable.CompareTo
- uid: System.Tuple`2.ToString*
  parent: System.Tuple`2
  isExternal: false
  name: ToString
  nameWithType: Tuple<T1,T2>.ToString
