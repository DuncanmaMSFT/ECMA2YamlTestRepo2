### YamlMime:ManagedReference
items:
- uid: System.Tuple
  id: Tuple
  children:
  - System.Tuple.Create``1(``0)
  - System.Tuple.Create``2(``0,``1)
  - System.Tuple.Create``3(``0,``1,``2)
  - System.Tuple.Create``4(``0,``1,``2,``3)
  - System.Tuple.Create``5(``0,``1,``2,``3,``4)
  - System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)
  - System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)
  - System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)
  langs:
  - csharp
  name: Tuple
  nameWithType: Tuple
  fullName: System.Tuple
  type: Class
  summary: "Provides static methods for creating tuple objects.  \n  \n To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/tuple.cs#9124c4bea9ab0199)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/tuple.cs#9124c4bea9ab0199). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n A tuple is a data structure that has a specific number and sequence of elements. An example of a tuple is a data structure with three elements (known as a 3-tuple or triple) that is used to store an identifier such as a person's name in the first element, a year in the second element, and the person's income for that year in the third element. The .NET Framework directly supports tuples with one to seven elements. In addition, you can create tuples of eight or more elements by nesting tuple objects in the <xref:System.Tuple%608.Rest%2A> property of a <xref:System.Tuple%608> object.  \n  \n Tuples are commonly used in four ways:  \n  \n-   To represent a single set of data. For example, a tuple can represent a database record, and its components can represent individual fields of the record.  \n  \n-   To provide easy access to, and manipulation of, a data set.  \n  \n-   To return multiple values from a method without using `out` parameters (in C#) or `ByRef` parameters (in Visual Basic).  \n  \n-   To pass multiple values to a method through a single parameter. For example, the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> method has a single parameter that lets you supply one value to the method that the thread executes at startup time. If you supply a <xref:System.Tuple%603> object as the method argument, you can supply the threadâ€™s startup routine with three items of data.  \n  \n The Tuple class does not itself represent a tuple. Instead, it is a class that provides static methods for creating instances of the tuple types that are supported by the .NET Framework. It provides helper methods that you can call to instantiate tuple objects without having to explicitly specify the type of each tuple component.  \n  \n Although you can create an instance of a tuple class by calling its class constructor, the code to do so can be cumbersome. The following example uses a class constructor to create a 7-tuple or septuple that contains population data for New York City for each census from 1950 through 2000.  \n  \n [!code-cs[System.Tuple.Class#1](~/add/codesnippet/csharp/t-system.tuple_1.cs)]\n [!code-vb[System.Tuple.Class#1](~/add/codesnippet/visualbasic/t-system.tuple_1.vb)]  \n  \n Creating the same tuple object by using a helper method is more straightforward, as the following example shows.  \n  \n [!code-cs[System.Tuple.Class#2](~/add/codesnippet/csharp/t-system.tuple_2.cs)]\n [!code-vb[System.Tuple.Class#2](~/add/codesnippet/visualbasic/t-system.tuple_2.vb)]  \n  \n The <xref:System.Tuple.Create%2A> helper methods directly support the creation of tuple objects that have from one to eight components (that is, singletons through octuples). Although there is no practical limit to the number of components a tuple may have, helper methods are not available to create a tuple with nine or more components. To create such a tuple, you must call the <xref:System.Tuple%608.%23ctor%2A?displayProperty=fullName> constructor.  \n  \n> [!NOTE]\n>  For additional information and examples that use tuples, see the documentation for the individual tuple types in the .NET Framework. These are listed in the See Also section at the end of this topic."
  example:
  - "The following example creates an 8-tuple (octuple) that contains prime numbers that are less than 20.  \n  \n [!code-vb[System.Tuple.Create#17](~/add/codesnippet/visualbasic/t-system.tuple_3.vb)]\n [!code-cs[System.Tuple.Create#17](~/add/codesnippet/csharp/t-system.tuple_3.cs)]"
  syntax:
    content: public static class Tuple
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple.Create``1(``0)
  id: Create``1(``0)
  parent: System.Tuple
  langs:
  - csharp
  name: Create<T1>(T1)
  nameWithType: Tuple.Create<T1>(T1)
  fullName: System.Tuple.Create<T1>(T1)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new 1-tuple, or singleton.
  remarks: "Create(T1) is a helper method that you can call to instantiate a 1-tuple object without having to explicitly specify the type of its component. The following example uses the Create(T1) method to instantiate a 1-tuple whose component is of type <xref:System.Int32>.  \n  \n [!code-cs[System.Tuple.Create#1](~/add/codesnippet/csharp/m-system.tuple.create``1_1.cs)]\n [!code-vb[System.Tuple.Create#1](~/add/codesnippet/visualbasic/m-system.tuple.create``1_1.vb)]  \n  \n This code is equivalent to the following call to the <xref:System.Tuple%601.%23ctor%2A> class constructor.  \n  \n [!code-cs[System.Tuple.Create#2](~/add/codesnippet/csharp/m-system.tuple.create``1_2.cs)]\n [!code-vb[System.Tuple.Create#2](~/add/codesnippet/visualbasic/m-system.tuple.create``1_2.vb)]"
  syntax:
    content: public static Tuple<T1> Create<T1> (T1 item1);
    parameters:
    - id: item1
      type: T1
      description: The value of the only component of the tuple.
    return:
      type: System.Tuple`1
      description: A tuple whose value is (<code>item1</code>).
  overload: System.Tuple.Create<T1>*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple.Create``2(``0,``1)
  id: Create``2(``0,``1)
  parent: System.Tuple
  langs:
  - csharp
  name: Create<T1,T2>(T1,T2)
  nameWithType: Tuple.Create<T1,T2>(T1,T2)
  fullName: System.Tuple.Create<T1,T2>(T1,T2)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new 2-tuple, or pair.
  remarks: "Create(T1, is a helper method that you can call to instantiate a 2-tuple object without having to explicitly specify the types of its components. The following example uses the Create(T1, method to instantiate a 2-tuple.  \n  \n [!code-cs[System.Tuple.Create#3](~/add/codesnippet/csharp/m-system.tuple.create``2_1.cs)]\n [!code-vb[System.Tuple.Create#3](~/add/codesnippet/visualbasic/m-system.tuple.create``2_1.vb)]  \n  \n This code is equivalent to the following call to the <xref:System.Tuple%602.%23ctor%2A> class constructor.  \n  \n [!code-cs[System.Tuple.Create#4](~/add/codesnippet/csharp/m-system.tuple.create``2_2.cs)]\n [!code-vb[System.Tuple.Create#4](~/add/codesnippet/visualbasic/m-system.tuple.create``2_2.vb)]"
  syntax:
    content: public static Tuple<T1,T2> Create<T1,T2> (T1 item1, T2 item2);
    parameters:
    - id: item1
      type: T1
      description: The value of the first component of the tuple.
    - id: item2
      type: T2
      description: The value of the second component of the tuple.
    return:
      type: System.Tuple`2
      description: A 2-tuple whose value is (<code>item1</code>, <code>item2</code>).
  overload: System.Tuple.Create<T1,T2>*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple.Create``3(``0,``1,``2)
  id: Create``3(``0,``1,``2)
  parent: System.Tuple
  langs:
  - csharp
  name: Create<T1,T2,T3>(T1,T2,T3)
  nameWithType: Tuple.Create<T1,T2,T3>(T1,T2,T3)
  fullName: System.Tuple.Create<T1,T2,T3>(T1,T2,T3)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new 3-tuple, or triple.
  remarks: "Create(T1, is a helper method that you can call to instantiate a 3-tuple object without having to explicitly specify the types of its components. The following example uses the Create(T1, method to instantiate a 3-tuple.  \n  \n [!code-cs[System.Tuple.Create#5](~/add/codesnippet/csharp/m-system.tuple.create``3_1.cs)]\n [!code-vb[System.Tuple.Create#5](~/add/codesnippet/visualbasic/m-system.tuple.create``3_1.vb)]  \n  \n This code is equivalent to the following call to the <xref:System.Tuple%603.%23ctor%2A?displayProperty=fullName> class constructor.  \n  \n [!code-cs[System.Tuple.Create#6](~/add/codesnippet/csharp/m-system.tuple.create``3_2.cs)]\n [!code-vb[System.Tuple.Create#6](~/add/codesnippet/visualbasic/m-system.tuple.create``3_2.vb)]"
  syntax:
    content: public static Tuple<T1,T2,T3> Create<T1,T2,T3> (T1 item1, T2 item2, T3 item3);
    parameters:
    - id: item1
      type: T1
      description: The value of the first component of the tuple.
    - id: item2
      type: T2
      description: The value of the second component of the tuple.
    - id: item3
      type: T3
      description: The value of the third component of the tuple.
    return:
      type: System.Tuple`3
      description: A 3-tuple whose value is (<code>item1</code>, <code>item2</code>, <code>item3</code>).
  overload: System.Tuple.Create<T1,T2,T3>*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple.Create``4(``0,``1,``2,``3)
  id: Create``4(``0,``1,``2,``3)
  parent: System.Tuple
  langs:
  - csharp
  name: Create<T1,T2,T3,T4>(T1,T2,T3,T4)
  nameWithType: Tuple.Create<T1,T2,T3,T4>(T1,T2,T3,T4)
  fullName: System.Tuple.Create<T1,T2,T3,T4>(T1,T2,T3,T4)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new 4-tuple, or quadruple.
  remarks: "Create(T1, is a helper method that you can call to instantiate a 4-tuple object without having to explicitly specify the types of its components. The following example uses the Create(T1, method to instantiate a 4-tuple.  \n  \n [!code-cs[System.Tuple.Create#7](~/add/codesnippet/csharp/m-system.tuple.create``4_1.cs)]\n [!code-vb[System.Tuple.Create#7](~/add/codesnippet/visualbasic/m-system.tuple.create``4_1.vb)]  \n  \n This code is equivalent to the following call to the <xref:System.Tuple%604.%23ctor%2A?displayProperty=fullName> class constructor.  \n  \n [!code-cs[System.Tuple.Create#8](~/add/codesnippet/csharp/m-system.tuple.create``4_2.cs)]\n [!code-vb[System.Tuple.Create#8](~/add/codesnippet/visualbasic/m-system.tuple.create``4_2.vb)]"
  syntax:
    content: public static Tuple<T1,T2,T3,T4> Create<T1,T2,T3,T4> (T1 item1, T2 item2, T3 item3, T4 item4);
    parameters:
    - id: item1
      type: T1
      description: The value of the first component of the tuple.
    - id: item2
      type: T2
      description: The value of the second component of the tuple.
    - id: item3
      type: T3
      description: The value of the third component of the tuple.
    - id: item4
      type: T4
      description: The value of the fourth component of the tuple.
    return:
      type: System.Tuple`4
      description: A 4-tuple whose value is (<code>item1</code>, <code>item2</code>, <code>item3</code>, <code>item4</code>).
  overload: System.Tuple.Create<T1,T2,T3,T4>*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple.Create``5(``0,``1,``2,``3,``4)
  id: Create``5(``0,``1,``2,``3,``4)
  parent: System.Tuple
  langs:
  - csharp
  name: Create<T1,T2,T3,T4,T5>(T1,T2,T3,T4,T5)
  nameWithType: Tuple.Create<T1,T2,T3,T4,T5>(T1,T2,T3,T4,T5)
  fullName: System.Tuple.Create<T1,T2,T3,T4,T5>(T1,T2,T3,T4,T5)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new 5-tuple, or quintuple.
  remarks: "Create(T1, is a helper method that you can call to instantiate a 5-tuple object without having to explicitly specify the types of its components. The following example uses the Create(T1, method to instantiate a 5-tuple.  \n  \n [!code-cs[System.Tuple.Create#9](~/add/codesnippet/csharp/m-system.tuple.create``5_1.cs)]\n [!code-vb[System.Tuple.Create#9](~/add/codesnippet/visualbasic/m-system.tuple.create``5_1.vb)]  \n  \n This code is equivalent to the following call to the <xref:System.Tuple%605.%23ctor%2A> class constructor.  \n  \n [!code-cs[System.Tuple.Create#10](~/add/codesnippet/csharp/m-system.tuple.create``5_2.cs)]\n [!code-vb[System.Tuple.Create#10](~/add/codesnippet/visualbasic/m-system.tuple.create``5_2.vb)]"
  syntax:
    content: public static Tuple<T1,T2,T3,T4,T5> Create<T1,T2,T3,T4,T5> (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
    parameters:
    - id: item1
      type: T1
      description: The value of the first component of the tuple.
    - id: item2
      type: T2
      description: The value of the second component of the tuple.
    - id: item3
      type: T3
      description: The value of the third component of the tuple.
    - id: item4
      type: T4
      description: The value of the fourth component of the tuple.
    - id: item5
      type: T5
      description: The value of the fifth component of the tuple.
    return:
      type: System.Tuple`5
      description: A 5-tuple whose value is (<code>item1</code>, <code>item2</code>, <code>item3</code>, <code>item4</code>, <code>item5</code>).
  overload: System.Tuple.Create<T1,T2,T3,T4,T5>*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)
  id: Create``6(``0,``1,``2,``3,``4,``5)
  parent: System.Tuple
  langs:
  - csharp
  name: Create<T1,T2,T3,T4,T5,T6>(T1,T2,T3,T4,T5,T6)
  nameWithType: Tuple.Create<T1,T2,T3,T4,T5,T6>(T1,T2,T3,T4,T5,T6)
  fullName: System.Tuple.Create<T1,T2,T3,T4,T5,T6>(T1,T2,T3,T4,T5,T6)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new 6-tuple, or sextuple.
  remarks: "Create(T1, is a helper method that you can call to instantiate a 6-tuple object without having to explicitly specify the types of its components. The following example uses the Create(T1, method to instantiate a 6-tuple.  \n  \n [!code-cs[System.Tuple.Create#11](~/add/codesnippet/csharp/m-system.tuple.create``6_1.cs)]\n [!code-vb[System.Tuple.Create#11](~/add/codesnippet/visualbasic/m-system.tuple.create``6_1.vb)]  \n  \n This code is equivalent to the following call to the <xref:System.Tuple%606.%23ctor%2A> class constructor.  \n  \n [!code-cs[System.Tuple.Create#12](~/add/codesnippet/csharp/m-system.tuple.create``6_2.cs)]\n [!code-vb[System.Tuple.Create#12](~/add/codesnippet/visualbasic/m-system.tuple.create``6_2.vb)]"
  syntax:
    content: public static Tuple<T1,T2,T3,T4,T5,T6> Create<T1,T2,T3,T4,T5,T6> (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);
    parameters:
    - id: item1
      type: T1
      description: The value of the first component of the tuple.
    - id: item2
      type: T2
      description: The value of the second component of the tuple.
    - id: item3
      type: T3
      description: The value of the third component of the tuple.
    - id: item4
      type: T4
      description: The value of the fourth component of the tuple.
    - id: item5
      type: T5
      description: The value of the fifth component of the tuple.
    - id: item6
      type: T6
      description: The value of the sixth component of the tuple.
    return:
      type: System.Tuple`6
      description: A 6-tuple whose value is (<code>item1</code>, <code>item2</code>, <code>item3</code>, <code>item4</code>, <code>item5</code>, <code>item6</code>).
  overload: System.Tuple.Create<T1,T2,T3,T4,T5,T6>*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)
  id: Create``7(``0,``1,``2,``3,``4,``5,``6)
  parent: System.Tuple
  langs:
  - csharp
  name: Create<T1,T2,T3,T4,T5,T6,T7>(T1,T2,T3,T4,T5,T6,T7)
  nameWithType: Tuple.Create<T1,T2,T3,T4,T5,T6,T7>(T1,T2,T3,T4,T5,T6,T7)
  fullName: System.Tuple.Create<T1,T2,T3,T4,T5,T6,T7>(T1,T2,T3,T4,T5,T6,T7)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new 7-tuple, or septuple.
  remarks: "Create(T1, is a helper method that you can call to instantiate a 7-tuple object without having to explicitly specify the types of its components. The following example uses the Create(T1, method to instantiate a 7-tuple.  \n  \n [!code-cs[System.Tuple.Create#13](~/add/codesnippet/csharp/m-system.tuple.create``7_1.cs)]\n [!code-vb[System.Tuple.Create#13](~/add/codesnippet/visualbasic/m-system.tuple.create``7_1.vb)]  \n  \n This code is equivalent to the following call to the <xref:System.Tuple%607.%23ctor%2A> class constructor.  \n  \n [!code-cs[System.Tuple.Create#14](~/add/codesnippet/csharp/m-system.tuple.create``7_2.cs)]\n [!code-vb[System.Tuple.Create#14](~/add/codesnippet/visualbasic/m-system.tuple.create``7_2.vb)]"
  syntax:
    content: public static Tuple<T1,T2,T3,T4,T5,T6,T7> Create<T1,T2,T3,T4,T5,T6,T7> (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7);
    parameters:
    - id: item1
      type: T1
      description: The value of the first component of the tuple.
    - id: item2
      type: T2
      description: The value of the second component of the tuple.
    - id: item3
      type: T3
      description: The value of the third component of the tuple.
    - id: item4
      type: T4
      description: The value of the fourth component of the tuple.
    - id: item5
      type: T5
      description: The value of the fifth component of the tuple.
    - id: item6
      type: T6
      description: The value of the sixth component of the tuple.
    - id: item7
      type: T7
      description: The value of the seventh component of the tuple.
    return:
      type: System.Tuple`7
      description: A 7-tuple whose value is (<code>item1</code>, <code>item2</code>, <code>item3</code>, <code>item4</code>, <code>item5</code>, <code>item6</code>, <code>item7</code>).
  overload: System.Tuple.Create<T1,T2,T3,T4,T5,T6,T7>*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)
  id: Create``8(``0,``1,``2,``3,``4,``5,``6,``7)
  parent: System.Tuple
  langs:
  - csharp
  name: Create<T1,T2,T3,T4,T5,T6,T7,T8>(T1,T2,T3,T4,T5,T6,T7,T8)
  nameWithType: Tuple.Create<T1,T2,T3,T4,T5,T6,T7,T8>(T1,T2,T3,T4,T5,T6,T7,T8)
  fullName: System.Tuple.Create<T1,T2,T3,T4,T5,T6,T7,T8>(T1,T2,T3,T4,T5,T6,T7,T8)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates a new 8-tuple, or octuple.
  remarks: "Create(T1, is a helper method that you can call to instantiate an 8-tuple without having to explicitly specify the types of its components.  \n  \n> [!NOTE]\n>  You must call the  <xref:System.Tuple%608.%23ctor%2A?displayProperty=fullName> constructor to create a tuple with nine or more components unless your language provides a special syntax for this purpose. The static (`Shared` in Visual Basic) methods of the <xref:System.Tuple> class cannot be used to create a tuple with nine or more components."
  example:
  - "The following example creates an 8-tuple whose components are prime numbers that are less than 20.  \n  \n [!code-vb[System.Tuple.Create#17](~/add/codesnippet/visualbasic/m-system.tuple.create``8_1.vb)]\n [!code-cs[System.Tuple.Create#17](~/add/codesnippet/csharp/m-system.tuple.create``8_1.cs)]  \n  \n This is equivalent to the following example, which uses the <xref:System.Tuple%608> class constructor instead of the Create(T1, factory creation method. Note that instantiating a <xref:System.Tuple%608> object in this way involves considerably more code, because you must declare a nested <xref:System.Tuple%601> object as the <xref:System.Tuple%608> object's eighth component to produce an octuple.  \n  \n [!code-cs[System.Tuple.Create#20](~/add/codesnippet/csharp/m-system.tuple.create``8_2.cs)]\n [!code-vb[System.Tuple.Create#20](~/add/codesnippet/visualbasic/m-system.tuple.create``8_2.vb)]"
  syntax:
    content: public static Tuple<T1,T2,T3,T4,T5,T6,T7,Tuple<T8>> Create<T1,T2,T3,T4,T5,T6,T7,T8> (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, T8 item8);
    parameters:
    - id: item1
      type: T1
      description: The value of the first component of the tuple.
    - id: item2
      type: T2
      description: The value of the second component of the tuple.
    - id: item3
      type: T3
      description: The value of the third component of the tuple.
    - id: item4
      type: T4
      description: The value of the fourth component of the tuple.
    - id: item5
      type: T5
      description: The value of the fifth component of the tuple.
    - id: item6
      type: T6
      description: The value of the sixth component of the tuple.
    - id: item7
      type: T7
      description: The value of the seventh component of the tuple.
    - id: item8
      type: T8
      description: The value of the eighth component of the tuple.
    return:
      type: System.Tuple{T1,T2,T3,T4,T5,T6,T7,System.Tuple{T8}}
      description: An 8-tuple (octuple) whose value is (<code>item1</code>, <code>item2</code>, <code>item3</code>, <code>item4</code>, <code>item5</code>, <code>item6</code>, <code>item7</code>, <code>item8</code>).
  overload: System.Tuple.Create<T1,T2,T3,T4,T5,T6,T7,T8>*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Tuple.Create``1(``0)
  parent: System.Tuple
  isExternal: false
  name: Create<T1>(T1)
  nameWithType: Tuple.Create<T1>(T1)
  fullName: System.Tuple.Create<T1>(T1)
- uid: System.Tuple`1
  parent: System
  isExternal: false
  name: Tuple<T1>
  nameWithType: Tuple<T1>
  fullName: System.Tuple<T1>
- uid: T1
  isExternal: true
  name: T1
  nameWithType: T1
  fullName: T1
- uid: System.Tuple.Create``2(``0,``1)
  parent: System.Tuple
  isExternal: false
  name: Create<T1,T2>(T1,T2)
  nameWithType: Tuple.Create<T1,T2>(T1,T2)
  fullName: System.Tuple.Create<T1,T2>(T1,T2)
- uid: System.Tuple`2
  parent: System
  isExternal: false
  name: Tuple<T1,T2>
  nameWithType: Tuple<T1,T2>
  fullName: System.Tuple<T1,T2>
- uid: T2
  isExternal: true
  name: T2
  nameWithType: T2
  fullName: T2
- uid: System.Tuple.Create``3(``0,``1,``2)
  parent: System.Tuple
  isExternal: false
  name: Create<T1,T2,T3>(T1,T2,T3)
  nameWithType: Tuple.Create<T1,T2,T3>(T1,T2,T3)
  fullName: System.Tuple.Create<T1,T2,T3>(T1,T2,T3)
- uid: System.Tuple`3
  parent: System
  isExternal: false
  name: Tuple<T1,T2,T3>
  nameWithType: Tuple<T1,T2,T3>
  fullName: System.Tuple<T1,T2,T3>
- uid: T3
  isExternal: true
  name: T3
  nameWithType: T3
  fullName: T3
- uid: System.Tuple.Create``4(``0,``1,``2,``3)
  parent: System.Tuple
  isExternal: false
  name: Create<T1,T2,T3,T4>(T1,T2,T3,T4)
  nameWithType: Tuple.Create<T1,T2,T3,T4>(T1,T2,T3,T4)
  fullName: System.Tuple.Create<T1,T2,T3,T4>(T1,T2,T3,T4)
- uid: System.Tuple`4
  parent: System
  isExternal: false
  name: Tuple<T1,T2,T3,T4>
  nameWithType: Tuple<T1,T2,T3,T4>
  fullName: System.Tuple<T1,T2,T3,T4>
- uid: T4
  isExternal: true
  name: T4
  nameWithType: T4
  fullName: T4
- uid: System.Tuple.Create``5(``0,``1,``2,``3,``4)
  parent: System.Tuple
  isExternal: false
  name: Create<T1,T2,T3,T4,T5>(T1,T2,T3,T4,T5)
  nameWithType: Tuple.Create<T1,T2,T3,T4,T5>(T1,T2,T3,T4,T5)
  fullName: System.Tuple.Create<T1,T2,T3,T4,T5>(T1,T2,T3,T4,T5)
- uid: System.Tuple`5
  parent: System
  isExternal: false
  name: Tuple<T1,T2,T3,T4,T5>
  nameWithType: Tuple<T1,T2,T3,T4,T5>
  fullName: System.Tuple<T1,T2,T3,T4,T5>
- uid: T5
  isExternal: true
  name: T5
  nameWithType: T5
  fullName: T5
- uid: System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)
  parent: System.Tuple
  isExternal: false
  name: Create<T1,T2,T3,T4,T5,T6>(T1,T2,T3,T4,T5,T6)
  nameWithType: Tuple.Create<T1,T2,T3,T4,T5,T6>(T1,T2,T3,T4,T5,T6)
  fullName: System.Tuple.Create<T1,T2,T3,T4,T5,T6>(T1,T2,T3,T4,T5,T6)
- uid: System.Tuple`6
  parent: System
  isExternal: false
  name: Tuple<T1,T2,T3,T4,T5,T6>
  nameWithType: Tuple<T1,T2,T3,T4,T5,T6>
  fullName: System.Tuple<T1,T2,T3,T4,T5,T6>
- uid: T6
  isExternal: true
  name: T6
  nameWithType: T6
  fullName: T6
- uid: System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)
  parent: System.Tuple
  isExternal: false
  name: Create<T1,T2,T3,T4,T5,T6,T7>(T1,T2,T3,T4,T5,T6,T7)
  nameWithType: Tuple.Create<T1,T2,T3,T4,T5,T6,T7>(T1,T2,T3,T4,T5,T6,T7)
  fullName: System.Tuple.Create<T1,T2,T3,T4,T5,T6,T7>(T1,T2,T3,T4,T5,T6,T7)
- uid: System.Tuple`7
  parent: System
  isExternal: false
  name: Tuple<T1,T2,T3,T4,T5,T6,T7>
  nameWithType: Tuple<T1,T2,T3,T4,T5,T6,T7>
  fullName: System.Tuple<T1,T2,T3,T4,T5,T6,T7>
- uid: T7
  isExternal: true
  name: T7
  nameWithType: T7
  fullName: T7
- uid: System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)
  parent: System.Tuple
  isExternal: false
  name: Create<T1,T2,T3,T4,T5,T6,T7,T8>(T1,T2,T3,T4,T5,T6,T7,T8)
  nameWithType: Tuple.Create<T1,T2,T3,T4,T5,T6,T7,T8>(T1,T2,T3,T4,T5,T6,T7,T8)
  fullName: System.Tuple.Create<T1,T2,T3,T4,T5,T6,T7,T8>(T1,T2,T3,T4,T5,T6,T7,T8)
- uid: System.Tuple{T1,T2,T3,T4,T5,T6,T7,System.Tuple{T8}}
  parent: System
  isExternal: false
  name: Tuple<T1,T2,T3,T4,T5,T6,T7,Tuple<T8>>
  nameWithType: Tuple<T1,T2,T3,T4,T5,T6,T7,Tuple<T8>>
  fullName: System.Tuple<T1,T2,T3,T4,T5,T6,T7,System.Tuple<T8>>
  spec.csharp:
  - uid: System.Tuple`8
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple<T1,T2,T3,T4,T5,T6,T7,System.Tuple<T8>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T4
    name: T4
    nameWithType: T4
    fullName: T4
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T5
    name: T5
    nameWithType: T5
    fullName: T5
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T6
    name: T6
    nameWithType: T6
    fullName: T6
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T7
    name: T7
    nameWithType: T7
    fullName: T7
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Tuple`1
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple<T8>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T8
    name: T8
    nameWithType: T8
    fullName: T8
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: T8
  isExternal: true
  name: T8
  nameWithType: T8
  fullName: T8
- uid: System.Tuple.Create<T1>*
  parent: System.Tuple
  isExternal: false
  name: Create<T1>
  nameWithType: Tuple.Create<T1>
- uid: System.Tuple.Create<T1,T2>*
  parent: System.Tuple
  isExternal: false
  name: Create<T1,T2>
  nameWithType: Tuple.Create<T1,T2>
- uid: System.Tuple.Create<T1,T2,T3>*
  parent: System.Tuple
  isExternal: false
  name: Create<T1,T2,T3>
  nameWithType: Tuple.Create<T1,T2,T3>
- uid: System.Tuple.Create<T1,T2,T3,T4>*
  parent: System.Tuple
  isExternal: false
  name: Create<T1,T2,T3,T4>
  nameWithType: Tuple.Create<T1,T2,T3,T4>
- uid: System.Tuple.Create<T1,T2,T3,T4,T5>*
  parent: System.Tuple
  isExternal: false
  name: Create<T1,T2,T3,T4,T5>
  nameWithType: Tuple.Create<T1,T2,T3,T4,T5>
- uid: System.Tuple.Create<T1,T2,T3,T4,T5,T6>*
  parent: System.Tuple
  isExternal: false
  name: Create<T1,T2,T3,T4,T5,T6>
  nameWithType: Tuple.Create<T1,T2,T3,T4,T5,T6>
- uid: System.Tuple.Create<T1,T2,T3,T4,T5,T6,T7>*
  parent: System.Tuple
  isExternal: false
  name: Create<T1,T2,T3,T4,T5,T6,T7>
  nameWithType: Tuple.Create<T1,T2,T3,T4,T5,T6,T7>
- uid: System.Tuple.Create<T1,T2,T3,T4,T5,T6,T7,T8>*
  parent: System.Tuple
  isExternal: false
  name: Create<T1,T2,T3,T4,T5,T6,T7,T8>
  nameWithType: Tuple.Create<T1,T2,T3,T4,T5,T6,T7,T8>
