### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.LicenseProvider
  id: LicenseProvider
  children:
  - System.ComponentModel.LicenseProvider.#ctor
  - System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  langs:
  - csharp
  name: LicenseProvider
  nameWithType: LicenseProvider
  fullName: System.ComponentModel.LicenseProvider
  type: Class
  summary: Provides the `abstract` base class for implementing a license provider.
  remarks: ''
  example:
  - "The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses a LicenseProvider that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.  \n  \n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/csharp/t-system.componentmodel._172_1.cs)]\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._172_1.vb)]\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/cpp/t-system.componentmodel._172_1.cpp)]"
  syntax:
    content: public abstract class LicenseProvider
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.ComponentModel.LicenseProvider.#ctor
  id: '#ctor'
  parent: System.ComponentModel.LicenseProvider
  langs:
  - csharp
  name: LicenseProvider()
  nameWithType: LicenseProvider.LicenseProvider()
  fullName: System.ComponentModel.LicenseProvider.LicenseProvider()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: Initializes a new instance of the <xref href="System.ComponentModel.LicenseProvider"></xref> class.
  syntax:
    content: protected LicenseProvider ();
    parameters: []
  overload: System.ComponentModel.LicenseProvider.#ctor*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  id: GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  parent: System.ComponentModel.LicenseProvider
  langs:
  - csharp
  name: GetLicense(LicenseContext,Type,Object,Boolean)
  nameWithType: LicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
  fullName: System.ComponentModel.LicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.
  syntax:
    content: public abstract System.ComponentModel.License GetLicense (System.ComponentModel.LicenseContext context, Type type, object instance, bool allowExceptions);
    parameters:
    - id: context
      type: System.ComponentModel.LicenseContext
      description: A <xref href="System.ComponentModel.LicenseContext"></xref> that specifies where you can use the licensed object.
    - id: type
      type: System.Type
      description: A <xref href="System.Type"></xref> that represents the component requesting the license.
    - id: instance
      type: System.Object
      description: An object that is requesting the license.
    - id: allowExceptions
      type: System.Boolean
      description: '`true` if a <xref href="System.ComponentModel.LicenseException"></xref> should be thrown when the component cannot be granted a license; otherwise, `false`.'
    return:
      type: System.ComponentModel.License
      description: A valid <xref href="System.ComponentModel.License"></xref>.
  overload: System.ComponentModel.LicenseProvider.GetLicense*
  exceptions: []
  version:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ComponentModel.LicenseProvider.#ctor
  parent: System.ComponentModel.LicenseProvider
  isExternal: false
  name: LicenseProvider()
  nameWithType: LicenseProvider.LicenseProvider()
  fullName: System.ComponentModel.LicenseProvider.LicenseProvider()
- uid: System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  parent: System.ComponentModel.LicenseProvider
  isExternal: false
  name: GetLicense(LicenseContext,Type,Object,Boolean)
  nameWithType: LicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
  fullName: System.ComponentModel.LicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.LicenseProvider.#ctor*
  parent: System.ComponentModel.LicenseProvider
  isExternal: false
  name: LicenseProvider
  nameWithType: LicenseProvider.LicenseProvider
- uid: System.ComponentModel.LicenseProvider.GetLicense*
  parent: System.ComponentModel.LicenseProvider
  isExternal: false
  name: GetLicense
  nameWithType: LicenseProvider.GetLicense
