### YamlMime:ManagedReference
items:
- uid: System.Collections.ObjectModel.KeyedCollection`2
  id: KeyedCollection`2
  children:
  - System.Collections.ObjectModel.KeyedCollection`2.#ctor
  - System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)
  - System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)
  - System.Collections.ObjectModel.KeyedCollection`2.ClearItems
  - System.Collections.ObjectModel.KeyedCollection`2.Comparer
  - System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)
  - System.Collections.ObjectModel.KeyedCollection`2.Dictionary
  - System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)
  - System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)
  - System.Collections.ObjectModel.KeyedCollection`2.Item(`0)
  - System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)
  - System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)
  - System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)
  langs:
  - csharp
  name: KeyedCollection<TKey,TItem>
  nameWithType: KeyedCollection<TKey,TItem>
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>
  type: Class
  summary: Provides the abstract base class for a collection whose keys are embedded in the values.
  remarks: "The KeyedCollection(TKey, class provides both O(1) indexed retrieval and keyed retrieval that approaches O(1). It is an abstract type, or more accurately an infinite set of abstract types, because each of its constructed generic types is an abstract base class. To use KeyedCollection(TKey,, derive your collection type from the appropriate constructed type.  \n  \n The KeyedCollection(TKey, class is a hybrid between a collection based on the <xref:System.Collections.Generic.IList%601> generic interface and a collection based on the <xref:System.Collections.Generic.IDictionary%602> generic interface. Like collections based on the <xref:System.Collections.Generic.IList%601> generic interface, KeyedCollection(TKey, is an indexed list of items. Like collections based on the <xref:System.Collections.Generic.IDictionary%602> generic interface, KeyedCollection(TKey, has a key associated with each element.  \n  \n Unlike dictionaries, an element of KeyedCollection(TKey, is not a key/value pair; instead, the entire element is the value and the key is embedded within the value.  For example, an element of a collection derived from `KeyedCollection\\<String,String>` (`KeyedCollection(Of String, String)` in Visual Basic) might be \"John Doe Jr.\" where the value is \"John Doe Jr.\" and the key is \"Doe\"; or a collection of employee records containing integer keys could be derived from `KeyedCollection\\<int,Employee>`. The abstract <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method extracts the key from the element.  \n  \n By default, the KeyedCollection(TKey, includes a lookup dictionary that you can obtain with the <xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A> property.  When an item is added to the KeyedCollection(TKey,, the item's key is extracted once and saved in the lookup dictionary for faster searches. This behavior is overridden by specifying a dictionary creation threshold when you create the KeyedCollection(TKey,. The lookup dictionary is created the first time the number of elements exceeds that threshold.  If you specify â€“1 as the threshold, the lookup dictionary is never created.  \n  \n> [!NOTE]\n>  When the internal lookup dictionary is used, it contains references to all the items in the collection if `TItem` is a reference type, or copies of all the items in the collection if `TItem` is a value type. Thus, using the lookup dictionary may not be appropriate if `TItem` is a value type.  \n  \n You can access an item by its index or key by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>property. You can add items without a key, but these items can subsequently be accessed only by index."
  example:
  - "This section contains two code examples. The first example shows the minimum code required to derive from KeyedCollection(TKey,, and demonstrates many of the inherited methods. The second example shows how to override the protected methods of KeyedCollection(TKey, to provide custom behavior.  \n  \n **Example 1**  \n  \n This code example shows the minimum code necessary to derive a collection class from KeyedCollection(TKey,: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor. The code example also demonstrates many of the properties and methods inherited from KeyedCollection(TKey, and <xref:System.Collections.ObjectModel.Collection%601> classes.  \n  \n The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order. The key of `OrderItem` is immutable, an important consideration for classes that derive from KeyedCollection(TKey,. For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  \n  \n [!code-cpp[KeyedCollection#1](~/add/codesnippet/cpp/t-system.collections.obj_1_1.cpp)]\n [!code-cs[KeyedCollection#1](~/add/codesnippet/csharp/t-system.collections.obj_1_1.cs)]\n [!code-vb[KeyedCollection#1](~/add/codesnippet/visualbasic/t-system.collections.obj_1_1.vb)]  \n  \n **Example 2**  \n  \n The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#). The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.  \n  \n The code example creates the `SimpleOrder` class, which derives from KeyedCollection(TKey, and represents a simple order form. The order form contains `OrderItem` objects representing items ordered. The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.  \n  \n The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.  \n  \n This code example uses objects with immutable keys. For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  \n  \n [!code-vb[KeyedCollection2#1](~/add/codesnippet/visualbasic/t-system.collections.obj_1_2.vb)]\n [!code-cs[KeyedCollection2#1](~/add/codesnippet/csharp/t-system.collections.obj_1_2.cs)]\n [!code-cpp[KeyedCollection2#1](~/add/codesnippet/cpp/t-system.collections.obj_1_2.cpp)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2))]

      [System.Runtime.InteropServices.ComVisible(false)]

      public abstract class KeyedCollection<TKey,TItem> : System.Collections.ObjectModel.Collection<TItem>
    typeParameters:
    - id: TKey
      description: The type of keys in the collection.
    - id: TItem
      description: The type of items in the collection.
  inheritance:
  - System.Object
  - System.Collections.ObjectModel.Collection`1
  implements: []
  inheritedMembers:
  - System.Collections.ObjectModel.Collection`1.Add(`0)
  - System.Collections.ObjectModel.Collection`1.Clear
  - System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
  - System.Collections.ObjectModel.Collection`1.Count
  - System.Collections.ObjectModel.Collection`1.GetEnumerator
  - System.Collections.ObjectModel.Collection`1.IndexOf(`0)
  - System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
  - System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)
  - System.Collections.ObjectModel.Collection`1.Item(System.Int32)
  - System.Collections.ObjectModel.Collection`1.Items
  - System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
  - System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)
  - System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\KeyedCollection`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/KeyedCollection`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.KeyedCollection`2.#ctor
  id: '#ctor'
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  name: KeyedCollection<TKey,TItem>()
  nameWithType: KeyedCollection<TKey,TItem>.KeyedCollection<TKey,TItem>()
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.KeyedCollection<TKey,TItem>()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Initializes a new instance of the <xref href="stem.Collections.ObjectModel.KeyedCollection%602"></xref> class that uses the default equality comparer.
  remarks: "A <xref:System.Collections.ObjectModel.KeyedCollection%602> created with this constructor uses the default generic equality comparer for the type of the key, obtained from <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>. To specify a different generic equality comparer, use the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor or the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor.  \n  \n By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added. When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches. This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.  \n  \n> [!NOTE]\n>  Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it. In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor. It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.  \n  \n This constructor is an O(1) operation."
  example:
  - "This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor. The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.  \n  \n The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order. The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>. For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  \n  \n [!code-cpp[KeyedCollection#1](~/add/codesnippet/cpp/m-system.collections.obj_2_1.cpp)]\n [!code-cs[KeyedCollection#1](~/add/codesnippet/csharp/m-system.collections.obj_2_1.cs)]\n [!code-vb[KeyedCollection#1](~/add/codesnippet/visualbasic/m-system.collections.obj_2_1.vb)]"
  syntax:
    content: protected KeyedCollection ();
    parameters: []
  overload: System.Collections.ObjectModel.KeyedCollection`2.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\KeyedCollection`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/KeyedCollection`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  name: KeyedCollection<TKey,TItem>(IEqualityComparer<TKey>)
  nameWithType: KeyedCollection<TKey,TItem>.KeyedCollection<TKey,TItem>(IEqualityComparer<TKey>)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.KeyedCollection<TKey,TItem>(IEqualityComparer<TKey>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Initializes a new instance of the <xref href="stem.Collections.ObjectModel.KeyedCollection%602"></xref> class that uses the specified equality comparer.
  remarks: "By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added. When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches. This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.  \n  \n> [!NOTE]\n>  Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it. In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor. It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.  \n  \n This constructor is an O(1) operation."
  syntax:
    content: protected KeyedCollection (System.Collections.Generic.IEqualityComparer<TKey> comparer);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: The implementation of the <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> generic interface to use when comparing keys, or `null` to use the default equality comparer for the type of the key, obtained from <xref href="stem.Collections.Generic.EqualityComparer%601.Default%2A"></xref>.
  overload: System.Collections.ObjectModel.KeyedCollection`2.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\KeyedCollection`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/KeyedCollection`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)'
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  name: KeyedCollection<TKey,TItem>(IEqualityComparer<TKey>,Int32)
  nameWithType: KeyedCollection<TKey,TItem>.KeyedCollection<TKey,TItem>(IEqualityComparer<TKey>,Int32)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.KeyedCollection<TKey,TItem>(IEqualityComparer<TKey>,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Initializes a new instance of the <xref href="stem.Collections.ObjectModel.KeyedCollection%602"></xref> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.
  remarks: "By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added. When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches. This constructor allows you to override that behavior. Specify 0 to create the dictionary when the first element is added, 1 to create the dictionary when the second element is added, and so on. If you specify â€“1 as the threshold, the lookup dictionary is never created.  \n  \n For very small collections the improvement in retrieval speed provided by the lookup dictionary might not be worth the extra memory required by the dictionary. Setting a threshold allows you to decide when to make that tradeoff.  \n  \n> [!NOTE]\n>  Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it. In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor. It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.  \n  \n This constructor is an O(1) operation."
  example:
  - "The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#). The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.  \n  \n The code example uses the KeyedCollection(TKey, constructor with a threshold of 0, so that the internal dictionary is created the first time an object is added to the collection.  \n  \n The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form. The order form contains `OrderItem` objects representing items ordered. The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.  \n  \n The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.  \n  \n This code example uses objects with immutable keys. For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  \n  \n [!code-vb[KeyedCollection2#1](~/add/codesnippet/visualbasic/fd1c5f79-8a43-4900-91dd-_1.vb)]\n [!code-cs[KeyedCollection2#1](~/add/codesnippet/csharp/fd1c5f79-8a43-4900-91dd-_1.cs)]\n [!code-cpp[KeyedCollection2#1](~/add/codesnippet/cpp/fd1c5f79-8a43-4900-91dd-_1.cpp)]"
  syntax:
    content: protected KeyedCollection (System.Collections.Generic.IEqualityComparer<TKey> comparer, int dictionaryCreationThreshold);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: The implementation of the <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> generic interface to use when comparing keys, or `null` to use the default equality comparer for the type of the key, obtained from <xref href="stem.Collections.Generic.EqualityComparer%601.Default%2A"></xref>.
    - id: dictionaryCreationThreshold
      type: System.Int32
      description: The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or â€“1 to specify that a lookup dictionary is never created.
  overload: System.Collections.ObjectModel.KeyedCollection`2.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>dictionaryCreationThreshold</code> is less than â€“1.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\KeyedCollection`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/KeyedCollection`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)
  id: ChangeItemKey(`1,`0)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  name: ChangeItemKey(TItem,TKey)
  nameWithType: KeyedCollection<TKey,TItem>.ChangeItemKey(TItem,TKey)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.ChangeItemKey(TItem,TKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Changes the key associated with the specified element in the lookup dictionary.
  remarks: "This method does not modify the key embedded in `item`; it simply replaces the key saved in the lookup dictionary.  Therefore, if `newKey` is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.  \n  \n This method does nothing if the <xref:System.Collections.ObjectModel.KeyedCollection%602> does not have a lookup dictionary.  \n  \n Every key in a <xref:System.Collections.ObjectModel.KeyedCollection%602> must be unique. A key cannot be `null`.  \n  \n This method is an O(1) operation.  \n  \n## Notes for Implementers  \n Before modifying the key embedded in an item, you must call this method to update the key in the lookup dictionary. If the dictionary creation threshold is â€“1, calling this method is not necessary.  \n  \n Do not expose the ChangeItemKey method as a public method of a derived class. Misuse of this method puts the lookup dictionary out of sync with item keys. For example, setting the key to `null` and then setting it to another value adds multiple keys for an item to the lookup dictionary. Expose this method internally to allow mutable item keys: When the key for an item changes, this method is used to change the key in the lookup dictionary."
  example:
  - "The following code example shows how to override the protected ChangeItemKey method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.  \n  \n The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class. The `MutableKey` class has a settable `Key` property. When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key. If so, an exception is thrown and the property value is not changed.  \n  \n In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field. This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method. The field is set when the item is added to a collection and cleared when the item is removed.  \n  \n [!code-cs[KeyedCollectionMutable#1](~/add/codesnippet/csharp/m-system.collections.obj_3_1.cs)]\n [!code-vb[KeyedCollectionMutable#1](~/add/codesnippet/visualbasic/m-system.collections.obj_3_1.vb)]"
  syntax:
    content: protected void ChangeItemKey (TItem item, TKey newKey);
    parameters:
    - id: item
      type: TItem
      description: The element to change the key of.
    - id: newKey
      type: TKey
      description: The new key for <code>item</code>.
  overload: System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>item</code> is `null`.  \n  \n -or-  \n  \n <code>key</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>item</code> is not found.  \n  \n -or-  \n  \n <code>key</code> already exists in the <xref href=\"stem.Collections.ObjectModel.KeyedCollection%602\"></xref>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\KeyedCollection`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/KeyedCollection`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.KeyedCollection`2.ClearItems
  id: ClearItems
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  name: ClearItems()
  nameWithType: KeyedCollection<TKey,TItem>.ClearItems()
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.ClearItems()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Removes all elements from the <xref href="stem.Collections.ObjectModel.KeyedCollection%602"></xref>.
  remarks: "If there is a lookup dictionary, this method clears it but does not delete it.  \n  \n If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.  \n  \n## Notes for Implementers  \n Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.  \n  \n Call the base class implementation of this method to clear the underlying collection and to clear the lookup dictionary."
  example:
  - "This section contains two code examples that demonstrate overriding the ClearItems method to provide custom behavior for clearing all objects from the collection. The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.  \n  \n Example 1  \n  \n The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, ClearItems, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#). The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.  \n  \n The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form. The order form contains `OrderItem` objects representing items ordered. The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.  \n  \n The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.  \n  \n This code example uses objects with immutable keys. For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  \n  \n [!code-vb[KeyedCollection2#1](~/add/codesnippet/visualbasic/m-system.collections.obj_1_1.vb)]\n [!code-cs[KeyedCollection2#1](~/add/codesnippet/csharp/m-system.collections.obj_1_1.cs)]\n [!code-cpp[KeyedCollection2#1](~/add/codesnippet/cpp/m-system.collections.obj_1_1.cpp)]  \n  \n Example 2  \n  \n The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, ClearItems, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.  \n  \n The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class. The `MutableKey` class has a settable `Key` property. When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key. If so, an exception is thrown and the property value is not changed.  \n  \n In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field. This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method. The field is set when the item is added to a collection and cleared when the item is removed.  \n  \n [!code-cs[KeyedCollectionMutable#1](~/add/codesnippet/csharp/m-system.collections.obj_1_2.cs)]\n [!code-vb[KeyedCollectionMutable#1](~/add/codesnippet/visualbasic/m-system.collections.obj_1_2.vb)]"
  syntax:
    content: protected override void ClearItems ();
    parameters: []
  overload: System.Collections.ObjectModel.KeyedCollection`2.ClearItems*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\KeyedCollection`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/KeyedCollection`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.KeyedCollection`2.Comparer
  id: Comparer
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  name: Comparer
  nameWithType: KeyedCollection<TKey,TItem>.Comparer
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.Comparer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets the generic equality comparer that is used to determine equality of keys in the collection.
  remarks: Retrieving the value of this property is an O(1) operation.
  syntax:
    content: public System.Collections.Generic.IEqualityComparer<TKey> Comparer { get; }
    return:
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: The implementation of the <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> generic interface that is used to determine equality of keys in the collection.
  overload: System.Collections.ObjectModel.KeyedCollection`2.Comparer*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\KeyedCollection`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/KeyedCollection`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  name: Contains(TKey)
  nameWithType: KeyedCollection<TKey,TItem>.Contains(TKey)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.Contains(TKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Determines whether the collection contains an element with the specified key.
  remarks: "If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to search the dictionary. If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.  \n  \n This method is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  example:
  - "This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor. The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.  \n  \n The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order. The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>. For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  \n  \n [!code-cpp[KeyedCollection#1](~/add/codesnippet/cpp/m-system.collections.obj_15_1.cpp)]\n [!code-cs[KeyedCollection#1](~/add/codesnippet/csharp/m-system.collections.obj_15_1.cs)]\n [!code-vb[KeyedCollection#1](~/add/codesnippet/visualbasic/m-system.collections.obj_15_1.vb)]"
  syntax:
    content: public bool Contains (TKey key);
    parameters:
    - id: key
      type: TKey
      description: The key to locate in the <xref href="stem.Collections.ObjectModel.KeyedCollection%602"></xref>.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.ObjectModel.KeyedCollection%602"></xref> contains an element with the specified key; otherwise, `false`.'
  overload: System.Collections.ObjectModel.KeyedCollection`2.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\KeyedCollection`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/KeyedCollection`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.KeyedCollection`2.Dictionary
  id: Dictionary
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  name: Dictionary
  nameWithType: KeyedCollection<TKey,TItem>.Dictionary
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.Dictionary
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets the lookup dictionary of the <xref href="stem.Collections.ObjectModel.KeyedCollection%602"></xref>.
  remarks: "By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added. When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches. This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.  \n  \n Retrieving the value of this property is an O(1) operation."
  example:
  - "The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.  \n  \n The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class. The `MutableKey` class has a settable `Key` property. When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key. If so, an exception is thrown and the property value is not changed.  \n  \n In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field. This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method. The field is set when the item is added to a collection and cleared when the item is removed.  \n  \n [!code-cs[KeyedCollectionMutable#1](~/add/codesnippet/csharp/p-system.collections.obj_4_1.cs)]\n [!code-vb[KeyedCollectionMutable#1](~/add/codesnippet/visualbasic/p-system.collections.obj_4_1.vb)]"
  syntax:
    content: protected System.Collections.Generic.IDictionary<TKey,TItem> Dictionary { get; }
    return:
      type: System.Collections.Generic.IDictionary{TKey,TItem}
      description: The lookup dictionary of the <xref href="stem.Collections.ObjectModel.KeyedCollection%602"></xref>, if it exists; otherwise, `null`.
  overload: System.Collections.ObjectModel.KeyedCollection`2.Dictionary*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\KeyedCollection`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/KeyedCollection`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)
  id: GetKeyForItem(`1)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  name: GetKeyForItem(TItem)
  nameWithType: KeyedCollection<TKey,TItem>.GetKeyForItem(TItem)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.GetKeyForItem(TItem)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: When implemented in a derived class, extracts the key from the specified element.
  remarks: "If the key in the lookup dictionary is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by GetKeyForItem.  \n  \n You can implement this method to return `null` for a collection that contains items without keys, in which case the items can be accessed only by their index. This method is an O(1) operation.  \n  \n## Notes for Implementers  \n You must override this method to provide the dictionary with a way to extract keys from items in the dictionary.  \n  \n This method is called internally. It is not necessary for it to be public."
  example:
  - "This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the GetKeyForItem method and providing a public constructor that delegates to a base class constructor. The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.  \n  \n The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order. The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>. For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  \n  \n [!code-cpp[KeyedCollection#1](~/add/codesnippet/cpp/m-system.collections.obj_19_1.cpp)]\n [!code-cs[KeyedCollection#1](~/add/codesnippet/csharp/m-system.collections.obj_19_1.cs)]\n [!code-vb[KeyedCollection#1](~/add/codesnippet/visualbasic/m-system.collections.obj_19_1.vb)]"
  syntax:
    content: protected abstract TKey GetKeyForItem (TItem item);
    parameters:
    - id: item
      type: TItem
      description: The element from which to extract the key.
    return:
      type: TKey
      description: The key for the specified element.
  overload: System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\KeyedCollection`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/KeyedCollection`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)
  id: InsertItem(System.Int32,`1)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  name: InsertItem(Int32,TItem)
  nameWithType: KeyedCollection<TKey,TItem>.InsertItem(Int32,TItem)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.InsertItem(Int32,TItem)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Inserts an element into the <xref href="stem.Collections.ObjectModel.KeyedCollection%602"></xref> at the specified index.
  remarks: "If `index` is equal to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, `item` is added to the end of the <xref:System.Collections.ObjectModel.KeyedCollection%602>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.  \n  \n InsertItem is called by the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods.  \n  \n## Notes for Implementers  \n Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.  \n  \n Call the base class implementation of this method to insert the item into the underlying collection and to update the lookup dictionary."
  example:
  - "This section contains two code examples that demonstrate overriding the InsertItem method to provide custom behavior for adding or inserting objects into the collection. The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.  \n  \n Example 1  \n  \n The following code example shows how to override the protected InsertItem, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#). The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.  \n  \n The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form. The order form contains `OrderItem` objects representing items ordered. The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.  \n  \n The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.  \n  \n This code example uses objects with immutable keys. For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  \n  \n [!code-vb[KeyedCollection2#1](~/add/codesnippet/visualbasic/m-system.collections.obj_7_1.vb)]\n [!code-cs[KeyedCollection2#1](~/add/codesnippet/csharp/m-system.collections.obj_7_1.cs)]\n [!code-cpp[KeyedCollection2#1](~/add/codesnippet/cpp/m-system.collections.obj_7_1.cpp)]  \n  \n Example 2  \n  \n The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected InsertItem, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.  \n  \n The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class. The `MutableKey` class has a settable `Key` property. When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key. If so, an exception is thrown and the property value is not changed.  \n  \n In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field. This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the InsertItem method. The field is set when the item is added to a collection and cleared when the item is removed.  \n  \n [!code-cs[KeyedCollectionMutable#1](~/add/codesnippet/csharp/m-system.collections.obj_7_2.cs)]\n [!code-vb[KeyedCollectionMutable#1](~/add/codesnippet/visualbasic/m-system.collections.obj_7_2.vb)]"
  syntax:
    content: protected override void InsertItem (int index, TItem item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <code>item</code> should be inserted.
    - id: item
      type: TItem
      description: The object to insert.
  overload: System.Collections.ObjectModel.KeyedCollection`2.InsertItem*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than 0.  \n  \n -or-  \n  \n <code>index</code> is greater than <xref href=\"stem.Collections.ObjectModel.Collection%601.Count%2A\"></xref>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\KeyedCollection`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/KeyedCollection`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.KeyedCollection`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  name: Item(TKey)
  nameWithType: KeyedCollection<TKey,TItem>.Item(TKey)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.Item(TKey)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets the element with the specified key.
  remarks: "This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).  \n  \n> [!NOTE]\n>  This property is distinct from the inherited <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=fullName> property, which gets and sets elements by numeric index. However, if `TKey` is of type <xref:System.Int32>, this property masks the inherited property. In that case, you can access the inherited property by casting the <xref:System.Collections.ObjectModel.KeyedCollection%602> to its base type. For example, `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)` in Visual Basic, `KeyedCollection<int, MyType^>` in C++) can be cast to `Collection<MyType>` (`Collection(Of MyType)` in Visual Basic, `Collection<MyType^>` in C++).  \n  \n If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to retrieve the element from the dictionary.  If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  example:
  - "This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor. The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.  \n  \n The code example calls both the Item property, which is read-only and retrieves by key, and the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=fullName> property, which is settable and retrieves by index. It shows how to access the latter property when the objects in the derived collection have integer keys, indistinguishable from the integers used for indexed retrieval.  \n  \n The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order. The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>. For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  \n  \n [!code-cpp[KeyedCollection#1](~/add/codesnippet/cpp/p-system.collections.obj_5_1.cpp)]\n [!code-cs[KeyedCollection#1](~/add/codesnippet/csharp/p-system.collections.obj_5_1.cs)]\n [!code-vb[KeyedCollection#1](~/add/codesnippet/visualbasic/p-system.collections.obj_5_1.vb)]"
  syntax:
    content: public TItem this[TKey key] { get; }
    parameters:
    - id: key
      type: TKey
      description: The key of the element to get.
    return:
      type: TItem
      description: The element with the specified key. If an element with the specified key is not found, an exception is thrown.
  overload: System.Collections.ObjectModel.KeyedCollection`2.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: An element with the specified key does not exist in the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\KeyedCollection`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/KeyedCollection`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  name: Remove(TKey)
  nameWithType: KeyedCollection<TKey,TItem>.Remove(TKey)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.Remove(TKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Removes the element with the specified key from the <xref href="stem.Collections.ObjectModel.KeyedCollection%602"></xref>.
  remarks: "The key of the element is also removed from the lookup dictionary.  \n  \n If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.  \n  \n> [!NOTE]\n>  To customize the behavior of this method, override the <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> method.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  example:
  - "This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor. The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.  \n  \n The example demonstrates Remove method inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602>, which removes the item with a specified key, and also the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> methods inherited from <xref:System.Collections.ObjectModel.Collection%601>, which remove by object and by index respectively.  \n  \n The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order. The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>. For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  \n  \n [!code-cpp[KeyedCollection#1](~/add/codesnippet/cpp/m-system.collections.obj_18_1.cpp)]\n [!code-cs[KeyedCollection#1](~/add/codesnippet/csharp/m-system.collections.obj_18_1.cs)]\n [!code-vb[KeyedCollection#1](~/add/codesnippet/visualbasic/m-system.collections.obj_18_1.vb)]"
  syntax:
    content: public bool Remove (TKey key);
    parameters:
    - id: key
      type: TKey
      description: The key of the element to remove.
    return:
      type: System.Boolean
      description: '`true` if the element is successfully removed; otherwise, `false`.  This method also returns `false` if <code>key</code> is not found in the <xref href="stem.Collections.ObjectModel.KeyedCollection%602"></xref>.'
  overload: System.Collections.ObjectModel.KeyedCollection`2.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\KeyedCollection`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/KeyedCollection`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)
  id: RemoveItem(System.Int32)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  name: RemoveItem(Int32)
  nameWithType: KeyedCollection<TKey,TItem>.RemoveItem(Int32)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.RemoveItem(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Removes the element at the specified index of the <xref href="stem.Collections.ObjectModel.KeyedCollection%602"></xref>.
  remarks: "The key of the element is also removed from the lookup dictionary.  \n  \n If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.  \n  \n## Notes for Implementers  \n Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class, and the <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29> method.  \n  \n Call the base class implementation of this method to remove the item from the underlying collection and to update the lookup dictionary."
  example:
  - "This section contains two code examples that demonstrate overriding the RemoveItem method to provide custom behavior for removing objects from the collection. The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.  \n  \n Example 1  \n  \n The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, RemoveItem, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#). The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.  \n  \n The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form. The order form contains `OrderItem` objects representing items ordered. The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.  \n  \n The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.  \n  \n This code example uses objects with immutable keys. For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  \n  \n [!code-vb[KeyedCollection2#1](~/add/codesnippet/visualbasic/m-system.collections.obj_14_1.vb)]\n [!code-cs[KeyedCollection2#1](~/add/codesnippet/csharp/m-system.collections.obj_14_1.cs)]\n [!code-cpp[KeyedCollection2#1](~/add/codesnippet/cpp/m-system.collections.obj_14_1.cpp)]  \n  \n Example 2  \n  \n The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, RemoveItem, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.  \n  \n The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class. The `MutableKey` class has a settable `Key` property. When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key. If so, an exception is thrown and the property value is not changed.  \n  \n In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field. This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method. The field is set when the item is added to a collection and cleared when the item is removed.  \n  \n [!code-cs[KeyedCollectionMutable#1](~/add/codesnippet/csharp/m-system.collections.obj_14_2.cs)]\n [!code-vb[KeyedCollectionMutable#1](~/add/codesnippet/visualbasic/m-system.collections.obj_14_2.vb)]"
  syntax:
    content: protected override void RemoveItem (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The index of the element to remove.
  overload: System.Collections.ObjectModel.KeyedCollection`2.RemoveItem*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\KeyedCollection`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/KeyedCollection`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)
  id: SetItem(System.Int32,`1)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  langs:
  - csharp
  name: SetItem(Int32,TItem)
  nameWithType: KeyedCollection<TKey,TItem>.SetItem(Int32,TItem)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.SetItem(Int32,TItem)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Replaces the item at the specified index with the specified item.
  remarks: "The lookup dictionary is updated accordingly. That is, the key of the item that is being replaced is removed from the lookup dictionary, and the key of the new item is added.  \n  \n This method is an O(1) operation.  \n  \n## Notes for Implementers  \n Override this method to provide customized behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.  \n  \n> [!NOTE]\n>  This method does not affect the behavior of the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=fullName> property, which is read-only.  \n  \n Call the base class implementation of this method to set the item in the underlying collection and to update the lookup dictionary."
  example:
  - "This section contains two code examples that demonstrate overriding the SetItem method to provide custom behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=fullName> property. The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.  \n  \n Example 1  \n  \n The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and SetItem methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#). The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.  \n  \n The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form. The order form contains `OrderItem` objects representing items ordered. The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.  \n  \n The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.  \n  \n This code example uses objects with immutable keys. For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  \n  \n [!code-vb[KeyedCollection2#1](~/add/codesnippet/visualbasic/m-system.collections.obj_20_1.vb)]\n [!code-cs[KeyedCollection2#1](~/add/codesnippet/csharp/m-system.collections.obj_20_1.cs)]\n [!code-cpp[KeyedCollection2#1](~/add/codesnippet/cpp/m-system.collections.obj_20_1.cpp)]  \n  \n Example 2  \n  \n The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and SetItem methods to maintain the integrity of the keys and the collection.  \n  \n The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class. The `MutableKey` class has a settable `Key` property. When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key. If so, an exception is thrown and the property value is not changed.  \n  \n In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field. This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method. The field is set when the item is added to a collection and cleared when the item is removed.  \n  \n [!code-cs[KeyedCollectionMutable#1](~/add/codesnippet/csharp/m-system.collections.obj_20_2.cs)]\n [!code-vb[KeyedCollectionMutable#1](~/add/codesnippet/visualbasic/m-system.collections.obj_20_2.vb)]"
  syntax:
    content: protected override void SetItem (int index, TItem item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to be replaced.
    - id: item
      type: TItem
      description: The new item.
  overload: System.Collections.ObjectModel.KeyedCollection`2.SetItem*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\KeyedCollection`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/KeyedCollection`2.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.ObjectModel.Collection<TItem>
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Collections.Generic.KeyNotFoundException
  parent: System.Collections.Generic
  isExternal: false
  name: KeyNotFoundException
  nameWithType: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
- uid: System.Collections.ObjectModel.KeyedCollection`2.#ctor
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: KeyedCollection<TKey,TItem>()
  nameWithType: KeyedCollection<TKey,TItem>.KeyedCollection<TKey,TItem>()
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.KeyedCollection<TKey,TItem>()
- uid: System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: KeyedCollection<TKey,TItem>(IEqualityComparer<TKey>)
  nameWithType: KeyedCollection<TKey,TItem>.KeyedCollection<TKey,TItem>(IEqualityComparer<TKey>)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.KeyedCollection<TKey,TItem>(IEqualityComparer<TKey>)
- uid: System.Collections.Generic.IEqualityComparer{TKey}
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: IEqualityComparer<TKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: KeyedCollection<TKey,TItem>(IEqualityComparer<TKey>,Int32)
  nameWithType: KeyedCollection<TKey,TItem>.KeyedCollection<TKey,TItem>(IEqualityComparer<TKey>,Int32)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.KeyedCollection<TKey,TItem>(IEqualityComparer<TKey>,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: ChangeItemKey(TItem,TKey)
  nameWithType: KeyedCollection<TKey,TItem>.ChangeItemKey(TItem,TKey)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.ChangeItemKey(TItem,TKey)
- uid: TItem
  isExternal: true
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: TKey
  isExternal: true
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Collections.ObjectModel.KeyedCollection`2.ClearItems
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: ClearItems()
  nameWithType: KeyedCollection<TKey,TItem>.ClearItems()
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.ClearItems()
- uid: System.Collections.ObjectModel.KeyedCollection`2.Comparer
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: Comparer
  nameWithType: KeyedCollection<TKey,TItem>.Comparer
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.Comparer
- uid: System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: Contains(TKey)
  nameWithType: KeyedCollection<TKey,TItem>.Contains(TKey)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.Contains(TKey)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ObjectModel.KeyedCollection`2.Dictionary
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: Dictionary
  nameWithType: KeyedCollection<TKey,TItem>.Dictionary
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.Dictionary
- uid: System.Collections.Generic.IDictionary{TKey,TItem}
  parent: System.Collections.Generic
  isExternal: false
  name: IDictionary<TKey,TItem>
  nameWithType: IDictionary<TKey,TItem>
  fullName: System.Collections.Generic.IDictionary<TKey,TItem>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<TKey,TItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TItem
    name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: GetKeyForItem(TItem)
  nameWithType: KeyedCollection<TKey,TItem>.GetKeyForItem(TItem)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.GetKeyForItem(TItem)
- uid: System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: InsertItem(Int32,TItem)
  nameWithType: KeyedCollection<TKey,TItem>.InsertItem(Int32,TItem)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.InsertItem(Int32,TItem)
- uid: System.Collections.ObjectModel.KeyedCollection`2.Item(`0)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: Item(TKey)
  nameWithType: KeyedCollection<TKey,TItem>.Item(TKey)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.Item(TKey)
- uid: System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: Remove(TKey)
  nameWithType: KeyedCollection<TKey,TItem>.Remove(TKey)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.Remove(TKey)
- uid: System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: RemoveItem(Int32)
  nameWithType: KeyedCollection<TKey,TItem>.RemoveItem(Int32)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.RemoveItem(Int32)
- uid: System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: SetItem(Int32,TItem)
  nameWithType: KeyedCollection<TKey,TItem>.SetItem(Int32,TItem)
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey,TItem>.SetItem(Int32,TItem)
- uid: System.Collections.ObjectModel.KeyedCollection`2.#ctor*
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: KeyedCollection<TKey,TItem>
  nameWithType: KeyedCollection<TKey,TItem>.KeyedCollection<TKey,TItem>
- uid: System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey*
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: ChangeItemKey
  nameWithType: KeyedCollection<TKey,TItem>.ChangeItemKey
- uid: System.Collections.ObjectModel.KeyedCollection`2.ClearItems*
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: ClearItems
  nameWithType: KeyedCollection<TKey,TItem>.ClearItems
- uid: System.Collections.ObjectModel.KeyedCollection`2.Comparer*
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: Comparer
  nameWithType: KeyedCollection<TKey,TItem>.Comparer
- uid: System.Collections.ObjectModel.KeyedCollection`2.Contains*
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: Contains
  nameWithType: KeyedCollection<TKey,TItem>.Contains
- uid: System.Collections.ObjectModel.KeyedCollection`2.Dictionary*
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: Dictionary
  nameWithType: KeyedCollection<TKey,TItem>.Dictionary
- uid: System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem*
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: GetKeyForItem
  nameWithType: KeyedCollection<TKey,TItem>.GetKeyForItem
- uid: System.Collections.ObjectModel.KeyedCollection`2.InsertItem*
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: InsertItem
  nameWithType: KeyedCollection<TKey,TItem>.InsertItem
- uid: System.Collections.ObjectModel.KeyedCollection`2.Item*
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: Item
  nameWithType: KeyedCollection<TKey,TItem>.Item
- uid: System.Collections.ObjectModel.KeyedCollection`2.Remove*
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: Remove
  nameWithType: KeyedCollection<TKey,TItem>.Remove
- uid: System.Collections.ObjectModel.KeyedCollection`2.RemoveItem*
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: RemoveItem
  nameWithType: KeyedCollection<TKey,TItem>.RemoveItem
- uid: System.Collections.ObjectModel.KeyedCollection`2.SetItem*
  parent: System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: SetItem
  nameWithType: KeyedCollection<TKey,TItem>.SetItem
