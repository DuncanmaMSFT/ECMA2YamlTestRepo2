### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.Dictionary`2.ValueCollection
  id: Dictionary`2.ValueCollection
  children:
  - System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})
  - System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)
  - System.Collections.Generic.Dictionary`2.ValueCollection.Count
  - System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator
  - System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)
  - System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear
  - System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)
  - System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly
  - System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)
  - System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator
  - System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: Dictionary<TKey,TValue>+ValueCollection
  nameWithType: Dictionary<TKey,TValue>+ValueCollection
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection
  type: Class
  summary: Represents the collection of values in a <xref href="stem.Collections.Generic.Dictionary%602"></xref>. This class cannot be inherited.
  remarks: "The <xref:System.Collections.Generic.Dictionary%602.Values%2A?displayProperty=fullName> property returns an instance of this type, containing all the values in that <xref:System.Collections.Generic.Dictionary%602>.  The order of the values in the Dictionary(TKey, is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.Generic.Dictionary%602.KeyCollection> returned by the <xref:System.Collections.Generic.Dictionary%602.Keys%2A?displayProperty=fullName> property.  \n  \n The Dictionary(TKey, is not a static copy; instead, the Dictionary(TKey, refers back to the values in the original <xref:System.Collections.Generic.Dictionary%602>. Therefore, changes to the <xref:System.Collections.Generic.Dictionary%602> continue to be reflected in the Dictionary(TKey,."
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_DictionaryValueCollectionDebugView`2))]

      public sealed class Dictionary<TKey,TValue>.ValueCollection : System.Collections.Generic.ICollection<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.Generic.IReadOnlyCollection<TValue>, System.Collections.ICollection
    typeParameters:
    - id: TKey
      description: To be added.
    - id: TValue
      description: To be added.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<TValue>
  - System.Collections.Generic.IEnumerable<TValue>
  - System.Collections.Generic.IReadOnlyCollection<TValue>
  - System.Collections.ICollection
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2+ValueCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2+ValueCollection.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})
  id: '#ctor(System.Collections.Generic.Dictionary{`0,`1})'
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  name: Dictionary<TKey,TValue>+ValueCollection(Dictionary<TKey,TValue>)
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.Dictionary<TKey,TValue>+ValueCollection(Dictionary<TKey,TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.Dictionary<TKey,TValue>+ValueCollection(Dictionary<TKey,TValue>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.Dictionary%602.ValueCollection"></xref> class that reflects the values in the specified <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  remarks: "The <xref:System.Collections.Generic.Dictionary%602.ValueCollection> is not a static copy; instead, the <xref:System.Collections.Generic.Dictionary%602.ValueCollection> refers back to the values in the original <xref:System.Collections.Generic.Dictionary%602>. Therefore, changes to the <xref:System.Collections.Generic.Dictionary%602> continue to be reflected in the <xref:System.Collections.Generic.Dictionary%602.ValueCollection>.  \n  \n This constructor is an O(1) operation."
  syntax:
    content: public ValueCollection (System.Collections.Generic.Dictionary<TKey,TValue> dictionary);
    parameters:
    - id: dictionary
      type: System.Collections.Generic.Dictionary`2
      description: The <xref href="stem.Collections.Generic.Dictionary%602"></xref> whose values are reflected in the new <xref href="stem.Collections.Generic.Dictionary%602.ValueCollection"></xref>.
  overload: System.Collections.Generic.Dictionary`2.ValueCollection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>dictionary</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2+ValueCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2+ValueCollection.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)
  id: CopyTo(`1[],System.Int32)
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  name: CopyTo(TValue[],Int32)
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.CopyTo(TValue[],Int32)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.CopyTo(TValue[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Copies the <xref href="stem.Collections.Generic.Dictionary%602.ValueCollection"></xref> elements to an existing one-dimensional <xref href="System.Array"></xref>, starting at the specified array index.
  remarks: "The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.Dictionary%602.ValueCollection>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Count%2A>."
  syntax:
    content: public void CopyTo (TValue[] array, int index);
    parameters:
    - id: array
      type: TValue[]
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="stem.Collections.Generic.Dictionary%602.ValueCollection"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source <xref href="stem.Collections.Generic.Dictionary%602.ValueCollection"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2+ValueCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2+ValueCollection.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.Count
  id: Count
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  name: Count
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.Count
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets the number of elements contained in the <xref href="stem.Collections.Generic.Dictionary%602.ValueCollection"></xref>.
  remarks: Retrieving the value of this property is an O(1) operation.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of elements contained in the <xref href="stem.Collections.Generic.Dictionary%602.ValueCollection"></xref>.
  overload: System.Collections.Generic.Dictionary`2.ValueCollection.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2+ValueCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2+ValueCollection.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the <xref href="stem.Collections.Generic.Dictionary%602.ValueCollection"></xref>.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Enumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Enumerator.Current%2A>.  \n  \n <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Enumerator.MoveNext%2A> is called. <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Enumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Enumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Enumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Enumerator.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: public System.Collections.Generic.Dictionary<TKey,TValue>.ValueCollection.Enumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator
      description: A <xref href="stem.Collections.Generic.Dictionary%602.ValueCollection.Enumerator"></xref> for the <xref href="stem.Collections.Generic.Dictionary%602.ValueCollection"></xref>.
  overload: System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2+ValueCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2+ValueCollection.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)
  id: System#Collections#Generic#ICollection{TValue}#Add(`1)
  isEii: true
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  name: ICollection<TValue>.Add(TValue)
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Add(TValue)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Add(TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Adds an item to the <xref href="stem.Collections.Generic.ICollection%601"></xref>.  This implementation always throws <xref href="System.NotSupportedException"></xref>.
  syntax:
    content: void ICollection<TValue>.Add (TValue item);
    parameters:
    - id: item
      type: TValue
      description: The object to add to the <xref href="stem.Collections.Generic.ICollection%601"></xref>.
  overload: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection<TValue>#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Always thrown.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2+ValueCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2+ValueCollection.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear
  id: System#Collections#Generic#ICollection{TValue}#Clear
  isEii: true
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  name: ICollection<TValue>.Clear()
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Clear()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Removes all items from the <xref href="stem.Collections.Generic.ICollection%601"></xref>.  This implementation always throws <xref href="System.NotSupportedException"></xref>.
  remarks: <xref:System.Collections.Generic.ICollection%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.
  syntax:
    content: void ICollection<TValue>.Clear ();
    parameters: []
  overload: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection<TValue>#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Always thrown.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2+ValueCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2+ValueCollection.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)
  id: System#Collections#Generic#ICollection{TValue}#Contains(`1)
  isEii: true
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  name: ICollection<TValue>.Contains(TValue)
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Contains(TValue)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Contains(TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Determines whether the <xref href="stem.Collections.Generic.ICollection%601"></xref> contains a specific value.
  remarks: "Implementations can vary in how they determine equality of objects; for example, <xref:System.Collections.Generic.List%601> uses <xref:System.Collections.Generic.Comparer%601.Default%2A>, whereas, <xref:System.Collections.Generic.Dictionary%602> allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Count%2A>."
  syntax:
    content: bool ICollection<TValue>.Contains (TValue item);
    parameters:
    - id: item
      type: TValue
      description: The object to locate in the <xref href="stem.Collections.Generic.ICollection%601"></xref>.
    return:
      type: System.Boolean
      description: '`true` if <code>item</code> is found in the <xref href="stem.Collections.Generic.ICollection%601"></xref>; otherwise, `false`.'
  overload: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection<TValue>#Contains*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2+ValueCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2+ValueCollection.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly
  id: System#Collections#Generic#ICollection{TValue}#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  name: ICollection<TValue>.IsReadOnly
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.IsReadOnly
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether the <xref href="stem.Collections.Generic.ICollection%601"></xref> is read-only.
  remarks: "A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.Generic.ICollection<TValue>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.ICollection%601"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href="stem.Collections.Generic.Dictionary%602.ValueCollection"></xref>, this property always returns `true`.'
  overload: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection<TValue>#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2+ValueCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2+ValueCollection.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)
  id: System#Collections#Generic#ICollection{TValue}#Remove(`1)
  isEii: true
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  name: ICollection<TValue>.Remove(TValue)
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Remove(TValue)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Remove(TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Removes the first occurrence of a specific object from the <xref href="stem.Collections.Generic.ICollection%601"></xref>. This implementation always throws <xref href="System.NotSupportedException"></xref>.
  remarks: Implementations can vary in how they determine equality of objects; for example, <xref:System.Collections.Generic.List%601> uses <xref:System.Collections.Generic.Comparer%601.Default%2A>, whereas, <xref:System.Collections.Generic.Dictionary%602> allows the user to specify the <xref:System.Collections.Generic.IComparer%601> implementation to use for comparing keys.
  syntax:
    content: bool ICollection<TValue>.Remove (TValue item);
    parameters:
    - id: item
      type: TValue
      description: The object to remove from the <xref href="stem.Collections.Generic.ICollection%601"></xref>.
    return:
      type: System.Boolean
      description: '`true` if <code>item</code> was successfully removed from the <xref href="stem.Collections.Generic.ICollection%601"></xref>; otherwise, `false`. This method also returns `false` if <code>item</code> was not found in the original <xref href="stem.Collections.Generic.ICollection%601"></xref>.'
  overload: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection<TValue>#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Always thrown.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2+ValueCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2+ValueCollection.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{TValue}#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  name: IEnumerable<TValue>.GetEnumerator()
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.IEnumerable<TValue>.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.IEnumerable<TValue>.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through a collection.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  \n  \n <xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic> are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: System.Collections.Generic.IEnumerator<TValue> IEnumerable<TValue>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{TValue}
      description: An <xref href="stem.Collections.Generic.IEnumerator%601"></xref> that can be used to iterate through the collection.
  overload: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable<TValue>#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2+ValueCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2+ValueCollection.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Copies the elements of the <xref href="System.Collections.ICollection"></xref> to an <xref href="System.Array"></xref>, starting at a particular <xref href="System.Array"></xref> index.
  remarks: "> [!NOTE]\n>  If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.ValueCollection.Count%2A>."
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="System.Collections.ICollection"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.  \n  \n -or-  \n  \n <code>array</code> does not have zero-based indexing.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.  \n  \n -or-  \n  \n The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2+ValueCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2+ValueCollection.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection.IsSynchronized
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe).
  remarks: "Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: '`true` if access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe); otherwise, `false`.  In the default implementation of <xref href="stem.Collections.Generic.Dictionary%602.ValueCollection"></xref>, this property always returns `false`.'
  overload: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2+ValueCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2+ValueCollection.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection.SyncRoot
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>.
  remarks: "Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.  \n  \n```c#  \nICollection ic = ...;  \nlock (ic.SyncRoot) {  \n   // Access the collection.  \n}  \n```  \n  \n```vb#  \nDim ic As IColletion = ...  \nSyncLock ic.SyncRoot  \n   ' Access the collection.  \nEnd SyncLock  \n```  \n  \n```cpp#  \nICollection^ ic = ...;  \ntry {  \n   Monitor::Enter(ic->SyncRoot);  \n   // Access the collection.  \n}  \nfinally {  \n   Monitor::Exit(ic->SyncRoot);  \n}  \n```  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>.  In the default implementation of <xref href="stem.Collections.Generic.Dictionary%602.ValueCollection"></xref>, this property always returns the current instance.
  overload: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2+ValueCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2+ValueCollection.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through a collection.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator"></xref> that can be used to iterate through the collection.
  overload: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Dictionary`2+ValueCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Dictionary`2+ValueCollection.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: Dictionary<TKey,TValue>+ValueCollection(Dictionary<TKey,TValue>)
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.Dictionary<TKey,TValue>+ValueCollection(Dictionary<TKey,TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.Dictionary<TKey,TValue>+ValueCollection(Dictionary<TKey,TValue>)
- uid: System.Collections.Generic.Dictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: Dictionary<TKey,TValue>
  nameWithType: Dictionary<TKey,TValue>
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: CopyTo(TValue[],Int32)
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.CopyTo(TValue[],Int32)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.CopyTo(TValue[],Int32)
- uid: TValue[]
  isExternal: true
  name: TValue[]
  nameWithType: TValue[]
  fullName: TValue[]
  spec.csharp:
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.Count
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: Count
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.Count
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.Count
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.GetEnumerator()
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: Dictionary<TKey,TValue>+ValueCollection+Enumerator
  nameWithType: Dictionary<TKey,TValue>+ValueCollection+Enumerator
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection+Enumerator
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: ICollection<TValue>.Add(TValue)
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Add(TValue)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Add(TValue)
- uid: TValue
  isExternal: true
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: ICollection<TValue>.Clear()
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Clear()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Clear()
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: ICollection<TValue>.Contains(TValue)
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Contains(TValue)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Contains(TValue)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: ICollection<TValue>.IsReadOnly
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.IsReadOnly
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.IsReadOnly
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: ICollection<TValue>.Remove(TValue)
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Remove(TValue)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection<TValue>.Remove(TValue)
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: IEnumerable<TValue>.GetEnumerator()
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.IEnumerable<TValue>.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.IEnumerable<TValue>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{TValue}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<TValue>
  nameWithType: IEnumerator<TValue>
  fullName: System.Collections.Generic.IEnumerator<TValue>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<TValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection.IsSynchronized
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection.IsSynchronized
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.ICollection.SyncRoot
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.ICollection.SyncRoot
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey,TValue>+ValueCollection.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.#ctor*
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: Dictionary<TKey,TValue>+ValueCollection
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.Dictionary<TKey,TValue>+ValueCollection
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo*
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: CopyTo
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.CopyTo
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.Count*
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: Count
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.Count
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator*
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.GetEnumerator
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection<TValue>#Add*
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<TValue>.Add
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.System.Collections.Generic.ICollection<TValue>.Add
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection<TValue>#Clear*
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<TValue>.Clear
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.System.Collections.Generic.ICollection<TValue>.Clear
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection<TValue>#Contains*
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<TValue>.Contains
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.System.Collections.Generic.ICollection<TValue>.Contains
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection<TValue>#IsReadOnly*
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<TValue>.IsReadOnly
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.System.Collections.Generic.ICollection<TValue>.IsReadOnly
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection<TValue>#Remove*
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: System.Collections.Generic.ICollection<TValue>.Remove
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.System.Collections.Generic.ICollection<TValue>.Remove
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable<TValue>#GetEnumerator*
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: System.Collections.Generic.IEnumerable<TValue>.GetEnumerator
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.System.Collections.Generic.IEnumerable<TValue>.GetEnumerator
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.System.Collections.ICollection.CopyTo
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Dictionary<TKey,TValue>+ValueCollection.System.Collections.IEnumerable.GetEnumerator
