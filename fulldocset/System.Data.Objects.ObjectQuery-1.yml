### YamlMime:ManagedReference
items:
- uid: System.Data.Objects.ObjectQuery`1
  id: ObjectQuery`1
  children:
  - System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)
  - System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)
  - System.Data.Objects.ObjectQuery`1.Distinct
  - System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})
  - System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)
  - System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])
  - System.Data.Objects.ObjectQuery`1.Include(System.String)
  - System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})
  - System.Data.Objects.ObjectQuery`1.Name
  - System.Data.Objects.ObjectQuery`1.OfType``1
  - System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])
  - System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])
  - System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])
  - System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])
  - System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])
  - System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})
  - System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})
  - System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])
  langs:
  - csharp
  name: ObjectQuery<T>
  nameWithType: ObjectQuery<T>
  fullName: System.Data.Objects.ObjectQuery<T>
  type: Class
  summary: Represents a typed query against a conceptual model in a given object context.
  remarks: "The ObjectQuery(T) generic class represents a query that returns a collection of zero or more objects of a specific type. The <xref:System.Data.Objects.ObjectContext> must be defined before an object query can be executed. This context provides the connection and metadata information that is required to compose and execute the query. An object query is executed in the following scenarios:  \n  \n-   When it is acted upon, such as during a `foreach` (C#) or `For Each` (Visual Basic) enumeration.  \n  \n-   When it is assigned to fill a <xref:System.Collections.Generic.List%601> collection.  \n  \n-   When the <xref:System.Data.Objects.ObjectQuery%601.Execute%2A> method is explicitly called.  \n  \n The query itself can be created by using an [!INCLUDE[esql](~/add/includes/esql-md.md)] statement or a LINQ query, or it can be incrementally built by using the query builder methods included in the class. In every case, the result is a new ObjectQuery(T) instance that, when explicitly executed or enumerated over, will send the query to the data source for execution and return the results.  \n  \n An ObjectQuery(T) is frequently of an entity type, but it can also be of <xref:System.Data.Common.DbDataRecord> type, for projections to an anonymous type, or of a primitive type, such as an integer or string. For more information, see [Object Queries](http://msdn.microsoft.com/en-us/0768033c-876f-471d-85d5-264884349276)."
  example:
  - "The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832).  \n  \n The example shows how to construct an instance of the ObjectQuery(T) class.  \n  \n [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectquery)]\n [!code-cs[DP ObjectServices Concepts#ObjectQuery](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectquery)]"
  syntax:
    content: 'public class ObjectQuery<T> : System.Data.Objects.ObjectQuery, System.Collections.Generic.IEnumerable<T>, System.ComponentModel.IListSource, System.Linq.IOrderedQueryable<T>, System.Linq.IQueryable<T>'
    typeParameters:
    - id: T
      description: The entity type of the query.
  inheritance:
  - System.Object
  - System.Data.Objects.ObjectQuery
  implements:
  - System.Collections.Generic.IEnumerable<T>
  - System.ComponentModel.IListSource
  - System.Linq.IOrderedQueryable<T>
  - System.Linq.IQueryable<T>
  inheritedMembers:
  - System.Data.Objects.ObjectQuery.CommandText
  - System.Data.Objects.ObjectQuery.Context
  - System.Data.Objects.ObjectQuery.EnablePlanCaching
  - System.Data.Objects.ObjectQuery.GetResultType
  - System.Data.Objects.ObjectQuery.MergeOption
  - System.Data.Objects.ObjectQuery.Parameters
  - System.Data.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator
  - System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection
  - System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList
  - System.Data.Objects.ObjectQuery.System#Linq#IQueryable#ElementType
  - System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Expression
  - System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Provider
  - System.Data.Objects.ObjectQuery.ToTraceString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)
  id: '#ctor(System.String,System.Data.Objects.ObjectContext)'
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: ObjectQuery<T>(String,ObjectContext)
  nameWithType: ObjectQuery<T>.ObjectQuery<T>(String,ObjectContext)
  fullName: System.Data.Objects.ObjectQuery<T>.ObjectQuery<T>(String,ObjectContext)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Creates a new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> instance using the specified [!INCLUDE[esql](~/add/includes/esql-md.md)] command as the initial query.
  remarks: When your application generates Entity SQL queries at runtime, you should be aware of any command length limitations of the data source. Entity SQL does not enforce limitations on the length of the command text in queries.
  example:
  - "The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows how to construct an instance of the <xref:System.Data.Objects.ObjectQuery%601> class.  \n  \n [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectquery)]\n [!code-cs[DP ObjectServices Concepts#ObjectQuery](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectquery)]"
  syntax:
    content: public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context);
    parameters:
    - id: commandText
      type: System.String
      description: The [!INCLUDE[esql](~/add/includes/esql-md.md)] query.
    - id: context
      type: System.Data.Objects.ObjectContext
      description: The <xref href="System.Data.Objects.ObjectContext"></xref> on which to execute the query.
  overload: System.Data.Objects.ObjectQuery`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)
  id: '#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)'
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: ObjectQuery<T>(String,ObjectContext,MergeOption)
  nameWithType: ObjectQuery<T>.ObjectQuery<T>(String,ObjectContext,MergeOption)
  fullName: System.Data.Objects.ObjectQuery<T>.ObjectQuery<T>(String,ObjectContext,MergeOption)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Creates a new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> instance using the specified [!INCLUDE[esql](~/add/includes/esql-md.md)] command as the initial query and the specified merge option.
  remarks: When your application generates Entity SQL queries at runtime, you should be aware of any command length limitations of the data source. Entity SQL does not enforce limitations on the length of the command text in queries.
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The <xref:System.Data.Objects.ObjectQuery%601> is initialized with the specified query, <xref:System.Data.Objects.ObjectContext>, and <xref:System.Data.Objects.MergeOption>.  \n  \n [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectquery_select)]\n [!code-cs[DP ObjectServices Concepts#ObjectQuery_Select](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectquery_select)]"
  syntax:
    content: public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context, System.Data.Objects.MergeOption mergeOption);
    parameters:
    - id: commandText
      type: System.String
      description: The [!INCLUDE[esql](~/add/includes/esql-md.md)] query.
    - id: context
      type: System.Data.Objects.ObjectContext
      description: The <xref href="System.Data.Objects.ObjectContext"></xref> on which to execute the query.
    - id: mergeOption
      type: System.Data.Objects.MergeOption
      description: Specifies how the entities that are retrieved through this query should be merged with the entities that have been returned from previous queries against the same <xref href="System.Data.Objects.ObjectContext"></xref>.
  overload: System.Data.Objects.ObjectQuery`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.Distinct
  id: Distinct
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: Distinct()
  nameWithType: ObjectQuery<T>.Distinct()
  fullName: System.Data.Objects.ObjectQuery<T>.Distinct()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Limits the query to unique results.
  remarks: "This query builder method returns an <xref:System.Data.Objects.ObjectQuery%601> instance that is equivalent to the original query with [SELECT DISTINCT](../Topic/SELECT%20\\(Entity%20SQL\\).md) applied.  \n  \n The `DISTINCT` operator cannot be applied to an object that includes a mapping to a non-comparable column in the data source (such as ntext)."
  example:
  - "The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example uses <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> method to create a new <xref:System.Data.Objects.ObjectQuery%601> object. Then it calls Distinct on the new <xref:System.Data.Objects.ObjectQuery%601> object to get the unique results of this query.  \n  \n [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectquery_distinct_unionall)]\n [!code-cs[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectquery_distinct_unionall)]"
  syntax:
    content: public System.Data.Objects.ObjectQuery<T> Distinct ();
    parameters: []
    return:
      type: System.Data.Objects.ObjectQuery`1
      description: A new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> instance that is equivalent to the original instance with [SELECT DISTINCT](../Topic/SELECT%20\(Entity%20SQL\).md) applied.
  overload: System.Data.Objects.ObjectQuery`1.Distinct*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})
  id: Except(System.Data.Objects.ObjectQuery{`0})
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: Except(ObjectQuery<T>)
  nameWithType: ObjectQuery<T>.Except(ObjectQuery<T>)
  fullName: System.Data.Objects.ObjectQuery<T>.Except(ObjectQuery<T>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Limits the query results by excluding results based on the results of another object query.
  remarks: "The supplied `query` that defines results to exclude must be of the same type or of a type that is compatible with the <xref:System.Data.Objects.ObjectQuery%601>.  \n  \n Parameters that are defined in the supplied `query` are merged with parameters that are defined in the <xref:System.Data.Objects.ObjectQuery%601> instance. Parameters must be unique in the combined <xref:System.Data.Objects.ObjectParameterCollection>. There cannot be two parameters in the combined collection with the same name. For more information, see [Query Builder Methods](http://msdn.microsoft.com/en-us/05685434-05e6-41c2-8d5e-8933b88a40b0).  \n  \n The resulting query inherits the connection from the <xref:System.Data.Objects.ObjectQuery%601> instance on which Except was called."
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example uses Except method to create a new <xref:System.Data.Objects.ObjectQuery%601> object and then iterates through the result of the new query.  \n  \n [!code-vb[DP ObjectServices Concepts#ObjectQuery_Except](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectquery_except)]\n [!code-cs[DP ObjectServices Concepts#ObjectQuery_Except](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectquery_except)]"
  syntax:
    content: public System.Data.Objects.ObjectQuery<T> Except (System.Data.Objects.ObjectQuery<T> query);
    parameters:
    - id: query
      type: System.Data.Objects.ObjectQuery`1
      description: An <xref href="stem.Data.Objects.ObjectQuery%601"></xref> that represents the results to exclude from the query.
    return:
      type: System.Data.Objects.ObjectQuery`1
      description: A new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> instance that is equivalent to the original instance with [EXCEPT](../Topic/EXCEPT%20\(Entity%20SQL\).md) applied based on the specified <code>query</code>.
  overload: System.Data.Objects.ObjectQuery`1.Except*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>query</code> parameter is `null` or an empty string.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)
  id: Execute(System.Data.Objects.MergeOption)
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: Execute(MergeOption)
  nameWithType: ObjectQuery<T>.Execute(MergeOption)
  fullName: System.Data.Objects.ObjectQuery<T>.Execute(MergeOption)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Executes the object query with the specified merge option.
  remarks: The default merge option for object queries is <xref:System.Data.Objects.MergeOption>. For more information, see [Identity Resolution, State Management, and Change Tracking](http://msdn.microsoft.com/en-us/3bd49311-0e72-4ea4-8355-38fe57036ba0).
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example returns an <xref:System.Data.Objects.ObjectResult%601> from <xref:System.Data.Objects.ObjectQuery.Execute%2A> method. Then it gets an enumerator and iterates through the query results. At the end it releases the enumerator and the <xref:System.Data.Objects.ObjectResult%601> object.  \n  \n [!code-vb[DP ObjectServices Concepts#QueryResult](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#queryresult)]\n [!code-cs[DP ObjectServices Concepts#QueryResult](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#queryresult)]"
  syntax:
    content: public System.Data.Objects.ObjectResult<T> Execute (System.Data.Objects.MergeOption mergeOption);
    parameters:
    - id: mergeOption
      type: System.Data.Objects.MergeOption
      description: The <xref href="System.Data.Objects.MergeOption"></xref> to use when executing the query. The default is <xref href="System.Data.Objects.MergeOption"></xref>.
    return:
      type: System.Data.Objects.ObjectResult`1
      description: An <xref href="stem.Data.Objects.ObjectResult%601"></xref> that contains a collection of entity objects returned by the query.
  overload: System.Data.Objects.ObjectQuery`1.Execute*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])
  id: GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: GroupBy(String,String,ObjectParameter[])
  nameWithType: ObjectQuery<T>.GroupBy(String,String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectQuery<T>.GroupBy(String,String,ObjectParameter[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Groups the query results by the specified criteria.
  remarks: GroupBy applies the projection specified by the `projection` parameter. This means that the <xref:System.Data.Objects.ObjectQuery%601> returned by the GroupBy method is always of type <xref:System.Data.Common.DbDataRecord>. For more information, see [Object Queries](http://msdn.microsoft.com/en-us/0768033c-876f-471d-85d5-264884349276).
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832).  \n  \n This example creates a new <xref:System.Data.Objects.ObjectQuery%601> object that contains the results of the existing query grouped by product name.  \n  \n [!code-vb[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectquery_groupby)]\n [!code-cs[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectquery_groupby)]  \n  \n This example returns a set of nested data records that contain the `Contact.LastName` column, grouped and sorted alphabetically by the first letter of `Contact.LastName`.  \n  \n [!code-vb[DP ObjectServices Concepts#Projection_GroupBy](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#projection_groupby)]\n [!code-cs[DP ObjectServices Concepts#Projection_GroupBy](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#projection_groupby)]"
  syntax:
    content: public System.Data.Objects.ObjectQuery<System.Data.Common.DbDataRecord> GroupBy (string keys, string projection, System.Data.Objects.ObjectParameter[] parameters);
    parameters:
    - id: keys
      type: System.String
      description: The key columns by which to group the results.
    - id: projection
      type: System.String
      description: The list of selected properties that defines the projection.
    - id: parameters
      type: System.Data.Objects.ObjectParameter[]
      description: Zero or more parameters that are used in this method.
    return:
      type: System.Data.Objects.ObjectQuery{System.Data.Common.DbDataRecord}
      description: A new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> instance of type <xref href="System.Data.Common.DbDataRecord"></xref> that is equivalent to the original instance with [GROUP BY](../Topic/GROUP%20BY%20\(Entity%20SQL\).md) applied.
  overload: System.Data.Objects.ObjectQuery`1.GroupBy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>query</code> parameter is `null` or an empty string.  \n  \n -or-  \n  \n The <code>projection</code> parameter is `null` or an empty string."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.Include(System.String)
  id: Include(System.String)
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: Include(String)
  nameWithType: ObjectQuery<T>.Include(String)
  fullName: System.Data.Objects.ObjectQuery<T>.Include(String)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Specifies the related objects to include in the query results.
  remarks: "Query paths can be used with Entity SQL and LINQ queries.  \n  \n Paths are all-inclusive. For example, if an include call indicates `Include(\"Orders.OrderLines\")`, not only will `OrderLines` be included, but also `Orders`. For more information, see [Loading Related Objects](http://msdn.microsoft.com/en-us/452347d2-7b3b-44cd-9001-231299a28cb1).  \n  \n When you call the Include method, the query path is only valid on the returned instance of the <xref:System.Data.Objects.ObjectQuery%601>. Other instances of <xref:System.Data.Objects.ObjectQuery%601> and the object context itself are not affected.  \n  \n Because the Include method returns the query object, you can call this method multiple times on an <xref:System.Data.Objects.ObjectQuery%601> to specify multiple paths for the query, as in the following example:  \n  \n [!code-vb[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#spanonlywithmultiplepaths)]\n [!code-cs[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#spanonlywithmultiplepaths)]"
  example:
  - >-
    [!code-vb[DP ObjectServices Concepts#QueryWithSpan](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#querywithspan)]
     [!code-cs[DP ObjectServices Concepts#QueryWithSpan](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#querywithspan)]
  syntax:
    content: public System.Data.Objects.ObjectQuery<T> Include (string path);
    parameters:
    - id: path
      type: System.String
      description: Dot-separated list of related objects to return in the query results.
    return:
      type: System.Data.Objects.ObjectQuery`1
      description: A new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> with the defined query path.
  overload: System.Data.Objects.ObjectQuery`1.Include*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>path</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>path</code> is `empty`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})
  id: Intersect(System.Data.Objects.ObjectQuery{`0})
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: Intersect(ObjectQuery<T>)
  nameWithType: ObjectQuery<T>.Intersect(ObjectQuery<T>)
  fullName: System.Data.Objects.ObjectQuery<T>.Intersect(ObjectQuery<T>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Limits the query results by including only the results that exist in another object query.
  remarks: "The supplied `query` that defines results to include must be of the same type or of a type that is compatible with the <xref:System.Data.Objects.ObjectQuery%601>.  \n  \n Parameters that are defined in the supplied `query` are merged with parameters that are defined in the <xref:System.Data.Objects.ObjectQuery%601> instance. Parameters must be unique in the combined <xref:System.Data.Objects.ObjectParameterCollection>. There cannot be two parameters in the combined collection with the same name. For more information, see [Query Builder Methods](http://msdn.microsoft.com/en-us/05685434-05e6-41c2-8d5e-8933b88a40b0).  \n  \n The resulting query inherits the connection from the <xref:System.Data.Objects.ObjectQuery%601> instance on which the Intersect method was called."
  example:
  - "The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). This example creates a new <xref:System.Data.Objects.ObjectQuery%601> object that contains the results of two other queries.  \n  \n [!code-vb[DP ObjectServices Concepts#ObjectQuery_Intersect](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectquery_intersect)]\n [!code-cs[DP ObjectServices Concepts#ObjectQuery_Intersect](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectquery_intersect)]"
  syntax:
    content: public System.Data.Objects.ObjectQuery<T> Intersect (System.Data.Objects.ObjectQuery<T> query);
    parameters:
    - id: query
      type: System.Data.Objects.ObjectQuery`1
      description: An <xref href="stem.Data.Objects.ObjectQuery%601"></xref> that represents the results to include in the query.
    return:
      type: System.Data.Objects.ObjectQuery`1
      description: A new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> instance that is equivalent to the original instance with [INTERSECT](../Topic/INTERSECT%20\(Entity%20SQL\).md) applied based on the specified <code>query</code>.
  overload: System.Data.Objects.ObjectQuery`1.Intersect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>query</code> parameter is `null` or is an empty string.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.Name
  id: Name
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: Name
  nameWithType: ObjectQuery<T>.Name
  fullName: System.Data.Objects.ObjectQuery<T>.Name
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Gets or sets the name of this object query.
  remarks: "The name of the object query identifies the current object query in the sequence by name when constructing query builder methods. By default, the query name is `it`. This can be useful when referring to the current sequence in joins inside the [M:System.Data.Objects.Query\\`1.Where(System.String,System.Data.Objects.ObjectParameter\\<xref:System.Data.Objects.Query%601.Where%2A> method or in the <xref:System.Data.Objects.ObjectQuery%601.SelectValue%2A> method. For more information, see [Query Builder Methods](http://msdn.microsoft.com/en-us/05685434-05e6-41c2-8d5e-8933b88a40b0).  \n  \n When you set the Name property of an <xref:System.Data.Objects.ObjectQuery%601>, that value becomes the alias in successive methods.  \n  \n The value of the Name property must start with a letter and can contain letters, digits, and underscores."
  example:
  - "This example sets the name of the first <xref:System.Data.Objects.ObjectQuery%601> to \"product\" and then uses this alias in the successive <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> method. The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832).  \n  \n [!code-vb[DP ObjectServices Concepts#QueryWithAliasNamed](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#querywithaliasnamed)]\n [!code-cs[DP ObjectServices Concepts#QueryWithAliasNamed](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#querywithaliasnamed)]"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: A `string` value that is the name of this <xref href="stem.Data.Objects.ObjectQuery%601"></xref>.
  overload: System.Data.Objects.ObjectQuery`1.Name*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The value specified on set is not valid.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.OfType``1
  id: OfType``1
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: OfType<TResultType>()
  nameWithType: ObjectQuery<T>.OfType<TResultType>()
  fullName: System.Data.Objects.ObjectQuery<T>.OfType<TResultType>()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Limits the query to only results of a specific type.
  remarks: "OfType(TResultType) is used to filter query results by a specific entity or complex type. This supports a conceptual model with object inheritance. For more information, see [Entity Data Model Inheritance (Application Scenarios)](http://msdn.microsoft.com/en-us/5de40bf8-527f-4f2e-96e3-61164f429caa). The  \n  \n OfType(TResultType) method can only be applied to an <xref:System.Data.Objects.ObjectQuery%601> of an entity type or complex type that is defined in the EDM."
  syntax:
    content: public System.Data.Objects.ObjectQuery<TResultType> OfType<TResultType> ();
    parameters: []
    return:
      type: System.Data.Objects.ObjectQuery{TResultType}
      description: A new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> instance that is equivalent to the original instance with [OFTYPE](../Topic/OFTYPE%20\(Entity%20SQL\).md) applied.
  overload: System.Data.Objects.ObjectQuery`1.OfType<TResultType>*
  exceptions:
  - type: System.Data.EntitySqlException
    commentId: T:System.Data.EntitySqlException
    description: The type specified is not valid.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])
  id: OrderBy(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: OrderBy(String,ObjectParameter[])
  nameWithType: ObjectQuery<T>.OrderBy(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectQuery<T>.OrderBy(String,ObjectParameter[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Orders the query results by the specified criteria.
  remarks: "The ordering of results in a nested query cannot be guaranteed.  \n  \n OrderBy should always be the final query builder method in the sequence."
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example creates a new <xref:System.Data.Objects.ObjectQuery%601> object that contains the results of the existing query order by `ProductID`.  \n  \n [!code-vb[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectquery_orderby)]\n [!code-cs[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectquery_orderby)]"
  syntax:
    content: public System.Data.Objects.ObjectQuery<T> OrderBy (string keys, System.Data.Objects.ObjectParameter[] parameters);
    parameters:
    - id: keys
      type: System.String
      description: The key columns by which to order the results.
    - id: parameters
      type: System.Data.Objects.ObjectParameter[]
      description: Zero or more parameters that are used in this method.
    return:
      type: System.Data.Objects.ObjectQuery`1
      description: A new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> instance that is equivalent to the original instance with [ORDER BY](../Topic/ORDER%20BY%20\(Entity%20SQL\).md) applied.
  overload: System.Data.Objects.ObjectQuery`1.OrderBy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>keys</code> or <code>parameters</code> parameter is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>key</code> is an empty string.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])
  id: Select(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: Select(String,ObjectParameter[])
  nameWithType: ObjectQuery<T>.Select(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectQuery<T>.Select(String,ObjectParameter[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Limits the query results to only the properties that are defined in the specified projection.
  remarks: "Select applies the projection specified by the `projection` parameter. The <xref:System.Data.Objects.ObjectQuery%601> returned by the Select method is always a row type of <xref:System.Data.Common.DbDataRecord>. Use the <xref:System.Data.Objects.ObjectQuery%601.SelectValue%2A> method to return values that are simple types, entity types, or complex types. For more information, see [Object Queries](http://msdn.microsoft.com/en-us/0768033c-876f-471d-85d5-264884349276).  \n  \n When a navigation property is included in the projection, the query results include a collection of nested <xref:System.Data.Common.DbDataRecord> objects. For more information, see [How to: Navigate Relationships Using Navigation Properties](http://msdn.microsoft.com/en-us/b1d71c7d-16a7-4b46-96ac-690176bd5057)."
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example creates a new <xref:System.Data.Objects.ObjectQuery%601> whose results are data records that contain the `ProductID` fields of the results of this query.  \n  \n [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectquery_select)]\n [!code-cs[DP ObjectServices Concepts#ObjectQuery_Select](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectquery_select)]"
  syntax:
    content: public System.Data.Objects.ObjectQuery<System.Data.Common.DbDataRecord> Select (string projection, System.Data.Objects.ObjectParameter[] parameters);
    parameters:
    - id: projection
      type: System.String
      description: The list of selected properties that defines the projection.
    - id: parameters
      type: System.Data.Objects.ObjectParameter[]
      description: Zero or more parameters that are used in this method.
    return:
      type: System.Data.Objects.ObjectQuery{System.Data.Common.DbDataRecord}
      description: A new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> instance of type <xref href="System.Data.Common.DbDataRecord"></xref> that is equivalent to the original instance with [SELECT](../Topic/SELECT%20\(Entity%20SQL\).md) applied.
  overload: System.Data.Objects.ObjectQuery`1.Select*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>projection</code> is `null`.  \n  \n -or-  \n  \n <code>parameters</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>projection</code> is an empty string.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])
  id: SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: SelectValue<TResultType>(String,ObjectParameter[])
  nameWithType: ObjectQuery<T>.SelectValue<TResultType>(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectQuery<T>.SelectValue<TResultType>(String,ObjectParameter[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Limits the query results to only the property specified in the projection.
  remarks: "SelectValue(TResultType) is used to return values that are simple types, entity types, or complex types. Use the <xref:System.Data.Objects.ObjectQuery%601.Select%2A> method for projections that require a row type instead of a value type. For more information, see [Object Queries](http://msdn.microsoft.com/en-us/0768033c-876f-471d-85d5-264884349276).  \n  \n The SelectValue(TResultType) method applies the projection specified by the `projection` parameter. The <xref:System.Data.Objects.ObjectQuery%601> returned by the SelectValue(TResultType) method must be of a value type that is compatible with the projection and must be the same type as the type of SelectValue(TResultType)."
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example creates a new <xref:System.Data.Objects.ObjectQuery%601> that contains results that are a sequence of `ProductID` values projected from the results of the existing query.  \n  \n [!code-vb[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectquery_selectvalue)]\n [!code-cs[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectquery_selectvalue)]"
  syntax:
    content: public System.Data.Objects.ObjectQuery<TResultType> SelectValue<TResultType> (string projection, System.Data.Objects.ObjectParameter[] parameters);
    parameters:
    - id: projection
      type: System.String
      description: The projection list.
    - id: parameters
      type: System.Data.Objects.ObjectParameter[]
      description: An optional set of query parameters that should be in scope when parsing.
    return:
      type: System.Data.Objects.ObjectQuery{TResultType}
      description: A new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> instance of a type compatible with the specific projection. The returned <xref href="stem.Data.Objects.ObjectQuery%601"></xref> is equivalent to the original instance with [SELECT VALUE](../Topic/SELECT%20\(Entity%20SQL\).md) applied.
  overload: System.Data.Objects.ObjectQuery`1.SelectValue<TResultType>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>projection</code> is `null`.  \n  \n -or-  \n  \n <code>parameters</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>projection</code> is an empty string.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])
  id: Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: Skip(String,String,ObjectParameter[])
  nameWithType: ObjectQuery<T>.Skip(String,String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectQuery<T>.Skip(String,String,ObjectParameter[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Orders the query results by the specified criteria and skips a specified number of results.
  remarks: The Skip method cannot be used after the <xref:System.Data.Objects.ObjectQuery%601.Top%2A> method. When you use <xref:System.Data.Objects.ObjectQuery%601.Top%2A> after Skip, it functions like the [LIMIT](../Topic/LIMIT%20\(Entity%20SQL\).md) statement of an  clause.
  example:
  - "This example gets five `Product` objects after skipping the first three in the query result, sorted by `Product.ListPrice`.  \n  \n [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#projection_skiplimit)]\n [!code-cs[DP ObjectServices Concepts#Projection_SkipLimit](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#projection_skiplimit)]"
  syntax:
    content: public System.Data.Objects.ObjectQuery<T> Skip (string keys, string count, System.Data.Objects.ObjectParameter[] parameters);
    parameters:
    - id: keys
      type: System.String
      description: The key columns by which to order the results.
    - id: count
      type: System.String
      description: The number of results to skip. This must be either a constant or a parameter reference.
    - id: parameters
      type: System.Data.Objects.ObjectParameter[]
      description: An optional set of query parameters that should be in scope when parsing.
    return:
      type: System.Data.Objects.ObjectQuery`1
      description: A new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> instance that is equivalent to the original instance with both [ORDER BY](../Topic/ORDER%20BY%20\(Entity%20SQL\).md) and [SKIP](../Topic/SKIP%20\(Entity%20SQL\).md) applied.
  overload: System.Data.Objects.ObjectQuery`1.Skip*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any argument is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keys</code> is an empty string.  \n  \n -or-  \n  \n <code>count</code> is an empty string."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: ObjectQuery<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Data.Objects.ObjectQuery<T>.IEnumerable<T>.GetEnumerator()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Returns an enumerator that iterates through the results of the query.
  remarks: Calling IEnumerable(T).GetEnumerator executes the query.
  syntax:
    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: An <xref href="stem.Collections.Generic.IEnumerator%601"></xref> object that can be used to iterate through the results.
  overload: System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])
  id: Top(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: Top(String,ObjectParameter[])
  nameWithType: ObjectQuery<T>.Top(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectQuery<T>.Top(String,ObjectParameter[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Limits the query results to a specified number of items.
  remarks: "Top is nondeterministic unless the query is sorted.  \n  \n When you use the Top method after the <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> method, it functions like the [LIMIT](../Topic/LIMIT%20\\(Entity%20SQL\\).md) statement of an [ORDER BY](../Topic/ORDER%20BY%20\\(Entity%20SQL\\).md) clause."
  example:
  - "These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832).  \n  \n This example creates a new <xref:System.Data.Objects.ObjectQuery%601> that contains the first two results of the existing query.  \n  \n [!code-vb[DP ObjectServices Concepts#ObjectQuery_Top](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectquery_top)]\n [!code-cs[DP ObjectServices Concepts#ObjectQuery_Top](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectquery_top)]  \n  \n This example gets five `Product` objects after skipping the first three in the query result, sorted by `Product.ListPrice`. Top is used instead of [LIMIT](../Topic/LIMIT%20\\(Entity%20SQL\\).md) for paging.  \n  \n [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#projection_skiplimit)]\n [!code-cs[DP ObjectServices Concepts#Projection_SkipLimit](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#projection_skiplimit)]"
  syntax:
    content: public System.Data.Objects.ObjectQuery<T> Top (string count, System.Data.Objects.ObjectParameter[] parameters);
    parameters:
    - id: count
      type: System.String
      description: The number of items in the results as a string.
    - id: parameters
      type: System.Data.Objects.ObjectParameter[]
      description: An optional set of query parameters that should be in scope when parsing.
    return:
      type: System.Data.Objects.ObjectQuery`1
      description: A new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> instance that is equivalent to the original instance with [TOP](../Topic/TOP%20\(Entity%20SQL\).md) applied.
  overload: System.Data.Objects.ObjectQuery`1.Top*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>count</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>count</code> is an empty string.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})
  id: Union(System.Data.Objects.ObjectQuery{`0})
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: Union(ObjectQuery<T>)
  nameWithType: ObjectQuery<T>.Union(ObjectQuery<T>)
  fullName: System.Data.Objects.ObjectQuery<T>.Union(ObjectQuery<T>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Combines the results of the query with the results of another object query, without any duplicates.
  remarks: "Union adds the results of the supplied `query` without any duplicates.  \n  \n The supplied `query` that defines the results to add must be of the same type or of a type that can be promoted to the type of this <xref:System.Data.Objects.ObjectQuery%601>. For example, the following is valid because `DiscontinuedProducts` can be promoted to `Products`:  \n  \n<CodeContentPlaceHolder>0</CodeContentPlaceHolder>  \n The following will throw an exception because `Products` cannot be promoted to `DiscontinuedProducts`.  \n  \n<CodeContentPlaceHolder>1</CodeContentPlaceHolder>  \n For an <xref:System.Data.Objects.ObjectQuery%601> of type <xref:System.Data.Common.DbDataRecord>, the records in both queries must have the same number of columns, and the types in the columns of the <xref:System.Data.Common.DbDataRecord> of the passed `query` must be promotable to the types of the columns in the <xref:System.Data.Common.DbDataRecord> of the <xref:System.Data.Objects.ObjectQuery%601>.  \n  \n Parameters that are defined in the supplied `query` are merged with parameters that are defined in the <xref:System.Data.Objects.ObjectQuery%601> instance. Parameters must be unique in the combined <xref:System.Data.Objects.ObjectParameterCollection>. There cannot be two parameters in the combined collection with the same name. For more information, see [Query Builder Methods](http://msdn.microsoft.com/en-us/05685434-05e6-41c2-8d5e-8933b88a40b0).  \n  \n The resulting query inherits the connection from the <xref:System.Data.Objects.ObjectQuery%601> instance on which Union was called."
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example uses Union method to creates a new <xref:System.Data.Objects.ObjectQuery%601> object.  \n  \n [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectquery_distinct_union)]\n [!code-cs[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectquery_distinct_union)]"
  syntax:
    content: public System.Data.Objects.ObjectQuery<T> Union (System.Data.Objects.ObjectQuery<T> query);
    parameters:
    - id: query
      type: System.Data.Objects.ObjectQuery`1
      description: An <xref href="stem.Data.Objects.ObjectQuery%601"></xref> that represents the results to add.
    return:
      type: System.Data.Objects.ObjectQuery`1
      description: A new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> instance that is equivalent to the original instance with [UNION](../Topic/UNION%20\(Entity%20SQL\).md) applied to add the results of the specified <code>query</code>.
  overload: System.Data.Objects.ObjectQuery`1.Union*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>query</code> parameter is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})
  id: UnionAll(System.Data.Objects.ObjectQuery{`0})
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: UnionAll(ObjectQuery<T>)
  nameWithType: ObjectQuery<T>.UnionAll(ObjectQuery<T>)
  fullName: System.Data.Objects.ObjectQuery<T>.UnionAll(ObjectQuery<T>)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Combines the results of the query with the results of another object query, including all duplicates.
  remarks: "UnionAll adds the results of the supplied `query` including all duplicates.  \n  \n The supplied `query` that defines results to add must be of the same type or of a type that can be promoted to the type of this <xref:System.Data.Objects.ObjectQuery%601>. For example, the following is valid because `DiscontinuedProducts` can be promoted to `Products`:  \n  \n<CodeContentPlaceHolder>0</CodeContentPlaceHolder>  \n The following will throw an exception because `Products` cannot be promoted to `DiscontinuedProducts`.  \n  \n<CodeContentPlaceHolder>1</CodeContentPlaceHolder>  \n For an <xref:System.Data.Objects.ObjectQuery%601> of type <xref:System.Data.Common.DbDataRecord>, the records in both queries must have the same number of columns, and the types in the columns of the <xref:System.Data.Common.DbDataRecord> of the passed `query` must be promotable to the types of the columns in the <xref:System.Data.Common.DbDataRecord> of the <xref:System.Data.Objects.ObjectQuery%601>.  \n  \n Parameters that are defined in the supplied `query` are merged with parameters that are defined in the <xref:System.Data.Objects.ObjectQuery%601> instance. Parameters must be unique in the combined <xref:System.Data.Objects.ObjectParameterCollection>. There cannot be two parameters in the combined collection with the same name. For more information, see [Query Builder Methods](http://msdn.microsoft.com/en-us/05685434-05e6-41c2-8d5e-8933b88a40b0).  \n  \n The resulting query inherits the connection from the <xref:System.Data.Objects.ObjectQuery%601> instance on which UnionAll was called."
  example:
  - "The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example uses the UnionAll method to create a new <xref:System.Data.Objects.ObjectQuery%601> object. Then it calls the <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> method on the new <xref:System.Data.Objects.ObjectQuery%601> object to get the unique results of this query.  \n  \n [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectquery_distinct_unionall)]\n [!code-cs[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectquery_distinct_unionall)]"
  syntax:
    content: public System.Data.Objects.ObjectQuery<T> UnionAll (System.Data.Objects.ObjectQuery<T> query);
    parameters:
    - id: query
      type: System.Data.Objects.ObjectQuery`1
      description: An <xref href="stem.Data.Objects.ObjectQuery%601"></xref> that represents the results to add.
    return:
      type: System.Data.Objects.ObjectQuery`1
      description: A new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> instance that is equivalent to the original instance with [UNION ALL](../Topic/UNION%20\(Entity%20SQL\).md) applied to add the results of the specified <code>query</code>.
  overload: System.Data.Objects.ObjectQuery`1.UnionAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>query</code> parameter is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])
  id: Where(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectQuery`1
  langs:
  - csharp
  name: Where(String,ObjectParameter[])
  nameWithType: ObjectQuery<T>.Where(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectQuery<T>.Where(String,ObjectParameter[])
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects
  summary: Limits the query to results that match specified filtering criteria.
  remarks: ''
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example creates a new <xref:System.Data.Objects.ObjectQuery%601> that contains results of the existing query filtered by the following criteria: `\"it.ProductID = 900\"`.  \n  \n [!code-vb[DP ObjectServices Concepts#ObjectQuery_Where](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#objectquery_where)]\n [!code-cs[DP ObjectServices Concepts#ObjectQuery_Where](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#objectquery_where)]"
  syntax:
    content: public System.Data.Objects.ObjectQuery<T> Where (string predicate, System.Data.Objects.ObjectParameter[] parameters);
    parameters:
    - id: predicate
      type: System.String
      description: The filter predicate.
    - id: parameters
      type: System.Data.Objects.ObjectParameter[]
      description: Zero or more parameters that are used in this method.
    return:
      type: System.Data.Objects.ObjectQuery`1
      description: A new <xref href="stem.Data.Objects.ObjectQuery%601"></xref> instance that is equivalent to the original instance with [WHERE](../Topic/WHERE%20\(Entity%20SQL\).md) applied.
  overload: System.Data.Objects.ObjectQuery`1.Where*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>predicate</code> is `null`.  \n  \n -or-  \n  \n <code>parameters</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>predicate</code> is an empty string.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Data.Objects\ObjectQuery`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Data.Objects/ObjectQuery`1.xml
  version:
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Data.Objects.ObjectQuery
  isExternal: false
  name: System.Data.Objects.ObjectQuery
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Data.EntitySqlException
  parent: System.Data
  isExternal: false
  name: EntitySqlException
  nameWithType: EntitySqlException
  fullName: System.Data.EntitySqlException
- uid: System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: ObjectQuery<T>(String,ObjectContext)
  nameWithType: ObjectQuery<T>.ObjectQuery<T>(String,ObjectContext)
  fullName: System.Data.Objects.ObjectQuery<T>.ObjectQuery<T>(String,ObjectContext)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.ObjectContext
  parent: System.Data.Objects
  isExternal: false
  name: ObjectContext
  nameWithType: ObjectContext
  fullName: System.Data.Objects.ObjectContext
- uid: System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: ObjectQuery<T>(String,ObjectContext,MergeOption)
  nameWithType: ObjectQuery<T>.ObjectQuery<T>(String,ObjectContext,MergeOption)
  fullName: System.Data.Objects.ObjectQuery<T>.ObjectQuery<T>(String,ObjectContext,MergeOption)
- uid: System.Data.Objects.MergeOption
  parent: System.Data.Objects
  isExternal: false
  name: MergeOption
  nameWithType: MergeOption
  fullName: System.Data.Objects.MergeOption
- uid: System.Data.Objects.ObjectQuery`1.Distinct
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Distinct()
  nameWithType: ObjectQuery<T>.Distinct()
  fullName: System.Data.Objects.ObjectQuery<T>.Distinct()
- uid: System.Data.Objects.ObjectQuery`1
  parent: System.Data.Objects
  isExternal: false
  name: ObjectQuery<T>
  nameWithType: ObjectQuery<T>
  fullName: System.Data.Objects.ObjectQuery<T>
- uid: System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Except(ObjectQuery<T>)
  nameWithType: ObjectQuery<T>.Except(ObjectQuery<T>)
  fullName: System.Data.Objects.ObjectQuery<T>.Except(ObjectQuery<T>)
- uid: System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Execute(MergeOption)
  nameWithType: ObjectQuery<T>.Execute(MergeOption)
  fullName: System.Data.Objects.ObjectQuery<T>.Execute(MergeOption)
- uid: System.Data.Objects.ObjectResult`1
  parent: System.Data.Objects
  isExternal: false
  name: ObjectResult<T>
  nameWithType: ObjectResult<T>
  fullName: System.Data.Objects.ObjectResult<T>
- uid: System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: GroupBy(String,String,ObjectParameter[])
  nameWithType: ObjectQuery<T>.GroupBy(String,String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectQuery<T>.GroupBy(String,String,ObjectParameter[])
- uid: System.Data.Objects.ObjectQuery{System.Data.Common.DbDataRecord}
  parent: System.Data.Objects
  isExternal: false
  name: ObjectQuery<DbDataRecord>
  nameWithType: ObjectQuery<DbDataRecord>
  fullName: System.Data.Objects.ObjectQuery<System.Data.Common.DbDataRecord>
  spec.csharp:
  - uid: System.Data.Objects.ObjectQuery`1
    name: ObjectQuery
    nameWithType: ObjectQuery
    fullName: ObjectQuery<System.Data.Common.DbDataRecord>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Common.DbDataRecord
    name: DbDataRecord
    nameWithType: DbDataRecord
    fullName: DbDataRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Objects.ObjectParameter[]
  parent: System.Data.Objects
  isExternal: false
  name: ObjectParameter[]
  nameWithType: ObjectParameter[]
  fullName: System.Data.Objects.ObjectParameter[]
  spec.csharp:
  - uid: System.Data.Objects.ObjectParameter
    name: ObjectParameter
    nameWithType: ObjectParameter
    fullName: ObjectParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Objects.ObjectQuery`1.Include(System.String)
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Include(String)
  nameWithType: ObjectQuery<T>.Include(String)
  fullName: System.Data.Objects.ObjectQuery<T>.Include(String)
- uid: System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Intersect(ObjectQuery<T>)
  nameWithType: ObjectQuery<T>.Intersect(ObjectQuery<T>)
  fullName: System.Data.Objects.ObjectQuery<T>.Intersect(ObjectQuery<T>)
- uid: System.Data.Objects.ObjectQuery`1.Name
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Name
  nameWithType: ObjectQuery<T>.Name
  fullName: System.Data.Objects.ObjectQuery<T>.Name
- uid: System.Data.Objects.ObjectQuery`1.OfType``1
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: OfType<TResultType>()
  nameWithType: ObjectQuery<T>.OfType<TResultType>()
  fullName: System.Data.Objects.ObjectQuery<T>.OfType<TResultType>()
- uid: System.Data.Objects.ObjectQuery{TResultType}
  parent: System.Data.Objects
  isExternal: false
  name: ObjectQuery<TResultType>
  nameWithType: ObjectQuery<TResultType>
  fullName: System.Data.Objects.ObjectQuery<TResultType>
  spec.csharp:
  - uid: System.Data.Objects.ObjectQuery`1
    name: ObjectQuery
    nameWithType: ObjectQuery
    fullName: ObjectQuery<TResultType>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResultType
    name: TResultType
    nameWithType: TResultType
    fullName: TResultType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: OrderBy(String,ObjectParameter[])
  nameWithType: ObjectQuery<T>.OrderBy(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectQuery<T>.OrderBy(String,ObjectParameter[])
- uid: System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Select(String,ObjectParameter[])
  nameWithType: ObjectQuery<T>.Select(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectQuery<T>.Select(String,ObjectParameter[])
- uid: System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: SelectValue<TResultType>(String,ObjectParameter[])
  nameWithType: ObjectQuery<T>.SelectValue<TResultType>(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectQuery<T>.SelectValue<TResultType>(String,ObjectParameter[])
- uid: System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Skip(String,String,ObjectParameter[])
  nameWithType: ObjectQuery<T>.Skip(String,String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectQuery<T>.Skip(String,String,ObjectParameter[])
- uid: System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: ObjectQuery<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Data.Objects.ObjectQuery<T>.IEnumerable<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Top(String,ObjectParameter[])
  nameWithType: ObjectQuery<T>.Top(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectQuery<T>.Top(String,ObjectParameter[])
- uid: System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Union(ObjectQuery<T>)
  nameWithType: ObjectQuery<T>.Union(ObjectQuery<T>)
  fullName: System.Data.Objects.ObjectQuery<T>.Union(ObjectQuery<T>)
- uid: System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: UnionAll(ObjectQuery<T>)
  nameWithType: ObjectQuery<T>.UnionAll(ObjectQuery<T>)
  fullName: System.Data.Objects.ObjectQuery<T>.UnionAll(ObjectQuery<T>)
- uid: System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Where(String,ObjectParameter[])
  nameWithType: ObjectQuery<T>.Where(String,ObjectParameter[])
  fullName: System.Data.Objects.ObjectQuery<T>.Where(String,ObjectParameter[])
- uid: System.Data.Objects.ObjectQuery`1.#ctor*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: ObjectQuery<T>
  nameWithType: ObjectQuery<T>.ObjectQuery<T>
- uid: System.Data.Objects.ObjectQuery`1.Distinct*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Distinct
  nameWithType: ObjectQuery<T>.Distinct
- uid: System.Data.Objects.ObjectQuery`1.Except*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Except
  nameWithType: ObjectQuery<T>.Except
- uid: System.Data.Objects.ObjectQuery`1.Execute*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Execute
  nameWithType: ObjectQuery<T>.Execute
- uid: System.Data.Objects.ObjectQuery`1.GroupBy*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: GroupBy
  nameWithType: ObjectQuery<T>.GroupBy
- uid: System.Data.Objects.ObjectQuery`1.Include*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Include
  nameWithType: ObjectQuery<T>.Include
- uid: System.Data.Objects.ObjectQuery`1.Intersect*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Intersect
  nameWithType: ObjectQuery<T>.Intersect
- uid: System.Data.Objects.ObjectQuery`1.Name*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Name
  nameWithType: ObjectQuery<T>.Name
- uid: System.Data.Objects.ObjectQuery`1.OfType<TResultType>*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: OfType<TResultType>
  nameWithType: ObjectQuery<T>.OfType<TResultType>
- uid: System.Data.Objects.ObjectQuery`1.OrderBy*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: OrderBy
  nameWithType: ObjectQuery<T>.OrderBy
- uid: System.Data.Objects.ObjectQuery`1.Select*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Select
  nameWithType: ObjectQuery<T>.Select
- uid: System.Data.Objects.ObjectQuery`1.SelectValue<TResultType>*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: SelectValue<TResultType>
  nameWithType: ObjectQuery<T>.SelectValue<TResultType>
- uid: System.Data.Objects.ObjectQuery`1.Skip*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Skip
  nameWithType: ObjectQuery<T>.Skip
- uid: System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType: ObjectQuery<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Data.Objects.ObjectQuery`1.Top*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Top
  nameWithType: ObjectQuery<T>.Top
- uid: System.Data.Objects.ObjectQuery`1.Union*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Union
  nameWithType: ObjectQuery<T>.Union
- uid: System.Data.Objects.ObjectQuery`1.UnionAll*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: UnionAll
  nameWithType: ObjectQuery<T>.UnionAll
- uid: System.Data.Objects.ObjectQuery`1.Where*
  parent: System.Data.Objects.ObjectQuery`1
  isExternal: false
  name: Where
  nameWithType: ObjectQuery<T>.Where
