### YamlMime:ManagedReference
items:
- uid: System.Collections.ObjectModel.Collection`1
  id: Collection`1
  children:
  - System.Collections.ObjectModel.Collection`1.#ctor
  - System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})
  - System.Collections.ObjectModel.Collection`1.Add(`0)
  - System.Collections.ObjectModel.Collection`1.Clear
  - System.Collections.ObjectModel.Collection`1.ClearItems
  - System.Collections.ObjectModel.Collection`1.Contains(`0)
  - System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
  - System.Collections.ObjectModel.Collection`1.Count
  - System.Collections.ObjectModel.Collection`1.GetEnumerator
  - System.Collections.ObjectModel.Collection`1.IndexOf(`0)
  - System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
  - System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)
  - System.Collections.ObjectModel.Collection`1.Item(System.Int32)
  - System.Collections.ObjectModel.Collection`1.Items
  - System.Collections.ObjectModel.Collection`1.Remove(`0)
  - System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
  - System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)
  - System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)
  - System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: Collection<T>
  nameWithType: Collection<T>
  fullName: System.Collections.ObjectModel.Collection<T>
  type: Class
  summary: Provides the base class for a generic collection.
  remarks: "The Collection(T) class can be used immediately by creating an instance of one of its constructed types; all you have to do is specify the type of object to be contained in the collection. In addition, you can derive your own collection type from any constructed type, or derive a generic collection type from the Collection(T) class itself.  \n  \n The Collection(T) class provides protected methods that can be used to customize its behavior when adding and removing items, clearing the collection, or setting the value of an existing item.  \n  \n Most Collection(T) objectscan be modified. However, a Collection(T) object that is initialized with a read-only <xref:System.Collections.Generic.IList%601> object cannot be modified. See <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> for a read-only version of this class.  \n  \n Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.  \n  \n Collection(T) accepts `null` as a valid value for reference types and allows duplicate elements."
  example:
  - "This section contains two code examples. The first example demonstrates several properties and methods of the Collection(T) class. The second example shows how to derive a collection class from a constructed type of Collection(T), and how to override the protected methods of Collection(T) to provide custom behavior.  \n  \n Example 1  \n  \n The following code example demonstrates many of the properties and methods of Collection(T). The code example creates a collection of strings, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings. The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection. The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#). The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method. Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.  \n  \n [!code-cpp[ObjectModel.Collection#1](~/add/codesnippet/cpp/t-system.collections.obj_2_1.cpp)]\n [!code-cs[ObjectModel.Collection#1](~/add/codesnippet/csharp/t-system.collections.obj_2_1.cs)]\n [!code-vb[ObjectModel.Collection#1](~/add/codesnippet/visualbasic/t-system.collections.obj_2_1.vb)]  \n  \n Example 2  \n  \n The following code example shows how to derive a collection class from a constructed type of the Collection(T) generic class, and how to override the protected <xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A>, and <xref:System.Collections.ObjectModel.Collection%601.SetItem%2A> methods to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>, <xref:System.Collections.ObjectModel.Collection%601.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property.  \n  \n The custom behavior provided by this example is a `Changed` notification event that is raised at the end of each of the protected methods. The `Dinosaurs` class inherits `Collection<string>` (`Collection(Of String)` in Visual Basic) and defines the `Changed` event, which uses a `DinosaursChangedEventArgs` class for the event information, and an enumeration to identify the kind of change.  \n  \n The code example calls several properties and methods of Collection(T) to demonstrate the custom event.  \n  \n [!code-cs[ObjectModel.CollectionInherited#1](~/add/codesnippet/csharp/t-system.collections.obj_2_2.cs)]\n [!code-vb[ObjectModel.CollectionInherited#1](~/add/codesnippet/visualbasic/t-system.collections.obj_2_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))]

      [System.Runtime.InteropServices.ComVisible(false)]

      public class Collection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.IList
    typeParameters:
    - id: T
      description: The type of elements in the collection.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.IList<T>
  - System.Collections.Generic.IReadOnlyCollection<T>
  - System.Collections.Generic.IReadOnlyList<T>
  - System.Collections.IList
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.#ctor
  id: '#ctor'
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: Collection<T>()
  nameWithType: Collection<T>.Collection<T>()
  fullName: System.Collections.ObjectModel.Collection<T>.Collection<T>()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Initializes a new instance of the <xref href="stem.Collections.ObjectModel.Collection%601"></xref> class that is empty.
  remarks: This constructor is an O(1) operation.
  example:
  - "The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>. The code example creates a collection of strings with the Collection(T) constructor, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings. The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection. The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#). The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method. Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.  \n  \n [!code-cpp[ObjectModel.Collection#1](~/add/codesnippet/cpp/m-system.collections.obj_9_1.cpp)]\n [!code-cs[ObjectModel.Collection#1](~/add/codesnippet/csharp/m-system.collections.obj_9_1.cs)]\n [!code-vb[ObjectModel.Collection#1](~/add/codesnippet/visualbasic/m-system.collections.obj_9_1.vb)]"
  syntax:
    content: public Collection ();
    parameters: []
  overload: System.Collections.ObjectModel.Collection`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})
  id: '#ctor(System.Collections.Generic.IList{`0})'
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: Collection<T>(IList<T>)
  nameWithType: Collection<T>.Collection<T>(IList<T>)
  fullName: System.Collections.ObjectModel.Collection<T>.Collection<T>(IList<T>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Initializes a new instance of the <xref href="stem.Collections.ObjectModel.Collection%601"></xref> class as a wrapper for the specified list.
  remarks: "The elements of the list are not copied. The list is wrapped by the collection, so that subsequent changes to the elements of the list are visible through the <xref:System.Collections.ObjectModel.Collection%601>.  \n  \n This constructor is an O(1) operation."
  syntax:
    content: public Collection (System.Collections.Generic.IList<T> list);
    parameters:
    - id: list
      type: System.Collections.Generic.IList`1
      description: The list that is wrapped by the new collection.
  overload: System.Collections.ObjectModel.Collection`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>list</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: Add(T)
  nameWithType: Collection<T>.Add(T)
  fullName: System.Collections.ObjectModel.Collection<T>.Add(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Adds an object to the end of the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>.
  remarks: "<xref:System.Collections.ObjectModel.Collection%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>. The code example creates a collection of strings, uses the Add method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings. The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection. The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#). The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method. Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.  \n  \n [!code-cpp[ObjectModel.Collection#1](~/add/codesnippet/cpp/m-system.collections.obj_11_1.cpp)]\n [!code-cs[ObjectModel.Collection#1](~/add/codesnippet/csharp/m-system.collections.obj_11_1.cs)]\n [!code-vb[ObjectModel.Collection#1](~/add/codesnippet/visualbasic/m-system.collections.obj_11_1.vb)]"
  syntax:
    content: public void Add (T item);
    parameters:
    - id: item
      type: T
      description: The object to be added to the end of the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>. The value can be `null` for reference types.
  overload: System.Collections.ObjectModel.Collection`1.Add*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.Clear
  id: Clear
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: Clear()
  nameWithType: Collection<T>.Clear()
  fullName: System.Collections.ObjectModel.Collection<T>.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Removes all elements from the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>.
  remarks: "<xref:System.Collections.ObjectModel.Collection%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  example:
  - "The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>. The code example creates a collection of strings, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings. The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection. The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#). The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method. Finally, the Clear method is used to clear all strings from the collection.  \n  \n [!code-cpp[ObjectModel.Collection#1](~/add/codesnippet/cpp/m-system.collections.obj_16_1.cpp)]\n [!code-cs[ObjectModel.Collection#1](~/add/codesnippet/csharp/m-system.collections.obj_16_1.cs)]\n [!code-vb[ObjectModel.Collection#1](~/add/codesnippet/visualbasic/m-system.collections.obj_16_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.ObjectModel.Collection`1.Clear*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.ClearItems
  id: ClearItems
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: ClearItems()
  nameWithType: Collection<T>.ClearItems()
  fullName: System.Collections.ObjectModel.Collection<T>.ClearItems()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Removes all elements from the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>.
  remarks: "<xref:System.Collections.ObjectModel.Collection%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  example:
  - "The following code example shows how to derive a collection class from a constructed type of the <xref:System.Collections.ObjectModel.Collection%601> generic class, and how to override the protected <xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A>, ClearItems, and <xref:System.Collections.ObjectModel.Collection%601.SetItem%2A> methods to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>, <xref:System.Collections.ObjectModel.Collection%601.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property.  \n  \n The custom behavior provided by this example is a `Changed` notification event that is raised at the end of each of the protected methods. The `Dinosaurs` class inherits `Collection<string>` (`Collection(Of String)` in Visual Basic) and defines the `Changed` event, which uses a `DinosaursChangedEventArgs` class for the event information, and an enumeration to identify the kind of change.  \n  \n The code example calls several properties and methods of <xref:System.Collections.ObjectModel.Collection%601> to demonstrate the custom event.  \n  \n [!code-cs[ObjectModel.CollectionInherited#1](~/add/codesnippet/csharp/m-system.collections.obj_17_1.cs)]\n [!code-vb[ObjectModel.CollectionInherited#1](~/add/codesnippet/visualbasic/m-system.collections.obj_17_1.vb)]"
  syntax:
    content: protected virtual void ClearItems ();
    parameters: []
  overload: System.Collections.ObjectModel.Collection`1.ClearItems*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: Collection<T>.Contains(T)
  fullName: System.Collections.ObjectModel.Collection<T>.Contains(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Determines whether an element is in the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>.
  remarks: "If the <xref:System.Collections.ObjectModel.Collection%601> object is created using the default constructor, this method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list. If type `T` does not implement the <xref:System.IEquatable%601> interface, the <xref:System.Object.Equals%2A> method is used.  \n  \n If the Collection object is created by passing an <xref:System.Collections.Generic.IList%601> object to the constructor, the Contains method will be determined by the <xref:System.Collections.Generic.IEqualityComparer%601> interface used by that <xref:System.Collections.Generic.IList%601> object.  \n  \n This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>. That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  syntax:
    content: public bool Contains (T item);
    parameters:
    - id: item
      type: T
      description: The object to locate in the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>. The value can be `null` for reference types.
    return:
      type: System.Boolean
      description: '`true` if <code>item</code> is found in the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>; otherwise, `false`.'
  overload: System.Collections.ObjectModel.Collection`1.Contains*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: Collection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.ObjectModel.Collection<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Copies the entire <xref href="stem.Collections.ObjectModel.Collection%601"></xref> to a compatible one-dimensional <xref href="System.Array"></xref>, starting at the specified index of the target array.
  remarks: "This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.ObjectModel.Collection%601>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="stem.Collections.ObjectModel.Collection%601"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.ObjectModel.Collection`1.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source <xref href="stem.Collections.ObjectModel.Collection%601"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.Count
  id: Count
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: Count
  nameWithType: Collection<T>.Count
  fullName: System.Collections.ObjectModel.Collection<T>.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets the number of elements actually contained in the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>.
  remarks: Retrieving the value of this property is an O(1) operation.
  example:
  - "The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>. The code example creates a collection of strings, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the Count, and lists the strings. The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection. The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#). The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method. Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.  \n  \n [!code-cpp[ObjectModel.Collection#1](~/add/codesnippet/cpp/p-system.collections.obj_6_1.cpp)]\n [!code-cs[ObjectModel.Collection#1](~/add/codesnippet/csharp/p-system.collections.obj_6_1.cs)]\n [!code-vb[ObjectModel.Collection#1](~/add/codesnippet/visualbasic/p-system.collections.obj_6_1.vb)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of elements actually contained in the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>.
  overload: System.Collections.ObjectModel.Collection`1.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Collection<T>.GetEnumerator()
  fullName: System.Collections.ObjectModel.Collection<T>.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Returns an enumerator that iterates through the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  \n  \n <xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: public System.Collections.Generic.IEnumerator<T> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: An <xref href="stem.Collections.Generic.IEnumerator%601"></xref> for the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>.
  overload: System.Collections.ObjectModel.Collection`1.GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: IndexOf(T)
  nameWithType: Collection<T>.IndexOf(T)
  fullName: System.Collections.ObjectModel.Collection<T>.IndexOf(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the entire <xref href="stem.Collections.ObjectModel.Collection%601"></xref>.
  remarks: "The <xref:System.Collections.ObjectModel.Collection%601> is searched forward starting at the first element and ending at the last element.  \n  \n This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>. That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  example:
  - "The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>. The code example creates a collection of strings, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings. The example uses the IndexOf method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection. The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#). The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method. Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.  \n  \n [!code-cpp[ObjectModel.Collection#1](~/add/codesnippet/cpp/m-system.collections.obj_4_1.cpp)]\n [!code-cs[ObjectModel.Collection#1](~/add/codesnippet/csharp/m-system.collections.obj_4_1.cs)]\n [!code-vb[ObjectModel.Collection#1](~/add/codesnippet/visualbasic/m-system.collections.obj_4_1.vb)]"
  syntax:
    content: public int IndexOf (T item);
    parameters:
    - id: item
      type: T
      description: The object to locate in the <xref href="stem.Collections.Generic.List%601"></xref>. The value can be `null` for reference types.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of <code>item</code> within the entire <xref href="stem.Collections.ObjectModel.Collection%601"></xref>, if found; otherwise, -1.
  overload: System.Collections.ObjectModel.Collection`1.IndexOf*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: Insert(Int32,T)
  nameWithType: Collection<T>.Insert(Int32,T)
  fullName: System.Collections.ObjectModel.Collection<T>.Insert(Int32,T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Inserts an element into the <xref href="stem.Collections.ObjectModel.Collection%601"></xref> at the specified index.
  remarks: "<xref:System.Collections.ObjectModel.Collection%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \n  \n If `index` is equal to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, `item` is added to the end of <xref:System.Collections.ObjectModel.Collection%601>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  syntax:
    content: public void Insert (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <code>item</code> should be inserted.
    - id: item
      type: T
      description: The object to insert. The value can be `null` for reference types.
  overload: System.Collections.ObjectModel.Collection`1.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is greater than <xref href=\"stem.Collections.ObjectModel.Collection%601.Count%2A\"></xref>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)
  id: InsertItem(System.Int32,`0)
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: InsertItem(Int32,T)
  nameWithType: Collection<T>.InsertItem(Int32,T)
  fullName: System.Collections.ObjectModel.Collection<T>.InsertItem(Int32,T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Inserts an element into the <xref href="stem.Collections.ObjectModel.Collection%601"></xref> at the specified index.
  remarks: "The InsertItem is meant to be overridden in a derived class. For a public method to insert an item in the <xref:System.Collections.ObjectModel.Collection%601>, see <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>.  \n  \n <xref:System.Collections.ObjectModel.Collection%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \n  \n If `index` is equal to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, `item` is added to the end of <xref:System.Collections.ObjectModel.Collection%601>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  example:
  - "The following code example shows how to derive a collection class from a constructed type of the <xref:System.Collections.ObjectModel.Collection%601> generic class, and how to override the protected InsertItem, <xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A>, and <xref:System.Collections.ObjectModel.Collection%601.SetItem%2A> methods to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>, <xref:System.Collections.ObjectModel.Collection%601.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property.  \n  \n The custom behavior provided by this example is a `Changed` notification event that is raised at the end of each of the protected methods. The `Dinosaurs` class inherits `Collection<string>` (`Collection(Of String)` in Visual Basic) and defines the `Changed` event, which uses a `DinosaursChangedEventArgs` class for the event information, and an enumeration to identify the kind of change.  \n  \n The code example calls several properties and methods of <xref:System.Collections.ObjectModel.Collection%601> to demonstrate the custom event.  \n  \n [!code-cs[ObjectModel.CollectionInherited#1](~/add/codesnippet/csharp/m-system.collections.obj_21_1.cs)]\n [!code-vb[ObjectModel.CollectionInherited#1](~/add/codesnippet/visualbasic/m-system.collections.obj_21_1.vb)]"
  syntax:
    content: protected virtual void InsertItem (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <code>item</code> should be inserted.
    - id: item
      type: T
      description: The object to insert. The value can be `null` for reference types.
  overload: System.Collections.ObjectModel.Collection`1.InsertItem*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is greater than <xref href=\"stem.Collections.ObjectModel.Collection%601.Count%2A\"></xref>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: Collection<T>.Item(Int32)
  fullName: System.Collections.ObjectModel.Collection<T>.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets or sets the element at the specified index.
  remarks: "<xref:System.Collections.ObjectModel.Collection%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \n  \n This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation."
  example:
  - "The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>. The code example creates a collection of strings, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings. The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection. The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default Item property (the indexer in C#). The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method. Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.  \n  \n [!code-cpp[ObjectModel.Collection#1](~/add/codesnippet/cpp/p-system.collections.obj_3_1.cpp)]\n [!code-cs[ObjectModel.Collection#1](~/add/codesnippet/csharp/p-system.collections.obj_3_1.cs)]\n [!code-vb[ObjectModel.Collection#1](~/add/codesnippet/visualbasic/p-system.collections.obj_3_1.vb)]"
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get or set.
    return:
      type: T
      description: The element at the specified index.
  overload: System.Collections.ObjectModel.Collection`1.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is equal to or greater than <xref href=\"stem.Collections.ObjectModel.Collection%601.Count%2A\"></xref>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.Items
  id: Items
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: Items
  nameWithType: Collection<T>.Items
  fullName: System.Collections.ObjectModel.Collection<T>.Items
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets a <xref href="stem.Collections.Generic.IList%601"></xref> wrapper around the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>.
  remarks: "The wrapper provides the functionality of the <xref:System.Collections.Generic.IList%601> class and exposes all the elements of the <xref:System.Collections.ObjectModel.Collection%601>.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: protected System.Collections.Generic.IList<T> Items { get; }
    return:
      type: System.Collections.Generic.IList`1
      description: A <xref href="stem.Collections.Generic.IList%601"></xref> wrapper around the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>.
  overload: System.Collections.ObjectModel.Collection`1.Items*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: Remove(T)
  nameWithType: Collection<T>.Remove(T)
  fullName: System.Collections.ObjectModel.Collection<T>.Remove(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Removes the first occurrence of a specific object from the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>.
  remarks: "This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the list.  \n  \n This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>. That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  example:
  - "The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>. The code example creates a collection of strings, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings. The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection. The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#). The example removes strings by string identity using the Remove method and by index using the <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> method. Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.  \n  \n [!code-cpp[ObjectModel.Collection#1](~/add/codesnippet/cpp/m-system.collections.obj_6_1.cpp)]\n [!code-cs[ObjectModel.Collection#1](~/add/codesnippet/csharp/m-system.collections.obj_6_1.cs)]\n [!code-vb[ObjectModel.Collection#1](~/add/codesnippet/visualbasic/m-system.collections.obj_6_1.vb)]"
  syntax:
    content: public bool Remove (T item);
    parameters:
    - id: item
      type: T
      description: The object to remove from the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>. The value can be `null` for reference types.
    return:
      type: System.Boolean
      description: '`true` if <code>item</code> is successfully removed; otherwise, `false`.  This method also returns `false` if <code>item</code> was not found in the original <xref href="stem.Collections.ObjectModel.Collection%601"></xref>.'
  overload: System.Collections.ObjectModel.Collection`1.Remove*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: Collection<T>.RemoveAt(Int32)
  fullName: System.Collections.ObjectModel.Collection<T>.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Removes the element at the specified index of the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>.
  remarks: This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.
  example:
  - "The following code example demonstrates many of the properties and methods of <xref:System.Collections.ObjectModel.Collection%601>. The code example creates a collection of strings, uses the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method to add several strings, displays the <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, and lists the strings. The example uses the <xref:System.Collections.ObjectModel.Collection%601.IndexOf%2A> method to find the index of a string and the <xref:System.Collections.ObjectModel.Collection%601.Contains%2A> method to determine whether a string is in the collection. The example inserts a string using the <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> method and retrieves and sets strings using the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#). The example removes strings by string identity using the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> method and by index using the RemoveAt method. Finally, the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method is used to clear all strings from the collection.  \n  \n [!code-cpp[ObjectModel.Collection#1](~/add/codesnippet/cpp/m-system.collections.obj_5_1.cpp)]\n [!code-cs[ObjectModel.Collection#1](~/add/codesnippet/csharp/m-system.collections.obj_5_1.cs)]\n [!code-vb[ObjectModel.Collection#1](~/add/codesnippet/visualbasic/m-system.collections.obj_5_1.vb)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to remove.
  overload: System.Collections.ObjectModel.Collection`1.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is equal to or greater than <xref href=\"stem.Collections.ObjectModel.Collection%601.Count%2A\"></xref>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)
  id: RemoveItem(System.Int32)
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: RemoveItem(Int32)
  nameWithType: Collection<T>.RemoveItem(Int32)
  fullName: System.Collections.ObjectModel.Collection<T>.RemoveItem(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Removes the element at the specified index of the <xref href="stem.Collections.ObjectModel.Collection%601"></xref>.
  remarks: This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.
  example:
  - "The following code example shows how to derive a collection class from a constructed type of the <xref:System.Collections.ObjectModel.Collection%601> generic class, and how to override the protected <xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A>, RemoveItem, <xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A>, and <xref:System.Collections.ObjectModel.Collection%601.SetItem%2A> methods to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>, <xref:System.Collections.ObjectModel.Collection%601.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property.  \n  \n The custom behavior provided by this example is a `Changed` notification event that is raised at the end of each of the protected methods. The `Dinosaurs` class inherits `Collection<string>` (`Collection(Of String)` in Visual Basic) and defines the `Changed` event, which uses a `DinosaursChangedEventArgs` class for the event information, and an enumeration to identify the kind of change.  \n  \n The code example calls several properties and methods of <xref:System.Collections.ObjectModel.Collection%601> to demonstrate the custom event.  \n  \n [!code-cs[ObjectModel.CollectionInherited#1](~/add/codesnippet/csharp/m-system.collections.obj_8_1.cs)]\n [!code-vb[ObjectModel.CollectionInherited#1](~/add/codesnippet/visualbasic/m-system.collections.obj_8_1.vb)]"
  syntax:
    content: protected virtual void RemoveItem (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to remove.
  overload: System.Collections.ObjectModel.Collection`1.RemoveItem*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is equal to or greater than <xref href=\"stem.Collections.ObjectModel.Collection%601.Count%2A\"></xref>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)
  id: SetItem(System.Int32,`0)
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: SetItem(Int32,T)
  nameWithType: Collection<T>.SetItem(Int32,T)
  fullName: System.Collections.ObjectModel.Collection<T>.SetItem(Int32,T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Replaces the element at the specified index.
  remarks: "<xref:System.Collections.ObjectModel.Collection%601> accepts `null` as a valid value for reference types and allows duplicate elements.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example shows how to derive a collection class from a constructed type of the <xref:System.Collections.ObjectModel.Collection%601> generic class, and how to override the protected <xref:System.Collections.ObjectModel.Collection%601.InsertItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.RemoveItem%2A>, <xref:System.Collections.ObjectModel.Collection%601.ClearItems%2A>, and SetItem methods to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.Collection%601.Insert%2A>, <xref:System.Collections.ObjectModel.Collection%601.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property.  \n  \n The custom behavior provided by this example is a `Changed` notification event that is raised at the end of each of the protected methods. The `Dinosaurs` class inherits `Collection<string>` (`Collection(Of String)` in Visual Basic) and defines the `Changed` event, which uses a `DinosaursChangedEventArgs` class for the event information, and an enumeration to identify the kind of change.  \n  \n The code example calls several properties and methods of <xref:System.Collections.ObjectModel.Collection%601> to demonstrate the custom event.  \n  \n [!code-cs[ObjectModel.CollectionInherited#1](~/add/codesnippet/csharp/m-system.collections.obj_10_1.cs)]\n [!code-vb[ObjectModel.CollectionInherited#1](~/add/codesnippet/visualbasic/m-system.collections.obj_10_1.vb)]"
  syntax:
    content: protected virtual void SetItem (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to replace.
    - id: item
      type: T
      description: The new value for the element at the specified index. The value can be `null` for reference types.
  overload: System.Collections.ObjectModel.Collection`1.SetItem*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is greater than <xref href=\"stem.Collections.ObjectModel.Collection%601.Count%2A\"></xref>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: ICollection<T>.IsReadOnly
  nameWithType: Collection<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.ObjectModel.Collection<T>.ICollection<T>.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets a value indicating whether the <xref href="stem.Collections.Generic.ICollection%601"></xref> is read-only.
  remarks: "A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.ICollection%601"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href="stem.Collections.ObjectModel.Collection%601"></xref>, this property always returns `false`.'
  overload: System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: Collection<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.ObjectModel.Collection<T>.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Copies the elements of the <xref href="System.Collections.ICollection"></xref> to an <xref href="System.Array"></xref>, starting at a particular <xref href="System.Array"></xref> index.
  remarks: "> [!NOTE]\n>  If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="System.Collections.ICollection"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.  \n  \n -or-  \n  \n <code>array</code> does not have zero-based indexing.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.  \n  \n -or-  \n  \n The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: Collection<T>.ICollection.IsSynchronized
  fullName: System.Collections.ObjectModel.Collection<T>.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets a value indicating whether access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe).
  remarks: "Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration. To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: '`true` if access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe); otherwise, `false`.  In the default implementation of <xref href="stem.Collections.ObjectModel.Collection%601"></xref>, this property always returns `false`.'
  overload: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: Collection<T>.ICollection.SyncRoot
  fullName: System.Collections.ObjectModel.Collection<T>.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>.
  remarks: "Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.  \n  \n```c#  \nICollection ic = ...;  \nlock (ic.SyncRoot) {  \n   // Access the collection.  \n}  \n```  \n  \n```vb#  \nDim ic As ICollection = ...  \nSyncLock ic.SyncRoot  \n   ' Access the collection.  \nEnd SyncLock  \n```  \n  \n```cpp#  \nICollection^ ic = ...;  \ntry {  \n   Monitor::Enter(ic->SyncRoot);  \n   // Access the collection.  \n}  \nfinally {  \n   Monitor::Exit(ic->SyncRoot);  \n}  \n```  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>.  In the default implementation of <xref href="stem.Collections.ObjectModel.Collection%601"></xref>, this property always returns the current instance.
  overload: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: Collection<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.ObjectModel.Collection<T>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Returns an enumerator that iterates through a collection.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator"></xref> that can be used to iterate through the collection.
  overload: System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: IList.Add(Object)
  nameWithType: Collection<T>.IList.Add(Object)
  fullName: System.Collections.ObjectModel.Collection<T>.IList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Adds an item to the <xref href="System.Collections.IList"></xref>.
  remarks: This method is an O(1) operation.
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object"></xref> to add to the <xref href="System.Collections.IList"></xref>.
    return:
      type: System.Int32
      description: The position into which the new element was inserted.
  overload: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>value</code> is of a type that is not assignable to the <xref href="System.Collections.IList"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: IList.Contains(Object)
  nameWithType: Collection<T>.IList.Contains(Object)
  fullName: System.Collections.ObjectModel.Collection<T>.IList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Determines whether the <xref href="System.Collections.IList"></xref> contains a specific value.
  remarks: "This method determines equality by first determining whether `value` is of type `T` (or null) and then calling <xref:System.Collections.ObjectModel.Collection%601.Contains%2A>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object"></xref> to locate in the <xref href="System.Collections.IList"></xref>.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Object"></xref> is found in the <xref href="System.Collections.IList"></xref>; otherwise, `false`.'
  overload: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>value</code> is of a type that is not assignable to the <xref href="System.Collections.IList"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: IList.IndexOf(Object)
  nameWithType: Collection<T>.IList.IndexOf(Object)
  fullName: System.Collections.ObjectModel.Collection<T>.IList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Determines the index of a specific item in the <xref href="System.Collections.IList"></xref>.
  remarks: "This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName>.  <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements <xref:System.IComparable?displayProperty=fullName>.  If type `T` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object"></xref> to locate in the <xref href="System.Collections.IList"></xref>.
    return:
      type: System.Int32
      description: The index of <code>value</code> if found in the list; otherwise, -1.
  overload: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>value</code> is of a type that is not assignable to the <xref href="System.Collections.IList"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: IList.Insert(Int32,Object)
  nameWithType: Collection<T>.IList.Insert(Int32,Object)
  fullName: System.Collections.ObjectModel.Collection<T>.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Inserts an item into the <xref href="System.Collections.IList"></xref> at the specified index.
  remarks: "If `index` equals the number of items in the <xref:System.Collections.IList>, then `value` is appended to the end.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <code>value</code> should be inserted.
    - id: value
      type: System.Object
      description: The <xref href="System.Object"></xref> to insert into the <xref href="System.Collections.IList"></xref>.
  overload: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is not a valid index in the <xref href="System.Collections.IList"></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>value</code> is of a type that is not assignable to the <xref href="System.Collections.IList"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: IList.IsFixedSize
  nameWithType: Collection<T>.IList.IsFixedSize
  fullName: System.Collections.ObjectModel.Collection<T>.IList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets a value indicating whether the <xref href="System.Collections.IList"></xref> has a fixed size.
  remarks: "A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \n  \n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Collections.IList"></xref> has a fixed size; otherwise, `false`.  In the default implementation of <xref href="stem.Collections.ObjectModel.Collection%601"></xref>, this property always returns `false`.'
  overload: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: IList.IsReadOnly
  nameWithType: Collection<T>.IList.IsReadOnly
  fullName: System.Collections.ObjectModel.Collection<T>.IList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets a value indicating whether the <xref href="System.Collections.IList"></xref> is read-only.
  remarks: "A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Collections.IList"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href="stem.Collections.ObjectModel.Collection%601"></xref>, this property always returns `false`.'
  overload: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: IList.Item(Int32)
  nameWithType: Collection<T>.IList.Item(Int32)
  fullName: System.Collections.ObjectModel.Collection<T>.IList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets or sets the element at the specified index.
  remarks: "This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \n  \n The C# language uses the [this](../Topic/this%20\\(C%23%20Reference\\).md) keyword to define the indexers instead of implementing the IList.Item property. Visual Basic implements IList.Item as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation."
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get or set.
    return:
      type: System.Object
      description: The element at the specified index.
  overload: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is not a valid index in the <xref href="System.Collections.IList"></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The property is set and <code>value</code> is of a type that is not assignable to the <xref href="System.Collections.IList"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Collections.ObjectModel.Collection`1
  langs:
  - csharp
  name: IList.Remove(Object)
  nameWithType: Collection<T>.IList.Remove(Object)
  fullName: System.Collections.ObjectModel.Collection<T>.IList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Removes the first occurrence of a specific object from the <xref href="System.Collections.IList"></xref>.
  remarks: "This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName>.  <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements <xref:System.IComparable%601?displayProperty=fullName> and uses that implementation, if available.  If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> checks whether type `T` implements <xref:System.IComparable?displayProperty=fullName>.  If type `T` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>."
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object"></xref> to remove from the <xref href="System.Collections.IList"></xref>.
  overload: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>value</code> is of a type that is not assignable to the <xref href="System.Collections.IList"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\Collection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/Collection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Collections.ObjectModel.Collection`1.#ctor
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Collection<T>()
  nameWithType: Collection<T>.Collection<T>()
  fullName: System.Collections.ObjectModel.Collection<T>.Collection<T>()
- uid: System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Collection<T>(IList<T>)
  nameWithType: Collection<T>.Collection<T>(IList<T>)
  fullName: System.Collections.ObjectModel.Collection<T>.Collection<T>(IList<T>)
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
- uid: System.Collections.ObjectModel.Collection`1.Add(`0)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Add(T)
  nameWithType: Collection<T>.Add(T)
  fullName: System.Collections.ObjectModel.Collection<T>.Add(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.ObjectModel.Collection`1.Clear
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Clear()
  nameWithType: Collection<T>.Clear()
  fullName: System.Collections.ObjectModel.Collection<T>.Clear()
- uid: System.Collections.ObjectModel.Collection`1.ClearItems
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: ClearItems()
  nameWithType: Collection<T>.ClearItems()
  fullName: System.Collections.ObjectModel.Collection<T>.ClearItems()
- uid: System.Collections.ObjectModel.Collection`1.Contains(`0)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Contains(T)
  nameWithType: Collection<T>.Contains(T)
  fullName: System.Collections.ObjectModel.Collection<T>.Contains(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: Collection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.ObjectModel.Collection<T>.CopyTo(T[],Int32)
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ObjectModel.Collection`1.Count
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Count
  nameWithType: Collection<T>.Count
  fullName: System.Collections.ObjectModel.Collection<T>.Count
- uid: System.Collections.ObjectModel.Collection`1.GetEnumerator
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: Collection<T>.GetEnumerator()
  fullName: System.Collections.ObjectModel.Collection<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.ObjectModel.Collection`1.IndexOf(`0)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: IndexOf(T)
  nameWithType: Collection<T>.IndexOf(T)
  fullName: System.Collections.ObjectModel.Collection<T>.IndexOf(T)
- uid: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Insert(Int32,T)
  nameWithType: Collection<T>.Insert(Int32,T)
  fullName: System.Collections.ObjectModel.Collection<T>.Insert(Int32,T)
- uid: System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: InsertItem(Int32,T)
  nameWithType: Collection<T>.InsertItem(Int32,T)
  fullName: System.Collections.ObjectModel.Collection<T>.InsertItem(Int32,T)
- uid: System.Collections.ObjectModel.Collection`1.Item(System.Int32)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Item(Int32)
  nameWithType: Collection<T>.Item(Int32)
  fullName: System.Collections.ObjectModel.Collection<T>.Item(Int32)
- uid: System.Collections.ObjectModel.Collection`1.Items
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Items
  nameWithType: Collection<T>.Items
  fullName: System.Collections.ObjectModel.Collection<T>.Items
- uid: System.Collections.ObjectModel.Collection`1.Remove(`0)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Remove(T)
  nameWithType: Collection<T>.Remove(T)
  fullName: System.Collections.ObjectModel.Collection<T>.Remove(T)
- uid: System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: Collection<T>.RemoveAt(Int32)
  fullName: System.Collections.ObjectModel.Collection<T>.RemoveAt(Int32)
- uid: System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: RemoveItem(Int32)
  nameWithType: Collection<T>.RemoveItem(Int32)
  fullName: System.Collections.ObjectModel.Collection<T>.RemoveItem(Int32)
- uid: System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: SetItem(Int32,T)
  nameWithType: Collection<T>.SetItem(Int32,T)
  fullName: System.Collections.ObjectModel.Collection<T>.SetItem(Int32,T)
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: ICollection<T>.IsReadOnly
  nameWithType: Collection<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.ObjectModel.Collection<T>.ICollection<T>.IsReadOnly
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: Collection<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.ObjectModel.Collection<T>.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: Collection<T>.ICollection.IsSynchronized
  fullName: System.Collections.ObjectModel.Collection<T>.ICollection.IsSynchronized
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: Collection<T>.ICollection.SyncRoot
  fullName: System.Collections.ObjectModel.Collection<T>.ICollection.SyncRoot
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: Collection<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.ObjectModel.Collection<T>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: IList.Add(Object)
  nameWithType: Collection<T>.IList.Add(Object)
  fullName: System.Collections.ObjectModel.Collection<T>.IList.Add(Object)
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: IList.Contains(Object)
  nameWithType: Collection<T>.IList.Contains(Object)
  fullName: System.Collections.ObjectModel.Collection<T>.IList.Contains(Object)
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: IList.IndexOf(Object)
  nameWithType: Collection<T>.IList.IndexOf(Object)
  fullName: System.Collections.ObjectModel.Collection<T>.IList.IndexOf(Object)
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: IList.Insert(Int32,Object)
  nameWithType: Collection<T>.IList.Insert(Int32,Object)
  fullName: System.Collections.ObjectModel.Collection<T>.IList.Insert(Int32,Object)
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: IList.IsFixedSize
  nameWithType: Collection<T>.IList.IsFixedSize
  fullName: System.Collections.ObjectModel.Collection<T>.IList.IsFixedSize
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: IList.IsReadOnly
  nameWithType: Collection<T>.IList.IsReadOnly
  fullName: System.Collections.ObjectModel.Collection<T>.IList.IsReadOnly
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: IList.Item(Int32)
  nameWithType: Collection<T>.IList.Item(Int32)
  fullName: System.Collections.ObjectModel.Collection<T>.IList.Item(Int32)
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: IList.Remove(Object)
  nameWithType: Collection<T>.IList.Remove(Object)
  fullName: System.Collections.ObjectModel.Collection<T>.IList.Remove(Object)
- uid: System.Collections.ObjectModel.Collection`1.#ctor*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Collection<T>
  nameWithType: Collection<T>.Collection<T>
- uid: System.Collections.ObjectModel.Collection`1.Add*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Add
  nameWithType: Collection<T>.Add
- uid: System.Collections.ObjectModel.Collection`1.Clear*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Clear
  nameWithType: Collection<T>.Clear
- uid: System.Collections.ObjectModel.Collection`1.ClearItems*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: ClearItems
  nameWithType: Collection<T>.ClearItems
- uid: System.Collections.ObjectModel.Collection`1.Contains*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Contains
  nameWithType: Collection<T>.Contains
- uid: System.Collections.ObjectModel.Collection`1.CopyTo*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: CopyTo
  nameWithType: Collection<T>.CopyTo
- uid: System.Collections.ObjectModel.Collection`1.Count*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Count
  nameWithType: Collection<T>.Count
- uid: System.Collections.ObjectModel.Collection`1.GetEnumerator*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: GetEnumerator
  nameWithType: Collection<T>.GetEnumerator
- uid: System.Collections.ObjectModel.Collection`1.IndexOf*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: IndexOf
  nameWithType: Collection<T>.IndexOf
- uid: System.Collections.ObjectModel.Collection`1.Insert*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Insert
  nameWithType: Collection<T>.Insert
- uid: System.Collections.ObjectModel.Collection`1.InsertItem*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: InsertItem
  nameWithType: Collection<T>.InsertItem
- uid: System.Collections.ObjectModel.Collection`1.Item*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Item
  nameWithType: Collection<T>.Item
- uid: System.Collections.ObjectModel.Collection`1.Items*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Items
  nameWithType: Collection<T>.Items
- uid: System.Collections.ObjectModel.Collection`1.Remove*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: Remove
  nameWithType: Collection<T>.Remove
- uid: System.Collections.ObjectModel.Collection`1.RemoveAt*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: RemoveAt
  nameWithType: Collection<T>.RemoveAt
- uid: System.Collections.ObjectModel.Collection`1.RemoveItem*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: RemoveItem
  nameWithType: Collection<T>.RemoveItem
- uid: System.Collections.ObjectModel.Collection`1.SetItem*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: SetItem
  nameWithType: Collection<T>.SetItem
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType: Collection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: Collection<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: Collection<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: Collection<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Collection<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: Collection<T>.System.Collections.IList.Add
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: Collection<T>.System.Collections.IList.Contains
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: Collection<T>.System.Collections.IList.IndexOf
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: Collection<T>.System.Collections.IList.Insert
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: Collection<T>.System.Collections.IList.IsFixedSize
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: Collection<T>.System.Collections.IList.IsReadOnly
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: Collection<T>.System.Collections.IList.Item
- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove*
  parent: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: Collection<T>.System.Collections.IList.Remove
