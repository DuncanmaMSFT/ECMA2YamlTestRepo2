### YamlMime:ManagedReference
items:
- uid: System.IO.StringReader
  id: StringReader
  children:
  - System.IO.StringReader.#ctor(System.String)
  - System.IO.StringReader.Close
  - System.IO.StringReader.Dispose(System.Boolean)
  - System.IO.StringReader.Peek
  - System.IO.StringReader.Read
  - System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)
  - System.IO.StringReader.ReadLine
  - System.IO.StringReader.ReadToEnd
  langs:
  - csharp
  name: StringReader
  nameWithType: StringReader
  fullName: System.IO.StringReader
  type: Class
  summary: Implements a <xref href="System.IO.TextReader"></xref> that reads from a string.
  remarks: "StringReader enables you to read a string synchronously or asynchronously. You can read a character at a time with the <xref:System.IO.StringReader.Read%2A> or the [ReadAsync(Char\\[\\], Int32, Int32)](assetId:///M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)?qualifyHint=False&autoUpgrade=True) method, a line at a time using the <xref:System.IO.StringReader.ReadLine%2A> or the <xref:System.IO.StringReader.ReadLineAsync%2A> method and an entire string using the <xref:System.IO.StringReader.ReadToEnd%2A> or the <xref:System.IO.StringReader.ReadToEndAsync%2A> method.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/add/includes/ajax-current-ext-md.md)|  \n|Write to a text file.|[How to: Write Text to a File](../Topic/How%20to:%20Write%20Text%20to%20a%20File.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/add/includes/ajax-current-ext-md.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/add/includes/ajax-current-ext-md.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/add/includes/ajax-current-ext-md.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md)|"
  example:
  - "The following example shows how to read an entire string asynchronously.  \n  \n [!code-cs[System.IO.StringReader#2](~/add/codesnippet/csharp/t-system.io.stringreader_1.cs)]\n [!code-vb[System.IO.StringReader#2](~/add/codesnippet/visualbasic/t-system.io.stringreader_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class StringReader : System.IO.TextReader
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.IO.TextReader
  implements: []
  inheritedMembers:
  - System.IO.TextReader.Dispose
  - System.IO.TextReader.Null
  - System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  - System.IO.TextReader.Synchronized(System.IO.TextReader)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.IO.StringReader.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.StringReader
  langs:
  - csharp
  name: StringReader(String)
  nameWithType: StringReader.StringReader(String)
  fullName: System.IO.StringReader.StringReader(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.StringReader"></xref> class that reads from the specified string.
  remarks: "The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/add/includes/ajax-current-ext-md.md)|  \n|Write to a text file.|[How to: Write Text to a File](../Topic/How%20to:%20Write%20Text%20to%20a%20File.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/add/includes/ajax-current-ext-md.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/add/includes/ajax-current-ext-md.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/add/includes/ajax-current-ext-md.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md)|"
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.StringReader> class.  \n  \n [!code-cpp[System.IO.StringReaderWriter#2](~/add/codesnippet/cpp/m-system.io.stringreader_0_1.cpp)]\n [!code-vb[System.IO.StringReaderWriter#2](~/add/codesnippet/visualbasic/m-system.io.stringreader_0_1.vb)]\n [!code-cs[System.IO.StringReaderWriter#2](~/add/codesnippet/csharp/m-system.io.stringreader_0_1.cs)]"
  syntax:
    content: public StringReader (string s);
    parameters:
    - id: s
      type: System.String
      description: The string to which the <xref href="System.IO.StringReader"></xref> should be initialized.
  overload: System.IO.StringReader.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>s</code> parameter is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.IO.StringReader.Close
  id: Close
  parent: System.IO.StringReader
  langs:
  - csharp
  name: Close()
  nameWithType: StringReader.Close()
  fullName: System.IO.StringReader.Close()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Closes the <xref href="System.IO.StringReader"></xref>.
  remarks: "For an example of creating a file and writing text to a file, see [How to: Write Text to a File](~/add/includes/ajax-current-ext-md.md). For an example of reading text from a file, see [How to: Read Text from a File](~/add/includes/ajax-current-ext-md.md). For an example of reading from and writing to a binary file, see [How to: Read and Write to a Newly Created Data File](~/add/includes/ajax-current-ext-md.md).  \n  \n This method overrides the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method.  \n  \n This implementation of `Close` calls the <xref:System.IO.StringReader.Dispose%2A> method passing a `true` value.  \n  \n Flushing the stream will not flush its underlying encoder unless you explicitly call `Close`. Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.  \n  \n Following a call to `Close`, other methods might throw an exception."
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.IO.StringReader.Close*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.IO.StringReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.StringReader
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: StringReader.Dispose(Boolean)
  fullName: System.IO.StringReader.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Releases the unmanaged resources used by the <xref href="System.IO.StringReader"></xref> and optionally releases the managed resources.
  remarks: When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.StringReader> references. This method invokes the `Dispose` method of each referenced object.
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> to release both managed and unmanaged resources; <xref uid="langword_csharp_false" name="false" href=""></xref> to release only unmanaged resources.
  overload: System.IO.StringReader.Dispose*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.IO.StringReader.Peek
  id: Peek
  parent: System.IO.StringReader
  langs:
  - csharp
  name: Peek()
  nameWithType: StringReader.Peek()
  fullName: System.IO.StringReader.Peek()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Returns the next available character but does not consume it.
  remarks: "The Peek method returns an integer value in order to determine whether the end of the file, or another error has occurred. This allows a user to first check if the returned value is -1 before casting it to a <xref:System.Char> type.  \n  \n This method overrides the <xref:System.IO.TextReader.Peek%2A?displayProperty=fullName> method.  \n  \n The current position of the `StringReader` is not changed by this operation.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/add/includes/ajax-current-ext-md.md)|  \n|Write to a text file.|[How to: Write Text to a File](../Topic/How%20to:%20Write%20Text%20to%20a%20File.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/add/includes/ajax-current-ext-md.md)|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|"
  syntax:
    content: public override int Peek ();
    parameters: []
    return:
      type: System.Int32
      description: An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.
  overload: System.IO.StringReader.Peek*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current reader is closed.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.IO.StringReader.Read
  id: Read
  parent: System.IO.StringReader
  langs:
  - csharp
  name: Read()
  nameWithType: StringReader.Read()
  fullName: System.IO.StringReader.Read()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads the next character from the input string and advances the character position by one character.
  remarks: "This method overrides the <xref:System.IO.TextReader.Read%2A?displayProperty=fullName> method.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/add/includes/ajax-current-ext-md.md)|  \n|Write to a text file.|[How to: Write Text to a File](../Topic/How%20to:%20Write%20Text%20to%20a%20File.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/add/includes/ajax-current-ext-md.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/add/includes/ajax-current-ext-md.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/add/includes/ajax-current-ext-md.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md)|"
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.StringReader> class.  \n  \n [!code-cpp[System.IO.StringReaderWriter#3](~/add/codesnippet/cpp/m-system.io.stringreader_3_1.cpp)]\n [!code-vb[System.IO.StringReaderWriter#3](~/add/codesnippet/visualbasic/m-system.io.stringreader_3_1.vb)]\n [!code-cs[System.IO.StringReaderWriter#3](~/add/codesnippet/csharp/m-system.io.stringreader_3_1.cs)]"
  syntax:
    content: public override int Read ();
    parameters: []
    return:
      type: System.Int32
      description: The next character from the underlying string, or -1 if no more characters are available.
  overload: System.IO.StringReader.Read*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current reader is closed.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)
  id: Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StringReader
  langs:
  - csharp
  name: Read(Char[],Int32,Int32)
  nameWithType: StringReader.Read(Char[],Int32,Int32)
  fullName: System.IO.StringReader.Read(Char[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads a block of characters from the input string and advances the character position by <code>count</code>.
  remarks: "This method overrides <xref:System.IO.TextReader.Read%2A?displayProperty=fullName>.  \n  \n The method will read up to `count` characters from the <xref:System.IO.StringReader> into the `buffer` character array starting at position `index`. Returns the actual number of characters read, or zero if the end of the string has been reached and no characters are read.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/add/includes/ajax-current-ext-md.md)|  \n|Write to a text file.|[How to: Write Text to a File](../Topic/How%20to:%20Write%20Text%20to%20a%20File.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/add/includes/ajax-current-ext-md.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/add/includes/ajax-current-ext-md.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/add/includes/ajax-current-ext-md.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md)|"
  syntax:
    content: public override int Read (char[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: When this method returns, contains the specified character array with the values between `index` and (`index` + `count` - 1) replaced by the characters read from the current source.
    - id: index
      type: System.Int32
      description: The starting index in the buffer.
    - id: count
      type: System.Int32
      description: The number of characters to read.
    return:
      type: System.Int32
      description: The total number of characters read into the buffer. This can be less than the number of characters requested if that many characters are not currently available, or zero if the end of the underlying string has been reached.
  overload: System.IO.StringReader.Read*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The buffer length minus <code>index</code> is less than <code>count</code>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> or <code>count</code> is negative.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current reader is closed.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.IO.StringReader.ReadLine
  id: ReadLine
  parent: System.IO.StringReader
  langs:
  - csharp
  name: ReadLine()
  nameWithType: StringReader.ReadLine()
  fullName: System.IO.StringReader.ReadLine()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads a line of characters from the current string and returns the data as a string.
  remarks: "This method overrides the <xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName> method.  \n  \n A line is defined as a sequence of characters followed by a line feed (\"\\n\"), a carriage return (\"\\r\"), or a carriage return immediately followed by a line feed (\"\\r\\n\"). The string that is returned does not contain the terminating carriage return or line feed. The returned value is `null` if the end of the string has been reached.  \n  \n If the current method throws an <xref:System.OutOfMemoryException>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal ReadLine buffer are discarded. Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.StringReader>. To avoid such a situation, use the <xref:System.IO.StringReader.Read%2A> method and store the read characters in a preallocated buffer.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/add/includes/ajax-current-ext-md.md)|  \n|Write to a text file.|[How to: Write Text to a File](../Topic/How%20to:%20Write%20Text%20to%20a%20File.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/add/includes/ajax-current-ext-md.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/add/includes/ajax-current-ext-md.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/add/includes/ajax-current-ext-md.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md)|"
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.StringReader> class.  \n  \n [!code-cpp[System.IO.StringReaderWriter#2](~/add/codesnippet/cpp/m-system.io.stringreader_1_1.cpp)]\n [!code-vb[System.IO.StringReaderWriter#2](~/add/codesnippet/visualbasic/m-system.io.stringreader_1_1.vb)]\n [!code-cs[System.IO.StringReaderWriter#2](~/add/codesnippet/csharp/m-system.io.stringreader_1_1.cs)]"
  syntax:
    content: public override string ReadLine ();
    parameters: []
    return:
      type: System.String
      description: The next line from the current string, or <xref uid="langword_csharp_null" name="null" href=""></xref> if the end of the string is reached.
  overload: System.IO.StringReader.ReadLine*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current reader is closed.
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory to allocate a buffer for the returned string.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.IO.StringReader.ReadToEnd
  id: ReadToEnd
  parent: System.IO.StringReader
  langs:
  - csharp
  name: ReadToEnd()
  nameWithType: StringReader.ReadToEnd()
  fullName: System.IO.StringReader.ReadToEnd()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: Reads all characters from the current position to the end of the string and returns them as a single string.
  remarks: "This method overrides the <xref:System.IO.TextReader.ReadToEnd%2A?displayProperty=fullName> method.  \n  \n If the current method throws an <xref:System.OutOfMemoryException>, the reader's position in the underlying string is advanced by the number of characters the method was able to read, but the characters already read into the internal ReadToEnd buffer are discarded. Because the position of the reader in the string cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref:System.IO.StringReader>. To avoid such a situation, use the <xref:System.IO.StringReader.Read%2A> method and store the read characters in a preallocated buffer.  \n  \n The following table lists examples of other typical or related I/O tasks.  \n  \n|To do this...|See the example in this topic...|  \n|-------------------|--------------------------------------|  \n|Create a text file.|[How to: Write Text to a File](~/add/includes/ajax-current-ext-md.md)|  \n|Write to a text file.|[How to: Write Text to a File](../Topic/How%20to:%20Write%20Text%20to%20a%20File.md)|  \n|Read from a text file.|[How to: Read Text from a File](~/add/includes/ajax-current-ext-md.md)|  \n|Append text to a file.|[How to: Open and Append to a Log File](~/add/includes/ajax-current-ext-md.md)<br /><br /> <xref:System.IO.File.AppendText%2A?displayProperty=fullName><br /><br /> <xref:System.IO.FileInfo.AppendText%2A?displayProperty=fullName>|  \n|Get the size of a file.|<xref:System.IO.FileInfo.Length%2A?displayProperty=fullName>|  \n|Get the attributes of a file.|<xref:System.IO.File.GetAttributes%2A?displayProperty=fullName>|  \n|Set the attributes of a file.|<xref:System.IO.File.SetAttributes%2A?displayProperty=fullName>|  \n|Determine if a file exists.|<xref:System.IO.File.Exists%2A?displayProperty=fullName>|  \n|Read from a binary file.|[How to: Read and Write to a Newly Created Data File](~/add/includes/ajax-current-ext-md.md)|  \n|Write to a binary file.|[How to: Read and Write to a Newly Created Data File](../Topic/How%20to:%20Read%20and%20Write%20to%20a%20Newly%20Created%20Data%20File.md)|"
  example:
  - "This code example is part of a larger example provided for the <xref:System.IO.TextReader> class.  \n  \n [!code-cpp[System.IO.TextReaderWriter#5](~/add/codesnippet/cpp/m-system.io.stringreader_2_1.cpp)]\n [!code-vb[System.IO.TextReaderWriter#5](~/add/codesnippet/visualbasic/m-system.io.stringreader_2_1.vb)]\n [!code-cs[System.IO.TextReaderWriter#5](~/add/codesnippet/csharp/m-system.io.stringreader_2_1.cs)]"
  syntax:
    content: public override string ReadToEnd ();
    parameters: []
    return:
      type: System.String
      description: The content from the current position to the end of the underlying string.
  overload: System.IO.StringReader.ReadToEnd*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory to allocate a buffer for the returned string.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current reader is closed.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
references:
- uid: System.IO.TextReader
  isExternal: false
  name: System.IO.TextReader
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ObjectDisposedException
  parent: System
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  parent: System
  isExternal: false
  name: OutOfMemoryException
  nameWithType: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.IO.StringReader.#ctor(System.String)
  parent: System.IO.StringReader
  isExternal: false
  name: StringReader(String)
  nameWithType: StringReader.StringReader(String)
  fullName: System.IO.StringReader.StringReader(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.StringReader.Close
  parent: System.IO.StringReader
  isExternal: false
  name: Close()
  nameWithType: StringReader.Close()
  fullName: System.IO.StringReader.Close()
- uid: System.IO.StringReader.Dispose(System.Boolean)
  parent: System.IO.StringReader
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: StringReader.Dispose(Boolean)
  fullName: System.IO.StringReader.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.StringReader.Peek
  parent: System.IO.StringReader
  isExternal: false
  name: Peek()
  nameWithType: StringReader.Peek()
  fullName: System.IO.StringReader.Peek()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.StringReader.Read
  parent: System.IO.StringReader
  isExternal: false
  name: Read()
  nameWithType: StringReader.Read()
  fullName: System.IO.StringReader.Read()
- uid: System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StringReader
  isExternal: false
  name: Read(Char[],Int32,Int32)
  nameWithType: StringReader.Read(Char[],Int32,Int32)
  fullName: System.IO.StringReader.Read(Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.StringReader.ReadLine
  parent: System.IO.StringReader
  isExternal: false
  name: ReadLine()
  nameWithType: StringReader.ReadLine()
  fullName: System.IO.StringReader.ReadLine()
- uid: System.IO.StringReader.ReadToEnd
  parent: System.IO.StringReader
  isExternal: false
  name: ReadToEnd()
  nameWithType: StringReader.ReadToEnd()
  fullName: System.IO.StringReader.ReadToEnd()
- uid: System.IO.StringReader.#ctor*
  parent: System.IO.StringReader
  isExternal: false
  name: StringReader
  nameWithType: StringReader.StringReader
- uid: System.IO.StringReader.Close*
  parent: System.IO.StringReader
  isExternal: false
  name: Close
  nameWithType: StringReader.Close
- uid: System.IO.StringReader.Dispose*
  parent: System.IO.StringReader
  isExternal: false
  name: Dispose
  nameWithType: StringReader.Dispose
- uid: System.IO.StringReader.Peek*
  parent: System.IO.StringReader
  isExternal: false
  name: Peek
  nameWithType: StringReader.Peek
- uid: System.IO.StringReader.Read*
  parent: System.IO.StringReader
  isExternal: false
  name: Read
  nameWithType: StringReader.Read
- uid: System.IO.StringReader.ReadLine*
  parent: System.IO.StringReader
  isExternal: false
  name: ReadLine
  nameWithType: StringReader.ReadLine
- uid: System.IO.StringReader.ReadToEnd*
  parent: System.IO.StringReader
  isExternal: false
  name: ReadToEnd
  nameWithType: StringReader.ReadToEnd
