### YamlMime:ManagedReference
items:
- uid: System.Linq.Queryable
  id: Queryable
  children:
  - System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})
  - System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})
  - System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  - System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  - System.Linq.Queryable.Cast``1(System.Linq.IQueryable)
  - System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)
  - System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)
  - System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)
  - System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)
  - System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})
  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  - System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  - System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  - System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.OfType``1(System.Linq.IQueryable)
  - System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})
  - System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  - System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  - System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  - System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  - System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)
  - System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  - System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)
  - System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  - System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  - System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  langs:
  - csharp
  name: Queryable
  nameWithType: Queryable
  fullName: System.Linq.Queryable
  type: Class
  summary: Provides a set of `static` (`Shared` in Visual Basic) methods for querying data structures that implement <xref href="stem.Linq.IQueryable%601"></xref>.
  remarks: "The set of methods declared in the Queryable class provides an implementation of the standard query operators for querying data sources that implement <xref:System.Linq.IQueryable%601>. The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/add/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.  \n  \n The majority of the methods in this class are defined as extension methods that extend the <xref:System.Linq.IQueryable%601> type. This means they can be called like an instance method on any object that implements <xref:System.Linq.IQueryable%601>. These methods that extend <xref:System.Linq.IQueryable%601> do not perform any querying directly. Instead, their functionality is to build an <xref:System.Linq.Expressions.Expression> object, which is an expression tree that represents the cumulative query. The methods then pass the new expression tree to either the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method or the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the input <xref:System.Linq.IQueryable%601>. The method that is called depends on whether the Queryable method returns a singleton value, in which case <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> is called, or has enumerable results, in which case <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is called.  \n  \n The actual query execution on the target data is performed by a class that implements <xref:System.Linq.IQueryable%601>. The expectation of any <xref:System.Linq.IQueryable%601> implementation is that the result of executing an expression tree that was constructed by a Queryable standard query operator method is equivalent to the result of calling the corresponding method in the <xref:System.Linq.Enumerable> class, if the data source were an <xref:System.Collections.Generic.IEnumerable%601>.  \n  \n In addition to the standard query operator methods that operate on <xref:System.Linq.IQueryable%601> objects, this class also contains a method, <xref:System.Linq.Queryable.AsQueryable%2A>, which types <xref:System.Collections.IEnumerable> objects as <xref:System.Linq.IQueryable> objects."
  syntax:
    content: public static class Queryable
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})
  id: Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Aggregate<TSource>(IQueryable<TSource>,Expression<Func<TSource,TSource,TSource>>)
  nameWithType: Queryable.Aggregate<TSource>(IQueryable<TSource>,Expression<Func<TSource,TSource,TSource>>)
  fullName: System.Linq.Queryable.Aggregate<TSource>(IQueryable<TSource>,Expression<Func<TSource,TSource,TSource>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Applies an accumulator function over a sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Aggregate(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Aggregate(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Aggregate(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned. The first value in `source` is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`.  \n  \n To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>."
  example:
  - "The following code example demonstrates how to use Aggregate(TSource) to build a sentence from an array of strings.  \n  \n [!code-cs[System.Linq.Queryable#1](~/add/codesnippet/csharp/e257ef02-4b99-42c1-a5a7-_1.cs)]\n [!code-vb[System.Linq.Queryable#1](~/add/codesnippet/visualbasic/e257ef02-4b99-42c1-a5a7-_1.vb)]"
  syntax:
    content: public static TSource Aggregate<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TSource,TSource>> func);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence to aggregate over.
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{TSource,TSource,TSource}}
      description: An accumulator function to apply to each element.
    return:
      type: TSource
      description: The final accumulator value.
  overload: System.Linq.Queryable.Aggregate<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>func</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>source</code> contains no elements.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})
  id: Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Aggregate<TSource,TAccumulate>(IQueryable<TSource>,TAccumulate,Expression<Func<TAccumulate,TSource,TAccumulate>>)
  nameWithType: Queryable.Aggregate<TSource,TAccumulate>(IQueryable<TSource>,TAccumulate,Expression<Func<TAccumulate,TSource,TAccumulate>>)
  fullName: System.Linq.Queryable.Aggregate<TSource,TAccumulate>(IQueryable<TSource>,TAccumulate,Expression<Func<TAccumulate,TSource,TAccumulate>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Aggregate(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Aggregate(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Aggregate(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned. The `seed` parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`.  \n  \n To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>."
  example:
  - "The following code example demonstrates how to use Aggregate(TSource, to apply an accumulator function when a seed value is provided to the function.  \n  \n [!code-cs[System.Linq.Queryable#2](~/add/codesnippet/csharp/c7f5c560-6dee-43f4-8810-_1.cs)]\n [!code-vb[System.Linq.Queryable#2](~/add/codesnippet/visualbasic/c7f5c560-6dee-43f4-8810-_1.vb)]"
  syntax:
    content: public static TAccumulate Aggregate<TSource,TAccumulate> (this System.Linq.IQueryable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<Func<TAccumulate,TSource,TAccumulate>> func);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence to aggregate over.
    - id: seed
      type: TAccumulate
      description: The initial accumulator value.
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{TAccumulate,TSource,TAccumulate}}
      description: An accumulator function to invoke on each element.
    return:
      type: TAccumulate
      description: The final accumulator value.
  overload: System.Linq.Queryable.Aggregate<TSource,TAccumulate>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>func</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  id: Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Aggregate<TSource,TAccumulate,TResult>(IQueryable<TSource>,TAccumulate,Expression<Func<TAccumulate,TSource,TAccumulate>>,Expression<Func<TAccumulate,TResult>>)
  nameWithType: Queryable.Aggregate<TSource,TAccumulate,TResult>(IQueryable<TSource>,TAccumulate,Expression<Func<TAccumulate,TSource,TAccumulate>>,Expression<Func<TAccumulate,TResult>>)
  fullName: System.Linq.Queryable.Aggregate<TSource,TAccumulate,TResult>(IQueryable<TSource>,TAccumulate,Expression<Func<TAccumulate,TSource,TAccumulate>>,Expression<Func<TAccumulate,TResult>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Aggregate(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Aggregate(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Aggregate(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that the specified function, `func`, is applied to each value in the source sequence and the accumulated value is returned. The `seed` parameter is used as the seed value for the accumulated value, which corresponds to the first parameter in `func`. The final accumulated value is passed to `selector` to obtain the result value.  \n  \n To simplify common aggregation operations, the set of standard query operators also includes two counting methods, <xref:System.Linq.Queryable.Count%2A> and <xref:System.Linq.Queryable.LongCount%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Queryable.Max%2A>, <xref:System.Linq.Queryable.Min%2A>, <xref:System.Linq.Queryable.Sum%2A>, and <xref:System.Linq.Queryable.Average%2A>."
  example:
  - "The following code example demonstrates how to use Aggregate(TSource, to apply an accumulator function and a result selector.  \n  \n [!code-cs[System.Linq.Queryable#3](~/add/codesnippet/csharp/b82d06e7-c53b-423a-98c7-_1.cs)]\n [!code-vb[System.Linq.Queryable#3](~/add/codesnippet/visualbasic/b82d06e7-c53b-423a-98c7-_1.vb)]"
  syntax:
    content: public static TResult Aggregate<TSource,TAccumulate,TResult> (this System.Linq.IQueryable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<Func<TAccumulate,TSource,TAccumulate>> func, System.Linq.Expressions.Expression<Func<TAccumulate,TResult>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence to aggregate over.
    - id: seed
      type: TAccumulate
      description: The initial accumulator value.
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{TAccumulate,TSource,TAccumulate}}
      description: An accumulator function to invoke on each element.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TAccumulate,TResult}}
      description: A function to transform the final accumulator value into the result value.
    return:
      type: TResult
      description: The transformed final accumulator value.
  overload: System.Linq.Queryable.Aggregate<TSource,TAccumulate,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>func</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: All<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.All<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.All<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Determines whether all the elements of a sequence satisfy a condition.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The All(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling All(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling All(TSource) depends on the implementation of the `source` parameter's type. The expected behavior is that it determines if all the elements in `source` satisfy the condition in `predicate`."
  example:
  - "The following code example demonstrates how to use All(TSource) to determine whether all the elements in a sequence satisfy a condition.  \n  \n [!code-cs[System.Linq.Queryable#4](~/add/codesnippet/csharp/63da1c32-65f4-49ef-b774-_1.cs)]\n [!code-vb[System.Linq.Queryable#4](~/add/codesnippet/visualbasic/63da1c32-65f4-49ef-b774-_1.vb)]  \n  \n The Boolean value that the All(TSource) method returns is typically used in the predicate of a `where` clause (`Where` clause in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]) or a direct call to the <xref:System.Linq.Queryable.Where%2A> method. The following example demonstrates this use of the `All` method.  \n  \n [!code-cs[System.Linq.Queryable#134](~/add/codesnippet/csharp/63da1c32-65f4-49ef-b774-_2.cs)]\n [!code-vb[System.Linq.Queryable#134](~/add/codesnippet/visualbasic/63da1c32-65f4-49ef-b774-_2.vb)]"
  syntax:
    content: public static bool All<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence whose elements to test for a condition.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}
      description: A function to test each element for a condition.
    return:
      type: System.Boolean
      description: '`true` if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, `false`.'
  overload: System.Linq.Queryable.All<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})
  id: Any``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Any<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Any<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Any<TSource>(IQueryable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Determines whether a sequence contains any elements.
  remarks: "The Any(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Any(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Any(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if `source` contains any elements."
  example:
  - "The following code example demonstrates how to use Any(TSource) to determine whether a sequence contains any elements.  \n  \n [!code-cs[System.Linq.Queryable#5](~/add/codesnippet/csharp/m-system.linq.queryable._17_1.cs)]\n [!code-vb[System.Linq.Queryable#5](~/add/codesnippet/visualbasic/m-system.linq.queryable._17_1.vb)]  \n  \n The Boolean value that the Any(TSource) method returns is typically used in the predicate of a `where` clause (`Where` clause in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]) or a direct call to the <xref:System.Linq.Queryable.Where%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Boolean%7D%7D%29> method. The following example demonstrates this use of the `Any` method.  \n  \n [!code-cs[System.Linq.Queryable#135](~/add/codesnippet/csharp/m-system.linq.queryable._17_2.cs)]\n [!code-vb[System.Linq.Queryable#135](~/add/codesnippet/visualbasic/m-system.linq.queryable._17_2.vb)]"
  syntax:
    content: public static bool Any<TSource> (this System.Linq.IQueryable<TSource> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence to check for being empty.
    return:
      type: System.Boolean
      description: '`true` if the source sequence contains any elements; otherwise, `false`.'
  overload: System.Linq.Queryable.Any<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Any<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.Any<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.Any<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Determines whether any element of a sequence satisfies a condition.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Any(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Any(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Any(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if any of the elements of `source` satisfy the condition specified by `predicate`."
  example:
  - "The following code example demonstrates how to use Any(TSource) to determine whether any element in a sequence satisfies a condition.  \n  \n [!code-cs[System.Linq.Queryable#6](~/add/codesnippet/csharp/ae1dc8a9-873d-4e7a-a7ee-_1.cs)]\n [!code-vb[System.Linq.Queryable#6](~/add/codesnippet/visualbasic/ae1dc8a9-873d-4e7a-a7ee-_1.vb)]"
  syntax:
    content: public static bool Any<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence whose elements to test for a condition.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}
      description: A function to test each element for a condition.
    return:
      type: System.Boolean
      description: '`true` if any elements in the source sequence pass the test in the specified predicate; otherwise, `false`.'
  overload: System.Linq.Queryable.Any<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  id: AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: System.Linq.Queryable.AsQueryable(IEnumerable)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Converts an <xref href="System.Collections.IEnumerable"></xref> to an <xref href="System.Linq.IQueryable"></xref>.
  remarks: "If the type of `source` implements <xref:System.Linq.IQueryable%601>, AsQueryable returns it directly. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that executes queries by calling the equivalent query operator methods in <xref:System.Linq.Enumerable> instead of those in <xref:System.Linq.Queryable>.  \n  \n This method assumes that `source` implements <xref:System.Collections.Generic.IEnumerable%601> for some `T`. At runtime, the result is of type <xref:System.Linq.IQueryable%601> for the same `T`. This method is useful in dynamic scenarios when you do not statically know the type of `T`."
  syntax:
    content: public static System.Linq.IQueryable AsQueryable (this System.Collections.IEnumerable source);
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: A sequence to convert.
    return:
      type: System.Linq.IQueryable
      description: An <xref href="System.Linq.IQueryable"></xref> that represents the input sequence.
  overload: System.Linq.Queryable.AsQueryable*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>source</code> does not implement <xref href="stem.Collections.Generic.IEnumerable%601"></xref> for some <code>T</code>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  id: AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: AsQueryable<TElement>(IEnumerable<TElement>)
  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)
  fullName: System.Linq.Queryable.AsQueryable<TElement>(IEnumerable<TElement>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Converts a generic <xref href="stem.Collections.Generic.IEnumerable%601"></xref> to a generic <xref href="stem.Linq.IQueryable%601"></xref>.
  remarks: If the type of `source` implements <xref:System.Linq.IQueryable%601>, AsQueryable(TElement) returns it directly. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that executes queries by calling the equivalent query operator methods in <xref:System.Linq.Enumerable> instead of those in <xref:System.Linq.Queryable>.
  example:
  - "The following code example demonstrates how to use AsQueryable(TElement) to convert an <xref:System.Collections.Generic.IEnumerable%601> to an <xref:System.Linq.IQueryable%601>.  \n  \n [!code-cs[System.Linq.Queryable#125](~/add/codesnippet/csharp/c21f45c7-f90d-407a-83e5-_1.cs)]\n [!code-vb[System.Linq.Queryable#125](~/add/codesnippet/visualbasic/c21f45c7-f90d-407a-83e5-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TElement> AsQueryable<TElement> (this System.Collections.Generic.IEnumerable<TElement> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TElement}
      description: A sequence to convert.
    return:
      type: System.Linq.IQueryable{TElement}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that represents the input sequence.
  overload: System.Linq.Queryable.AsQueryable<TElement>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})
  id: Average(System.Linq.IQueryable{System.Decimal})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average(IQueryable<Decimal>)
  nameWithType: Queryable.Average(IQueryable<Decimal>)
  fullName: System.Linq.Queryable.Average(IQueryable<Decimal>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Decimal"></xref> values.
  remarks: "The Average method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#8](~/add/codesnippet/csharp/m-system.linq.queryable._23_1.cs)]\n [!code-vb[System.Linq.Queryable#8](~/add/codesnippet/visualbasic/m-system.linq.queryable._23_1.vb)]"
  syntax:
    content: public static decimal Average (this System.Linq.IQueryable<decimal> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Decimal}
      description: A sequence of <xref href="System.Decimal"></xref> values to calculate the average of.
    return:
      type: System.Decimal
      description: The average of the sequence of values.
  overload: System.Linq.Queryable.Average*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>source</code> contains no elements.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})
  id: Average(System.Linq.IQueryable{System.Double})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average(IQueryable<Double>)
  nameWithType: Queryable.Average(IQueryable<Double>)
  fullName: System.Linq.Queryable.Average(IQueryable<Double>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Double"></xref> values.
  remarks: "The Average method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#8](~/add/codesnippet/csharp/m-system.linq.queryable._27_1.cs)]\n [!code-vb[System.Linq.Queryable#8](~/add/codesnippet/visualbasic/m-system.linq.queryable._27_1.vb)]"
  syntax:
    content: public static double Average (this System.Linq.IQueryable<double> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Double}
      description: A sequence of <xref href="System.Double"></xref> values to calculate the average of.
    return:
      type: System.Double
      description: The average of the sequence of values.
  overload: System.Linq.Queryable.Average*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>source</code> contains no elements.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})
  id: Average(System.Linq.IQueryable{System.Int32})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average(IQueryable<Int32>)
  nameWithType: Queryable.Average(IQueryable<Int32>)
  fullName: System.Linq.Queryable.Average(IQueryable<Int32>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Int32"></xref> values.
  remarks: "The Average method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`."
  example:
  - "The following code example demonstrates how to use Average to calculate the average of a sequence of values.  \n  \n [!code-cs[System.Linq.Queryable#8](~/add/codesnippet/csharp/m-system.linq.queryable._13_1.cs)]\n [!code-vb[System.Linq.Queryable#8](~/add/codesnippet/visualbasic/m-system.linq.queryable._13_1.vb)]"
  syntax:
    content: public static double Average (this System.Linq.IQueryable<int> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int32}
      description: A sequence of <xref href="System.Int32"></xref> values to calculate the average of.
    return:
      type: System.Double
      description: The average of the sequence of values.
  overload: System.Linq.Queryable.Average*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>source</code> contains no elements.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})
  id: Average(System.Linq.IQueryable{System.Int64})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average(IQueryable<Int64>)
  nameWithType: Queryable.Average(IQueryable<Int64>)
  fullName: System.Linq.Queryable.Average(IQueryable<Int64>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Int64"></xref> values.
  remarks: "The Average method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#8](~/add/codesnippet/csharp/m-system.linq.queryable._5_1.cs)]\n [!code-vb[System.Linq.Queryable#8](~/add/codesnippet/visualbasic/m-system.linq.queryable._5_1.vb)]"
  syntax:
    content: public static double Average (this System.Linq.IQueryable<long> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int64}
      description: A sequence of <xref href="System.Int64"></xref> values to calculate the average of.
    return:
      type: System.Double
      description: The average of the sequence of values.
  overload: System.Linq.Queryable.Average*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>source</code> contains no elements.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  id: Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average(IQueryable<Nullable<Decimal>>)
  nameWithType: Queryable.Average(IQueryable<Nullable<Decimal>>)
  fullName: System.Linq.Queryable.Average(IQueryable<Nullable<Decimal>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Decimal"></xref> values.
  remarks: "The Average method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate the average of a sequence of values.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#12](~/add/codesnippet/csharp/0f5c0a26-38cc-4758-8cfb-_1.cs)]\n [!code-vb[System.Linq.Queryable#12](~/add/codesnippet/visualbasic/0f5c0a26-38cc-4758-8cfb-_1.vb)]"
  syntax:
    content: public static Nullable<decimal> Average (this System.Linq.IQueryable<Nullable<decimal>> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Decimal}}
      description: A sequence of nullable <xref href="System.Decimal"></xref> values to calculate the average of.
    return:
      type: System.Nullable{System.Decimal}
      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values.
  overload: System.Linq.Queryable.Average*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})
  id: Average(System.Linq.IQueryable{System.Nullable{System.Double}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average(IQueryable<Nullable<Double>>)
  nameWithType: Queryable.Average(IQueryable<Nullable<Double>>)
  fullName: System.Linq.Queryable.Average(IQueryable<Nullable<Double>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Double"></xref> values.
  remarks: "The Average method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate the average of a sequence of values.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#12](~/add/codesnippet/csharp/9504e2e5-8fd4-4f3a-92d6-_1.cs)]\n [!code-vb[System.Linq.Queryable#12](~/add/codesnippet/visualbasic/9504e2e5-8fd4-4f3a-92d6-_1.vb)]"
  syntax:
    content: public static Nullable<double> Average (this System.Linq.IQueryable<Nullable<double>> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Double}}
      description: A sequence of nullable <xref href="System.Double"></xref> values to calculate the average of.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values.
  overload: System.Linq.Queryable.Average*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})
  id: Average(System.Linq.IQueryable{System.Nullable{System.Int32}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average(IQueryable<Nullable<Int32>>)
  nameWithType: Queryable.Average(IQueryable<Nullable<Int32>>)
  fullName: System.Linq.Queryable.Average(IQueryable<Nullable<Int32>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Int32"></xref> values.
  remarks: "The Average method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate the average of a sequence of values.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#12](~/add/codesnippet/csharp/5a089270-ed4f-4194-b317-_1.cs)]\n [!code-vb[System.Linq.Queryable#12](~/add/codesnippet/visualbasic/5a089270-ed4f-4194-b317-_1.vb)]"
  syntax:
    content: public static Nullable<double> Average (this System.Linq.IQueryable<Nullable<int>> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int32}}
      description: A sequence of nullable <xref href="System.Int32"></xref> values to calculate the average of.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values.
  overload: System.Linq.Queryable.Average*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})
  id: Average(System.Linq.IQueryable{System.Nullable{System.Int64}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average(IQueryable<Nullable<Int64>>)
  nameWithType: Queryable.Average(IQueryable<Nullable<Int64>>)
  fullName: System.Linq.Queryable.Average(IQueryable<Nullable<Int64>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Int64"></xref> values.
  remarks: "The Average method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`."
  example:
  - "The following code example demonstrates how to use Average to calculate the average of a sequence of values.  \n  \n [!code-cs[System.Linq.Queryable#12](~/add/codesnippet/csharp/5a16a558-df80-4bbd-a44f-_1.cs)]\n [!code-vb[System.Linq.Queryable#12](~/add/codesnippet/visualbasic/5a16a558-df80-4bbd-a44f-_1.vb)]"
  syntax:
    content: public static Nullable<double> Average (this System.Linq.IQueryable<Nullable<long>> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int64}}
      description: A sequence of nullable <xref href="System.Int64"></xref> values to calculate the average of.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values.
  overload: System.Linq.Queryable.Average*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})
  id: Average(System.Linq.IQueryable{System.Nullable{System.Single}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average(IQueryable<Nullable<Single>>)
  nameWithType: Queryable.Average(IQueryable<Nullable<Single>>)
  fullName: System.Linq.Queryable.Average(IQueryable<Nullable<Single>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Single"></xref> values.
  remarks: "The Average method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate the average of a sequence of values.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#12](~/add/codesnippet/csharp/235ee3fb-c233-486b-a8f8-_1.cs)]\n [!code-vb[System.Linq.Queryable#12](~/add/codesnippet/visualbasic/235ee3fb-c233-486b-a8f8-_1.vb)]"
  syntax:
    content: public static Nullable<float> Average (this System.Linq.IQueryable<Nullable<float>> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Single}}
      description: A sequence of nullable <xref href="System.Single"></xref> values to calculate the average of.
    return:
      type: System.Nullable{System.Single}
      description: The average of the sequence of values, or `null` if the source sequence is empty or contains only `null` values.
  overload: System.Linq.Queryable.Average*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})
  id: Average(System.Linq.IQueryable{System.Single})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average(IQueryable<Single>)
  nameWithType: Queryable.Average(IQueryable<Single>)
  fullName: System.Linq.Queryable.Average(IQueryable<Single>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Single"></xref> values.
  remarks: "The Average method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average itself. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%28System.Linq.IQueryable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#8](~/add/codesnippet/csharp/m-system.linq.queryable._26_1.cs)]\n [!code-vb[System.Linq.Queryable#8](~/add/codesnippet/visualbasic/m-system.linq.queryable._26_1.vb)]"
  syntax:
    content: public static float Average (this System.Linq.IQueryable<float> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Single}
      description: A sequence of <xref href="System.Single"></xref> values to calculate the average of.
    return:
      type: System.Single
      description: The average of the sequence of values.
  overload: System.Linq.Queryable.Average*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>source</code> contains no elements.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Decimal>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Decimal>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Decimal>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Decimal"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Average(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#18](~/add/codesnippet/csharp/a5e10e75-5c00-41b1-930b-_1.cs)]\n [!code-vb[System.Linq.Queryable#18](~/add/codesnippet/visualbasic/a5e10e75-5c00-41b1-930b-_1.vb)]"
  syntax:
    content: public static decimal Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,decimal>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Decimal}}
      description: A projection function to apply to each element.
    return:
      type: System.Decimal
      description: The average of the sequence of values.
  overload: System.Linq.Queryable.Average<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>source</code> contains no elements.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Double>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Double>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Double>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Double"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Average(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#18](~/add/codesnippet/csharp/84c3ee59-fa91-46a1-854a-_1.cs)]\n [!code-vb[System.Linq.Queryable#18](~/add/codesnippet/visualbasic/84c3ee59-fa91-46a1-854a-_1.vb)]"
  syntax:
    content: public static double Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,double>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Double}}
      description: A projection function to apply to each element.
    return:
      type: System.Double
      description: The average of the sequence of values.
  overload: System.Linq.Queryable.Average<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>source</code> contains no elements.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Int32"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Average(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."
  example:
  - "The following code example demonstrates how to use Average(TSource) to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \n  \n [!code-cs[System.Linq.Queryable#18](~/add/codesnippet/csharp/9590e48b-9f6b-43b5-a22b-_1.cs)]\n [!code-vb[System.Linq.Queryable#18](~/add/codesnippet/visualbasic/9590e48b-9f6b-43b5-a22b-_1.vb)]"
  syntax:
    content: public static double Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32}}
      description: A projection function to apply to each element.
    return:
      type: System.Double
      description: The average of the sequence of values.
  overload: System.Linq.Queryable.Average<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>source</code> contains no elements.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int64>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int64>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int64>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Int64"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Average(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#18](~/add/codesnippet/csharp/96516c00-55f8-45a1-87bd-_1.cs)]\n [!code-vb[System.Linq.Queryable#18](~/add/codesnippet/visualbasic/96516c00-55f8-45a1-87bd-_1.vb)]"
  syntax:
    content: public static double Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,long>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int64}}
      description: A projection function to apply to each element.
    return:
      type: System.Double
      description: The average of the sequence of values.
  overload: System.Linq.Queryable.Average<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>source</code> contains no elements.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Decimal>>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Decimal>>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Decimal>>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Decimal"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Average(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#18](~/add/codesnippet/csharp/97da9695-92b9-4546-b171-_1.cs)]\n [!code-vb[System.Linq.Queryable#18](~/add/codesnippet/visualbasic/97da9695-92b9-4546-b171-_1.vb)]"
  syntax:
    content: public static Nullable<decimal> Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<decimal>>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Decimal}}}
      description: A projection function to apply to each element.
    return:
      type: System.Nullable{System.Decimal}
      description: The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values.
  overload: System.Linq.Queryable.Average<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Double>>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Double>>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Double>>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Double"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Average(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#18](~/add/codesnippet/csharp/da06bf56-d84f-4db9-8818-_1.cs)]\n [!code-vb[System.Linq.Queryable#18](~/add/codesnippet/visualbasic/da06bf56-d84f-4db9-8818-_1.vb)]"
  syntax:
    content: public static Nullable<double> Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<double>>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Double}}}
      description: A projection function to apply to each element.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values.
  overload: System.Linq.Queryable.Average<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int32>>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int32>>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int32>>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Int32"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Average(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#18](~/add/codesnippet/csharp/9cc0f772-8039-49f6-b0b0-_1.cs)]\n [!code-vb[System.Linq.Queryable#18](~/add/codesnippet/visualbasic/9cc0f772-8039-49f6-b0b0-_1.vb)]"
  syntax:
    content: public static Nullable<double> Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<int>>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Int32}}}
      description: A projection function to apply to each element.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values.
  overload: System.Linq.Queryable.Average<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int64>>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int64>>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int64>>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Int64"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Average(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#18](~/add/codesnippet/csharp/de82eb62-4c51-4d22-8a71-_1.cs)]\n [!code-vb[System.Linq.Queryable#18](~/add/codesnippet/visualbasic/de82eb62-4c51-4d22-8a71-_1.vb)]"
  syntax:
    content: public static Nullable<double> Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<long>>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Int64}}}
      description: A projection function to apply to each element.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values.
  overload: System.Linq.Queryable.Average<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Single>>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Single>>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Single>>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Single"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Average(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#18](~/add/codesnippet/csharp/0f5aae98-52b1-4804-9228-_1.cs)]\n [!code-vb[System.Linq.Queryable#18](~/add/codesnippet/visualbasic/0f5aae98-52b1-4804-9228-_1.vb)]"
  syntax:
    content: public static Nullable<float> Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<float>>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Single}}}
      description: A projection function to apply to each element.
    return:
      type: System.Nullable{System.Single}
      description: The average of the sequence of values, or `null` if the <code>source</code> sequence is empty or contains only `null` values.
  overload: System.Linq.Queryable.Average<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Single>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Single>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Single>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Single"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Average(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Average(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Average(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it calculates the average of the values in `source` after invoking `selector` on each value."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Average%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Int32%7D%7D%29> to calculate the average <xref:System.String> length in a sequence of values of type <xref:System.String>.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#18](~/add/codesnippet/csharp/aee3c1fa-6f3a-455a-b130-_1.cs)]\n [!code-vb[System.Linq.Queryable#18](~/add/codesnippet/visualbasic/aee3c1fa-6f3a-455a-b130-_1.vb)]"
  syntax:
    content: public static float Average<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,float>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Single}}
      description: A projection function to apply to each element.
    return:
      type: System.Single
      description: The average of the sequence of values.
  overload: System.Linq.Queryable.Average<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>source</code> contains no elements.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Cast``1(System.Linq.IQueryable)
  id: Cast``1(System.Linq.IQueryable)
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Cast<TResult>(IQueryable)
  nameWithType: Queryable.Cast<TResult>(IQueryable)
  fullName: System.Linq.Queryable.Cast<TResult>(IQueryable)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Converts the elements of an <xref href="System.Linq.IQueryable"></xref> to the specified type.
  remarks: "The Cast(TResult) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Cast(TResult) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Cast(TResult) depends on the implementation of the type of the `source` parameter. The expected behavior is that it converts the values in `source` to type `TResult`."
  example:
  - "The following code example demonstrates how to use Cast(TResult) to convert objects in a sequence to type <xref:System.String>.  \n  \n [!code-cs[System.Linq.Queryable#19](~/add/codesnippet/csharp/m-system.linq.queryable._18_1.cs)]\n [!code-vb[System.Linq.Queryable#19](~/add/codesnippet/visualbasic/m-system.linq.queryable._18_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TResult> Cast<TResult> (this System.Linq.IQueryable source);
    parameters:
    - id: source
      type: System.Linq.IQueryable
      description: The <xref href="System.Linq.IQueryable"></xref> that contains the elements to be converted.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains each element of the source sequence converted to the specified type.
  overload: System.Linq.Queryable.Cast<TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: An element in the sequence cannot be cast to type <code>TResult</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Concat<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  nameWithType: Queryable.Concat<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Concat<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Concatenates two sequences.
  remarks: "The Concat(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Concat(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Concat(TSource) depends on the implementation of the type of the `source1` parameter. The expected behavior is that the elements in `source2` are concatenated to those of `source1` to create a new sequence."
  example:
  - "The following code example demonstrates how to use Concat(TSource) to concatenate two sequences.  \n  \n [!code-cs[System.Linq.Queryable#20](~/add/codesnippet/csharp/bb1b6f1a-9c90-4c7f-90e2-_1.cs)]\n [!code-vb[System.Linq.Queryable#20](~/add/codesnippet/visualbasic/bb1b6f1a-9c90-4c7f-90e2-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> Concat<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2);
    parameters:
    - id: source1
      type: System.Linq.IQueryable{TSource}
      description: The first sequence to concatenate.
    - id: source2
      type: System.Collections.Generic.IEnumerable{TSource}
      description: The sequence to concatenate to the first sequence.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains the concatenated elements of the two input sequences.
  overload: System.Linq.Queryable.Concat<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source1</code> or <code>source2</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)
  id: Contains``1(System.Linq.IQueryable{``0},``0)
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Contains<TSource>(IQueryable<TSource>,TSource)
  nameWithType: Queryable.Contains<TSource>(IQueryable<TSource>,TSource)
  fullName: System.Linq.Queryable.Contains<TSource>(IQueryable<TSource>,TSource)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Determines whether a sequence contains a specified element by using the default equality comparer.
  remarks: "The Contains(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Contains(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Contains(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if `source` contains `item`."
  example:
  - "The following code example demonstrates how to use Contains(TSource) to determine whether a sequence contains a specific element.  \n  \n [!code-cs[System.Linq.Queryable#21](~/add/codesnippet/csharp/m-system.linq.queryable._10_1.cs)]\n [!code-vb[System.Linq.Queryable#21](~/add/codesnippet/visualbasic/m-system.linq.queryable._10_1.vb)]"
  syntax:
    content: public static bool Contains<TSource> (this System.Linq.IQueryable<TSource> source, TSource item);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> in which to locate <code>item</code>.
    - id: item
      type: TSource
      description: The object to locate in the sequence.
    return:
      type: System.Boolean
      description: '`true` if the input sequence contains an element that has the specified value; otherwise, `false`.'
  overload: System.Linq.Queryable.Contains<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Contains<TSource>(IQueryable<TSource>,TSource,IEqualityComparer<TSource>)
  nameWithType: Queryable.Contains<TSource>(IQueryable<TSource>,TSource,IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Contains<TSource>(IQueryable<TSource>,TSource,IEqualityComparer<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Determines whether a sequence contains a specified element by using a specified <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref>.
  remarks: "The Contains(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Contains(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Contains(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it determines if `source` contains `item` by using `comparer` to compare values."
  syntax:
    content: public static bool Contains<TSource> (this System.Linq.IQueryable<TSource> source, TSource item, System.Collections.Generic.IEqualityComparer<TSource> comparer);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> in which to locate <code>item</code>.
    - id: item
      type: TSource
      description: The object to locate in the sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TSource}
      description: An <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> to compare values.
    return:
      type: System.Boolean
      description: '`true` if the input sequence contains an element that has the specified value; otherwise, `false`.'
  overload: System.Linq.Queryable.Contains<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})
  id: Count``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Count<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Count<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Count<TSource>(IQueryable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the number of elements in a sequence.
  remarks: "The Count(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Count(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Count(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source`."
  example:
  - "The following code example demonstrates how to use Count(TSource) to count the elements in a sequence.  \n  \n [!code-cs[System.Linq.Queryable#22](~/add/codesnippet/csharp/m-system.linq.queryable._16_1.cs)]\n [!code-vb[System.Linq.Queryable#22](~/add/codesnippet/visualbasic/m-system.linq.queryable._16_1.vb)]"
  syntax:
    content: public static int Count<TSource> (this System.Linq.IQueryable<TSource> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: The <xref href="stem.Linq.IQueryable%601"></xref> that contains the elements to be counted.
    return:
      type: System.Int32
      description: The number of elements in the input sequence.
  overload: System.Linq.Queryable.Count<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of elements in <code>source</code> is larger than <xref href="System.Int32"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Count<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.Count<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.Count<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the number of elements in the specified sequence that satisfies a condition.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Count(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Count(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Count(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source` that satisfy the condition specified by `predicate`."
  example:
  - "The following code example demonstrates how to use Count(TSource) to count the elements in a sequence that satisfy a condition.  \n  \n [!code-cs[System.Linq.Queryable#23](~/add/codesnippet/csharp/4a8f6836-134b-46d5-88fc-_1.cs)]\n [!code-vb[System.Linq.Queryable#23](~/add/codesnippet/visualbasic/4a8f6836-134b-46d5-88fc-_1.vb)]"
  syntax:
    content: public static int Count<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains the elements to be counted.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}
      description: A function to test each element for a condition.
    return:
      type: System.Int32
      description: The number of elements in the sequence that satisfies the condition in the predicate function.
  overload: System.Linq.Queryable.Count<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of elements in <code>source</code> is larger than <xref href="System.Int32"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})
  id: DefaultIfEmpty``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: DefaultIfEmpty<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
  remarks: "The DefaultIfEmpty(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling DefaultIfEmpty(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling DefaultIfEmpty(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns `source` if it is not empty. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that contains `default`(`TSource`)."
  example:
  - "The following code examples demonstrate how to use DefaultIfEmpty(TSource) to provide a default value in case the source sequence is empty.  \n  \n [!code-cs[System.Linq.Queryable#24](~/add/codesnippet/csharp/m-system.linq.queryable._12_1.cs)]\n [!code-vb[System.Linq.Queryable#24](~/add/codesnippet/visualbasic/m-system.linq.queryable._12_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> DefaultIfEmpty<TSource> (this System.Linq.IQueryable<TSource> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: The <xref href="stem.Linq.IQueryable%601"></xref> to return a default value for if empty.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains `default`(<code>TSource</code>) if <code>source</code> is empty; otherwise, <code>source</code>.
  overload: System.Linq.Queryable.DefaultIfEmpty<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)
  id: DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: DefaultIfEmpty<TSource>(IQueryable<TSource>,TSource)
  nameWithType: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>,TSource)
  fullName: System.Linq.Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>,TSource)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.
  remarks: "The DefaultIfEmpty(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling DefaultIfEmpty(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling DefaultIfEmpty(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns `source` if it is not empty. Otherwise, it returns an <xref:System.Linq.IQueryable%601> that contains `defaultValue`."
  example:
  - "The following code example shows a situation in which it is useful to call DefaultIfEmpty(TSource) in a [!INCLUDE[vbteclinq](~/add/includes/vbteclinq-md.md)] query. A default value is passed to DefaultIfEmpty(TSource) in this example.  \n  \n [!code-cs[System.Linq.Queryable#25](~/add/codesnippet/csharp/m-system.linq.queryable._30_1.cs)]\n [!code-vb[System.Linq.Queryable#25](~/add/codesnippet/visualbasic/m-system.linq.queryable._30_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> DefaultIfEmpty<TSource> (this System.Linq.IQueryable<TSource> source, TSource defaultValue);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: The <xref href="stem.Linq.IQueryable%601"></xref> to return the specified value for if empty.
    - id: defaultValue
      type: TSource
      description: The value to return if the sequence is empty.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains <code>defaultValue</code> if <code>source</code> is empty; otherwise, <code>source</code>.
  overload: System.Linq.Queryable.DefaultIfEmpty<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})
  id: Distinct``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Distinct<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Distinct<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Distinct<TSource>(IQueryable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns distinct elements from a sequence by using the default equality comparer to compare values.
  remarks: "The Distinct(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Distinct(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Distinct(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns an unordered sequence of the unique items in `source`."
  example:
  - "The following code example demonstrates how to use Distinct(TSource) to return distinct elements from a sequence.  \n  \n [!code-cs[System.Linq.Queryable#27](~/add/codesnippet/csharp/m-system.linq.queryable._22_1.cs)]\n [!code-vb[System.Linq.Queryable#27](~/add/codesnippet/visualbasic/m-system.linq.queryable._22_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> Distinct<TSource> (this System.Linq.IQueryable<TSource> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: The <xref href="stem.Linq.IQueryable%601"></xref> to remove duplicates from.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains distinct elements from <code>source</code>.
  overload: System.Linq.Queryable.Distinct<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Distinct<TSource>(IQueryable<TSource>,IEqualityComparer<TSource>)
  nameWithType: Queryable.Distinct<TSource>(IQueryable<TSource>,IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Distinct<TSource>(IQueryable<TSource>,IEqualityComparer<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns distinct elements from a sequence by using a specified <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> to compare values.
  remarks: "The Distinct(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Distinct(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Distinct(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns an unordered sequence of the unique items in `source` by using `comparer` to compare values."
  syntax:
    content: public static System.Linq.IQueryable<TSource> Distinct<TSource> (this System.Linq.IQueryable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: The <xref href="stem.Linq.IQueryable%601"></xref> to remove duplicates from.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TSource}
      description: An <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> to compare values.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains distinct elements from <code>source</code>.
  overload: System.Linq.Queryable.Distinct<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>comparer</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)
  id: ElementAt``1(System.Linq.IQueryable{``0},System.Int32)
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: ElementAt<TSource>(IQueryable<TSource>,Int32)
  nameWithType: Queryable.ElementAt<TSource>(IQueryable<TSource>,Int32)
  fullName: System.Linq.Queryable.ElementAt<TSource>(IQueryable<TSource>,Int32)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the element at a specified index in a sequence.
  remarks: "The ElementAt(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling ElementAt(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling ElementAt(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the item at position `index` in `source`."
  example:
  - "The following code example demonstrates how to use ElementAt(TSource) to return an element at a specific position in a sequence.  \n  \n [!code-cs[System.Linq.Queryable#28](~/add/codesnippet/csharp/m-system.linq.queryable._15_1.cs)]\n [!code-vb[System.Linq.Queryable#28](~/add/codesnippet/visualbasic/m-system.linq.queryable._15_1.vb)]"
  syntax:
    content: public static TSource ElementAt<TSource> (this System.Linq.IQueryable<TSource> source, int index);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to return an element from.
    - id: index
      type: System.Int32
      description: The zero-based index of the element to retrieve.
    return:
      type: TSource
      description: The element at the specified position in <code>source</code>.
  overload: System.Linq.Queryable.ElementAt<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)
  id: ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: ElementAtOrDefault<TSource>(IQueryable<TSource>,Int32)
  nameWithType: Queryable.ElementAtOrDefault<TSource>(IQueryable<TSource>,Int32)
  fullName: System.Linq.Queryable.ElementAtOrDefault<TSource>(IQueryable<TSource>,Int32)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the element at a specified index in a sequence or a default value if the index is out of range.
  remarks: "The ElementAtOrDefault(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling ElementAtOrDefault(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling ElementAtOrDefault(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the item at position `index` in `source`, or `default`(`TSource`) if `index` is outside the bounds of `source`."
  example:
  - "The following code example demonstrates how to use ElementAtOrDefault(TSource). This example uses a value for `index` that is outside the bounds of the source sequence.  \n  \n [!code-cs[System.Linq.Queryable#29](~/add/codesnippet/csharp/8bbcd2f2-5e02-46bc-b35b-_1.cs)]\n [!code-vb[System.Linq.Queryable#29](~/add/codesnippet/visualbasic/8bbcd2f2-5e02-46bc-b35b-_1.vb)]"
  syntax:
    content: public static TSource ElementAtOrDefault<TSource> (this System.Linq.IQueryable<TSource> source, int index);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to return an element from.
    - id: index
      type: System.Int32
      description: The zero-based index of the element to retrieve.
    return:
      type: TSource
      description: <code>default</code>(<code>TSource</code>) if <code>index</code> is outside the bounds of <code>source</code>; otherwise, the element at the specified position in <code>source</code>.
  overload: System.Linq.Queryable.ElementAtOrDefault<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Except<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  nameWithType: Queryable.Except<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Except<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Produces the set difference of two sequences by using the default equality comparer to compare values.
  remarks: "The Except(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Except(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the`source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Except(TSource) depends on the implementation of the type of  the `source1` parameter. The expected behavior is that all the elements in `source1` are returned except for those that are also in `source2`."
  example:
  - "The following code example demonstrates how to use Except(TSource) to return those elements that only appear in the first source sequence.  \n  \n [!code-cs[System.Linq.Queryable#34](~/add/codesnippet/csharp/f5c23270-2804-4f38-b862-_1.cs)]\n [!code-vb[System.Linq.Queryable#34](~/add/codesnippet/visualbasic/f5c23270-2804-4f38-b862-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> Except<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2);
    parameters:
    - id: source1
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements that are not also in <code>source2</code> will be returned.
    - id: source2
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An <xref href="stem.Collections.Generic.IEnumerable%601"></xref> whose elements that also occur in the first sequence will not appear in the returned sequence.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains the set difference of the two sequences.
  overload: System.Linq.Queryable.Except<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source1</code> or <code>source2</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Except<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  nameWithType: Queryable.Except<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Except<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Produces the set difference of two sequences by using the specified <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> to compare values.
  remarks: "The Except(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Except(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the`source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Except(TSource) depends on the implementation of the type of the `source1` parameter. The expected behavior is that all the elements in `source1` are returned except for those that are also in `source2`, and `comparer` is used to compare values."
  syntax:
    content: public static System.Linq.IQueryable<TSource> Except<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer);
    parameters:
    - id: source1
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements that are not also in <code>source2</code> will be returned.
    - id: source2
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An <xref href="stem.Collections.Generic.IEnumerable%601"></xref> whose elements that also occur in the first sequence will not appear in the returned sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TSource}
      description: An <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> to compare values.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains the set difference of the two sequences.
  overload: System.Linq.Queryable.Except<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source1</code> or <code>source2</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})
  id: First``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: First<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.First<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.First<TSource>(IQueryable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the first element of a sequence.
  remarks: "The First(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling First(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling First(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source`."
  example:
  - "The following code example demonstrates how to use First(TSource) to return the first element in a sequence.  \n  \n [!code-cs[System.Linq.Queryable#35](~/add/codesnippet/csharp/m-system.linq.queryable._0_1.cs)]\n [!code-vb[System.Linq.Queryable#35](~/add/codesnippet/visualbasic/m-system.linq.queryable._0_1.vb)]"
  syntax:
    content: public static TSource First<TSource> (this System.Linq.IQueryable<TSource> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: The <xref href="stem.Linq.IQueryable%601"></xref> to return the first element of.
    return:
      type: TSource
      description: The first element in <code>source</code>.
  overload: System.Linq.Queryable.First<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The source sequence is empty.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: First<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.First<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.First<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the first element of a sequence that satisfies a specified condition.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The First(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling First(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling First(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source` that satisfies the condition specified by `predicate`."
  example:
  - "The following code example demonstrates how to use First(TSource) to return the first element of a sequence that satisfies a condition.  \n  \n [!code-cs[System.Linq.Queryable#36](~/add/codesnippet/csharp/eae7a6ff-7e53-482e-8027-_1.cs)]\n [!code-vb[System.Linq.Queryable#36](~/add/codesnippet/visualbasic/eae7a6ff-7e53-482e-8027-_1.vb)]"
  syntax:
    content: public static TSource First<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to return an element from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}
      description: A function to test each element for a condition.
    return:
      type: TSource
      description: The first element in <code>source</code> that passes the test in <code>predicate</code>.
  overload: System.Linq.Queryable.First<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "No element satisfies the condition in <code>predicate</code>.  \n  \n -or-  \n  \n The source sequence is empty."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})
  id: FirstOrDefault``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: FirstOrDefault<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.FirstOrDefault<TSource>(IQueryable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the first element of a sequence, or a default value if the sequence contains no elements.
  remarks: "The FirstOrDefault(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling FirstOrDefault(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling FirstOrDefault(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source`, or a default value if `source` is empty.  \n  \n The <xref:System.Linq.Queryable.FirstOrDefault%2A> method does not provide a way to specify the default value to return if `source` is empty. If you want to specify a default value other than `default`(`TSource`), use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section."
  example:
  - "The following code example demonstrates how to use FirstOrDefault(TSource) on an empty sequence.  \n  \n [!code-cs[System.Linq.Queryable#37](~/add/codesnippet/csharp/m-system.linq.queryable._9_1.cs)]\n [!code-vb[System.Linq.Queryable#37](~/add/codesnippet/visualbasic/m-system.linq.queryable._9_1.vb)]  \n  \n Sometimes the value of `default`(`TSource`) is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty. Then, call <xref:System.Linq.Queryable.First%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to obtain the first element. The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty. Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query is completed. The second result variable is obtained by calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.  \n  \n [!code-cs[System.Linq.Queryable#131](~/add/codesnippet/csharp/m-system.linq.queryable._9_2.cs)]\n [!code-vb[System.Linq.Queryable#131](~/add/codesnippet/visualbasic/m-system.linq.queryable._9_2.vb)]"
  syntax:
    content: public static TSource FirstOrDefault<TSource> (this System.Linq.IQueryable<TSource> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: The <xref href="stem.Linq.IQueryable%601"></xref> to return the first element of.
    return:
      type: TSource
      description: <code>default</code>(<code>TSource</code>) if <code>source</code> is empty; otherwise, the first element in <code>source</code>.
  overload: System.Linq.Queryable.FirstOrDefault<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: FirstOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.FirstOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The FirstOrDefault(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling FirstOrDefault(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling FirstOrDefault(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the first element in `source` that satisfies the condition in `predicate`, or a default value if no element satisfies the condition."
  example:
  - "The following code example demonstrates how to use FirstOrDefault(TSource) by passing in a predicate. In the second query, there is no element in the sequence that satisfies the condition.  \n  \n [!code-cs[System.Linq.Queryable#38](~/add/codesnippet/csharp/11586fa2-8799-4182-b02c-_1.cs)]\n [!code-vb[System.Linq.Queryable#38](~/add/codesnippet/visualbasic/11586fa2-8799-4182-b02c-_1.vb)]"
  syntax:
    content: public static TSource FirstOrDefault<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to return an element from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}
      description: A function to test each element for a condition.
    return:
      type: TSource
      description: <code>default</code>(<code>TSource</code>) if <code>source</code> is empty or if no element passes the test specified by <code>predicate</code>; otherwise, the first element in <code>source</code> that passes the test specified by <code>predicate</code>.
  overload: System.Linq.Queryable.FirstOrDefault<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: GroupBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
  nameWithType: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The GroupBy(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element."
  example:
  - "The following code example demonstrates how to use GroupBy(TSource, to group the elements of a sequence.  \n  \n [!code-cs[System.Linq.Queryable#14](~/add/codesnippet/csharp/4b2976fd-2315-46d1-b0d8-_1.cs)]\n [!code-vb[System.Linq.Queryable#14](~/add/codesnippet/visualbasic/4b2976fd-2315-46d1-b0d8-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract the key for each element.
    return:
      type: System.Linq.IQueryable{System.Linq.IGrouping{TKey,TSource}}
      description: An <code>IQueryable<IGrouping<TKey, TSource>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TSource))</code> in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] where each <xref href="stem.Linq.IGrouping%602"></xref> object contains a sequence of objects and a key.
  overload: System.Linq.Queryable.GroupBy<TSource,TKey>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: GroupBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IEqualityComparer<TKey>)
  nameWithType: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IEqualityComparer<TKey>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The GroupBy(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value. The key value is obtained by invoking `keySelector` on each element, and key values are compared by using `comparer`."
  syntax:
    content: public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TSource>> GroupBy<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract the key for each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: An <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> to compare keys.
    return:
      type: System.Linq.IQueryable{System.Linq.IGrouping{TKey,TSource}}
      description: An <code>IQueryable<IGrouping<TKey, TSource>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TSource))</code> in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] where each <xref href="stem.Linq.IGrouping%602"></xref> contains a sequence of objects and a key.
  overload: System.Linq.Queryable.GroupBy<TSource,TKey>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})
  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: GroupBy<TSource,TKey,TElement>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>)
  nameWithType: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The GroupBy(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element. It invokes `elementSelector` on each element to obtain a result element."
  example:
  - "The following code example demonstrates how to use GroupBy(TSource, to group the elements of a sequence.  \n  \n [!code-cs[System.Linq.Queryable#39](~/add/codesnippet/csharp/acb46aac-5c66-42d7-8996-_1.cs)]\n [!code-vb[System.Linq.Queryable#39](~/add/codesnippet/visualbasic/acb46aac-5c66-42d7-8996-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TSource,TElement>> elementSelector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract the key for each element.
    - id: elementSelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TElement}}
      description: A function to map each source element to an element in an <xref href="stem.Linq.IGrouping%602"></xref>.
    return:
      type: System.Linq.IQueryable{System.Linq.IGrouping{TKey,TElement}}
      description: An <code>IQueryable<IGrouping<TKey, TElement>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TElement))</code> in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] where each <xref href="stem.Linq.IGrouping%602"></xref> contains a sequence of objects of type <code>TElement</code> and a key.
  overload: System.Linq.Queryable.GroupBy<TSource,TKey,TElement>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> or <code>elementSelector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: GroupBy<TSource,TKey,TElement>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,IEqualityComparer<TKey>)
  nameWithType: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,IEqualityComparer<TKey>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The GroupBy(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element. Key values are compared by using `comparer`. The `elementSelector` parameter is invoked on each element to obtain a result element."
  syntax:
    content: public static System.Linq.IQueryable<System.Linq.IGrouping<TKey,TElement>> GroupBy<TSource,TKey,TElement> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TSource,TElement>> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract the key for each element.
    - id: elementSelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TElement}}
      description: A function to map each source element to an element in an <xref href="stem.Linq.IGrouping%602"></xref>.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: An <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> to compare keys.
    return:
      type: System.Linq.IQueryable{System.Linq.IGrouping{TKey,TElement}}
      description: An <code>IQueryable<IGrouping<TKey, TElement>></code> in C# or <code>IQueryable(Of IGrouping(Of TKey, TElement))</code> in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] where each <xref href="stem.Linq.IGrouping%602"></xref> contains a sequence of objects of type <code>TElement</code> and a key.
  overload: System.Linq.Queryable.GroupBy<TSource,TKey,TElement>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> or <code>elementSelector</code> or <code>comparer</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: GroupBy<TSource,TKey,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TKey,IEnumerable<TSource>,TResult>>)
  nameWithType: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TKey,IEnumerable<TSource>,TResult>>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TKey,IEnumerable<TSource>,TResult>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The GroupBy(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by a key value that is obtained by invoking `keySelector` on each element. The `resultSelector` parameter is used to obtain a result value from each group and its key."
  example:
  - "The following code example demonstrates how to use GroupBy(TSource, to group the elements of a sequence and project a sequence of results of type `TResult`.  \n  \n [!code-cs[System.Linq.Queryable#15](~/add/codesnippet/csharp/b37f140b-ad1c-4939-9f71-_1.cs)]\n [!code-vb[System.Linq.Queryable#15](~/add/codesnippet/visualbasic/b37f140b-ad1c-4939-9f71-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>> resultSelector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract the key for each element.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{TKey,System.Collections.Generic.IEnumerable{TSource},TResult}}
      description: A function to create a result value from each group.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.
  overload: System.Linq.Queryable.GroupBy<TSource,TKey,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> or <code>resultSelector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: GroupBy<TSource,TKey,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TKey,IEnumerable<TSource>,TResult>>,IEqualityComparer<TKey>)
  nameWithType: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TKey,IEnumerable<TSource>,TResult>>,IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TKey,IEnumerable<TSource>,TResult>>,IEqualityComparer<TKey>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The GroupBy(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element. The `comparer` parameter is used to compare keys and the `resultSelector` parameter is used to obtain a result value from each group and its key."
  syntax:
    content: public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract the key for each element.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{TKey,System.Collections.Generic.IEnumerable{TSource},TResult}}
      description: A function to create a result value from each group.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: An <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> to compare keys.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.
  overload: System.Linq.Queryable.GroupBy<TSource,TKey,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> or <code>resultSelector</code> or <code>comparer</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  id: GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,Expression<Func<TKey,IEnumerable<TElement>,TResult>>)
  nameWithType: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,Expression<Func<TKey,IEnumerable<TElement>,TResult>>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,Expression<Func<TKey,IEnumerable<TElement>,TResult>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The GroupBy(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element. The `elementSelector` parameter is used to project the elements of each group, and the `resultSelector` parameter is used to obtain a result value from each group and its key."
  example:
  - "The following code example demonstrates how to use GroupBy(TSource, to group the elements of a sequence and project a sequence of results of type `TResult`.  \n  \n [!code-cs[System.Linq.Queryable#130](~/add/codesnippet/csharp/2cc9c401-ace6-483c-b7ca-_1.cs)]\n [!code-vb[System.Linq.Queryable#130](~/add/codesnippet/visualbasic/2cc9c401-ace6-483c-b7ca-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TElement,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TSource,TElement>> elementSelector, System.Linq.Expressions.Expression<Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>> resultSelector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract the key for each element.
    - id: elementSelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TElement}}
      description: A function to map each source element to an element in an <xref href="stem.Linq.IGrouping%602"></xref>.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{TKey,System.Collections.Generic.IEnumerable{TElement},TResult}}
      description: A function to create a result value from each group.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.
  overload: System.Linq.Queryable.GroupBy<TSource,TKey,TElement,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> or <code>elementSelector</code> or <code>resultSelector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,Expression<Func<TKey,IEnumerable<TElement>,TResult>>,IEqualityComparer<TKey>)
  nameWithType: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,Expression<Func<TKey,IEnumerable<TElement>,TResult>>,IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,Expression<Func<TKey,IEnumerable<TElement>,TResult>>,IEqualityComparer<TKey>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The GroupBy(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling GroupBy(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling GroupBy(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it groups the elements of `source` by key values that are obtained by invoking `keySelector` on each element. The `comparer` parameter is used to compare key values. The `elementSelector` parameter is used to project the elements of each group, and the `resultSelector` parameter is used to obtain a result value from each group and its key."
  syntax:
    content: public static System.Linq.IQueryable<TResult> GroupBy<TSource,TKey,TElement,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Linq.Expressions.Expression<Func<TSource,TElement>> elementSelector, System.Linq.Expressions.Expression<Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract the key for each element.
    - id: elementSelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TElement}}
      description: A function to map each source element to an element in an <xref href="stem.Linq.IGrouping%602"></xref>.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{TKey,System.Collections.Generic.IEnumerable{TElement},TResult}}
      description: A function to create a result value from each group.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: An <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> to compare keys.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <code>T:System.Linq.IQueryable`1</code> that has a type argument of <code>TResult</code> and where each element represents a projection over a group and its key.
  overload: System.Linq.Queryable.GroupBy<TSource,TKey,TElement,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> or <code>elementSelector</code> or <code>resultSelector</code> or <code>comparer</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  id: GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,IEnumerable<TInner>,TResult>>)
  nameWithType: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,IEnumerable<TInner>,TResult>>)
  fullName: System.Linq.Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,IEnumerable<TInner>,TResult>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The GroupJoin(TOuter, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling GroupJoin(TOuter, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling GroupJoin(TOuter, depends on the implementation of the type of the `outer` parameter. The expected behavior is that the `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality to match each element in `outer` with zero or more elements from `inner`. Then the `resultSelector` function is invoked to project a result object from each group of correlated elements."
  example:
  - "The following code example demonstrates how to use GroupJoin(TOuter, to perform a grouped join on two sequences.  \n  \n [!code-cs[System.Linq.Queryable#40](~/add/codesnippet/csharp/d2ef9a05-96f0-4103-a8e6-_1.cs)]\n [!code-vb[System.Linq.Queryable#40](~/add/codesnippet/visualbasic/d2ef9a05-96f0-4103-a8e6-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>> resultSelector);
    parameters:
    - id: outer
      type: System.Linq.IQueryable{TOuter}
      description: The first sequence to join.
    - id: inner
      type: System.Collections.Generic.IEnumerable{TInner}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{TOuter,TKey}}
      description: A function to extract the join key from each element of the first sequence.
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{TInner,TKey}}
      description: A function to extract the join key from each element of the second sequence.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{TOuter,System.Collections.Generic.IEnumerable{TInner},TResult}}
      description: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains elements of type <code>TResult</code> obtained by performing a grouped join on two sequences.
  overload: System.Linq.Queryable.GroupJoin<TOuter,TInner,TKey,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,IEnumerable<TInner>,TResult>>,IEqualityComparer<TKey>)
  nameWithType: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,IEnumerable<TInner>,TResult>>,IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,IEnumerable<TInner>,TResult>>,IEqualityComparer<TKey>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Correlates the elements of two sequences based on key equality and groups the results. A specified <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> is used to compare keys.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The GroupJoin(TOuter, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling GroupJoin(TOuter, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling GroupJoin(TOuter, depends on the implementation of the type of the `outer` parameter. The expected behavior is that the `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality by using `comparer`. The outcome of the comparisons is used to match each element in `outer` with zero or more elements from `inner`. Then the `resultSelector` function is invoked to project a result object from each group of correlated elements."
  syntax:
    content: public static System.Linq.IQueryable<TResult> GroupJoin<TOuter,TInner,TKey,TResult> (this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);
    parameters:
    - id: outer
      type: System.Linq.IQueryable{TOuter}
      description: The first sequence to join.
    - id: inner
      type: System.Collections.Generic.IEnumerable{TInner}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{TOuter,TKey}}
      description: A function to extract the join key from each element of the first sequence.
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{TInner,TKey}}
      description: A function to extract the join key from each element of the second sequence.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{TOuter,System.Collections.Generic.IEnumerable{TInner},TResult}}
      description: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: A comparer to hash and compare keys.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains elements of type <code>TResult</code> obtained by performing a grouped join on two sequences.
  overload: System.Linq.Queryable.GroupJoin<TOuter,TInner,TKey,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Intersect<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  nameWithType: Queryable.Intersect<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Intersect<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Produces the set intersection of two sequences by using the default equality comparer to compare values.
  remarks: "The Intersect(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Intersect(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Intersect(TSource) depends on the implementation of the type of the `source1` parameter. The expected behavior is that all the elements in `source1` that are also in `source2` are returned."
  example:
  - "The following code example demonstrates how to use Intersect(TSource) to return the elements that appear in each of two sequences.  \n  \n [!code-cs[System.Linq.Queryable#41](~/add/codesnippet/csharp/13f378e3-7d98-451b-9c64-_1.cs)]\n [!code-vb[System.Linq.Queryable#41](~/add/codesnippet/visualbasic/13f378e3-7d98-451b-9c64-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> Intersect<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2);
    parameters:
    - id: source1
      type: System.Linq.IQueryable{TSource}
      description: A sequence whose distinct elements that also appear in <code>source2</code> are returned.
    - id: source2
      type: System.Collections.Generic.IEnumerable{TSource}
      description: A sequence whose distinct elements that also appear in the first sequence are returned.
    return:
      type: System.Linq.IQueryable{TSource}
      description: A sequence that contains the set intersection of the two sequences.
  overload: System.Linq.Queryable.Intersect<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source1</code> or <code>source2</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Intersect<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  nameWithType: Queryable.Intersect<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Intersect<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Produces the set intersection of two sequences by using the specified <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> to compare values.
  remarks: "The Intersect(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Intersect(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Intersect(TSource) depends on the implementation of the type of the `source1` parameter. The expected behavior is that all the elements in `source1` that are also in `source2` are returned. The `comparer` parameter is used to compare elements."
  syntax:
    content: public static System.Linq.IQueryable<TSource> Intersect<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer);
    parameters:
    - id: source1
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose distinct elements that also appear in <code>source2</code> are returned.
    - id: source2
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An <xref href="stem.Collections.Generic.IEnumerable%601"></xref> whose distinct elements that also appear in the first sequence are returned.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TSource}
      description: An <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> to compare values.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains the set intersection of the two sequences.
  overload: System.Linq.Queryable.Intersect<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source1</code> or <code>source2</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  id: Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,TInner,TResult>>)
  nameWithType: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,TInner,TResult>>)
  fullName: System.Linq.Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,TInner,TResult>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Join(TOuter, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Join(TOuter, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Join(TOuter, depends on the implementation of the type of the `outer` parameter. The expected behavior is that of an inner join. The `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality to match elements from each sequence. A pair of elements is stored for each element in `inner` that matches an element in `outer`. Then the `resultSelector` function is invoked to project a result object from each pair of matching elements."
  example:
  - "The following code example demonstrates how to use Join(TOuter, to perform an inner join of two sequences based on a common key.  \n  \n [!code-cs[System.Linq.Queryable#42](~/add/codesnippet/csharp/2ef88d3f-42bc-4027-be26-_1.cs)]\n [!code-vb[System.Linq.Queryable#42](~/add/codesnippet/visualbasic/2ef88d3f-42bc-4027-be26-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<Func<TOuter,TInner,TResult>> resultSelector);
    parameters:
    - id: outer
      type: System.Linq.IQueryable{TOuter}
      description: The first sequence to join.
    - id: inner
      type: System.Collections.Generic.IEnumerable{TInner}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{TOuter,TKey}}
      description: A function to extract the join key from each element of the first sequence.
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{TInner,TKey}}
      description: A function to extract the join key from each element of the second sequence.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{TOuter,TInner,TResult}}
      description: A function to create a result element from two matching elements.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that has elements of type <code>TResult</code> obtained by performing an inner join on two sequences.
  overload: System.Linq.Queryable.Join<TOuter,TInner,TKey,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  id: Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,TInner,TResult>>,IEqualityComparer<TKey>)
  nameWithType: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,TInner,TResult>>,IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,TInner,TResult>>,IEqualityComparer<TKey>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Correlates the elements of two sequences based on matching keys. A specified <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> is used to compare keys.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Join(TOuter, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Join(TOuter, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `outer` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Join(TOuter, depends on the implementation of the type of the `outer` parameter. The expected behavior is that of an inner join. The `outerKeySelector` and `innerKeySelector` functions are used to extract keys from `outer` and `inner`, respectively. These keys are compared for equality by using `comparer`. The outcome of the comparisons is used to create a matching pair for each element in `inner` that matches an element in `outer`. Then the `resultSelector` function is invoked to project a result object from each pair of matching elements."
  syntax:
    content: public static System.Linq.IQueryable<TResult> Join<TOuter,TInner,TKey,TResult> (this System.Linq.IQueryable<TOuter> outer, System.Collections.Generic.IEnumerable<TInner> inner, System.Linq.Expressions.Expression<Func<TOuter,TKey>> outerKeySelector, System.Linq.Expressions.Expression<Func<TInner,TKey>> innerKeySelector, System.Linq.Expressions.Expression<Func<TOuter,TInner,TResult>> resultSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer);
    parameters:
    - id: outer
      type: System.Linq.IQueryable{TOuter}
      description: The first sequence to join.
    - id: inner
      type: System.Collections.Generic.IEnumerable{TInner}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{TOuter,TKey}}
      description: A function to extract the join key from each element of the first sequence.
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{TInner,TKey}}
      description: A function to extract the join key from each element of the second sequence.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{TOuter,TInner,TResult}}
      description: A function to create a result element from two matching elements.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: An <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> to hash and compare keys.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that has elements of type <code>TResult</code> obtained by performing an inner join on two sequences.
  overload: System.Linq.Queryable.Join<TOuter,TInner,TKey,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>outer</code> or <code>inner</code> or <code>outerKeySelector</code> or <code>innerKeySelector</code> or <code>resultSelector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})
  id: Last``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Last<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Last<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Last<TSource>(IQueryable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the last element in a sequence.
  remarks: "The Last(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Last(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Last(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source`."
  example:
  - "The following code example demonstrates how to use Last(TSource) to return the last element of an array.  \n  \n [!code-cs[System.Linq.Queryable#43](~/add/codesnippet/csharp/m-system.linq.queryable._25_1.cs)]\n [!code-vb[System.Linq.Queryable#43](~/add/codesnippet/visualbasic/m-system.linq.queryable._25_1.vb)]"
  syntax:
    content: public static TSource Last<TSource> (this System.Linq.IQueryable<TSource> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to return the last element of.
    return:
      type: TSource
      description: The value at the last position in <code>source</code>.
  overload: System.Linq.Queryable.Last<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The source sequence is empty.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Last<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.Last<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.Last<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the last element of a sequence that satisfies a specified condition.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Last(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Last(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Last(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source` that satisfies the condition specified by `predicate`."
  example:
  - "The following code example demonstrates how to use Last(TSource) to return the last element of an array that satisfies a condition.  \n  \n [!code-cs[System.Linq.Queryable#44](~/add/codesnippet/csharp/bca742c9-89fe-47e7-b823-_1.cs)]\n [!code-vb[System.Linq.Queryable#44](~/add/codesnippet/visualbasic/bca742c9-89fe-47e7-b823-_1.vb)]"
  syntax:
    content: public static TSource Last<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to return an element from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}
      description: A function to test each element for a condition.
    return:
      type: TSource
      description: The last element in <code>source</code> that passes the test specified by <code>predicate</code>.
  overload: System.Linq.Queryable.Last<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "No element satisfies the condition in <code>predicate</code>.  \n  \n -or-  \n  \n The source sequence is empty."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})
  id: LastOrDefault``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: LastOrDefault<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.LastOrDefault<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.LastOrDefault<TSource>(IQueryable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the last element in a sequence, or a default value if the sequence contains no elements.
  remarks: "The LastOrDefault(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling LastOrDefault(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling LastOrDefault(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source`, or a default value if `source` is empty.  \n  \n The <xref:System.Linq.Queryable.LastOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default`(`TSource`), use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section."
  example:
  - "The following code example demonstrates how to use LastOrDefault(TSource) on an empty array.  \n  \n [!code-cs[System.Linq.Queryable#45](~/add/codesnippet/csharp/m-system.linq.queryable._19_1.cs)]\n [!code-vb[System.Linq.Queryable#45](~/add/codesnippet/visualbasic/m-system.linq.queryable._19_1.vb)]  \n  \n Sometimes the value of `default`(`TSource`) is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty. Then, call <xref:System.Linq.Queryable.Last%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to obtain the last element. The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty. Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query is completed. The second result variable is obtained by calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.  \n  \n [!code-cs[System.Linq.Queryable#132](~/add/codesnippet/csharp/m-system.linq.queryable._19_2.cs)]\n [!code-vb[System.Linq.Queryable#132](~/add/codesnippet/visualbasic/m-system.linq.queryable._19_2.vb)]"
  syntax:
    content: public static TSource LastOrDefault<TSource> (this System.Linq.IQueryable<TSource> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to return the last element of.
    return:
      type: TSource
      description: <code>default</code>(<code>TSource</code>) if <code>source</code> is empty; otherwise, the last element in <code>source</code>.
  overload: System.Linq.Queryable.LastOrDefault<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: LastOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.LastOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.LastOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.LastOrDefault%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the last element in `source` that satisfies the condition specified by `predicate`. It returns a default value if there is no such element in `source`."
  example:
  - "The following code example demonstrates how to use LastOrDefault(TSource) by passing in a predicate. In the second call to the method, there is no element in the sequence that satisfies the condition.  \n  \n [!code-cs[System.Linq.Queryable#46](~/add/codesnippet/csharp/c5c5ac42-b888-41cd-921b-_1.cs)]\n [!code-vb[System.Linq.Queryable#46](~/add/codesnippet/visualbasic/c5c5ac42-b888-41cd-921b-_1.vb)]"
  syntax:
    content: public static TSource LastOrDefault<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to return an element from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}
      description: A function to test each element for a condition.
    return:
      type: TSource
      description: <code>default</code>(<code>TSource</code>) if <code>source</code> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <code>source</code> that passes the test in the predicate function.
  overload: System.Linq.Queryable.LastOrDefault<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})
  id: LongCount``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: LongCount<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.LongCount<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.LongCount<TSource>(IQueryable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns an <xref href="System.Int64"></xref> that represents the total number of elements in a sequence.
  remarks: "The LongCount(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling LongCount(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling LongCount(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source` and returns an <xref:System.Int64>."
  example:
  - "The following code example demonstrates how to use LongCount(TSource) to count the elements in an array.  \n  \n [!code-cs[System.Linq.Queryable#47](~/add/codesnippet/csharp/m-system.linq.queryable._6_1.cs)]\n [!code-vb[System.Linq.Queryable#47](~/add/codesnippet/visualbasic/m-system.linq.queryable._6_1.vb)]"
  syntax:
    content: public static long LongCount<TSource> (this System.Linq.IQueryable<TSource> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains the elements to be counted.
    return:
      type: System.Int64
      description: The number of elements in <code>source</code>.
  overload: System.Linq.Queryable.LongCount<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of elements exceeds <xref href="System.Int64"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: LongCount<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.LongCount<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.LongCount<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns an <xref href="System.Int64"></xref> that represents the number of elements in a sequence that satisfy a condition.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The LongCount(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling LongCount(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling LongCount(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it counts the number of items in `source` that satisfy the condition specified by `predicate` and returns an <xref:System.Int64>."
  example:
  - "The following code example demonstrates how to use LongCount(TSource) to count the elements in an array that satisfy a condition.  \n  \n [!code-cs[System.Linq.Queryable#48](~/add/codesnippet/csharp/da15fe89-7dc1-4a8c-ba5d-_1.cs)]\n [!code-vb[System.Linq.Queryable#48](~/add/codesnippet/visualbasic/da15fe89-7dc1-4a8c-ba5d-_1.vb)]"
  syntax:
    content: public static long LongCount<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains the elements to be counted.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}
      description: A function to test each element for a condition.
    return:
      type: System.Int64
      description: The number of elements in <code>source</code> that satisfy the condition in the predicate function.
  overload: System.Linq.Queryable.LongCount<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of matching elements exceeds <xref href="System.Int64"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})
  id: Max``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Max<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Max<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Max<TSource>(IQueryable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the maximum value in a generic <xref href="stem.Linq.IQueryable%601"></xref>.
  remarks: "The Max(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Max(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Max(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the maximum value in `source`."
  example:
  - "The following code example demonstrates how to use Max(TSource) to determine the maximum value in a sequence.  \n  \n [!code-cs[System.Linq.Queryable#52](~/add/codesnippet/csharp/m-system.linq.queryable._4_1.cs)]\n [!code-vb[System.Linq.Queryable#52](~/add/codesnippet/visualbasic/m-system.linq.queryable._4_1.vb)]"
  syntax:
    content: public static TSource Max<TSource> (this System.Linq.IQueryable<TSource> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to determine the maximum of.
    return:
      type: TSource
      description: The maximum value in the sequence.
  overload: System.Linq.Queryable.Max<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Max<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
  nameWithType: Queryable.Max<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
  fullName: System.Linq.Queryable.Max<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Invokes a projection function on each element of a generic <xref href="stem.Linq.IQueryable%601"></xref> and returns the maximum resulting value.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Max(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Max(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Max(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element in `source` and returns the maximum value."
  example:
  - "The following code example demonstrates how to use Max(TSource, to determine the maximum value in a sequence of projected values.  \n  \n [!code-cs[System.Linq.Queryable#58](~/add/codesnippet/csharp/09f86b39-47b6-483d-9486-_1.cs)]\n [!code-vb[System.Linq.Queryable#58](~/add/codesnippet/visualbasic/09f86b39-47b6-483d-9486-_1.vb)]"
  syntax:
    content: public static TResult Max<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TResult>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to determine the maximum of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TResult}}
      description: A projection function to apply to each element.
    return:
      type: TResult
      description: The maximum value in the sequence.
  overload: System.Linq.Queryable.Max<TSource,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})
  id: Min``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Min<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Min<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Min<TSource>(IQueryable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the minimum value of a generic <xref href="stem.Linq.IQueryable%601"></xref>.
  remarks: "The Min(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Min(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Min(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the minimum value in `source`."
  example:
  - "The following code example demonstrates how to use Min(TSource) to determine the minimum value in a sequence.  \n  \n [!code-cs[System.Linq.Queryable#60](~/add/codesnippet/csharp/m-system.linq.queryable._24_1.cs)]\n [!code-vb[System.Linq.Queryable#60](~/add/codesnippet/visualbasic/m-system.linq.queryable._24_1.vb)]"
  syntax:
    content: public static TSource Min<TSource> (this System.Linq.IQueryable<TSource> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to determine the minimum of.
    return:
      type: TSource
      description: The minimum value in the sequence.
  overload: System.Linq.Queryable.Min<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Min<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
  nameWithType: Queryable.Min<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
  fullName: System.Linq.Queryable.Min<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Invokes a projection function on each element of a generic <xref href="stem.Linq.IQueryable%601"></xref> and returns the minimum resulting value.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Min(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Min(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Min(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element in `source` and returns the minimum value."
  example:
  - "The following code example demonstrates how to use Min(TSource, to determine the minimum value in a sequence of projected values.  \n  \n [!code-cs[System.Linq.Queryable#68](~/add/codesnippet/csharp/a28abc62-5e71-4ca3-9ba2-_1.cs)]\n [!code-vb[System.Linq.Queryable#68](~/add/codesnippet/visualbasic/a28abc62-5e71-4ca3-9ba2-_1.vb)]"
  syntax:
    content: public static TResult Min<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TResult>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to determine the minimum of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TResult}}
      description: A projection function to apply to each element.
    return:
      type: TResult
      description: The minimum value in the sequence.
  overload: System.Linq.Queryable.Min<TSource,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.OfType``1(System.Linq.IQueryable)
  id: OfType``1(System.Linq.IQueryable)
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: OfType<TResult>(IQueryable)
  nameWithType: Queryable.OfType<TResult>(IQueryable)
  fullName: System.Linq.Queryable.OfType<TResult>(IQueryable)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Filters the elements of an <xref href="System.Linq.IQueryable"></xref> based on a specified type.
  remarks: "The `OfType` method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling `OfType` itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling `OfType` depends on the implementation of the type of the `source` parameter. The expected behavior is that it filters out any elements in `source` that are not of type `TResult`."
  example:
  - "The following code example demonstrates how to use `OfType` to filter out elements that are not of type <xref:System.Reflection.PropertyInfo> from a list of elements of type <xref:System.Reflection.MemberInfo>.  \n  \n [!code-cs[System.Linq.Queryable#69](~/add/codesnippet/csharp/m-system.linq.queryable._20_1.cs)]\n [!code-vb[System.Linq.Queryable#69](~/add/codesnippet/visualbasic/m-system.linq.queryable._20_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TResult> OfType<TResult> (this System.Linq.IQueryable source);
    parameters:
    - id: source
      type: System.Linq.IQueryable
      description: An <xref href="System.Linq.IQueryable"></xref> whose elements to filter.
    return:
      type: System.Linq.IQueryable{TResult}
      description: A collection that contains the elements from <code>source</code> that have type <code>TResult</code>.
  overload: System.Linq.Queryable.OfType<TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: OrderBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
  nameWithType: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
  fullName: System.Linq.Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Sorts the elements of a sequence in ascending order according to a key.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The OrderBy(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling OrderBy(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling OrderBy(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`."
  example:
  - "The following code example demonstrates how to use OrderBy(TSource, to sort the elements of a sequence.  \n  \n [!code-cs[System.Linq.Queryable#70](~/add/codesnippet/csharp/cf58060c-0fd6-4722-a782-_1.cs)]\n [!code-vb[System.Linq.Queryable#70](~/add/codesnippet/visualbasic/cf58060c-0fd6-4722-a782-_1.vb)]"
  syntax:
    content: public static System.Linq.IOrderedQueryable<TSource> OrderBy<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract a key from an element.
    return:
      type: System.Linq.IOrderedQueryable{TSource}
      description: An <xref href="stem.Linq.IOrderedQueryable%601"></xref> whose elements are sorted according to a key.
  overload: System.Linq.Queryable.OrderBy<TSource,TKey>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: OrderBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  nameWithType: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  fullName: System.Linq.Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Sorts the elements of a sequence in ascending order by using a specified comparer.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The OrderBy(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling OrderBy(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling OrderBy(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`. The `comparer` parameter is used to compare keys."
  syntax:
    content: public static System.Linq.IOrderedQueryable<TSource> OrderBy<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract a key from an element.
    - id: comparer
      type: System.Collections.Generic.IComparer{TKey}
      description: An <xref href="stem.Collections.Generic.IComparer%601"></xref> to compare keys.
    return:
      type: System.Linq.IOrderedQueryable{TSource}
      description: An <xref href="stem.Linq.IOrderedQueryable%601"></xref> whose elements are sorted according to a key.
  overload: System.Linq.Queryable.OrderBy<TSource,TKey>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: OrderByDescending<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
  nameWithType: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
  fullName: System.Linq.Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Sorts the elements of a sequence in descending order according to a key.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The OrderByDescending(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling OrderByDescending(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling OrderByDescending(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`."
  syntax:
    content: public static System.Linq.IOrderedQueryable<TSource> OrderByDescending<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract a key from an element.
    return:
      type: System.Linq.IOrderedQueryable{TSource}
      description: An <xref href="stem.Linq.IOrderedQueryable%601"></xref> whose elements are sorted in descending order according to a key.
  overload: System.Linq.Queryable.OrderByDescending<TSource,TKey>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: OrderByDescending<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  nameWithType: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  fullName: System.Linq.Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Sorts the elements of a sequence in descending order by using a specified comparer.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The OrderByDescending(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling OrderByDescending(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling OrderByDescending(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it sorts the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`. The `comparer` parameter is used to compare keys."
  example:
  - "The following code example demonstrates how to use OrderByDescending(TSource, to sort the elements of a sequence in descending order by using a custom comparer.  \n  \n [!code-cs[System.Linq.Queryable#71](~/add/codesnippet/csharp/c2e5ccce-1558-49d7-ae69-_1.cs)]\n [!code-vb[System.Linq.Queryable#71](~/add/codesnippet/visualbasic/c2e5ccce-1558-49d7-ae69-_1.vb)]"
  syntax:
    content: public static System.Linq.IOrderedQueryable<TSource> OrderByDescending<TSource,TKey> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract a key from an element.
    - id: comparer
      type: System.Collections.Generic.IComparer{TKey}
      description: An <xref href="stem.Collections.Generic.IComparer%601"></xref> to compare keys.
    return:
      type: System.Linq.IOrderedQueryable{TSource}
      description: An <xref href="stem.Linq.IOrderedQueryable%601"></xref> whose elements are sorted in descending order according to a key.
  overload: System.Linq.Queryable.OrderByDescending<TSource,TKey>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})
  id: Reverse``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Reverse<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Reverse<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Reverse<TSource>(IQueryable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Inverts the order of the elements in a sequence.
  remarks: "The Reverse(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Reverse(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Reverse(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it reverses the order of the elements in `source`."
  example:
  - "The following code example demonstrates how to use Reverse(TSource) to reverse the order of elements in an array.  \n  \n [!code-cs[System.Linq.Queryable#74](~/add/codesnippet/csharp/m-system.linq.queryable._3_1.cs)]\n [!code-vb[System.Linq.Queryable#74](~/add/codesnippet/visualbasic/m-system.linq.queryable._3_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> Reverse<TSource> (this System.Linq.IQueryable<TSource> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to reverse.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements correspond to those of the input sequence in reverse order.
  overload: System.Linq.Queryable.Reverse<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})
  id: Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Select<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,TResult>>)
  nameWithType: Queryable.Select<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,TResult>>)
  fullName: System.Linq.Queryable.Select<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,TResult>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Projects each element of a sequence into a new form by incorporating the element's index.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Select(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Select(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Select(TSource, depend on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into a different form."
  example:
  - "The following code example demonstrates how to use Select(TSource, to project over a sequence of values and use the index of each element in the projected form.  \n  \n [!code-cs[System.Linq.Queryable#76](~/add/codesnippet/csharp/cd1209ee-b649-4fa3-879a-_1.cs)]\n [!code-vb[System.Linq.Queryable#76](~/add/codesnippet/visualbasic/cd1209ee-b649-4fa3-879a-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TResult> Select<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,TResult>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to project.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,TResult}}
      description: A projection function to apply to each element.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements are the result of invoking a projection function on each element of <code>source</code>.
  overload: System.Linq.Queryable.Select<TSource,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Select<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
  nameWithType: Queryable.Select<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
  fullName: System.Linq.Queryable.Select<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Projects each element of a sequence into a new form.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Select(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Select(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Select(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into a different form."
  example:
  - "The following code example demonstrates how to use Select(TSource, to project over a sequence of values.  \n  \n [!code-cs[System.Linq.Queryable#75](~/add/codesnippet/csharp/39151298-4390-449a-b48e-_1.cs)]\n [!code-vb[System.Linq.Queryable#75](~/add/codesnippet/visualbasic/39151298-4390-449a-b48e-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TResult> Select<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TResult>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to project.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TResult}}
      description: A projection function to apply to each element.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements are the result of invoking a projection function on each element of <code>source</code>.
  overload: System.Linq.Queryable.Select<TSource,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  id: SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: SelectMany<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,IEnumerable<TResult>>>)
  nameWithType: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,IEnumerable<TResult>>>)
  fullName: System.Linq.Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,IEnumerable<TResult>>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Projects each element of a sequence to an <xref href="stem.Collections.Generic.IEnumerable%601"></xref> and combines the resulting sequences into one sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The SelectMany(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling SelectMany(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling SelectMany(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into an enumerable form. It then concatenates the enumerable results into a single, one-dimensional sequence."
  example:
  - "The following code example demonstrates how to use SelectMany(TSource, to perform a one-to-many projection over an array.  \n  \n [!code-cs[System.Linq.Queryable#77](~/add/codesnippet/csharp/c0fd2fef-30c6-4e96-a8e6-_1.cs)]\n [!code-vb[System.Linq.Queryable#77](~/add/codesnippet/visualbasic/c0fd2fef-30c6-4e96-a8e6-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TResult> SelectMany<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,System.Collections.Generic.IEnumerable<TResult>>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to project.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Collections.Generic.IEnumerable{TResult}}}
      description: A projection function to apply to each element.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.
  overload: System.Linq.Queryable.SelectMany<TSource,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  id: SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: SelectMany<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,IEnumerable<TResult>>>)
  nameWithType: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,IEnumerable<TResult>>>)
  fullName: System.Linq.Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,IEnumerable<TResult>>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Projects each element of a sequence to an <xref href="stem.Collections.Generic.IEnumerable%601"></xref> and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The SelectMany(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling SelectMany(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling SelectMany(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` to project it into an enumerable form. Each enumerable result incorporates the index of the source element. It then concatenates the enumerable results into a single, one-dimensional sequence."
  example:
  - "The following code example demonstrates how to use SelectMany(TSource, to perform a one-to-many projection over an array and use the index of each source element.  \n  \n [!code-cs[System.Linq.Queryable#78](~/add/codesnippet/csharp/9299310a-cd3d-40ea-aa2b-_1.cs)]\n [!code-vb[System.Linq.Queryable#78](~/add/codesnippet/visualbasic/9299310a-cd3d-40ea-aa2b-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TResult> SelectMany<TSource,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,System.Collections.Generic.IEnumerable<TResult>>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to project.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Collections.Generic.IEnumerable{TResult}}}
      description: A projection function to apply to each element; the second parameter of this function represents the index of the source element.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.
  overload: System.Linq.Queryable.SelectMany<TSource,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  id: SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>,Expression<Func<TSource,IEnumerable<TCollection>>>,Expression<Func<TSource,TCollection,TResult>>)
  nameWithType: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>,Expression<Func<TSource,IEnumerable<TCollection>>>,Expression<Func<TSource,TCollection,TResult>>)
  fullName: System.Linq.Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>,Expression<Func<TSource,IEnumerable<TCollection>>>,Expression<Func<TSource,TCollection,TResult>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Projects each element of a sequence to an <xref href="stem.Collections.Generic.IEnumerable%601"></xref> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The SelectMany(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling SelectMany(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling SelectMany(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `collectionSelector` on each element of `source` to project it into an enumerable form. Then the function represented by `resultSelector` is invoked on each element in each intermediate sequence. The resulting values are concatenated into a single, one-dimensional sequence."
  example:
  - "The following code example demonstrates how to use SelectMany(TSource, to perform a one-to-many projection over an array. This example uses a result selector function to keep the source element that corresponds to each intermediate sequence in scope for the final call to `Select`.  \n  \n [!code-cs[System.Linq.Queryable#124](~/add/codesnippet/csharp/3c3c92f9-94fc-432c-95b9-_1.cs)]\n [!code-vb[System.Linq.Queryable#124](~/add/codesnippet/visualbasic/3c3c92f9-94fc-432c-95b9-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TResult> SelectMany<TSource,TCollection,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<Func<TSource,TCollection,TResult>> resultSelector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to project.
    - id: collectionSelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Collections.Generic.IEnumerable{TCollection}}}
      description: A projection function to apply to each element of the input sequence.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TCollection,TResult}}
      description: A projection function to apply to each element of each intermediate sequence.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements are the result of invoking the one-to-many projection function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding <code>source</code> element to a result element.
  overload: System.Linq.Queryable.SelectMany<TSource,TCollection,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  id: SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,IEnumerable<TCollection>>>,Expression<Func<TSource,TCollection,TResult>>)
  nameWithType: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,IEnumerable<TCollection>>>,Expression<Func<TSource,TCollection,TResult>>)
  fullName: System.Linq.Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,IEnumerable<TCollection>>>,Expression<Func<TSource,TCollection,TResult>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Projects each element of a sequence to an <xref href="stem.Collections.Generic.IEnumerable%601"></xref> that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The SelectMany(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling SelectMany(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling SelectMany(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `collectionSelector` on each element of `source` to project it into an enumerable form. Each enumerable result incorporates the source element's index. Then the function represented by `resultSelector` is invoked on each element in each intermediate sequence. The resulting values are concatenated into a single, one-dimensional sequence."
  syntax:
    content: public static System.Linq.IQueryable<TResult> SelectMany<TSource,TCollection,TResult> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<Func<TSource,TCollection,TResult>> resultSelector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values to project.
    - id: collectionSelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Collections.Generic.IEnumerable{TCollection}}}
      description: A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TCollection,TResult}}
      description: A projection function to apply to each element of each intermediate sequence.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements are the result of invoking the one-to-many projection function <code>collectionSelector</code> on each element of <code>source</code> and then mapping each of those sequence elements and their corresponding <code>source</code> element to a result element.
  overload: System.Linq.Queryable.SelectMany<TSource,TCollection,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>collectionSelector</code> or <code>resultSelector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: SequenceEqual<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  nameWithType: Queryable.SequenceEqual<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  fullName: System.Linq.Queryable.SequenceEqual<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Determines whether two sequences are equal by using the default equality comparer to compare elements.
  remarks: "The SequenceEqual(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling SequenceEqual(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling SequenceEqual(TSource) depends on the implementation of the type of the `source1` parameter. The expected behavior is that it determines if the two source sequences are equal."
  example:
  - "The following code example demonstrates how to use SequenceEqual(TSource) to determine whether two sequences are equal. In this example the sequences are equal.  \n  \n [!code-cs[System.Linq.Queryable#32](~/add/codesnippet/csharp/1f37cb15-c49c-4e18-baaa-_1.cs)]\n [!code-vb[System.Linq.Queryable#32](~/add/codesnippet/visualbasic/1f37cb15-c49c-4e18-baaa-_1.vb)]  \n  \n The following code example compares two sequences that are not equal.  \n  \n [!code-cs[System.Linq.Queryable#33](~/add/codesnippet/csharp/1f37cb15-c49c-4e18-baaa-_2.cs)]\n [!code-vb[System.Linq.Queryable#33](~/add/codesnippet/visualbasic/1f37cb15-c49c-4e18-baaa-_2.vb)]"
  syntax:
    content: public static bool SequenceEqual<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2);
    parameters:
    - id: source1
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements to compare to those of <code>source2</code>.
    - id: source2
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An <xref href="stem.Collections.Generic.IEnumerable%601"></xref> whose elements to compare to those of the first sequence.
    return:
      type: System.Boolean
      description: '`true` if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, `false`.'
  overload: System.Linq.Queryable.SequenceEqual<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source1</code> or <code>source2</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: SequenceEqual<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  nameWithType: Queryable.SequenceEqual<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.SequenceEqual<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Determines whether two sequences are equal by using a specified <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> to compare elements.
  remarks: "The SequenceEqual(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling SequenceEqual(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling SequenceEqual(TSource) depends on the implementation of the type of the `source1` parameter. The expected behavior is that it determines if the two source sequences are equal by using `comparer` to compare elements."
  syntax:
    content: public static bool SequenceEqual<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer);
    parameters:
    - id: source1
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> whose elements to compare to those of <code>source2</code>.
    - id: source2
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An <xref href="stem.Collections.Generic.IEnumerable%601"></xref> whose elements to compare to those of the first sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TSource}
      description: An <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> to use to compare elements.
    return:
      type: System.Boolean
      description: '`true` if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, `false`.'
  overload: System.Linq.Queryable.SequenceEqual<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source1</code> or <code>source2</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})
  id: Single``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Single<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Single<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Single<TSource>(IQueryable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
  remarks: "The Single(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Single(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Single(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source`."
  example:
  - "The following code example demonstrates how to use Single(TSource) to select the only element of an array.  \n  \n [!code-cs[System.Linq.Queryable#79](~/add/codesnippet/csharp/m-system.linq.queryable._29_1.cs)]\n [!code-vb[System.Linq.Queryable#79](~/add/codesnippet/visualbasic/m-system.linq.queryable._29_1.vb)]"
  syntax:
    content: public static TSource Single<TSource> (this System.Linq.IQueryable<TSource> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to return the single element of.
    return:
      type: TSource
      description: The single element of the input sequence.
  overload: System.Linq.Queryable.Single<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>source</code> has more than one element.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Single<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.Single<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.Single<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Single(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Single(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Single(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source` that satisfies the condition specified by `predicate`."
  example:
  - "The following code example demonstrates how to use Single(TSource) to select the only element of an array that satisfies a condition.  \n  \n [!code-cs[System.Linq.Queryable#81](~/add/codesnippet/csharp/87268c27-1c09-478b-9f04-_1.cs)]\n [!code-vb[System.Linq.Queryable#81](~/add/codesnippet/visualbasic/87268c27-1c09-478b-9f04-_1.vb)]"
  syntax:
    content: public static TSource Single<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to return a single element from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}
      description: A function to test an element for a condition.
    return:
      type: TSource
      description: The single element of the input sequence that satisfies the condition in <code>predicate</code>.
  overload: System.Linq.Queryable.Single<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "No element satisfies the condition in <code>predicate</code>.  \n  \n -or-  \n  \n More than one element satisfies the condition in <code>predicate</code>.  \n  \n -or-  \n  \n The source sequence is empty."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})
  id: SingleOrDefault``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: SingleOrDefault<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.SingleOrDefault<TSource>(IQueryable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
  remarks: "The SingleOrDefault(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling SingleOrDefault(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling SingleOrDefault(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source`, or a default value if `source` is empty.  \n  \n The <xref:System.Linq.Queryable.SingleOrDefault%2A> method does not provide a way to specify a default value. If you want to specify a default value other than `default`(`TSource`), use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method as described in the Example section."
  example:
  - "The following code example demonstrates how to use SingleOrDefault(TSource) to select the only element of an array. The second query demonstrates that SingleOrDefault(TSource) returns a default value when the sequence does not contain exactly one element.  \n  \n [!code-cs[System.Linq.Queryable#83](~/add/codesnippet/csharp/m-system.linq.queryable._21_1.cs)]\n [!code-vb[System.Linq.Queryable#83](~/add/codesnippet/visualbasic/m-system.linq.queryable._21_1.vb)]  \n  \n Sometimes the value of `default`(`TSource`) is not the default value that you want to use if the collection contains no elements. Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty. Then, call <xref:System.Linq.Queryable.Single%60%601%28System.Linq.IQueryable%7B%60%600%7D%29> to obtain the element. The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty. Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead. The first result variable is checked for the unwanted default value after the query is completed. The second result variable is obtained by calling <xref:System.Linq.Queryable.DefaultIfEmpty%60%601%28System.Linq.IQueryable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.  \n  \n [!code-cs[System.Linq.Queryable#133](~/add/codesnippet/csharp/m-system.linq.queryable._21_2.cs)]\n [!code-vb[System.Linq.Queryable#133](~/add/codesnippet/visualbasic/m-system.linq.queryable._21_2.vb)]"
  syntax:
    content: public static TSource SingleOrDefault<TSource> (this System.Linq.IQueryable<TSource> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to return the single element of.
    return:
      type: TSource
      description: The single element of the input sequence, or <code>default</code>(<code>TSource</code>) if the sequence contains no elements.
  overload: System.Linq.Queryable.SingleOrDefault<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>source</code> has more than one element.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: SingleOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.SingleOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The SingleOrDefault(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling SingleOrDefault(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling SingleOrDefault(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the only element in `source` that satisfies the condition specified by `predicate`, or a default value if no such element exists."
  example:
  - "The following code example demonstrates how to use SingleOrDefault(TSource) to select the only element of an array that satisfies a condition. The second query demonstrates that SingleOrDefault(TSource) returns a default value when the sequence does not contain exactly one element that satisfies the condition.  \n  \n [!code-cs[System.Linq.Queryable#85](~/add/codesnippet/csharp/91644c4d-63d8-4816-9b6a-_1.cs)]\n [!code-vb[System.Linq.Queryable#85](~/add/codesnippet/visualbasic/91644c4d-63d8-4816-9b6a-_1.vb)]"
  syntax:
    content: public static TSource SingleOrDefault<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to return a single element from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}
      description: A function to test an element for a condition.
    return:
      type: TSource
      description: The single element of the input sequence that satisfies the condition in <code>predicate</code>, or <code>default</code>(<code>TSource</code>) if no such element is found.
  overload: System.Linq.Queryable.SingleOrDefault<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: More than one element satisfies the condition in <code>predicate</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)
  id: Skip``1(System.Linq.IQueryable{``0},System.Int32)
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Skip<TSource>(IQueryable<TSource>,Int32)
  nameWithType: Queryable.Skip<TSource>(IQueryable<TSource>,Int32)
  fullName: System.Linq.Queryable.Skip<TSource>(IQueryable<TSource>,Int32)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Bypasses a specified number of elements in a sequence and then returns the remaining elements.
  remarks: "The Skip(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Skip(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Skip(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it skips the first `count` elements in `source` and returns the remaining elements."
  example:
  - "The following code example demonstrates how to use Skip(TSource) to skip a specified number of elements in a sorted array and return the remaining elements.  \n  \n [!code-cs[System.Linq.Queryable#87](~/add/codesnippet/csharp/m-system.linq.queryable._7_1.cs)]\n [!code-vb[System.Linq.Queryable#87](~/add/codesnippet/visualbasic/m-system.linq.queryable._7_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> Skip<TSource> (this System.Linq.IQueryable<TSource> source, int count);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to return elements from.
    - id: count
      type: System.Int32
      description: The number of elements to skip before returning the remaining elements.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains elements that occur after the specified index in the input sequence.
  overload: System.Linq.Queryable.Skip<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: SkipWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.SkipWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.SkipWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The SkipWhile(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling SkipWhile(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling SkipWhile(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns false. That element and all the remaining elements are returned."
  example:
  - "The following code example demonstrates how to use SkipWhile(TSource) to skip elements of an array as long as a condition is true.  \n  \n [!code-cs[System.Linq.Queryable#88](~/add/codesnippet/csharp/a93853a9-5869-4383-ac12-_1.cs)]\n [!code-vb[System.Linq.Queryable#88](~/add/codesnippet/visualbasic/a93853a9-5869-4383-ac12-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> SkipWhile<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to return elements from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}
      description: A function to test each element for a condition.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains elements from <code>source</code> starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>.
  overload: System.Linq.Queryable.SkipWhile<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  id: SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: SkipWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
  nameWithType: Queryable.SkipWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
  fullName: System.Linq.Queryable.SkipWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The SkipWhile(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling SkipWhile(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling SkipWhile(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns false. That element and all the remaining elements are returned. The index of each source element is provided as the second argument to `predicate`."
  example:
  - "The following code example demonstrates how to use SkipWhile(TSource) to skip elements of an array as long as a condition that depends on the element's index is true.  \n  \n [!code-cs[System.Linq.Queryable#89](~/add/codesnippet/csharp/15c6ad64-f3cc-4342-a70f-_1.cs)]\n [!code-vb[System.Linq.Queryable#89](~/add/codesnippet/visualbasic/15c6ad64-f3cc-4342-a70f-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> SkipWhile<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to return elements from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Boolean}}
      description: A function to test each element for a condition; the second parameter of this function represents the index of the source element.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains elements from <code>source</code> starting at the first element in the linear series that does not pass the test specified by <code>predicate</code>.
  overload: System.Linq.Queryable.SkipWhile<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})
  id: Sum(System.Linq.IQueryable{System.Decimal})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum(IQueryable<Decimal>)
  nameWithType: Queryable.Sum(IQueryable<Decimal>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Decimal>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of a sequence of <xref href="System.Decimal"></xref> values.
  remarks: "The Sum method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> to sum the values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#120](~/add/codesnippet/csharp/m-system.linq.queryable._14_1.cs)]\n [!code-vb[System.Linq.Queryable#120](~/add/codesnippet/visualbasic/m-system.linq.queryable._14_1.vb)]"
  syntax:
    content: public static decimal Sum (this System.Linq.IQueryable<decimal> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Decimal}
      description: A sequence of <xref href="System.Decimal"></xref> values to calculate the sum of.
    return:
      type: System.Decimal
      description: The sum of the values in the sequence.
  overload: System.Linq.Queryable.Sum*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Decimal"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})
  id: Sum(System.Linq.IQueryable{System.Double})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum(IQueryable<Double>)
  nameWithType: Queryable.Sum(IQueryable<Double>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Double>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of a sequence of <xref href="System.Double"></xref> values.
  remarks: "The Sum method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> to sum the values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#120](~/add/codesnippet/csharp/m-system.linq.queryable._1_1.cs)]\n [!code-vb[System.Linq.Queryable#120](~/add/codesnippet/visualbasic/m-system.linq.queryable._1_1.vb)]"
  syntax:
    content: public static double Sum (this System.Linq.IQueryable<double> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Double}
      description: A sequence of <xref href="System.Double"></xref> values to calculate the sum of.
    return:
      type: System.Double
      description: The sum of the values in the sequence.
  overload: System.Linq.Queryable.Sum*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})
  id: Sum(System.Linq.IQueryable{System.Int32})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum(IQueryable<Int32>)
  nameWithType: Queryable.Sum(IQueryable<Int32>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Int32>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of a sequence of <xref href="System.Int32"></xref> values.
  remarks: "The Sum method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> to sum the values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#120](~/add/codesnippet/csharp/m-system.linq.queryable._11_1.cs)]\n [!code-vb[System.Linq.Queryable#120](~/add/codesnippet/visualbasic/m-system.linq.queryable._11_1.vb)]"
  syntax:
    content: public static int Sum (this System.Linq.IQueryable<int> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int32}
      description: A sequence of <xref href="System.Int32"></xref> values to calculate the sum of.
    return:
      type: System.Int32
      description: The sum of the values in the sequence.
  overload: System.Linq.Queryable.Sum*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int32"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})
  id: Sum(System.Linq.IQueryable{System.Int64})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum(IQueryable<Int64>)
  nameWithType: Queryable.Sum(IQueryable<Int64>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Int64>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of a sequence of <xref href="System.Int64"></xref> values.
  remarks: "The Sum method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Single%7D%29> to sum the values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#120](~/add/codesnippet/csharp/m-system.linq.queryable._2_1.cs)]\n [!code-vb[System.Linq.Queryable#120](~/add/codesnippet/visualbasic/m-system.linq.queryable._2_1.vb)]"
  syntax:
    content: public static long Sum (this System.Linq.IQueryable<long> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int64}
      description: A sequence of <xref href="System.Int64"></xref> values to calculate the sum of.
    return:
      type: System.Int64
      description: The sum of the values in the sequence.
  overload: System.Linq.Queryable.Sum*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int64"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  id: Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum(IQueryable<Nullable<Decimal>>)
  nameWithType: Queryable.Sum(IQueryable<Nullable<Decimal>>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Nullable<Decimal>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of a sequence of nullable <xref href="System.Decimal"></xref> values.
  remarks: "The Sum method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#121](~/add/codesnippet/csharp/4596bd95-a310-4e87-b179-_1.cs)]\n [!code-vb[System.Linq.Queryable#121](~/add/codesnippet/visualbasic/4596bd95-a310-4e87-b179-_1.vb)]"
  syntax:
    content: public static Nullable<decimal> Sum (this System.Linq.IQueryable<Nullable<decimal>> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Decimal}}
      description: A sequence of nullable <xref href="System.Decimal"></xref> values to calculate the sum of.
    return:
      type: System.Nullable{System.Decimal}
      description: The sum of the values in the sequence.
  overload: System.Linq.Queryable.Sum*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Decimal"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})
  id: Sum(System.Linq.IQueryable{System.Nullable{System.Double}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum(IQueryable<Nullable<Double>>)
  nameWithType: Queryable.Sum(IQueryable<Nullable<Double>>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Nullable<Double>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of a sequence of nullable <xref href="System.Double"></xref> values.
  remarks: "The Sum method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#121](~/add/codesnippet/csharp/921b489f-5731-48ad-b6ef-_1.cs)]\n [!code-vb[System.Linq.Queryable#121](~/add/codesnippet/visualbasic/921b489f-5731-48ad-b6ef-_1.vb)]"
  syntax:
    content: public static Nullable<double> Sum (this System.Linq.IQueryable<Nullable<double>> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Double}}
      description: A sequence of nullable <xref href="System.Double"></xref> values to calculate the sum of.
    return:
      type: System.Nullable{System.Double}
      description: The sum of the values in the sequence.
  overload: System.Linq.Queryable.Sum*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})
  id: Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum(IQueryable<Nullable<Int32>>)
  nameWithType: Queryable.Sum(IQueryable<Nullable<Int32>>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Nullable<Int32>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of a sequence of nullable <xref href="System.Int32"></xref> values.
  remarks: "The Sum method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#121](~/add/codesnippet/csharp/dd5b3c8d-bcb8-4144-901b-_1.cs)]\n [!code-vb[System.Linq.Queryable#121](~/add/codesnippet/visualbasic/dd5b3c8d-bcb8-4144-901b-_1.vb)]"
  syntax:
    content: public static Nullable<int> Sum (this System.Linq.IQueryable<Nullable<int>> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int32}}
      description: A sequence of nullable <xref href="System.Int32"></xref> values to calculate the sum of.
    return:
      type: System.Nullable{System.Int32}
      description: The sum of the values in the sequence.
  overload: System.Linq.Queryable.Sum*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int32"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})
  id: Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum(IQueryable<Nullable<Int64>>)
  nameWithType: Queryable.Sum(IQueryable<Nullable<Int64>>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Nullable<Int64>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of a sequence of nullable <xref href="System.Int64"></xref> values.
  remarks: "The Sum method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%28System.Linq.IQueryable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_elementtype](~/add/includes/sqo-diff-overload-example-elementtype-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#121](~/add/codesnippet/csharp/2f4d31fc-fc82-4348-95d5-_1.cs)]\n [!code-vb[System.Linq.Queryable#121](~/add/codesnippet/visualbasic/2f4d31fc-fc82-4348-95d5-_1.vb)]"
  syntax:
    content: public static Nullable<long> Sum (this System.Linq.IQueryable<Nullable<long>> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int64}}
      description: A sequence of nullable <xref href="System.Int64"></xref> values to calculate the sum of.
    return:
      type: System.Nullable{System.Int64}
      description: The sum of the values in the sequence.
  overload: System.Linq.Queryable.Sum*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int64"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})
  id: Sum(System.Linq.IQueryable{System.Nullable{System.Single}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum(IQueryable<Nullable<Single>>)
  nameWithType: Queryable.Sum(IQueryable<Nullable<Single>>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Nullable<Single>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of a sequence of nullable <xref href="System.Single"></xref> values.
  remarks: "The Sum method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`."
  example:
  - "The following code example demonstrates how to use Sum to sum the values of a sequence.  \n  \n [!code-cs[System.Linq.Queryable#121](~/add/codesnippet/csharp/4d393d0e-28d4-40c6-92cd-_1.cs)]\n [!code-vb[System.Linq.Queryable#121](~/add/codesnippet/visualbasic/4d393d0e-28d4-40c6-92cd-_1.vb)]"
  syntax:
    content: public static Nullable<float> Sum (this System.Linq.IQueryable<Nullable<float>> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Single}}
      description: A sequence of nullable <xref href="System.Single"></xref> values to calculate the sum of.
    return:
      type: System.Nullable{System.Single}
      description: The sum of the values in the sequence.
  overload: System.Linq.Queryable.Sum*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})
  id: Sum(System.Linq.IQueryable{System.Single})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum(IQueryable<Single>)
  nameWithType: Queryable.Sum(IQueryable<Single>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Single>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of a sequence of <xref href="System.Single"></xref> values.
  remarks: "The Sum method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the sum of the values in `source`."
  example:
  - "The following code example demonstrates how to use Sum to sum the values of a sequence.  \n  \n [!code-cs[System.Linq.Queryable#120](~/add/codesnippet/csharp/m-system.linq.queryable._28_1.cs)]\n [!code-vb[System.Linq.Queryable#120](~/add/codesnippet/visualbasic/m-system.linq.queryable._28_1.vb)]"
  syntax:
    content: public static float Sum (this System.Linq.IQueryable<float> source);
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Single}
      description: A sequence of <xref href="System.Single"></xref> values to calculate the sum of.
    return:
      type: System.Single
      description: The sum of the values in the sequence.
  overload: System.Linq.Queryable.Sum*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Decimal>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Decimal>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Decimal>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of the sequence of <xref href="System.Decimal"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Sum(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#98](~/add/codesnippet/csharp/a7282fd0-a842-4bfb-8db5-_1.cs)]\n [!code-vb[System.Linq.Queryable#98](~/add/codesnippet/visualbasic/a7282fd0-a842-4bfb-8db5-_1.vb)]"
  syntax:
    content: public static decimal Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,decimal>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values of type <code>TSource</code>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Decimal}}
      description: A projection function to apply to each element.
    return:
      type: System.Decimal
      description: The sum of the projected values.
  overload: System.Linq.Queryable.Sum<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Decimal"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Double>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Double>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Double>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of the sequence of <xref href="System.Double"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Sum(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of he `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."
  example:
  - "The following code example demonstrates how to use Sum(TSource) to sum the projected values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#98](~/add/codesnippet/csharp/3af51c01-815b-4531-91bd-_1.cs)]\n [!code-vb[System.Linq.Queryable#98](~/add/codesnippet/visualbasic/3af51c01-815b-4531-91bd-_1.vb)]"
  syntax:
    content: public static double Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,double>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values of type <code>TSource</code>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Double}}
      description: A projection function to apply to each element.
    return:
      type: System.Double
      description: The sum of the projected values.
  overload: System.Linq.Queryable.Sum<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of the sequence of <xref href="System.Int32"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Sum(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#98](~/add/codesnippet/csharp/1fc310b6-7cb4-41f6-941b-_1.cs)]\n [!code-vb[System.Linq.Queryable#98](~/add/codesnippet/visualbasic/1fc310b6-7cb4-41f6-941b-_1.vb)]"
  syntax:
    content: public static int Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values of type <code>TSource</code>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32}}
      description: A projection function to apply to each element.
    return:
      type: System.Int32
      description: The sum of the projected values.
  overload: System.Linq.Queryable.Sum<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int32"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int64>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int64>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int64>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of the sequence of <xref href="System.Int64"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Sum(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#98](~/add/codesnippet/csharp/410d1ce4-d2cc-4fd9-8e38-_1.cs)]\n [!code-vb[System.Linq.Queryable#98](~/add/codesnippet/visualbasic/410d1ce4-d2cc-4fd9-8e38-_1.vb)]"
  syntax:
    content: public static long Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,long>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values of type <code>TSource</code>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int64}}
      description: A projection function to apply to each element.
    return:
      type: System.Int64
      description: The sum of the projected values.
  overload: System.Linq.Queryable.Sum<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int64"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Decimal>>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Decimal>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Decimal>>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of the sequence of nullable <xref href="System.Decimal"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Sum(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#98](~/add/codesnippet/csharp/ad51c72d-6b33-4b64-b582-_1.cs)]\n [!code-vb[System.Linq.Queryable#98](~/add/codesnippet/visualbasic/ad51c72d-6b33-4b64-b582-_1.vb)]"
  syntax:
    content: public static Nullable<decimal> Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<decimal>>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values of type <code>TSource</code>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Decimal}}}
      description: A projection function to apply to each element.
    return:
      type: System.Nullable{System.Decimal}
      description: The sum of the projected values.
  overload: System.Linq.Queryable.Sum<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Decimal"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Double>>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Double>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Double>>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of the sequence of nullable <xref href="System.Double"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Sum(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#98](~/add/codesnippet/csharp/2fdce7cd-76da-4f42-b44c-_1.cs)]\n [!code-vb[System.Linq.Queryable#98](~/add/codesnippet/visualbasic/2fdce7cd-76da-4f42-b44c-_1.vb)]"
  syntax:
    content: public static Nullable<double> Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<double>>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values of type <code>TSource</code>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Double}}}
      description: A projection function to apply to each element.
    return:
      type: System.Nullable{System.Double}
      description: The sum of the projected values.
  overload: System.Linq.Queryable.Sum<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int32>>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int32>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int32>>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of the sequence of nullable <xref href="System.Int32"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Sum(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#98](~/add/codesnippet/csharp/7d944bd0-6ed9-41de-8210-_1.cs)]\n [!code-vb[System.Linq.Queryable#98](~/add/codesnippet/visualbasic/7d944bd0-6ed9-41de-8210-_1.vb)]"
  syntax:
    content: public static Nullable<int> Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<int>>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values of type <code>TSource</code>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Int32}}}
      description: A projection function to apply to each element.
    return:
      type: System.Nullable{System.Int32}
      description: The sum of the projected values.
  overload: System.Linq.Queryable.Sum<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int32"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int64>>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int64>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int64>>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of the sequence of nullable <xref href="System.Int64"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Sum(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#98](~/add/codesnippet/csharp/9e8e6e3d-5fda-4150-ba89-_1.cs)]\n [!code-vb[System.Linq.Queryable#98](~/add/codesnippet/visualbasic/9e8e6e3d-5fda-4150-ba89-_1.vb)]"
  syntax:
    content: public static Nullable<long> Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<long>>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values of type <code>TSource</code>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Int64}}}
      description: A projection function to apply to each element.
    return:
      type: System.Nullable{System.Int64}
      description: The sum of the projected values.
  overload: System.Linq.Queryable.Sum<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int64"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Single>>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Single>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Single>>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of the sequence of nullable <xref href="System.Single"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Sum(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#98](~/add/codesnippet/csharp/1a94489e-7f10-447d-adf1-_1.cs)]\n [!code-vb[System.Linq.Queryable#98](~/add/codesnippet/visualbasic/1a94489e-7f10-447d-adf1-_1.vb)]"
  syntax:
    content: public static Nullable<float> Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,Nullable<float>>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values of type <code>TSource</code>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Single}}}
      description: A projection function to apply to each element.
    return:
      type: System.Nullable{System.Single}
      description: The sum of the projected values.
  overload: System.Linq.Queryable.Sum<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Single>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Single>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Single>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Computes the sum of the sequence of <xref href="System.Single"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Sum(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Sum(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Sum(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it invokes `selector` on each element of `source` and returns the sum of the resulting values."
  example:
  - "The following code example demonstrates how to use <xref:System.Linq.Queryable.Sum%60%601%28System.Linq.IQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2CSystem.Double%7D%7D%29> to sum the projected values of a sequence.  \n  \n [!INCLUDE[sqo_diff_overload_example_func](~/add/includes/sqo-diff-overload-example-func-md.md)]  \n  \n [!code-cs[System.Linq.Queryable#98](~/add/codesnippet/csharp/e42a0863-26b7-4ec9-9f08-_1.cs)]\n [!code-vb[System.Linq.Queryable#98](~/add/codesnippet/visualbasic/e42a0863-26b7-4ec9-9f08-_1.vb)]"
  syntax:
    content: public static float Sum<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,float>> selector);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: A sequence of values of type <code>TSource</code>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Single}}
      description: A projection function to apply to each element.
    return:
      type: System.Single
      description: The sum of the projected values.
  overload: System.Linq.Queryable.Sum<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>selector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)
  id: Take``1(System.Linq.IQueryable{``0},System.Int32)
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Take<TSource>(IQueryable<TSource>,Int32)
  nameWithType: Queryable.Take<TSource>(IQueryable<TSource>,Int32)
  fullName: System.Linq.Queryable.Take<TSource>(IQueryable<TSource>,Int32)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns a specified number of contiguous elements from the start of a sequence.
  remarks: "The Take(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Take(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Take(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it takes the first `count` elements from the start of `source`."
  example:
  - "The following code example demonstrates how to use Take(TSource) to return elements from the start of a sequence.  \n  \n [!code-cs[System.Linq.Queryable#99](~/add/codesnippet/csharp/m-system.linq.queryable._8_1.cs)]\n [!code-vb[System.Linq.Queryable#99](~/add/codesnippet/visualbasic/m-system.linq.queryable._8_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> Take<TSource> (this System.Linq.IQueryable<TSource> source, int count);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: The sequence to return elements from.
    - id: count
      type: System.Int32
      description: The number of elements to return.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains the specified number of elements from the start of <code>source</code>.
  overload: System.Linq.Queryable.Take<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: TakeWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.TakeWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.TakeWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns elements from a sequence as long as a specified condition is true.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The TakeWhile(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling TakeWhile(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling TakeWhile(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns `false`. It returns all the elements up until that point."
  example:
  - "The following code example demonstrates how to use TakeWhile(TSource) to return elements from the start of a sequence as long as a condition is true.  \n  \n [!code-cs[System.Linq.Queryable#100](~/add/codesnippet/csharp/42d0f176-e85a-4c68-920e-_1.cs)]\n [!code-vb[System.Linq.Queryable#100](~/add/codesnippet/visualbasic/42d0f176-e85a-4c68-920e-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> TakeWhile<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: The sequence to return elements from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}
      description: A function to test each element for a condition.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains elements from the input sequence occurring before the element at which the test specified by <code>predicate</code> no longer passes.
  overload: System.Linq.Queryable.TakeWhile<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  id: TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: TakeWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
  nameWithType: Queryable.TakeWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
  fullName: System.Linq.Queryable.TakeWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The TakeWhile(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling TakeWhile(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling TakeWhile(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it applies `predicate` to each element in `source` until it finds an element for which `predicate` returns `false`. It returns all the elements up until that point. The index of each source element is provided as the second argument to `predicate`."
  example:
  - "The following code example demonstrates how to use TakeWhile(TSource) to return elements from the start of a sequence as long as a condition that uses the index of the element is true.  \n  \n [!code-cs[System.Linq.Queryable#101](~/add/codesnippet/csharp/cb0e6cd8-883e-47f0-a9f7-_1.cs)]\n [!code-vb[System.Linq.Queryable#101](~/add/codesnippet/visualbasic/cb0e6cd8-883e-47f0-a9f7-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> TakeWhile<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: The sequence to return elements from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Boolean}}
      description: A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains elements from the input sequence occurring before the element at which the test specified by <code>predicate</code> no longer passes.
  overload: System.Linq.Queryable.TakeWhile<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: ThenBy<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>)
  nameWithType: Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>)
  fullName: System.Linq.Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The ThenBy(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling ThenBy(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling ThenBy(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved."
  example:
  - "The following code example demonstrates how to use ThenBy(TSource, to perform a secondary ordering of the elements in a sequence.  \n  \n [!code-cs[System.Linq.Queryable#102](~/add/codesnippet/csharp/95314da9-bc1c-4a0e-ab0b-_1.cs)]\n [!code-vb[System.Linq.Queryable#102](~/add/codesnippet/visualbasic/95314da9-bc1c-4a0e-ab0b-_1.vb)]"
  syntax:
    content: public static System.Linq.IOrderedQueryable<TSource> ThenBy<TSource,TKey> (this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector);
    parameters:
    - id: source
      type: System.Linq.IOrderedQueryable{TSource}
      description: An <xref href="stem.Linq.IOrderedQueryable%601"></xref> that contains elements to sort.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract a key from each element.
    return:
      type: System.Linq.IOrderedQueryable{TSource}
      description: An <xref href="stem.Linq.IOrderedQueryable%601"></xref> whose elements are sorted according to a key.
  overload: System.Linq.Queryable.ThenBy<TSource,TKey>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: ThenBy<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  nameWithType: Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  fullName: System.Linq.Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The ThenBy(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling ThenBy(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling ThenBy(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved. The `comparer` parameter is used to compare key values."
  syntax:
    content: public static System.Linq.IOrderedQueryable<TSource> ThenBy<TSource,TKey> (this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer);
    parameters:
    - id: source
      type: System.Linq.IOrderedQueryable{TSource}
      description: An <xref href="stem.Linq.IOrderedQueryable%601"></xref> that contains elements to sort.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract a key from each element.
    - id: comparer
      type: System.Collections.Generic.IComparer{TKey}
      description: An <xref href="stem.Collections.Generic.IComparer%601"></xref> to compare keys.
    return:
      type: System.Linq.IOrderedQueryable{TSource}
      description: An <xref href="stem.Linq.IOrderedQueryable%601"></xref> whose elements are sorted according to a key.
  overload: System.Linq.Queryable.ThenBy<TSource,TKey>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>)
  nameWithType: Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>)
  fullName: System.Linq.Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The ThenByDescending(TSource, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling ThenByDescending(TSource, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling ThenByDescending(TSource, depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved."
  syntax:
    content: public static System.Linq.IOrderedQueryable<TSource> ThenByDescending<TSource,TKey> (this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector);
    parameters:
    - id: source
      type: System.Linq.IOrderedQueryable{TSource}
      description: An <xref href="stem.Linq.IOrderedQueryable%601"></xref> that contains elements to sort.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract a key from each element.
    return:
      type: System.Linq.IOrderedQueryable{TSource}
      description: An <xref href="stem.Linq.IOrderedQueryable%601"></xref> whose elements are sorted in descending order according to a key.
  overload: System.Linq.Queryable.ThenByDescending<TSource,TKey>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  nameWithType: Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  fullName: System.Linq.Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter. The result of calling <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> is cast to type <xref:System.Linq.IOrderedQueryable%601> and returned.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling <xref:System.Linq.Queryable.ThenBy%60%602%28System.Linq.IOrderedQueryable%7B%60%600%7D%2CSystem.Linq.Expressions.Expression%7BSystem.Func%7B%60%600%2C%60%601%7D%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> depends on the implementation of the type of the `source` parameter. The expected behavior is that it performs a secondary sort of the elements of `source` in descending order, based on the key obtained by invoking `keySelector` on each element of `source`. All previously established sort orders are preserved. The `comparer` parameter is used to compare key values."
  example:
  - "The following code example demonstrates how to use ThenByDescending(TSource, to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.  \n  \n [!code-cs[System.Linq.Queryable#103](~/add/codesnippet/csharp/059ad0eb-1820-488d-8344-_1.cs)]\n [!code-vb[System.Linq.Queryable#103](~/add/codesnippet/visualbasic/059ad0eb-1820-488d-8344-_1.vb)]"
  syntax:
    content: public static System.Linq.IOrderedQueryable<TSource> ThenByDescending<TSource,TKey> (this System.Linq.IOrderedQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer);
    parameters:
    - id: source
      type: System.Linq.IOrderedQueryable{TSource}
      description: An <xref href="stem.Linq.IOrderedQueryable%601"></xref> that contains elements to sort.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
      description: A function to extract a key from each element.
    - id: comparer
      type: System.Collections.Generic.IComparer{TKey}
      description: An <xref href="stem.Collections.Generic.IComparer%601"></xref> to compare keys.
    return:
      type: System.Linq.IOrderedQueryable{TSource}
      description: A collection whose elements are sorted in descending order according to a key.
  overload: System.Linq.Queryable.ThenByDescending<TSource,TKey>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>keySelector</code> or <code>comparer</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Union<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  nameWithType: Queryable.Union<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Union<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Produces the set union of two sequences by using the default equality comparer.
  remarks: "The Union(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Union(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Union(TSource) depends on the implementation of the type of the `source1` parameter. The expected behavior is that the set union of the elements in `source1` and `source2` is returned."
  example:
  - "The following code example demonstrates how to use Union(TSource) to obtain the set union of two sequences.  \n  \n [!code-cs[System.Linq.Queryable#109](~/add/codesnippet/csharp/cd3b6975-ad0a-4345-b516-_1.cs)]\n [!code-vb[System.Linq.Queryable#109](~/add/codesnippet/visualbasic/cd3b6975-ad0a-4345-b516-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> Union<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2);
    parameters:
    - id: source1
      type: System.Linq.IQueryable{TSource}
      description: A sequence whose distinct elements form the first set for the union operation.
    - id: source2
      type: System.Collections.Generic.IEnumerable{TSource}
      description: A sequence whose distinct elements form the second set for the union operation.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains the elements from both input sequences, excluding duplicates.
  overload: System.Linq.Queryable.Union<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source1</code> or <code>source2</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Union<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  nameWithType: Queryable.Union<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Union<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Produces the set union of two sequences by using a specified <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref>.
  remarks: "The Union(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Union(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Union(TSource) depends on the implementation of the type of the `source1` parameter. The expected behavior is that the set union of the elements in `source1` and `source2` is returned. The `comparer` parameter is used to compare values."
  syntax:
    content: public static System.Linq.IQueryable<TSource> Union<TSource> (this System.Linq.IQueryable<TSource> source1, System.Collections.Generic.IEnumerable<TSource> source2, System.Collections.Generic.IEqualityComparer<TSource> comparer);
    parameters:
    - id: source1
      type: System.Linq.IQueryable{TSource}
      description: A sequence whose distinct elements form the first set for the union operation.
    - id: source2
      type: System.Collections.Generic.IEnumerable{TSource}
      description: A sequence whose distinct elements form the second set for the union operation.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TSource}
      description: An <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> to compare values.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains the elements from both input sequences, excluding duplicates.
  overload: System.Linq.Queryable.Union<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source1</code> or <code>source2</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Where<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.Where<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.Where<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Filters a sequence of values based on a predicate.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Where(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Where(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Where(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the elements from `source` that satisfy the condition specified by `predicate`."
  example:
  - "The following code example demonstrates how to use Where(TSource) to filter a sequence.  \n  \n [!code-cs[System.Linq.Queryable#110](~/add/codesnippet/csharp/13a805c4-7e6f-4b45-a545-_1.cs)]\n [!code-vb[System.Linq.Queryable#110](~/add/codesnippet/visualbasic/13a805c4-7e6f-4b45-a545-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> Where<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to filter.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}
      description: A function to test each element for a condition.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains elements from the input sequence that satisfy the condition specified by <code>predicate</code>.
  overload: System.Linq.Queryable.Where<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  id: Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Where<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
  nameWithType: Queryable.Where<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
  fullName: System.Linq.Queryable.Where<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.
  remarks: "This method has at least one parameter of type <xref:System.Linq.Expressions.Expression%601> whose type argument is one of the <xref:System.Func%602> types. For these parameters, you can pass in a lambda expression and it will be compiled to an <xref:System.Linq.Expressions.Expression%601>.  \n  \n The Where(TSource) method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Where(TSource) itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source` parameter.  \n  \n The query behavior that occurs as a result of executing an expression tree that represents calling Where(TSource) depends on the implementation of the type of the `source` parameter. The expected behavior is that it returns the elements from `source` that satisfy the condition specified by `predicate`. The index of each source element is provided as the second argument to `predicate`."
  example:
  - "The following code example demonstrates how to use Where(TSource) to filter a sequence based on a predicate that incorporates the index of each element.  \n  \n [!code-cs[System.Linq.Queryable#111](~/add/codesnippet/csharp/0f42a680-4411-4c05-bb3c-_1.cs)]\n [!code-vb[System.Linq.Queryable#111](~/add/codesnippet/visualbasic/0f42a680-4411-4c05-bb3c-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TSource> Where<TSource> (this System.Linq.IQueryable<TSource> source, System.Linq.Expressions.Expression<Func<TSource,int,bool>> predicate);
    parameters:
    - id: source
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> to filter.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Boolean}}
      description: A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.
    return:
      type: System.Linq.IQueryable{TSource}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains elements from the input sequence that satisfy the condition specified by <code>predicate</code>.
  overload: System.Linq.Queryable.Where<TSource>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> or <code>predicate</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  id: Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  parent: System.Linq.Queryable
  langs:
  - csharp
  name: Zip<TFirst,TSecond,TResult>(IQueryable<TFirst>,IEnumerable<TSecond>,Expression<Func<TFirst,TSecond,TResult>>)
  nameWithType: Queryable.Zip<TFirst,TSecond,TResult>(IQueryable<TFirst>,IEnumerable<TSecond>,Expression<Func<TFirst,TSecond,TResult>>)
  fullName: System.Linq.Queryable.Zip<TFirst,TSecond,TResult>(IQueryable<TFirst>,IEnumerable<TSecond>,Expression<Func<TFirst,TSecond,TResult>>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Merges two sequences by using the specified predicate function.
  remarks: "The Zip(TFirst, method generates a <xref:System.Linq.Expressions.MethodCallExpression> that represents calling Zip(TFirst, itself as a constructed generic method. It then passes the <xref:System.Linq.Expressions.MethodCallExpression> to the <xref:System.Linq.IQueryProvider.CreateQuery%60%601%28System.Linq.Expressions.Expression%29> method of the <xref:System.Linq.IQueryProvider> represented by the <xref:System.Linq.IQueryable.Provider%2A> property of the `source1` parameter.  \n  \n The method merges each element of the first sequence with an element that has the same index in the second sequence. If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them. For example, if one sequence has three elements and the other one has four, the resulting sequence will have only three elements."
  example:
  - "The following code example demonstrates how to use the Zip(TFirst, method to merge two sequences.  \n  \n [!code-cs[System.Linq.Queryable#200](~/add/codesnippet/csharp/70056b74-8169-462e-9e2c-_1.cs)]\n [!code-vb[System.Linq.Queryable#200](~/add/codesnippet/visualbasic/70056b74-8169-462e-9e2c-_1.vb)]"
  syntax:
    content: public static System.Linq.IQueryable<TResult> Zip<TFirst,TSecond,TResult> (this System.Linq.IQueryable<TFirst> source1, System.Collections.Generic.IEnumerable<TSecond> source2, System.Linq.Expressions.Expression<Func<TFirst,TSecond,TResult>> resultSelector);
    parameters:
    - id: source1
      type: System.Linq.IQueryable{TFirst}
      description: The first sequence to merge.
    - id: source2
      type: System.Collections.Generic.IEnumerable{TSecond}
      description: The second sequence to merge.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{TFirst,TSecond,TResult}}
      description: A function that specifies how to merge the elements from the two sequences.
    return:
      type: System.Linq.IQueryable{TResult}
      description: An <xref href="stem.Linq.IQueryable%601"></xref> that contains merged elements of two input sequences.
  overload: System.Linq.Queryable.Zip<TFirst,TSecond,TResult>*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source1</code>or <code>source2 </code>is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Queryable.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Queryable.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidCastException
  parent: System
  isExternal: false
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.OverflowException
  parent: System
  isExternal: false
  name: OverflowException
  nameWithType: OverflowException
  fullName: System.OverflowException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Aggregate<TSource>(IQueryable<TSource>,Expression<Func<TSource,TSource,TSource>>)
  nameWithType: Queryable.Aggregate<TSource>(IQueryable<TSource>,Expression<Func<TSource,TSource,TSource>>)
  fullName: System.Linq.Queryable.Aggregate<TSource>(IQueryable<TSource>,Expression<Func<TSource,TSource,TSource>>)
- uid: TSource
  isExternal: true
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: System.Linq.IQueryable{TSource}
  parent: System.Linq
  isExternal: false
  name: IQueryable<TSource>
  nameWithType: IQueryable<TSource>
  fullName: System.Linq.IQueryable<TSource>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<TSource>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Expressions.Expression{System.Func{TSource,TSource,TSource}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,TSource,TSource>>
  nameWithType: Expression<Func<TSource,TSource,TSource>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,TSource,TSource>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,TSource,TSource>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<TSource,TSource,TSource>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Aggregate<TSource,TAccumulate>(IQueryable<TSource>,TAccumulate,Expression<Func<TAccumulate,TSource,TAccumulate>>)
  nameWithType: Queryable.Aggregate<TSource,TAccumulate>(IQueryable<TSource>,TAccumulate,Expression<Func<TAccumulate,TSource,TAccumulate>>)
  fullName: System.Linq.Queryable.Aggregate<TSource,TAccumulate>(IQueryable<TSource>,TAccumulate,Expression<Func<TAccumulate,TSource,TAccumulate>>)
- uid: TAccumulate
  isExternal: true
  name: TAccumulate
  nameWithType: TAccumulate
  fullName: TAccumulate
- uid: System.Linq.Expressions.Expression{System.Func{TAccumulate,TSource,TAccumulate}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TAccumulate,TSource,TAccumulate>>
  nameWithType: Expression<Func<TAccumulate,TSource,TAccumulate>>
  fullName: System.Linq.Expressions.Expression<System.Func<TAccumulate,TSource,TAccumulate>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TAccumulate,TSource,TAccumulate>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<TAccumulate,TSource,TAccumulate>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TAccumulate
    name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TAccumulate
    name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Aggregate<TSource,TAccumulate,TResult>(IQueryable<TSource>,TAccumulate,Expression<Func<TAccumulate,TSource,TAccumulate>>,Expression<Func<TAccumulate,TResult>>)
  nameWithType: Queryable.Aggregate<TSource,TAccumulate,TResult>(IQueryable<TSource>,TAccumulate,Expression<Func<TAccumulate,TSource,TAccumulate>>,Expression<Func<TAccumulate,TResult>>)
  fullName: System.Linq.Queryable.Aggregate<TSource,TAccumulate,TResult>(IQueryable<TSource>,TAccumulate,Expression<Func<TAccumulate,TSource,TAccumulate>>,Expression<Func<TAccumulate,TResult>>)
- uid: TResult
  isExternal: true
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Linq.Expressions.Expression{System.Func{TAccumulate,TResult}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TAccumulate,TResult>>
  nameWithType: Expression<Func<TAccumulate,TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TAccumulate,TResult>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TAccumulate,TResult>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TAccumulate,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TAccumulate
    name: TAccumulate
    nameWithType: TAccumulate
    fullName: TAccumulate
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: All<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.All<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.All<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Boolean}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,Boolean>>
  nameWithType: Expression<Func<TSource,Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Boolean>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Boolean>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Any<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Any<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Any<TSource>(IQueryable<TSource>)
- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Any<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.Any<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.Any<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  isExternal: false
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: System.Linq.Queryable.AsQueryable(IEnumerable)
- uid: System.Linq.IQueryable
  parent: System.Linq
  isExternal: false
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: AsQueryable<TElement>(IEnumerable<TElement>)
  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)
  fullName: System.Linq.Queryable.AsQueryable<TElement>(IEnumerable<TElement>)
- uid: System.Linq.IQueryable{TElement}
  parent: System.Linq
  isExternal: false
  name: IQueryable<TElement>
  nameWithType: IQueryable<TElement>
  fullName: System.Linq.IQueryable<TElement>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<TElement>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TElement
    name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IEnumerable{TElement}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TElement>
  nameWithType: IEnumerable<TElement>
  fullName: System.Collections.Generic.IEnumerable<TElement>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TElement>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TElement
    name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average(IQueryable<Decimal>)
  nameWithType: Queryable.Average(IQueryable<Decimal>)
  fullName: System.Linq.Queryable.Average(IQueryable<Decimal>)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Linq.IQueryable{System.Decimal}
  parent: System.Linq
  isExternal: false
  name: IQueryable<Decimal>
  nameWithType: IQueryable<Decimal>
  fullName: System.Linq.IQueryable<System.Decimal>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<System.Decimal>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: Decimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average(IQueryable<Double>)
  nameWithType: Queryable.Average(IQueryable<Double>)
  fullName: System.Linq.Queryable.Average(IQueryable<Double>)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Linq.IQueryable{System.Double}
  parent: System.Linq
  isExternal: false
  name: IQueryable<Double>
  nameWithType: IQueryable<Double>
  fullName: System.Linq.IQueryable<System.Double>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<System.Double>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: Double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average(IQueryable<Int32>)
  nameWithType: Queryable.Average(IQueryable<Int32>)
  fullName: System.Linq.Queryable.Average(IQueryable<Int32>)
- uid: System.Linq.IQueryable{System.Int32}
  parent: System.Linq
  isExternal: false
  name: IQueryable<Int32>
  nameWithType: IQueryable<Int32>
  fullName: System.Linq.IQueryable<System.Int32>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average(IQueryable<Int64>)
  nameWithType: Queryable.Average(IQueryable<Int64>)
  fullName: System.Linq.Queryable.Average(IQueryable<Int64>)
- uid: System.Linq.IQueryable{System.Int64}
  parent: System.Linq
  isExternal: false
  name: IQueryable<Int64>
  nameWithType: IQueryable<Int64>
  fullName: System.Linq.IQueryable<System.Int64>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<System.Int64>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average(IQueryable<Nullable<Decimal>>)
  nameWithType: Queryable.Average(IQueryable<Nullable<Decimal>>)
  fullName: System.Linq.Queryable.Average(IQueryable<Nullable<Decimal>>)
- uid: System.Nullable{System.Decimal}
  parent: System
  isExternal: false
  name: Nullable<Decimal>
  nameWithType: Nullable<Decimal>
  fullName: System.Nullable<System.Decimal>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Decimal>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: Decimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.IQueryable{System.Nullable{System.Decimal}}
  parent: System.Linq
  isExternal: false
  name: IQueryable<Nullable<Decimal>>
  nameWithType: IQueryable<Nullable<Decimal>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Decimal>>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<System.Nullable<System.Decimal>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Decimal>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: Decimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average(IQueryable<Nullable<Double>>)
  nameWithType: Queryable.Average(IQueryable<Nullable<Double>>)
  fullName: System.Linq.Queryable.Average(IQueryable<Nullable<Double>>)
- uid: System.Nullable{System.Double}
  parent: System
  isExternal: false
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Double>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: Double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.IQueryable{System.Nullable{System.Double}}
  parent: System.Linq
  isExternal: false
  name: IQueryable<Nullable<Double>>
  nameWithType: IQueryable<Nullable<Double>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Double>>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<System.Nullable<System.Double>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Double>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: Double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average(IQueryable<Nullable<Int32>>)
  nameWithType: Queryable.Average(IQueryable<Nullable<Int32>>)
  fullName: System.Linq.Queryable.Average(IQueryable<Nullable<Int32>>)
- uid: System.Linq.IQueryable{System.Nullable{System.Int32}}
  parent: System.Linq
  isExternal: false
  name: IQueryable<Nullable<Int32>>
  nameWithType: IQueryable<Nullable<Int32>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Int32>>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<System.Nullable<System.Int32>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average(IQueryable<Nullable<Int64>>)
  nameWithType: Queryable.Average(IQueryable<Nullable<Int64>>)
  fullName: System.Linq.Queryable.Average(IQueryable<Nullable<Int64>>)
- uid: System.Linq.IQueryable{System.Nullable{System.Int64}}
  parent: System.Linq
  isExternal: false
  name: IQueryable<Nullable<Int64>>
  nameWithType: IQueryable<Nullable<Int64>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Int64>>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<System.Nullable<System.Int64>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Int64>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average(IQueryable<Nullable<Single>>)
  nameWithType: Queryable.Average(IQueryable<Nullable<Single>>)
  fullName: System.Linq.Queryable.Average(IQueryable<Nullable<Single>>)
- uid: System.Nullable{System.Single}
  parent: System
  isExternal: false
  name: Nullable<Single>
  nameWithType: Nullable<Single>
  fullName: System.Nullable<System.Single>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Single>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: Single
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.IQueryable{System.Nullable{System.Single}}
  parent: System.Linq
  isExternal: false
  name: IQueryable<Nullable<Single>>
  nameWithType: IQueryable<Nullable<Single>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Single>>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<System.Nullable<System.Single>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Single>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: Single
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average(IQueryable<Single>)
  nameWithType: Queryable.Average(IQueryable<Single>)
  fullName: System.Linq.Queryable.Average(IQueryable<Single>)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Linq.IQueryable{System.Single}
  parent: System.Linq
  isExternal: false
  name: IQueryable<Single>
  nameWithType: IQueryable<Single>
  fullName: System.Linq.IQueryable<System.Single>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<System.Single>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: Single
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Decimal>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Decimal>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Decimal>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Decimal}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,Decimal>>
  nameWithType: Expression<Func<TSource,Decimal>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Decimal>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Decimal>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Decimal>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: Decimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Double>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Double>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Double>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Double}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,Double>>
  nameWithType: Expression<Func<TSource,Double>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Double>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Double>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Double>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: Double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,Int32>>
  nameWithType: Expression<Func<TSource,Int32>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Int32>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Int32>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int64>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int64>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int64>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Int64}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,Int64>>
  nameWithType: Expression<Func<TSource,Int64>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Int64>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Int64>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Int64>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Decimal>>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Decimal>>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Decimal>>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Decimal}}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,Nullable<Decimal>>>
  nameWithType: Expression<Func<TSource,Nullable<Decimal>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Decimal>>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Nullable<System.Decimal>>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Nullable<System.Decimal>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Decimal>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: Decimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Double>>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Double>>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Double>>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Double}}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,Nullable<Double>>>
  nameWithType: Expression<Func<TSource,Nullable<Double>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Double>>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Nullable<System.Double>>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Nullable<System.Double>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Double>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: Double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int32>>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int32>>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int32>>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Int32}}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,Nullable<Int32>>>
  nameWithType: Expression<Func<TSource,Nullable<Int32>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Int32>>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Nullable<System.Int32>>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Nullable<System.Int32>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int64>>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int64>>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int64>>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Int64}}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,Nullable<Int64>>>
  nameWithType: Expression<Func<TSource,Nullable<Int64>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Int64>>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Nullable<System.Int64>>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Nullable<System.Int64>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Int64>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Single>>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Single>>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Single>>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Nullable{System.Single}}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,Nullable<Single>>>
  nameWithType: Expression<Func<TSource,Nullable<Single>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Nullable<System.Single>>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Nullable<System.Single>>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Nullable<System.Single>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Single>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: Single
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Single>>)
  nameWithType: Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Single>>)
  fullName: System.Linq.Queryable.Average<TSource>(IQueryable<TSource>,Expression<Func<TSource,Single>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Single}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,Single>>
  nameWithType: Expression<Func<TSource,Single>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Single>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Single>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Single>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: Single
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Cast``1(System.Linq.IQueryable)
  parent: System.Linq.Queryable
  isExternal: false
  name: Cast<TResult>(IQueryable)
  nameWithType: Queryable.Cast<TResult>(IQueryable)
  fullName: System.Linq.Queryable.Cast<TResult>(IQueryable)
- uid: System.Linq.IQueryable{TResult}
  parent: System.Linq
  isExternal: false
  name: IQueryable<TResult>
  nameWithType: IQueryable<TResult>
  fullName: System.Linq.IQueryable<TResult>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Concat<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  nameWithType: Queryable.Concat<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Concat<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TSource>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)
  parent: System.Linq.Queryable
  isExternal: false
  name: Contains<TSource>(IQueryable<TSource>,TSource)
  nameWithType: Queryable.Contains<TSource>(IQueryable<TSource>,TSource)
  fullName: System.Linq.Queryable.Contains<TSource>(IQueryable<TSource>,TSource)
- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Contains<TSource>(IQueryable<TSource>,TSource,IEqualityComparer<TSource>)
  nameWithType: Queryable.Contains<TSource>(IQueryable<TSource>,TSource,IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Contains<TSource>(IQueryable<TSource>,TSource,IEqualityComparer<TSource>)
- uid: System.Collections.Generic.IEqualityComparer{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<TSource>
  nameWithType: IEqualityComparer<TSource>
  fullName: System.Collections.Generic.IEqualityComparer<TSource>
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: IEqualityComparer<TSource>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Count<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Count<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Count<TSource>(IQueryable<TSource>)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Count<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.Count<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.Count<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: DefaultIfEmpty<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>)
- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)
  parent: System.Linq.Queryable
  isExternal: false
  name: DefaultIfEmpty<TSource>(IQueryable<TSource>,TSource)
  nameWithType: Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>,TSource)
  fullName: System.Linq.Queryable.DefaultIfEmpty<TSource>(IQueryable<TSource>,TSource)
- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Distinct<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Distinct<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Distinct<TSource>(IQueryable<TSource>)
- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Distinct<TSource>(IQueryable<TSource>,IEqualityComparer<TSource>)
  nameWithType: Queryable.Distinct<TSource>(IQueryable<TSource>,IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Distinct<TSource>(IQueryable<TSource>,IEqualityComparer<TSource>)
- uid: System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)
  parent: System.Linq.Queryable
  isExternal: false
  name: ElementAt<TSource>(IQueryable<TSource>,Int32)
  nameWithType: Queryable.ElementAt<TSource>(IQueryable<TSource>,Int32)
  fullName: System.Linq.Queryable.ElementAt<TSource>(IQueryable<TSource>,Int32)
- uid: System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)
  parent: System.Linq.Queryable
  isExternal: false
  name: ElementAtOrDefault<TSource>(IQueryable<TSource>,Int32)
  nameWithType: Queryable.ElementAtOrDefault<TSource>(IQueryable<TSource>,Int32)
  fullName: System.Linq.Queryable.ElementAtOrDefault<TSource>(IQueryable<TSource>,Int32)
- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Except<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  nameWithType: Queryable.Except<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Except<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Except<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  nameWithType: Queryable.Except<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Except<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: First<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.First<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.First<TSource>(IQueryable<TSource>)
- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: First<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.First<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.First<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: FirstOrDefault<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.FirstOrDefault<TSource>(IQueryable<TSource>)
- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: FirstOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.FirstOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.FirstOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  isExternal: false
  name: GroupBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
  nameWithType: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
- uid: System.Linq.IQueryable{System.Linq.IGrouping{TKey,TSource}}
  parent: System.Linq
  isExternal: false
  name: IQueryable<IGrouping<TKey,TSource>>
  nameWithType: IQueryable<IGrouping<TKey,TSource>>
  fullName: System.Linq.IQueryable<System.Linq.IGrouping<TKey,TSource>>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<System.Linq.IGrouping<TKey,TSource>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: IGrouping<TKey,TSource>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Expressions.Expression{System.Func{TSource,TKey}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,TKey>>
  nameWithType: Expression<Func<TSource,TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,TKey>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,TKey>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,TKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Queryable
  isExternal: false
  name: GroupBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IEqualityComparer<TKey>)
  nameWithType: Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IEqualityComparer<TKey>)
- uid: System.Collections.Generic.IEqualityComparer{TKey}
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: IEqualityComparer<TKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})
  parent: System.Linq.Queryable
  isExternal: false
  name: GroupBy<TSource,TKey,TElement>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>)
  nameWithType: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>)
- uid: System.Linq.IQueryable{System.Linq.IGrouping{TKey,TElement}}
  parent: System.Linq
  isExternal: false
  name: IQueryable<IGrouping<TKey,TElement>>
  nameWithType: IQueryable<IGrouping<TKey,TElement>>
  fullName: System.Linq.IQueryable<System.Linq.IGrouping<TKey,TElement>>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<System.Linq.IGrouping<TKey,TElement>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: IGrouping<TKey,TElement>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TElement
    name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Expressions.Expression{System.Func{TSource,TElement}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,TElement>>
  nameWithType: Expression<Func<TSource,TElement>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,TElement>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,TElement>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,TElement>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TElement
    name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Queryable
  isExternal: false
  name: GroupBy<TSource,TKey,TElement>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,IEqualityComparer<TKey>)
  nameWithType: Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey,TElement>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,IEqualityComparer<TKey>)
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  parent: System.Linq.Queryable
  isExternal: false
  name: GroupBy<TSource,TKey,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TKey,IEnumerable<TSource>,TResult>>)
  nameWithType: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TKey,IEnumerable<TSource>,TResult>>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TKey,IEnumerable<TSource>,TResult>>)
- uid: System.Linq.Expressions.Expression{System.Func{TKey,System.Collections.Generic.IEnumerable{TSource},TResult}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TKey,IEnumerable<TSource>,TResult>>
  nameWithType: Expression<Func<TKey,IEnumerable<TSource>,TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<TKey,System.Collections.Generic.IEnumerable<TSource>,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TSource>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Queryable
  isExternal: false
  name: GroupBy<TSource,TKey,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TKey,IEnumerable<TSource>,TResult>>,IEqualityComparer<TKey>)
  nameWithType: Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TKey,IEnumerable<TSource>,TResult>>,IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TKey,IEnumerable<TSource>,TResult>>,IEqualityComparer<TKey>)
- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  parent: System.Linq.Queryable
  isExternal: false
  name: GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,Expression<Func<TKey,IEnumerable<TElement>,TResult>>)
  nameWithType: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,Expression<Func<TKey,IEnumerable<TElement>,TResult>>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,Expression<Func<TKey,IEnumerable<TElement>,TResult>>)
- uid: System.Linq.Expressions.Expression{System.Func{TKey,System.Collections.Generic.IEnumerable{TElement},TResult}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TKey,IEnumerable<TElement>,TResult>>
  nameWithType: Expression<Func<TKey,IEnumerable<TElement>,TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TElement>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TElement
    name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  parent: System.Linq.Queryable
  isExternal: false
  name: GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,Expression<Func<TKey,IEnumerable<TElement>,TResult>>,IEqualityComparer<TKey>)
  nameWithType: Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,Expression<Func<TKey,IEnumerable<TElement>,TResult>>,IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource,TKey,TElement,TResult>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,Expression<Func<TSource,TElement>>,Expression<Func<TKey,IEnumerable<TElement>,TResult>>,IEqualityComparer<TKey>)
- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  parent: System.Linq.Queryable
  isExternal: false
  name: GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,IEnumerable<TInner>,TResult>>)
  nameWithType: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,IEnumerable<TInner>,TResult>>)
  fullName: System.Linq.Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,IEnumerable<TInner>,TResult>>)
- uid: System.Linq.IQueryable{TOuter}
  parent: System.Linq
  isExternal: false
  name: IQueryable<TOuter>
  nameWithType: IQueryable<TOuter>
  fullName: System.Linq.IQueryable<TOuter>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<TOuter>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOuter
    name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IEnumerable{TInner}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TInner>
  nameWithType: IEnumerable<TInner>
  fullName: System.Collections.Generic.IEnumerable<TInner>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TInner>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TInner
    name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Expressions.Expression{System.Func{TOuter,TKey}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TOuter,TKey>>
  nameWithType: Expression<Func<TOuter,TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOuter,TKey>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TOuter,TKey>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TOuter,TKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOuter
    name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Expressions.Expression{System.Func{TInner,TKey}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TInner,TKey>>
  nameWithType: Expression<Func<TInner,TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TInner,TKey>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TInner,TKey>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TInner,TKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TInner
    name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Expressions.Expression{System.Func{TOuter,System.Collections.Generic.IEnumerable{TInner},TResult}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TOuter,IEnumerable<TInner>,TResult>>
  nameWithType: Expression<Func<TOuter,IEnumerable<TInner>,TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<TOuter,System.Collections.Generic.IEnumerable<TInner>,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOuter
    name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TInner>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TInner
    name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Linq.Queryable
  isExternal: false
  name: GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,IEnumerable<TInner>,TResult>>,IEqualityComparer<TKey>)
  nameWithType: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,IEnumerable<TInner>,TResult>>,IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupJoin<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,IEnumerable<TInner>,TResult>>,IEqualityComparer<TKey>)
- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Intersect<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  nameWithType: Queryable.Intersect<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Intersect<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Intersect<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  nameWithType: Queryable.Intersect<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Intersect<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,TInner,TResult>>)
  nameWithType: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,TInner,TResult>>)
  fullName: System.Linq.Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,TInner,TResult>>)
- uid: System.Linq.Expressions.Expression{System.Func{TOuter,TInner,TResult}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TOuter,TInner,TResult>>
  nameWithType: Expression<Func<TOuter,TInner,TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOuter,TInner,TResult>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TOuter,TInner,TResult>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<TOuter,TInner,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOuter
    name: TOuter
    nameWithType: TOuter
    fullName: TOuter
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TInner
    name: TInner
    nameWithType: TInner
    fullName: TInner
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  parent: System.Linq.Queryable
  isExternal: false
  name: Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,TInner,TResult>>,IEqualityComparer<TKey>)
  nameWithType: Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,TInner,TResult>>,IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.Join<TOuter,TInner,TKey,TResult>(IQueryable<TOuter>,IEnumerable<TInner>,Expression<Func<TOuter,TKey>>,Expression<Func<TInner,TKey>>,Expression<Func<TOuter,TInner,TResult>>,IEqualityComparer<TKey>)
- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Last<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Last<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Last<TSource>(IQueryable<TSource>)
- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Last<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.Last<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.Last<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: LastOrDefault<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.LastOrDefault<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.LastOrDefault<TSource>(IQueryable<TSource>)
- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: LastOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.LastOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.LastOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: LongCount<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.LongCount<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.LongCount<TSource>(IQueryable<TSource>)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: LongCount<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.LongCount<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.LongCount<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
- uid: System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Max<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Max<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Max<TSource>(IQueryable<TSource>)
- uid: System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Max<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
  nameWithType: Queryable.Max<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
  fullName: System.Linq.Queryable.Max<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,TResult}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,TResult>>
  nameWithType: Expression<Func<TSource,TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,TResult>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,TResult>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Min<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Min<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Min<TSource>(IQueryable<TSource>)
- uid: System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Min<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
  nameWithType: Queryable.Min<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
  fullName: System.Linq.Queryable.Min<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
- uid: System.Linq.Queryable.OfType``1(System.Linq.IQueryable)
  parent: System.Linq.Queryable
  isExternal: false
  name: OfType<TResult>(IQueryable)
  nameWithType: Queryable.OfType<TResult>(IQueryable)
  fullName: System.Linq.Queryable.OfType<TResult>(IQueryable)
- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  isExternal: false
  name: OrderBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
  nameWithType: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
  fullName: System.Linq.Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
- uid: System.Linq.IOrderedQueryable{TSource}
  parent: System.Linq
  isExternal: false
  name: IOrderedQueryable<TSource>
  nameWithType: IOrderedQueryable<TSource>
  fullName: System.Linq.IOrderedQueryable<TSource>
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    nameWithType: IOrderedQueryable
    fullName: IOrderedQueryable<TSource>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Queryable
  isExternal: false
  name: OrderBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  nameWithType: Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  fullName: System.Linq.Queryable.OrderBy<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
- uid: System.Collections.Generic.IComparer{TKey}
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<TKey>
  nameWithType: IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: IComparer<TKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  isExternal: false
  name: OrderByDescending<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
  nameWithType: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
  fullName: System.Linq.Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>)
- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Queryable
  isExternal: false
  name: OrderByDescending<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  nameWithType: Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  fullName: System.Linq.Queryable.OrderByDescending<TSource,TKey>(IQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
- uid: System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Reverse<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Reverse<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Reverse<TSource>(IQueryable<TSource>)
- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Select<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,TResult>>)
  nameWithType: Queryable.Select<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,TResult>>)
  fullName: System.Linq.Queryable.Select<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,TResult>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,TResult}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,Int32,TResult>>
  nameWithType: Expression<Func<TSource,Int32,TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,TResult>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Int32,TResult>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Int32,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Select<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
  nameWithType: Queryable.Select<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
  fullName: System.Linq.Queryable.Select<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,TResult>>)
- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  parent: System.Linq.Queryable
  isExternal: false
  name: SelectMany<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,IEnumerable<TResult>>>)
  nameWithType: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,IEnumerable<TResult>>>)
  fullName: System.Linq.Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,IEnumerable<TResult>>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Collections.Generic.IEnumerable{TResult}}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,IEnumerable<TResult>>>
  nameWithType: Expression<Func<TSource,IEnumerable<TResult>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Collections.Generic.IEnumerable<TResult>>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Collections.Generic.IEnumerable<TResult>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  parent: System.Linq.Queryable
  isExternal: false
  name: SelectMany<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,IEnumerable<TResult>>>)
  nameWithType: Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,IEnumerable<TResult>>>)
  fullName: System.Linq.Queryable.SelectMany<TSource,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,IEnumerable<TResult>>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Collections.Generic.IEnumerable{TResult}}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,Int32,IEnumerable<TResult>>>
  nameWithType: Expression<Func<TSource,Int32,IEnumerable<TResult>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TResult>>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TResult>>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TResult>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  parent: System.Linq.Queryable
  isExternal: false
  name: SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>,Expression<Func<TSource,IEnumerable<TCollection>>>,Expression<Func<TSource,TCollection,TResult>>)
  nameWithType: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>,Expression<Func<TSource,IEnumerable<TCollection>>>,Expression<Func<TSource,TCollection,TResult>>)
  fullName: System.Linq.Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>,Expression<Func<TSource,IEnumerable<TCollection>>>,Expression<Func<TSource,TCollection,TResult>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Collections.Generic.IEnumerable{TCollection}}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,IEnumerable<TCollection>>>
  nameWithType: Expression<Func<TSource,IEnumerable<TCollection>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Collections.Generic.IEnumerable<TCollection>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TCollection>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TCollection
    name: TCollection
    nameWithType: TCollection
    fullName: TCollection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Expressions.Expression{System.Func{TSource,TCollection,TResult}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,TCollection,TResult>>
  nameWithType: Expression<Func<TSource,TCollection,TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,TCollection,TResult>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,TCollection,TResult>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<TSource,TCollection,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TCollection
    name: TCollection
    nameWithType: TCollection
    fullName: TCollection
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  parent: System.Linq.Queryable
  isExternal: false
  name: SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,IEnumerable<TCollection>>>,Expression<Func<TSource,TCollection,TResult>>)
  nameWithType: Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,IEnumerable<TCollection>>>,Expression<Func<TSource,TCollection,TResult>>)
  fullName: System.Linq.Queryable.SelectMany<TSource,TCollection,TResult>(IQueryable<TSource>,Expression<Func<TSource,Int32,IEnumerable<TCollection>>>,Expression<Func<TSource,TCollection,TResult>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Collections.Generic.IEnumerable{TCollection}}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,Int32,IEnumerable<TCollection>>>
  nameWithType: Expression<Func<TSource,Int32,IEnumerable<TCollection>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TCollection>>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TCollection>>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Int32,System.Collections.Generic.IEnumerable<TCollection>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TCollection>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TCollection
    name: TCollection
    nameWithType: TCollection
    fullName: TCollection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: SequenceEqual<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  nameWithType: Queryable.SequenceEqual<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  fullName: System.Linq.Queryable.SequenceEqual<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: SequenceEqual<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  nameWithType: Queryable.SequenceEqual<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.SequenceEqual<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Single<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.Single<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Single<TSource>(IQueryable<TSource>)
- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Single<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.Single<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.Single<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: SingleOrDefault<TSource>(IQueryable<TSource>)
  nameWithType: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.SingleOrDefault<TSource>(IQueryable<TSource>)
- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: SingleOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.SingleOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.SingleOrDefault<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
- uid: System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)
  parent: System.Linq.Queryable
  isExternal: false
  name: Skip<TSource>(IQueryable<TSource>,Int32)
  nameWithType: Queryable.Skip<TSource>(IQueryable<TSource>,Int32)
  fullName: System.Linq.Queryable.Skip<TSource>(IQueryable<TSource>,Int32)
- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: SkipWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.SkipWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.SkipWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: SkipWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
  nameWithType: Queryable.SkipWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
  fullName: System.Linq.Queryable.SkipWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
- uid: System.Linq.Expressions.Expression{System.Func{TSource,System.Int32,System.Boolean}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TSource,Int32,Boolean>>
  nameWithType: Expression<Func<TSource,Int32,Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource,System.Int32,System.Boolean>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TSource,System.Int32,System.Boolean>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<TSource,System.Int32,System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum(IQueryable<Decimal>)
  nameWithType: Queryable.Sum(IQueryable<Decimal>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Decimal>)
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum(IQueryable<Double>)
  nameWithType: Queryable.Sum(IQueryable<Double>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Double>)
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum(IQueryable<Int32>)
  nameWithType: Queryable.Sum(IQueryable<Int32>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Int32>)
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum(IQueryable<Int64>)
  nameWithType: Queryable.Sum(IQueryable<Int64>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Int64>)
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum(IQueryable<Nullable<Decimal>>)
  nameWithType: Queryable.Sum(IQueryable<Nullable<Decimal>>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Nullable<Decimal>>)
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum(IQueryable<Nullable<Double>>)
  nameWithType: Queryable.Sum(IQueryable<Nullable<Double>>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Nullable<Double>>)
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum(IQueryable<Nullable<Int32>>)
  nameWithType: Queryable.Sum(IQueryable<Nullable<Int32>>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Nullable<Int32>>)
- uid: System.Nullable{System.Int32}
  parent: System
  isExternal: false
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum(IQueryable<Nullable<Int64>>)
  nameWithType: Queryable.Sum(IQueryable<Nullable<Int64>>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Nullable<Int64>>)
- uid: System.Nullable{System.Int64}
  parent: System
  isExternal: false
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Int64>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum(IQueryable<Nullable<Single>>)
  nameWithType: Queryable.Sum(IQueryable<Nullable<Single>>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Nullable<Single>>)
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum(IQueryable<Single>)
  nameWithType: Queryable.Sum(IQueryable<Single>)
  fullName: System.Linq.Queryable.Sum(IQueryable<Single>)
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Decimal>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Decimal>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Decimal>>)
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Double>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Double>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Double>>)
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32>>)
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int64>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int64>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int64>>)
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Decimal>>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Decimal>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Decimal>>>)
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Double>>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Double>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Double>>>)
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int32>>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int32>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int32>>>)
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int64>>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int64>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Int64>>>)
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Single>>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Single>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Nullable<Single>>>)
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Single>>)
  nameWithType: Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Single>>)
  fullName: System.Linq.Queryable.Sum<TSource>(IQueryable<TSource>,Expression<Func<TSource,Single>>)
- uid: System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)
  parent: System.Linq.Queryable
  isExternal: false
  name: Take<TSource>(IQueryable<TSource>,Int32)
  nameWithType: Queryable.Take<TSource>(IQueryable<TSource>,Int32)
  fullName: System.Linq.Queryable.Take<TSource>(IQueryable<TSource>,Int32)
- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: TakeWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.TakeWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.TakeWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: TakeWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
  nameWithType: Queryable.TakeWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
  fullName: System.Linq.Queryable.TakeWhile<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
- uid: System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  isExternal: false
  name: ThenBy<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>)
  nameWithType: Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>)
  fullName: System.Linq.Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>)
- uid: System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Queryable
  isExternal: false
  name: ThenBy<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  nameWithType: Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  fullName: System.Linq.Queryable.ThenBy<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
- uid: System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  parent: System.Linq.Queryable
  isExternal: false
  name: ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>)
  nameWithType: Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>)
  fullName: System.Linq.Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>)
- uid: System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  parent: System.Linq.Queryable
  isExternal: false
  name: ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  nameWithType: Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
  fullName: System.Linq.Queryable.ThenByDescending<TSource,TKey>(IOrderedQueryable<TSource>,Expression<Func<TSource,TKey>>,IComparer<TKey>)
- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Union<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  nameWithType: Queryable.Union<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Union<TSource>(IQueryable<TSource>,IEnumerable<TSource>)
- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Linq.Queryable
  isExternal: false
  name: Union<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  nameWithType: Queryable.Union<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Union<TSource>(IQueryable<TSource>,IEnumerable<TSource>,IEqualityComparer<TSource>)
- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Where<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  nameWithType: Queryable.Where<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
  fullName: System.Linq.Queryable.Where<TSource>(IQueryable<TSource>,Expression<Func<TSource,Boolean>>)
- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Where<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
  nameWithType: Queryable.Where<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
  fullName: System.Linq.Queryable.Where<TSource>(IQueryable<TSource>,Expression<Func<TSource,Int32,Boolean>>)
- uid: System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  parent: System.Linq.Queryable
  isExternal: false
  name: Zip<TFirst,TSecond,TResult>(IQueryable<TFirst>,IEnumerable<TSecond>,Expression<Func<TFirst,TSecond,TResult>>)
  nameWithType: Queryable.Zip<TFirst,TSecond,TResult>(IQueryable<TFirst>,IEnumerable<TSecond>,Expression<Func<TFirst,TSecond,TResult>>)
  fullName: System.Linq.Queryable.Zip<TFirst,TSecond,TResult>(IQueryable<TFirst>,IEnumerable<TSecond>,Expression<Func<TFirst,TSecond,TResult>>)
- uid: System.Linq.IQueryable{TFirst}
  parent: System.Linq
  isExternal: false
  name: IQueryable<TFirst>
  nameWithType: IQueryable<TFirst>
  fullName: System.Linq.IQueryable<TFirst>
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: IQueryable<TFirst>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TFirst
    name: TFirst
    nameWithType: TFirst
    fullName: TFirst
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IEnumerable{TSecond}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSecond>
  nameWithType: IEnumerable<TSecond>
  fullName: System.Collections.Generic.IEnumerable<TSecond>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TSecond>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSecond
    name: TSecond
    nameWithType: TSecond
    fullName: TSecond
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Expressions.Expression{System.Func{TFirst,TSecond,TResult}}
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<Func<TFirst,TSecond,TResult>>
  nameWithType: Expression<Func<TFirst,TSecond,TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TFirst,TSecond,TResult>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<TFirst,TSecond,TResult>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<TFirst,TSecond,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TFirst
    name: TFirst
    nameWithType: TFirst
    fullName: TFirst
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TSecond
    name: TSecond
    nameWithType: TSecond
    fullName: TSecond
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Queryable.Aggregate<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Aggregate<TSource>
  nameWithType: Queryable.Aggregate<TSource>
- uid: System.Linq.Queryable.Aggregate<TSource,TAccumulate>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Aggregate<TSource,TAccumulate>
  nameWithType: Queryable.Aggregate<TSource,TAccumulate>
- uid: System.Linq.Queryable.Aggregate<TSource,TAccumulate,TResult>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Aggregate<TSource,TAccumulate,TResult>
  nameWithType: Queryable.Aggregate<TSource,TAccumulate,TResult>
- uid: System.Linq.Queryable.All<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: All<TSource>
  nameWithType: Queryable.All<TSource>
- uid: System.Linq.Queryable.Any<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Any<TSource>
  nameWithType: Queryable.Any<TSource>
- uid: System.Linq.Queryable.AsQueryable*
  parent: System.Linq.Queryable
  isExternal: false
  name: AsQueryable
  nameWithType: Queryable.AsQueryable
- uid: System.Linq.Queryable.AsQueryable<TElement>*
  parent: System.Linq.Queryable
  isExternal: false
  name: AsQueryable<TElement>
  nameWithType: Queryable.AsQueryable<TElement>
- uid: System.Linq.Queryable.Average*
  parent: System.Linq.Queryable
  isExternal: false
  name: Average
  nameWithType: Queryable.Average
- uid: System.Linq.Queryable.Average<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Average<TSource>
  nameWithType: Queryable.Average<TSource>
- uid: System.Linq.Queryable.Cast<TResult>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Cast<TResult>
  nameWithType: Queryable.Cast<TResult>
- uid: System.Linq.Queryable.Concat<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Concat<TSource>
  nameWithType: Queryable.Concat<TSource>
- uid: System.Linq.Queryable.Contains<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Contains<TSource>
  nameWithType: Queryable.Contains<TSource>
- uid: System.Linq.Queryable.Count<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Count<TSource>
  nameWithType: Queryable.Count<TSource>
- uid: System.Linq.Queryable.DefaultIfEmpty<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: DefaultIfEmpty<TSource>
  nameWithType: Queryable.DefaultIfEmpty<TSource>
- uid: System.Linq.Queryable.Distinct<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Distinct<TSource>
  nameWithType: Queryable.Distinct<TSource>
- uid: System.Linq.Queryable.ElementAt<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: ElementAt<TSource>
  nameWithType: Queryable.ElementAt<TSource>
- uid: System.Linq.Queryable.ElementAtOrDefault<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: ElementAtOrDefault<TSource>
  nameWithType: Queryable.ElementAtOrDefault<TSource>
- uid: System.Linq.Queryable.Except<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Except<TSource>
  nameWithType: Queryable.Except<TSource>
- uid: System.Linq.Queryable.First<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: First<TSource>
  nameWithType: Queryable.First<TSource>
- uid: System.Linq.Queryable.FirstOrDefault<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: FirstOrDefault<TSource>
  nameWithType: Queryable.FirstOrDefault<TSource>
- uid: System.Linq.Queryable.GroupBy<TSource,TKey>*
  parent: System.Linq.Queryable
  isExternal: false
  name: GroupBy<TSource,TKey>
  nameWithType: Queryable.GroupBy<TSource,TKey>
- uid: System.Linq.Queryable.GroupBy<TSource,TKey,TElement>*
  parent: System.Linq.Queryable
  isExternal: false
  name: GroupBy<TSource,TKey,TElement>
  nameWithType: Queryable.GroupBy<TSource,TKey,TElement>
- uid: System.Linq.Queryable.GroupBy<TSource,TKey,TResult>*
  parent: System.Linq.Queryable
  isExternal: false
  name: GroupBy<TSource,TKey,TResult>
  nameWithType: Queryable.GroupBy<TSource,TKey,TResult>
- uid: System.Linq.Queryable.GroupBy<TSource,TKey,TElement,TResult>*
  parent: System.Linq.Queryable
  isExternal: false
  name: GroupBy<TSource,TKey,TElement,TResult>
  nameWithType: Queryable.GroupBy<TSource,TKey,TElement,TResult>
- uid: System.Linq.Queryable.GroupJoin<TOuter,TInner,TKey,TResult>*
  parent: System.Linq.Queryable
  isExternal: false
  name: GroupJoin<TOuter,TInner,TKey,TResult>
  nameWithType: Queryable.GroupJoin<TOuter,TInner,TKey,TResult>
- uid: System.Linq.Queryable.Intersect<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Intersect<TSource>
  nameWithType: Queryable.Intersect<TSource>
- uid: System.Linq.Queryable.Join<TOuter,TInner,TKey,TResult>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Join<TOuter,TInner,TKey,TResult>
  nameWithType: Queryable.Join<TOuter,TInner,TKey,TResult>
- uid: System.Linq.Queryable.Last<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Last<TSource>
  nameWithType: Queryable.Last<TSource>
- uid: System.Linq.Queryable.LastOrDefault<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: LastOrDefault<TSource>
  nameWithType: Queryable.LastOrDefault<TSource>
- uid: System.Linq.Queryable.LongCount<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: LongCount<TSource>
  nameWithType: Queryable.LongCount<TSource>
- uid: System.Linq.Queryable.Max<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Max<TSource>
  nameWithType: Queryable.Max<TSource>
- uid: System.Linq.Queryable.Max<TSource,TResult>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Max<TSource,TResult>
  nameWithType: Queryable.Max<TSource,TResult>
- uid: System.Linq.Queryable.Min<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Min<TSource>
  nameWithType: Queryable.Min<TSource>
- uid: System.Linq.Queryable.Min<TSource,TResult>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Min<TSource,TResult>
  nameWithType: Queryable.Min<TSource,TResult>
- uid: System.Linq.Queryable.OfType<TResult>*
  parent: System.Linq.Queryable
  isExternal: false
  name: OfType<TResult>
  nameWithType: Queryable.OfType<TResult>
- uid: System.Linq.Queryable.OrderBy<TSource,TKey>*
  parent: System.Linq.Queryable
  isExternal: false
  name: OrderBy<TSource,TKey>
  nameWithType: Queryable.OrderBy<TSource,TKey>
- uid: System.Linq.Queryable.OrderByDescending<TSource,TKey>*
  parent: System.Linq.Queryable
  isExternal: false
  name: OrderByDescending<TSource,TKey>
  nameWithType: Queryable.OrderByDescending<TSource,TKey>
- uid: System.Linq.Queryable.Reverse<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Reverse<TSource>
  nameWithType: Queryable.Reverse<TSource>
- uid: System.Linq.Queryable.Select<TSource,TResult>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Select<TSource,TResult>
  nameWithType: Queryable.Select<TSource,TResult>
- uid: System.Linq.Queryable.SelectMany<TSource,TResult>*
  parent: System.Linq.Queryable
  isExternal: false
  name: SelectMany<TSource,TResult>
  nameWithType: Queryable.SelectMany<TSource,TResult>
- uid: System.Linq.Queryable.SelectMany<TSource,TCollection,TResult>*
  parent: System.Linq.Queryable
  isExternal: false
  name: SelectMany<TSource,TCollection,TResult>
  nameWithType: Queryable.SelectMany<TSource,TCollection,TResult>
- uid: System.Linq.Queryable.SequenceEqual<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: SequenceEqual<TSource>
  nameWithType: Queryable.SequenceEqual<TSource>
- uid: System.Linq.Queryable.Single<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Single<TSource>
  nameWithType: Queryable.Single<TSource>
- uid: System.Linq.Queryable.SingleOrDefault<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: SingleOrDefault<TSource>
  nameWithType: Queryable.SingleOrDefault<TSource>
- uid: System.Linq.Queryable.Skip<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Skip<TSource>
  nameWithType: Queryable.Skip<TSource>
- uid: System.Linq.Queryable.SkipWhile<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: SkipWhile<TSource>
  nameWithType: Queryable.SkipWhile<TSource>
- uid: System.Linq.Queryable.Sum*
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum
  nameWithType: Queryable.Sum
- uid: System.Linq.Queryable.Sum<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Sum<TSource>
  nameWithType: Queryable.Sum<TSource>
- uid: System.Linq.Queryable.Take<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Take<TSource>
  nameWithType: Queryable.Take<TSource>
- uid: System.Linq.Queryable.TakeWhile<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: TakeWhile<TSource>
  nameWithType: Queryable.TakeWhile<TSource>
- uid: System.Linq.Queryable.ThenBy<TSource,TKey>*
  parent: System.Linq.Queryable
  isExternal: false
  name: ThenBy<TSource,TKey>
  nameWithType: Queryable.ThenBy<TSource,TKey>
- uid: System.Linq.Queryable.ThenByDescending<TSource,TKey>*
  parent: System.Linq.Queryable
  isExternal: false
  name: ThenByDescending<TSource,TKey>
  nameWithType: Queryable.ThenByDescending<TSource,TKey>
- uid: System.Linq.Queryable.Union<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Union<TSource>
  nameWithType: Queryable.Union<TSource>
- uid: System.Linq.Queryable.Where<TSource>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Where<TSource>
  nameWithType: Queryable.Where<TSource>
- uid: System.Linq.Queryable.Zip<TFirst,TSecond,TResult>*
  parent: System.Linq.Queryable
  isExternal: false
  name: Zip<TFirst,TSecond,TResult>
  nameWithType: Queryable.Zip<TFirst,TSecond,TResult>
