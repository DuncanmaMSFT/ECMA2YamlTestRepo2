### YamlMime:ManagedReference
items:
- uid: System.Linq.Lookup`2
  id: Lookup`2
  children:
  - System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})
  - System.Linq.Lookup`2.Contains(`0)
  - System.Linq.Lookup`2.Count
  - System.Linq.Lookup`2.GetEnumerator
  - System.Linq.Lookup`2.Item(`0)
  - System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: Lookup<TKey,TElement>
  nameWithType: Lookup<TKey,TElement>
  fullName: System.Linq.Lookup<TKey,TElement>
  type: Class
  summary: Represents a collection of keys each mapped to one or more values.
  remarks: "A Lookup(TKey, resembles a <xref:System.Collections.Generic.Dictionary%602>. The difference is that a <xref:System.Collections.Generic.Dictionary%602> maps keys to single values, whereas a Lookup(TKey, maps keys to collections of values.  \n  \n You can create an instance of a Lookup(TKey, by calling <xref:System.Linq.Enumerable.ToLookup%2A> on an object that implements <xref:System.Collections.Generic.IEnumerable%601>.  \n  \n> [!NOTE]\n>  There is no public constructor to create a new instance of a Lookup(TKey,. Additionally, Lookup(TKey, objects are immutable, that is, you cannot add or remove elements or keys from a Lookup(TKey, object after it has been created."
  example:
  - "The following example creates a Lookup(TKey, from a collection of objects. It then enumerates the Lookup(TKey, and outputs each key and each value in the key's associated collection of values. It also demonstrates how to use the properties <xref:System.Linq.Lookup%602.Count%2A> and <xref:System.Linq.Lookup%602.Item%2A> and the methods <xref:System.Linq.Lookup%602.Contains%2A> and <xref:System.Linq.Lookup%602.GetEnumerator%2A>.  \n  \n [!code-cs[System.Linq.Lookup#1](~/add/codesnippet/csharp/t-system.linq.lookup`2_1.cs)]\n [!code-vb[System.Linq.Lookup#1](~/add/codesnippet/visualbasic/t-system.linq.lookup`2_1.vb)]"
  syntax:
    content: 'public class Lookup<TKey,TElement> : System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>>, System.Linq.ILookup<TKey,TElement>'
    typeParameters:
    - id: TKey
      description: The type of the keys in the Lookup(TKey,.
    - id: TElement
      description: The type of the elements of each <xref href="stem.Collections.Generic.IEnumerable%601"></xref> value in the Lookup(TKey,.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey,TElement>>
  - System.Linq.ILookup<TKey,TElement>
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Lookup`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Lookup`2.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})
  id: ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  name: ApplyResultSelector<TResult>(Func<TKey,IEnumerable<TElement>,TResult>)
  nameWithType: Lookup<TKey,TElement>.ApplyResultSelector<TResult>(Func<TKey,IEnumerable<TElement>,TResult>)
  fullName: System.Linq.Lookup<TKey,TElement>.ApplyResultSelector<TResult>(Func<TKey,IEnumerable<TElement>,TResult>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Applies a transform function to each key and its associated values and returns the results.
  syntax:
    content: public System.Collections.Generic.IEnumerable<TResult> ApplyResultSelector<TResult> (Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult> resultSelector);
    parameters:
    - id: resultSelector
      type: System.Func{TKey,System.Collections.Generic.IEnumerable{TElement},TResult}
      description: A function to project a result value from each key and its associated values.
    return:
      type: System.Collections.Generic.IEnumerable{TResult}
      description: A collection that contains one value for each key/value collection pair in the <xref href="stem.Linq.Lookup%602"></xref>.
  overload: System.Linq.Lookup`2.ApplyResultSelector<TResult>*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Lookup`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Lookup`2.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Lookup`2.Contains(`0)
  id: Contains(`0)
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  name: Contains(TKey)
  nameWithType: Lookup<TKey,TElement>.Contains(TKey)
  fullName: System.Linq.Lookup<TKey,TElement>.Contains(TKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Determines whether a specified key is in the <xref href="stem.Linq.Lookup%602"></xref>.
  remarks: ''
  example:
  - "The following example demonstrates how to use Contains to determine whether a <xref:System.Linq.Lookup%602> contains a specified key. This code example is part of a larger example provided for the <xref:System.Linq.Lookup%602> class.  \n  \n [!code-cs[System.Linq.Lookup#4](~/add/codesnippet/csharp/m-system.linq.lookup`2.c_1.cs)]\n [!code-vb[System.Linq.Lookup#4](~/add/codesnippet/visualbasic/m-system.linq.lookup`2.c_1.vb)]"
  syntax:
    content: public bool Contains (TKey key);
    parameters:
    - id: key
      type: TKey
      description: The key to find in the <xref href="stem.Linq.Lookup%602"></xref>.
    return:
      type: System.Boolean
      description: '`true` if <code>key</code> is in the <xref href="stem.Linq.Lookup%602"></xref>; otherwise, `false`.'
  overload: System.Linq.Lookup`2.Contains*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Lookup`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Lookup`2.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Lookup`2.Count
  id: Count
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  name: Count
  nameWithType: Lookup<TKey,TElement>.Count
  fullName: System.Linq.Lookup<TKey,TElement>.Count
  type: Property
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Gets the number of key/value collection pairs in the <xref href="stem.Linq.Lookup%602"></xref>.
  remarks: The value of the Count property does not change because items cannot be added to or removed from a <xref:System.Linq.Lookup%602> object after it has been created.
  example:
  - "The following example demonstrates how to use Count to determine the number of key/value collection pairs in a <xref:System.Linq.Lookup%602>. This code example is part of a larger example provided for the <xref:System.Linq.Lookup%602> class.  \n  \n [!code-cs[System.Linq.Lookup#2](~/add/codesnippet/csharp/p-system.linq.lookup`2.c_1.cs)]\n [!code-vb[System.Linq.Lookup#2](~/add/codesnippet/visualbasic/p-system.linq.lookup`2.c_1.vb)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of key/value collection pairs in the <xref href="stem.Linq.Lookup%602"></xref>.
  overload: System.Linq.Lookup`2.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Lookup`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Lookup`2.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Lookup`2.GetEnumerator
  id: GetEnumerator
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Lookup<TKey,TElement>.GetEnumerator()
  fullName: System.Linq.Lookup<TKey,TElement>.GetEnumerator()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns a generic enumerator that iterates through the <xref href="stem.Linq.Lookup%602"></xref>.
  remarks: ''
  example:
  - "The following example demonstrates how to use GetEnumerator to iterate through the keys and values of a <xref:System.Linq.Lookup%602>. This code example is part of a larger example provided for the <xref:System.Linq.Lookup%602> class.  \n  \n [!code-cs[System.Linq.Lookup#5](~/add/codesnippet/csharp/m-system.linq.lookup`2.g_1.cs)]\n [!code-vb[System.Linq.Lookup#5](~/add/codesnippet/visualbasic/m-system.linq.lookup`2.g_1.vb)]"
  syntax:
    content: public System.Collections.Generic.IEnumerator<System.Linq.IGrouping<TKey,TElement>> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.Linq.IGrouping{TKey,TElement}}
      description: An enumerator for the <xref href="stem.Linq.Lookup%602"></xref>.
  overload: System.Linq.Lookup`2.GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Lookup`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Lookup`2.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Lookup`2.Item(`0)
  id: Item(`0)
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  name: Item(TKey)
  nameWithType: Lookup<TKey,TElement>.Item(TKey)
  fullName: System.Linq.Lookup<TKey,TElement>.Item(TKey)
  type: Property
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Gets the collection of values indexed by the specified key.
  remarks: 'This indexed property provides the ability to index a specific collection of values in the <xref:System.Linq.Lookup%602> by using the following syntax: `myLookup[key]` in [!INCLUDE[csprcs](~/add/includes/csprcs-md.md)] or `myLookup(key)` in [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]. If the `key` is not found in the collection, an empty sequence is returned.'
  example:
  - "The following example demonstrates how to use Item to index directly into a <xref:System.Linq.Lookup%602>. This code example is part of a larger example provided for the <xref:System.Linq.Lookup%602> class.  \n  \n [!code-cs[System.Linq.Lookup#3](~/add/codesnippet/csharp/p-system.linq.lookup`2.i_1.cs)]\n [!code-vb[System.Linq.Lookup#3](~/add/codesnippet/visualbasic/p-system.linq.lookup`2.i_1.vb)]"
  syntax:
    content: public System.Collections.Generic.IEnumerable<TElement> this[TKey key] { get; }
    parameters:
    - id: key
      type: TKey
      description: The key of the desired collection of values.
    return:
      type: System.Collections.Generic.IEnumerable{TElement}
      description: The collection of values indexed by the specified key.
  overload: System.Linq.Lookup`2.Item*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Lookup`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Lookup`2.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: Lookup<TKey,TElement>.IEnumerable.GetEnumerator()
  fullName: System.Linq.Lookup<TKey,TElement>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Linq
  summary: Returns an enumerator that iterates through the <xref href="stem.Linq.Lookup%602"></xref>. This class cannot be inherited.
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An enumerator for the <xref href="stem.Linq.Lookup%602"></xref>.
  overload: System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Linq\Lookup`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Linq/Lookup`2.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})
  parent: System.Linq.Lookup`2
  isExternal: false
  name: ApplyResultSelector<TResult>(Func<TKey,IEnumerable<TElement>,TResult>)
  nameWithType: Lookup<TKey,TElement>.ApplyResultSelector<TResult>(Func<TKey,IEnumerable<TElement>,TResult>)
  fullName: System.Linq.Lookup<TKey,TElement>.ApplyResultSelector<TResult>(Func<TKey,IEnumerable<TElement>,TResult>)
- uid: System.Collections.Generic.IEnumerable{TResult}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Func{TKey,System.Collections.Generic.IEnumerable{TElement},TResult}
  parent: System
  isExternal: false
  name: Func<TKey,IEnumerable<TElement>,TResult>
  nameWithType: Func<TKey,IEnumerable<TElement>,TResult>
  fullName: System.Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<TKey,System.Collections.Generic.IEnumerable<TElement>,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TElement>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TElement
    name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Lookup`2.Contains(`0)
  parent: System.Linq.Lookup`2
  isExternal: false
  name: Contains(TKey)
  nameWithType: Lookup<TKey,TElement>.Contains(TKey)
  fullName: System.Linq.Lookup<TKey,TElement>.Contains(TKey)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TKey
  isExternal: true
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Linq.Lookup`2.Count
  parent: System.Linq.Lookup`2
  isExternal: false
  name: Count
  nameWithType: Lookup<TKey,TElement>.Count
  fullName: System.Linq.Lookup<TKey,TElement>.Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Linq.Lookup`2.GetEnumerator
  parent: System.Linq.Lookup`2
  isExternal: false
  name: GetEnumerator()
  nameWithType: Lookup<TKey,TElement>.GetEnumerator()
  fullName: System.Linq.Lookup<TKey,TElement>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{System.Linq.IGrouping{TKey,TElement}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<IGrouping<TKey,TElement>>
  nameWithType: IEnumerator<IGrouping<TKey,TElement>>
  fullName: System.Collections.Generic.IEnumerator<System.Linq.IGrouping<TKey,TElement>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<System.Linq.IGrouping<TKey,TElement>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    nameWithType: IGrouping
    fullName: IGrouping<TKey,TElement>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TElement
    name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Lookup`2.Item(`0)
  parent: System.Linq.Lookup`2
  isExternal: false
  name: Item(TKey)
  nameWithType: Lookup<TKey,TElement>.Item(TKey)
  fullName: System.Linq.Lookup<TKey,TElement>.Item(TKey)
- uid: System.Collections.Generic.IEnumerable{TElement}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TElement>
  nameWithType: IEnumerable<TElement>
  fullName: System.Collections.Generic.IEnumerable<TElement>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TElement>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TElement
    name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator
  parent: System.Linq.Lookup`2
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: Lookup<TKey,TElement>.IEnumerable.GetEnumerator()
  fullName: System.Linq.Lookup<TKey,TElement>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Linq.Lookup`2.ApplyResultSelector<TResult>*
  parent: System.Linq.Lookup`2
  isExternal: false
  name: ApplyResultSelector<TResult>
  nameWithType: Lookup<TKey,TElement>.ApplyResultSelector<TResult>
- uid: System.Linq.Lookup`2.Contains*
  parent: System.Linq.Lookup`2
  isExternal: false
  name: Contains
  nameWithType: Lookup<TKey,TElement>.Contains
- uid: System.Linq.Lookup`2.Count*
  parent: System.Linq.Lookup`2
  isExternal: false
  name: Count
  nameWithType: Lookup<TKey,TElement>.Count
- uid: System.Linq.Lookup`2.GetEnumerator*
  parent: System.Linq.Lookup`2
  isExternal: false
  name: GetEnumerator
  nameWithType: Lookup<TKey,TElement>.GetEnumerator
- uid: System.Linq.Lookup`2.Item*
  parent: System.Linq.Lookup`2
  isExternal: false
  name: Item
  nameWithType: Lookup<TKey,TElement>.Item
- uid: System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Linq.Lookup`2
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Lookup<TKey,TElement>.System.Collections.IEnumerable.GetEnumerator
