### YamlMime:ManagedReference
items:
- uid: System.Action
  id: Action
  langs:
  - csharp
  name: Action
  nameWithType: Action
  fullName: System.Action
  type: Delegate
  summary: Encapsulates a method that has no parameters and does not return a value.
  remarks: "You can use this delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have no parameters and no return value. (In C#, the method must return `void`. In Visual Basic, it must be defined by the `Sub`â€¦`End Sub` construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.  \n  \n> [!NOTE]\n>  To reference a method that has no parameters and returns a value, use the generic <xref:System.Func%601> delegate instead.  \n  \n When you use the Action delegate, you do not have to explicitly define a delegate that encapsulates a parameterless procedure. For example, the following code explicitly declares a delegate named `ShowValue` and assigns a reference to the `Name.DisplayToWindow` instance method to its delegate instance.  \n  \n [!code-cpp[System.Action.Delegate#1](~/add/codesnippet/cpp/delegate/delegate.cpp#1)]\n [!code-vb[System.Action.Delegate#1](~/add/codesnippet/visualbasic/t-system.action_1.vb)]\n [!code-cs[System.Action.Delegate#1](~/add/codesnippet/csharp/t-system.action_1.cs)]  \n  \n The following example simplifies this code by instantiating the Action delegate instead of explicitly defining a new delegate and assigning a named method to it.  \n  \n [!code-cpp[System.Action#2](~/add/codesnippet/cpp/t-system.action_2.cpp)]\n [!code-cs[System.Action#2](~/add/codesnippet/csharp/t-system.action_2.cs)]\n [!code-vb[System.Action#2](~/add/codesnippet/visualbasic/t-system.action_2.vb)]  \n  \n You can also use the Action delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see [Anonymous Methods](../Topic/Anonymous%20Methods%20\\(C%23%20Programming%20Guide\\).md).)  \n  \n [!code-cs[System.Action#3](~/add/codesnippet/csharp/t-system.action_3.cs)]  \n  \n You can also assign a lambda expression to an Action delegate instance, as the following example illustrates. (For an introduction to lambda expressions, see [Lambda Expressions](../Topic/Lambda%20Expressions%20\\(C%23%20Programming%20Guide\\).md).)  \n  \n [!code-cs[System.Action#4](~/add/codesnippet/csharp/t-system.action_4.cs)]\n [!code-vb[System.Action#4](~/add/codesnippet/visualbasic/t-system.action_4.vb)]"
  syntax:
    content: >-
      [System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")]

      public delegate void Action();
  inheritance:
  - System.Object
  - System.Delegate
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Action.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Action.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
