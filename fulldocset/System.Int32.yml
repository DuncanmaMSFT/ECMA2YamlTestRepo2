### YamlMime:ManagedReference
items:
- uid: System.Int32
  id: Int32
  children:
  - System.Int32.CompareTo(System.Int32)
  - System.Int32.CompareTo(System.Object)
  - System.Int32.Equals(System.Int32)
  - System.Int32.Equals(System.Object)
  - System.Int32.GetHashCode
  - System.Int32.GetTypeCode
  - System.Int32.MaxValue
  - System.Int32.MinValue
  - System.Int32.Parse(System.String)
  - System.Int32.Parse(System.String,System.Globalization.NumberStyles)
  - System.Int32.Parse(System.String,System.IFormatProvider)
  - System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)
  - System.Int32.System#IConvertible#ToByte(System.IFormatProvider)
  - System.Int32.System#IConvertible#ToChar(System.IFormatProvider)
  - System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)
  - System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)
  - System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)
  - System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)
  - System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)
  - System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)
  - System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)
  - System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)
  - System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  - System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)
  - System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)
  - System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)
  - System.Int32.ToString
  - System.Int32.ToString(System.IFormatProvider)
  - System.Int32.ToString(System.String)
  - System.Int32.ToString(System.String,System.IFormatProvider)
  - System.Int32.TryParse(System.String,System.Int32@)
  - System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)
  langs:
  - csharp
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
  type: Struct
  summary: "Represents a 32-bit signed integer.  \n  \n To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/int32.cs#225942ed7b7a3252)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/int32.cs#225942ed7b7a3252). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Int32 is an immutable value type that represents signed integers with values that range from negative 2,147,483,648 (which is represented by the <xref:System.Int32.MinValue?displayProperty=fullName> constant) through positive 2,147,483,647 (which is represented by the <xref:System.Int32.MaxValue?displayProperty=fullName> constant. The .NET Framework also includes an unsigned 32-bit integer value type, <xref:System.UInt32>, which represents values that range from 0 to 4,294,967,295.  \n  \n## Instantiating an Int32 Value  \n You can instantiate an Int32 value in several ways:  \n  \n-   You can declare an Int32 variable and assign it a literal integer value that is within the range of the Int32 data type. The following example declares two Int32 variables and assigns them values in this way.  \n  \n     [!code-cs[System.Int32.Instantiation#1](~/add/codesnippet/csharp/t-system.int32_1.cs)]\n     [!code-vb[System.Int32.Instantiation#1](~/add/codesnippet/visualbasic/t-system.int32_1.vb)]  \n  \n-   You can assign the value of an integer type whose range is a subset of the Int32 type. This is a widening conversion that does not require a cast operator in C# or a conversion method in Visual Basic.  \n  \n     [!code-cs[System.Int32.Instantiation#4](~/add/codesnippet/csharp/t-system.int32_2.cs)]\n     [!code-vb[System.Int32.Instantiation#4](~/add/codesnippet/visualbasic/t-system.int32_2.vb)]  \n  \n-   You can assign the value of a numeric type whose range exceeds that of the Int32 type. This is a narrowing conversion, so it requires a cast operator in C# and a conversion method in Visual Basic if `Option``Strict` is on. If the numeric value is a <xref:System.Single>, <xref:System.Double>, or <xref:System.Decimal> value that includes a fractional component, the handling of its fractional part depends on the compiler performing the conversion. The following example performs narrowing conversions to assign several numeric values to Int32 variables.  \n  \n     [!code-cs[System.Int32.Instantiation#2](~/add/codesnippet/csharp/t-system.int32_3.cs)]\n     [!code-vb[System.Int32.Instantiation#2](~/add/codesnippet/visualbasic/t-system.int32_3.vb)]  \n  \n-   You can call a method of the <xref:System.Convert> class to convert any supported type to an Int32 value. This is possible because Int32 supports the <xref:System.IConvertible> interface. The following example illustrates the conversion of an array of <xref:System.Decimal> values to Int32 values.  \n  \n     [!code-cs[System.Convert.ToInt32#4](~/add/codesnippet/csharp/t-system.int32_4.cs)]\n     [!code-vb[System.Convert.ToInt32#4](~/add/codesnippet/visualbasic/t-system.int32_4.vb)]  \n  \n-   You can call the <xref:System.Int32.Parse%2A> or <xref:System.Int32.TryParse%2A> method to convert the string representation of an Int32 value to an Int32. The string can contain either decimal or hexadecimal digits. The following example illustrates the parse operation by using both a decimal and a hexadecimal string.  \n  \n     [!code-cs[System.Int32.Instantiation#3](~/add/codesnippet/csharp/t-system.int32_5.cs)]\n     [!code-vb[System.Int32.Instantiation#3](~/add/codesnippet/visualbasic/t-system.int32_5.vb)]  \n  \n## Performing Operations on Int32 Values  \n The Int32 type supports standard mathematical operations such as addition, subtraction, division, multiplication, negation, and unary negation. Like the other integral types, the Int32 type also supports the bitwise `AND`, `OR`, `XOR`, left shift, and right shift operators.  \n  \n You can use the standard numeric operators to compare two Int32 values, or you can call the <xref:System.Int32.CompareTo%2A> or <xref:System.Int32.Equals%2A> method.  \n  \n You can also call the members of the <xref:System.Math> class to perform a wide range of numeric operations, including getting the absolute value of a number, calculating the quotient and remainder from integral division, determining the maximum or minimum value of two integers, getting the sign of a number, and rounding a number.  \n  \n## Representing an Int32 as a String  \n The Int32 type provides full support for standard and custom numeric format strings. (For more information, see [Formatting Types](~/add/includes/ajax-current-ext-md.md), [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md), and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).)  \n  \n To format an Int32 value as an integral string with no leading zeros, you can call the parameterless <xref:System.Int32.ToString> method. By using the \"D\" format specifier, you can also include a specified number of leading zeros in the string representation. By using the \"N\" format specifier, you can include group separators and specify the number of decimal digits to appear in the string representation of the number. By using the \"X\" format specifier, you can represent an Int32 value as a hexadecimal string. The following example formats the elements in an array of Int32 values in these four ways.  \n  \n [!code-vb[System.Int32.Formatting#1](~/add/codesnippet/visualbasic/t-system.int32_6.vb)]\n [!code-cs[System.Int32.Formatting#1](~/add/codesnippet/csharp/t-system.int32_6.cs)]  \n  \n You can also format an Int32 value as a binary, octal, decimal, or hexadecimal string by calling the <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> method and supplying the base as the method's second parameter. The following example calls this method to display the binary, octal, and hexadecimal representations of an array of integer values.  \n  \n [!code-vb[System.Int32.Formatting#2](~/add/codesnippet/visualbasic/t-system.int32_7.vb)]\n [!code-cs[System.Int32.Formatting#2](~/add/codesnippet/csharp/t-system.int32_7.cs)]  \n  \n## Working with Non-Decimal 32-Bit Integer Values  \n In addition to working with individual integers as decimal values, you may want to perform bitwise operations with integer values, or work with the binary or hexadecimal representations of integer values. Int32 values are represented in 31 bits, with the thirty-second bit used as a sign bit. Positive values are represented by using sign-and-magnitude representation. Negative values are in two's complement representation. This is important to keep in mind when you perform bitwise operations on Int32 values or when you work with individual bits. In order to perform a numeric, Boolean, or comparison operation on any two non-decimal values, both values must use the same representation."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public struct Int32 : IComparable, IComparable<int>, IConvertible, IEquatable<int>, IFormattable
  inheritance:
  - System.Object
  - System.ValueType
  implements:
  - System.IComparable
  - System.IComparable<System.Int32>
  - System.IConvertible
  - System.IEquatable<System.Int32>
  - System.IFormattable
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.CompareTo(System.Int32)
  id: CompareTo(System.Int32)
  parent: System.Int32
  langs:
  - csharp
  name: CompareTo(Int32)
  nameWithType: Int32.CompareTo(Int32)
  fullName: System.Int32.CompareTo(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares this instance to a specified 32-bit signed integer and returns an indication of their relative values.
  remarks: "This method implements the <xref:System.IComparable%601?displayProperty=fullName> interface and performs slightly better than the <xref:System.Int32.CompareTo%2A?displayProperty=fullName> method because it does not have to convert the `value` parameter to an object.  \n  \n Depending on your programming language, it might be possible to code a <xref:System.Int32.CompareTo%2A> method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.  \n  \n For example, suppose the instance type is <xref:System.Int32> and the parameter type is <xref:System.Byte>. The Microsoft C# compiler generates instructions to represent the value of the parameter as an <xref:System.Int32>, then generates a <xref:System.Int32.CompareTo%2A?displayProperty=fullName> method that compares the values of the <xref:System.Int32> instance and the <xref:System.Int32> parameter representation.  \n  \n Consult your programming language's documentation to determine whether its compiler performs implicit widening conversions on numeric types."
  example:
  - "The following example demonstrates the CompareTo method. In addition to displaying the value returned by the method for four different comparisons, it converts the return value to a member of the custom `Comparison` enumeration, whose value it also displays.  \n  \n [!code-cs[System.Int32.CompareTo#1](~/add/codesnippet/csharp/m-system.int32.compareto_1.cs)]\n [!code-vb[System.Int32.CompareTo#1](~/add/codesnippet/visualbasic/m-system.int32.compareto_1.vb)]"
  syntax:
    content: public int CompareTo (int value);
    parameters:
    - id: value
      type: System.Int32
      description: An integer to compare.
    return:
      type: System.Int32
      description: "A signed number indicating the relative values of this instance and <code>value</code>.  \n  \n|Return Value|Description|  \n|------------------|-----------------|  \n|Less than zero|This instance is less than <code>value</code>.|  \n|Zero|This instance is equal to <code>value</code>.|  \n|Greater than zero|This instance is greater than <code>value</code>.|"
  overload: System.Int32.CompareTo*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: System.Int32
  langs:
  - csharp
  name: CompareTo(Object)
  nameWithType: Int32.CompareTo(Object)
  fullName: System.Int32.CompareTo(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares this instance to a specified object and returns an indication of their relative values.
  remarks: "Any instance of <xref:System.Int32>, regardless of its value, is considered greater than `null`.  \n  \n `value` must be `null` or an instance of <xref:System.Int32>; otherwise, an exception is thrown."
  syntax:
    content: public int CompareTo (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object to compare, or <xref uid="langword_csharp_null" name="null" href=""></xref>.
    return:
      type: System.Int32
      description: "A signed number indicating the relative values of this instance and <code>value</code>.  \n  \n|Return Value|Description|  \n|------------------|-----------------|  \n|Less than zero|This instance is less than <code>value</code>.|  \n|Zero|This instance is equal to <code>value</code>.|  \n|Greater than zero|This instance is greater than <code>value</code>.<br /><br /> -or-<br /><br /><code>value</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.|"
  overload: System.Int32.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>value</code> is not an <xref href="System.Int32"></xref>.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.Equals(System.Int32)
  id: Equals(System.Int32)
  parent: System.Int32
  langs:
  - csharp
  name: Equals(Int32)
  nameWithType: Int32.Equals(Int32)
  fullName: System.Int32.Equals(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value indicating whether this instance is equal to a specified <xref href="System.Int32"></xref> value.
  remarks: This method implements the <xref:System.IEquatable%601?displayProperty=fullName> interface, and performs slightly better than <xref:System.Int32.Equals%28System.Object%29?displayProperty=fullName> because it does not have to convert the `obj` parameter to an object.
  syntax:
    content: public bool Equals (int obj);
    parameters:
    - id: obj
      type: System.Int32
      description: An <xref href="System.Int32"></xref> value to compare to this instance.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if <code>obj</code> has the same value as this instance; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Int32.Equals*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Int32
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Int32.Equals(Object)
  fullName: System.Int32.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value indicating whether this instance is equal to a specified object.
  remarks: ''
  example:
  - "The following example illustrates the use of `Equals` in the context of `Int32`, comparing two `int` values and returning `true` if they represent the same number, or `false` if they do not.  \n  \n [!code-cs[Int32_Equals#1](~/add/codesnippet/csharp/m-system.int32.equals-sy_1.cs)]\n [!code-vb[Int32_Equals#1](~/add/codesnippet/visualbasic/m-system.int32.equals-sy_1.vb)]\n [!code-cpp[Int32_Equals#1](~/add/codesnippet/cpp/m-system.int32.equals-sy_1.cpp)]"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if <code>obj</code> is an instance of <xref href="System.Int32"></xref> and equals the value of this instance; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Int32.Equals*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.GetHashCode
  id: GetHashCode
  parent: System.Int32
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Int32.GetHashCode()
  fullName: System.Int32.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Int32.GetHashCode*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.GetTypeCode
  id: GetTypeCode
  parent: System.Int32
  langs:
  - csharp
  name: GetTypeCode()
  nameWithType: Int32.GetTypeCode()
  fullName: System.Int32.GetTypeCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the <xref href="System.TypeCode"></xref> for value type <xref href="System.Int32"></xref>.
  syntax:
    content: public TypeCode GetTypeCode ();
    parameters: []
    return:
      type: System.TypeCode
      description: The enumerated constant, <xref href="System.TypeCode"></xref>.
  overload: System.Int32.GetTypeCode*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.MaxValue
  id: MaxValue
  parent: System.Int32
  langs:
  - csharp
  name: MaxValue
  nameWithType: Int32.MaxValue
  fullName: System.Int32.MaxValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents the largest possible value of an <xref href="System.Int32"></xref>. This field is constant.
  remarks: The value of this constant is 2,147,483,647; that is, hexadecimal 0x7FFFFFFF.
  example:
  - "The following example uses the MaxValue property to prevent an <xref:System.OverflowException> when converting to an <xref:System.Int32> value.  \n  \n [!code-cs[System.Int32.MaxValue#1](~/add/codesnippet/csharp/f-system.int32.maxvalue_1.cs)]\n [!code-cpp[System.Int32.MaxValue#1](~/add/codesnippet/cpp/f-system.int32.maxvalue_1.cpp)]\n [!code-vb[System.Int32.MaxValue#1](~/add/codesnippet/visualbasic/f-system.int32.maxvalue_1.vb)]"
  syntax:
    content: public const int MaxValue = 2147483647;
    return:
      type: System.Int32
      description: To be added.
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.MinValue
  id: MinValue
  parent: System.Int32
  langs:
  - csharp
  name: MinValue
  nameWithType: Int32.MinValue
  fullName: System.Int32.MinValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents the smallest possible value of <xref href="System.Int32"></xref>. This field is constant.
  remarks: The value of this constant is -2,147,483,648; that is, hexadecimal 0x80000000.
  example:
  - "The following example uses the MinValue property to prevent an <xref:System.OverflowException> when converting to an <xref:System.Int32> value.  \n  \n [!code-cs[System.Int32.MaxValue#1](~/add/codesnippet/csharp/f-system.int32.minvalue_1.cs)]\n [!code-cpp[System.Int32.MaxValue#1](~/add/codesnippet/cpp/f-system.int32.minvalue_1.cpp)]\n [!code-vb[System.Int32.MaxValue#1](~/add/codesnippet/visualbasic/f-system.int32.minvalue_1.vb)]"
  syntax:
    content: public const int MinValue = -2147483648;
    return:
      type: System.Int32
      description: To be added.
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.Parse(System.String)
  id: Parse(System.String)
  parent: System.Int32
  langs:
  - csharp
  name: Parse(String)
  nameWithType: Int32.Parse(String)
  fullName: System.Int32.Parse(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number to its 32-bit signed integer equivalent.
  remarks: "The `s` parameter contains a number of the form:  \n  \n [ws][sign]digits[ws]  \n  \n Items in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|ws|Optional white space.|  \n|sign|An optional sign.|  \n|digits|A sequence of digits ranging from 0 to 9.|  \n  \n The `s` parameter is interpreted using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. In addition to decimal digits, only leading and trailing spaces together with a leading sign are allowed. To explicitly define the style elements that can be present in `s`, use either the <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName> or the <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName> method.  \n  \n The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object initialized for the current system culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>. To parse a string using the formatting information of some other culture, use the <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName> method."
  example:
  - "The following example demonstrates how to convert a string value into a 32-bit signed integer value using the Parse method. The resulting integer value is then displayed to the console.  \n  \n [!code-cpp[System.Int32.Parse#1](~/add/codesnippet/cpp/m-system.int32.parse-sys_2_1.cpp)]\n [!code-cs[System.Int32.Parse#1](~/add/codesnippet/csharp/m-system.int32.parse-sys_2_1.cs)]\n [!code-vb[System.Int32.Parse#1](~/add/codesnippet/visualbasic/m-system.int32.parse-sys_2_1.vb)]"
  syntax:
    content: public static int Parse (string s);
    parameters:
    - id: s
      type: System.String
      description: A string containing a number to convert.
    return:
      type: System.Int32
      description: A 32-bit signed integer equivalent to the number contained in <code>s</code>.
  overload: System.Int32.Parse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>s</code> is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>s</code> is not in the correct format.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>s</code> represents a number less than <xref href="System.Int32"></xref> or greater than <xref href="System.Int32"></xref>.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.Parse(System.String,System.Globalization.NumberStyles)
  id: Parse(System.String,System.Globalization.NumberStyles)
  parent: System.Int32
  langs:
  - csharp
  name: Parse(String,NumberStyles)
  nameWithType: Int32.Parse(String,NumberStyles)
  fullName: System.Int32.Parse(String,NumberStyles)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number in a specified style to its 32-bit signed integer equivalent.
  remarks: "The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, or the thousands separator symbol) that are allowed in the `s` parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. Depending on the value of `style`, the `s` parameter may include the following elements:  \n  \n [ws][$][sign][digits,]digits[.fractional_digits][e[sign]exponential_digits][ws]  \n  \n Or, if `style` includes <xref:System.Globalization.NumberStyles>:  \n  \n [ws]hexdigits[ws]  \n  \n Items in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space. White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> properties of the current culture. The current culture's currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*sign*|An optional sign. The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*digits*<br /><br /> *fractional_digits*<br /><br /> *exponential_digits*|A sequence of digits from 0 through 9. For *fractional_digits*, only the digit 0 is valid.|  \n|*,*|A culture-specific thousands separator symbol. The current culture's thousands separator can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*.*|A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, an <xref:System.OverflowException> is thrown.|  \n|*e*|The 'e' or 'E' character, which indicates that the value is represented in exponential notation. The `s` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  \n  \n A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be but are not required to be present in the input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `s`.  \n  \n|NumberStyles value|Elements permitted in s in addition to digits|  \n|------------------------|---------------------------------------------------|  \n|<xref:System.Globalization.NumberStyles>|The *digits* element only.|  \n|<xref:System.Globalization.NumberStyles>|The decimal point ( *.* ) and *fractional-digits* elements.|  \n|<xref:System.Globalization.NumberStyles>|The `s` parameter can also use exponential notation.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the beginning of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the end of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element at the beginning of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element at the end of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element in the form of parentheses enclosing the numeric value.|  \n|<xref:System.Globalization.NumberStyles>|The thousands separator ( *,* ) element.|  \n|<xref:System.Globalization.NumberStyles>|The *$* element.|  \n|<xref:System.Globalization.NumberStyles>|All. The `s` parameter cannot represent a hexadecimal number or a number in exponential notation.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point ( *.* ) symbol. The `s` parameter can also use exponential notation.|  \n|<xref:System.Globalization.NumberStyles>|The `ws`, `sign`, thousands separator ( *,* ), and decimal point ( *.* ) elements.|  \n|<xref:System.Globalization.NumberStyles>|All styles, except `s` cannot represent a hexadecimal number.|  \n  \n If the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag is used, `s` must be a hexadecimal value without a prefix. For example, \"C9AF3\" parses successfully, but \"0xC9AF3\" does not. The only other flags that can be combined with the `s` parameter it are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles?displayProperty=fullName>, that includes both white space flags.)  \n  \n The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture. To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName> overload."
  example:
  - "The following example uses the Parse method to parse the string representations of several <xref:System.Int32> values. The current culture for the example is en-US.  \n  \n [!code-cs[System.Int32.Parse#2](~/add/codesnippet/csharp/m-system.int32.parse-sys_0_1.cs)]\n [!code-cpp[System.Int32.Parse#2](~/add/codesnippet/cpp/m-system.int32.parse-sys_0_1.cpp)]\n [!code-vb[System.Int32.Parse#2](~/add/codesnippet/visualbasic/m-system.int32.parse-sys_0_1.vb)]"
  syntax:
    content: public static int Parse (string s, System.Globalization.NumberStyles style);
    parameters:
    - id: s
      type: System.String
      description: A string containing a number to convert.
    - id: style
      type: System.Globalization.NumberStyles
      description: A bitwise combination of the enumeration values that indicates the style elements that can be present in `s`. A typical value to specify is <xref href="System.Globalization.NumberStyles"></xref>.
    return:
      type: System.Int32
      description: A 32-bit signed integer equivalent to the number specified in <code>s</code>.
  overload: System.Int32.Parse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>s</code> is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>style</code> is not a <xref href=\"System.Globalization.NumberStyles\"></xref> value.  \n  \n -or-  \n  \n <code>style</code> is not a combination of <xref href=\"System.Globalization.NumberStyles\"></xref> and <xref href=\"System.Globalization.NumberStyles\"></xref> values."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>s</code> is not in a format compliant with <code>style</code>.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>s</code> represents a number less than <xref href=\"System.Int32\"></xref> or greater than <xref href=\"System.Int32\"></xref>.  \n  \n -or-  \n  \n <code>s</code> includes non-zero, fractional digits."
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.Parse(System.String,System.IFormatProvider)
  id: Parse(System.String,System.IFormatProvider)
  parent: System.Int32
  langs:
  - csharp
  name: Parse(String,IFormatProvider)
  nameWithType: Int32.Parse(String,IFormatProvider)
  fullName: System.Int32.Parse(String,IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number in a specified culture-specific format to its 32-bit signed integer equivalent.
  remarks: "This overload of the Parse method is typically used to convert text that can be formatted in a variety of ways to an <xref:System.Int32> value. For example, it can be used to convert the text entered by a user into an HTML text box to a numeric value.  \n  \n The `s` parameter contains a number of the form:  \n  \n [ws][sign]digits[ws]  \n  \n Items in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space.|  \n|*sign*|An optional sign.|  \n|*digits*|A sequence of digits ranging from 0 to 9.|  \n  \n The `s` parameter is interpreted using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. In addition to decimal digits, only leading and trailing spaces together with a leading sign are allowed. To explicitly define the style elements that can be present in `s`, use the <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName> method.  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation, such as a <xref:System.Globalization.NumberFormatInfo> or <xref:System.Globalization.CultureInfo> object. The `provider` parameter supplies culture-specific information about the format of `s`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used."
  example:
  - "The following example is the button click event handler of a Web form. It uses the array returned by the <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=fullName> property to determine the user's locale. It then instantiates a <xref:System.Globalization.CultureInfo> object that corresponds to that locale. The <xref:System.Globalization.NumberFormatInfo> object that belongs to that <xref:System.Globalization.CultureInfo> object is then passed to the Parse method to convert the user's input to an <xref:System.Int32> value.  \n  \n [!code-cs[ParseMethod#4](~/add/codesnippet/csharp/parsemethod/Default.aspx.cs#4)]\n [!code-vb[ParseMethod#4](~/add/codesnippet/visualbasic/parsemethod/Default.aspx.vb#4)]"
  syntax:
    content: public static int Parse (string s, IFormatProvider provider);
    parameters:
    - id: s
      type: System.String
      description: A string containing a number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information about `s`.
    return:
      type: System.Int32
      description: A 32-bit signed integer equivalent to the number specified in <code>s</code>.
  overload: System.Int32.Parse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>s</code> is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>s</code> is not of the correct format.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>s</code> represents a number less than <xref href="System.Int32"></xref> or greater than <xref href="System.Int32"></xref>.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  parent: System.Int32
  langs:
  - csharp
  name: Parse(String,NumberStyles,IFormatProvider)
  nameWithType: Int32.Parse(String,NumberStyles,IFormatProvider)
  fullName: System.Int32.Parse(String,NumberStyles,IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent.
  remarks: "The `style` parameter defines the style elements (such as white space or the positive sign) that are allowed in the `s` parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. Depending on the value of `style`, the `s` parameter may include the following elements:  \n  \n [ws][$][sign][digits,]digits[.fractional_digist][e[sign]exponential_digits][ws]  \n  \n Or, if `style` includes <xref:System.Globalization.NumberStyles>:  \n  \n [ws]hexdigits[ws]  \n  \n Items in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space. White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter. The currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*sign*|An optional sign. The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag or at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*digits*<br /><br /> *fractional_digits*<br /><br /> *exponential_digits*|A sequence of digits from 0 through 9. For *fractional_digits*, only the digit 0 is valid.|  \n|*,*|A culture-specific thousands separator symbol. The thousands separator of the culture specified by `provider` can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*.*|A culture-specific decimal point symbol. The decimal point symbol of the culture specified by `provider` can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.<br /><br /> Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, an <xref:System.OverflowException> is thrown.|  \n|*e*|The 'e' or 'E' character, which indicates that the value is represented in exponential notation. The `s` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  \n  \n A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully if it is in the range of the <xref:System.Int32> type. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be but are not required to be present in this input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `s`.  \n  \n|Non-composite NumberStyles values|Elements permitted in s in addition to digits|  \n|----------------------------------------|---------------------------------------------------|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|Decimal digits only.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The decimal point ( *.* ) and *fractional-digits* elements. However, *fractional-digits* must consist of only one or more 0 digits or an <xref:System.OverflowException> is thrown.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The `s` parameter can also use exponential notation. If `s` represents a number in exponential notation, it must represent an integer within the range of the <xref:System.Int32> data type without a non-zero, fractional component.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *ws* element at the beginning of `s`.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *ws* element at the end of `s`.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|A positive sign can appear before *digits*.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|A positive sign can appear after *digits*.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *sign* element in the form of parentheses enclosing the numeric value.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The thousands separator ( *,* ) element.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *$* element.|  \n  \n If the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag is used, `s` must be a hexadecimal value without a prefix. For example, \"C9AF3\" parses successfully, but \"0xC9AF3\" does not. The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration has a composite number style, <xref:System.Globalization.NumberStyles?displayProperty=fullName>, that includes both white space flags.)  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation, such as a <xref:System.Globalization.NumberFormatInfo> or <xref:System.Globalization.CultureInfo> object. The `provider` parameter supplies culture-specific information used in parsing. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used."
  example:
  - "The following example uses a variety of `style` and `provider` parameters to parse the string representations of <xref:System.Int32> values. It also illustrates some of the different ways the same string can be interpreted depending on the culture whose formatting information is used for the parsing operation.  \n  \n [!code-cpp[System.Int32.Parse#3](~/add/codesnippet/cpp/aa476481-f3a4-4701-a8be-_1.cpp)]\n [!code-cs[System.Int32.Parse#3](~/add/codesnippet/csharp/aa476481-f3a4-4701-a8be-_1.cs)]\n [!code-vb[System.Int32.Parse#3](~/add/codesnippet/visualbasic/aa476481-f3a4-4701-a8be-_1.vb)]"
  syntax:
    content: public static int Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);
    parameters:
    - id: s
      type: System.String
      description: A string containing a number to convert.
    - id: style
      type: System.Globalization.NumberStyles
      description: A bitwise combination of enumeration values that indicates the style elements that can be present in `s`. A typical value to specify is <xref href="System.Globalization.NumberStyles"></xref>.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific information about the format of `s`.
    return:
      type: System.Int32
      description: A 32-bit signed integer equivalent to the number specified in <code>s</code>.
  overload: System.Int32.Parse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>s</code> is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>style</code> is not a <xref href=\"System.Globalization.NumberStyles\"></xref> value.  \n  \n -or-  \n  \n <code>style</code> is not a combination of <xref href=\"System.Globalization.NumberStyles\"></xref> and <xref href=\"System.Globalization.NumberStyles\"></xref> values."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>s</code> is not in a format compliant with <code>style</code>.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>s</code> represents a number less than <xref href=\"System.Int32\"></xref> or greater than <xref href=\"System.Int32\"></xref>.  \n  \n -or-  \n  \n <code>s</code> includes non-zero, fractional digits."
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)
  id: System#IConvertible#ToBoolean(System.IFormatProvider)
  isEii: true
  parent: System.Int32
  langs:
  - csharp
  name: System.IConvertible.ToBoolean(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToBoolean(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToBoolean(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see &lt;xref:System.IConvertible.ToBoolean%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Int32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.Int32%29?displayProperty=fullName> method.
  syntax:
    content: bool IConvertible.ToBoolean (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if the value of the current instance is not zero; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Int32.System#IConvertible#ToBoolean*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.System#IConvertible#ToByte(System.IFormatProvider)
  id: System#IConvertible#ToByte(System.IFormatProvider)
  isEii: true
  parent: System.Int32
  langs:
  - csharp
  name: System.IConvertible.ToByte(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToByte(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToByte(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see &lt;xref:System.IConvertible.ToByte%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Int32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToByte%28System.Int32%29?displayProperty=fullName> method.
  syntax:
    content: byte IConvertible.ToByte (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Byte
      description: The value of the current instance, converted to a <xref href="System.Byte"></xref>.
  overload: System.Int32.System#IConvertible#ToByte*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.System#IConvertible#ToChar(System.IFormatProvider)
  id: System#IConvertible#ToChar(System.IFormatProvider)
  isEii: true
  parent: System.Int32
  langs:
  - csharp
  name: System.IConvertible.ToChar(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToChar(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToChar(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see &lt;xref:System.IConvertible.ToChar%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Int32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToChar%28System.Int32%29?displayProperty=fullName> method.
  syntax:
    content: char IConvertible.ToChar (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Char
      description: The value of the current instance, converted to a <xref href="System.Char"></xref>.
  overload: System.Int32.System#IConvertible#ToChar*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)
  id: System#IConvertible#ToDateTime(System.IFormatProvider)
  isEii: true
  parent: System.Int32
  langs:
  - csharp
  name: System.IConvertible.ToDateTime(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToDateTime(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToDateTime(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: This conversion is not supported. Attempting to use this method throws an <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: DateTime IConvertible.ToDateTime (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  overload: System.Int32.System#IConvertible#ToDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: In all cases.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)
  id: System#IConvertible#ToDecimal(System.IFormatProvider)
  isEii: true
  parent: System.Int32
  langs:
  - csharp
  name: System.IConvertible.ToDecimal(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToDecimal(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToDecimal(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see &lt;xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Int32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDecimal%2A?displayProperty=fullName> method.
  syntax:
    content: decimal IConvertible.ToDecimal (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Decimal
      description: The value of the current instance, converted to a <xref href="System.Decimal"></xref>.
  overload: System.Int32.System#IConvertible#ToDecimal*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)
  id: System#IConvertible#ToDouble(System.IFormatProvider)
  isEii: true
  parent: System.Int32
  langs:
  - csharp
  name: System.IConvertible.ToDouble(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToDouble(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToDouble(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see &lt;xref:System.IConvertible.ToDouble%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Int32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.Int32%29?displayProperty=fullName> method.
  syntax:
    content: double IConvertible.ToDouble (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Double
      description: The value of the current instance, converted to a <xref href="System.Double"></xref>.
  overload: System.Int32.System#IConvertible#ToDouble*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)
  id: System#IConvertible#ToInt16(System.IFormatProvider)
  isEii: true
  parent: System.Int32
  langs:
  - csharp
  name: System.IConvertible.ToInt16(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToInt16(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToInt16(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see &lt;xref:System.IConvertible.ToInt16%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Int32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.Int32%29?displayProperty=fullName> method.
  syntax:
    content: short IConvertible.ToInt16 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Int16
      description: The value of the current instance, converted to an <xref href="System.Int16"></xref>.
  overload: System.Int32.System#IConvertible#ToInt16*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)
  id: System#IConvertible#ToInt32(System.IFormatProvider)
  isEii: true
  parent: System.Int32
  langs:
  - csharp
  name: System.IConvertible.ToInt32(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToInt32(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToInt32(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see &lt;xref:System.IConvertible.ToInt32%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Int32> instance is cast to an <xref:System.IConvertible> interface.
  syntax:
    content: int IConvertible.ToInt32 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Int32
      description: The value of the current instance, unchanged.
  overload: System.Int32.System#IConvertible#ToInt32*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)
  id: System#IConvertible#ToInt64(System.IFormatProvider)
  isEii: true
  parent: System.Int32
  langs:
  - csharp
  name: System.IConvertible.ToInt64(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToInt64(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToInt64(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see &lt;xref:System.IConvertible.ToInt64%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Int32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.Int32%29?displayProperty=fullName> method.
  syntax:
    content: long IConvertible.ToInt64 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Int64
      description: The value of the current instance, converted to an <xref href="System.Int64"></xref>.
  overload: System.Int32.System#IConvertible#ToInt64*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)
  id: System#IConvertible#ToSByte(System.IFormatProvider)
  isEii: true
  parent: System.Int32
  langs:
  - csharp
  name: System.IConvertible.ToSByte(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToSByte(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToSByte(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see &lt;xref:System.IConvertible.ToSByte%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Int32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.Int32%29?displayProperty=fullName> method.
  syntax:
    content: sbyte IConvertible.ToSByte (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.SByte
      description: The value of the current instance, converted to an <xref href="System.SByte"></xref>.
  overload: System.Int32.System#IConvertible#ToSByte*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)
  id: System#IConvertible#ToSingle(System.IFormatProvider)
  isEii: true
  parent: System.Int32
  langs:
  - csharp
  name: System.IConvertible.ToSingle(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToSingle(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToSingle(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see &lt;xref:System.IConvertible.ToSingle%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Int32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.Int32%29?displayProperty=fullName> method.
  syntax:
    content: float IConvertible.ToSingle (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Single
      description: The value of the current instance, converted to a <xref href="System.Single"></xref>.
  overload: System.Int32.System#IConvertible#ToSingle*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)
  isEii: true
  parent: System.Int32
  langs:
  - csharp
  name: System.IConvertible.ToType(Type,IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToType(Type,IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToType(Type,IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see &lt;xref:System.IConvertible.ToType%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Int32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the `static` (`Shared` in Visual Basic) <xref:System.Convert.ChangeType%2A?displayProperty=fullName> method instead.
  syntax:
    content: object IConvertible.ToType (Type type, IFormatProvider provider);
    parameters:
    - id: type
      type: System.Type
      description: The type to which to convert this <xref href="System.Int32"></xref> value.
    - id: provider
      type: System.IFormatProvider
      description: An object that provides information about the format of the returned value.
    return:
      type: System.Object
      description: The value of the current instance, converted to <code>type</code>.
  overload: System.Int32.System#IConvertible#ToType*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)
  id: System#IConvertible#ToUInt16(System.IFormatProvider)
  isEii: true
  parent: System.Int32
  langs:
  - csharp
  name: System.IConvertible.ToUInt16(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToUInt16(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToUInt16(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see &lt;xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Int32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.Int32%29?displayProperty=fullName> method.
  syntax:
    content: ushort IConvertible.ToUInt16 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.UInt16
      description: The value of the current instance, converted to a <xref href="System.UInt16"></xref>.
  overload: System.Int32.System#IConvertible#ToUInt16*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)
  id: System#IConvertible#ToUInt32(System.IFormatProvider)
  isEii: true
  parent: System.Int32
  langs:
  - csharp
  name: System.IConvertible.ToUInt32(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToUInt32(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToUInt32(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see &lt;xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Int32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.Int32%29?displayProperty=fullName> method.
  syntax:
    content: uint IConvertible.ToUInt32 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.UInt32
      description: The value of the current instance, converted to a <xref href="System.UInt32"></xref>.
  overload: System.Int32.System#IConvertible#ToUInt32*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)
  id: System#IConvertible#ToUInt64(System.IFormatProvider)
  isEii: true
  parent: System.Int32
  langs:
  - csharp
  name: System.IConvertible.ToUInt64(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToUInt64(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToUInt64(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see &lt;xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName&gt;.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Int32> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.Int32%29?displayProperty=fullName> method.
  syntax:
    content: ulong IConvertible.ToUInt64 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.UInt64
      description: The value of the current instance, converted to a <xref href="System.UInt64"></xref>.
  overload: System.Int32.System#IConvertible#ToUInt64*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.ToString
  id: ToString
  parent: System.Int32
  langs:
  - csharp
  name: ToString()
  nameWithType: Int32.ToString()
  fullName: System.Int32.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the numeric value of this instance to its equivalent string representation.
  remarks: "The ToString method formats an <xref:System.Int32> value in the default (\"G\", or general) format by using the <xref:System.Globalization.NumberFormatInfo> object of the current culture. If you want to specify a different format or culture, use the other overloads of the <xref:System.Int32.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Default (\"G\") format|A specific culture|<xref:System.Int32.ToString%28System.IFormatProvider%29>|  \n|A specific format|Default (current) culture|<xref:System.Int32.ToString%28System.String%29>|  \n|A specific format|A specific culture|<xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29>|  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example displays an <xref:System.Int32> value using the default ToString method. It also displays the string representations of the <xref:System.Int32> value that results from using a number of standard format specifiers. The examples are displayed using the formatting conventions of the en-US culture.  \n  \n [!code-cpp[System.Int32.ToString#1](~/add/codesnippet/cpp/m-system.int32.tostring_1.cpp)]\n [!code-vb[System.Int32.ToString#1](~/add/codesnippet/visualbasic/m-system.int32.tostring_1.vb)]\n [!code-cs[System.Int32.ToString#1](~/add/codesnippet/csharp/m-system.int32.tostring_1.cs)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.
  overload: System.Int32.ToString*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Int32
  langs:
  - csharp
  name: ToString(IFormatProvider)
  nameWithType: Int32.ToString(IFormatProvider)
  fullName: System.Int32.ToString(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.
  remarks: "The ToString method formats an <xref:System.Int32> value in the default (\"G\", or general) format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Int32.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Default (\"G\") format|Default (current) culture|<xref:System.Int32.ToString>|  \n|A specific format|Default (current) culture|<xref:System.Int32.ToString%28System.String%29>|  \n|A specific format|A specific culture|<xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29>|  \n  \n The `provider` parameter is an object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string that is returned by this method. The object that implements <xref:System.IFormatProvider> can be any of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting rules are to be used.  \n  \n-   A <xref:System.Globalization.NumberFormatInfo> object that contains specific numeric formatting information for this value.  \n  \n-   A custom object that implements <xref:System.IFormatProvider> and whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> object cannot be obtained from `provider`, the return value is formatted using the <xref:System.Globalization.NumberFormatInfo> object for the thread current culture. For information about the thread current culture, see <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=fullName>.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example displays the string representation of an <xref:System.Int32> value using <xref:System.Globalization.CultureInfo> objects that represent several different cultures.  \n  \n [!code-cpp[System.Int32.ToString#2](~/add/codesnippet/cpp/m-system.int32.tostring-_2_1.cpp)]\n [!code-vb[System.Int32.ToString#2](~/add/codesnippet/visualbasic/m-system.int32.tostring-_2_1.vb)]\n [!code-cs[System.Int32.ToString#2](~/add/codesnippet/csharp/m-system.int32.tostring-_2_1.cs)]"
  syntax:
    content: public string ToString (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of the value of this instance as specified by <code>provider</code>.
  overload: System.Int32.ToString*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.ToString(System.String)
  id: ToString(System.String)
  parent: System.Int32
  langs:
  - csharp
  name: ToString(String)
  nameWithType: Int32.ToString(String)
  fullName: System.Int32.ToString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the numeric value of this instance to its equivalent string representation, using the specified format.
  remarks: "The ToString method formats an <xref:System.Int32> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture. If you want to use the default (\"G\", or general) format or specify a different culture, use the other overloads of the ToString method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Default (\"G\") format|Default (current) culture|<xref:System.Int32.ToString>|  \n|Default (\"G\") format|A specific culture|<xref:System.Int32.ToString%28System.IFormatProvider%29>|  \n|A specific format|A specific culture|<xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29>|  \n  \n The `format` parameter can be any valid standard numeric format specifier except for \"R\", as well as any combination of custom numeric format specifiers. If `format` is `null` or an empty string (\"\"), the return value of this instance is formatted with the general numeric format specifier (\"G\").  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \n  \n The return value of this instance is formatted with the <xref:System.Globalization.NumberFormatInfo> for the current culture."
  example:
  - "The following example displays an <xref:System.Int32> value using each of the supported standard numeric format specifiers, together with two custom numeric format strings. In converting the numeric values to strings, the example uses the formatting conventions of the en-US culture.  \n  \n [!code-cpp[System.Int32.ToString#3](~/add/codesnippet/cpp/m-system.int32.tostring-_0_1.cpp)]\n [!code-vb[System.Int32.ToString#3](~/add/codesnippet/visualbasic/m-system.int32.tostring-_0_1.vb)]\n [!code-cs[System.Int32.ToString#3](~/add/codesnippet/csharp/m-system.int32.tostring-_0_1.cs)]"
  syntax:
    content: public string ToString (string format);
    parameters:
    - id: format
      type: System.String
      description: A standard or custom numeric format string.
    return:
      type: System.String
      description: The string representation of the value of this instance as specified by <code>format</code>.
  overload: System.Int32.ToString*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>format</code> is invalid or not supported.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.Int32
  langs:
  - csharp
  name: ToString(String,IFormatProvider)
  nameWithType: Int32.ToString(String,IFormatProvider)
  fullName: System.Int32.ToString(String,IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.
  remarks: "The ToString method formats an <xref:System.Int32> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to use default format or culture settings, use the other overloads of the <xref:System.Int32.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Default (\"G\") format|Default (current) culture|<xref:System.Int32.ToString>|  \n|Default (\"G\") format|A specific culture|<xref:System.Int32.ToString%28System.IFormatProvider%29>|  \n|A specific format|Default (current) culture|<xref:System.Int32.ToString%28System.String%29>|  \n  \n The `format` parameter can be either a standard or a custom numeric format string. All standard numeric format strings other than \"R\" (or \"r\") are supported, as are all custom numeric format characters. If `format` is `null` or an empty string (\"\"), the return value for this instance is formatted with the general numeric format specifier (\"G\").  \n  \n The `provider` parameter is an object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific format information about the format of the string that is returned by this method. The object that implements <xref:System.IFormatProvider> can be any of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting rules are to be used.  \n  \n-   A <xref:System.Globalization.NumberFormatInfo> object that contains specific numeric formatting information for this value.  \n  \n-   A custom object that implements <xref:System.IFormatProvider> and whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> object cannot be obtained from `provider`, the return value for this instance is formatted with the <xref:System.Globalization.NumberFormatInfo> for the current culture.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example displays a positive and a negative value using each of the supported standard numeric format specifiers for three different cultures.  \n  \n [!code-cpp[System.Int32.ToString#4](~/add/codesnippet/cpp/m-system.int32.tostring-_1_1.cpp)]\n [!code-vb[System.Int32.ToString#4](~/add/codesnippet/visualbasic/m-system.int32.tostring-_1_1.vb)]\n [!code-cs[System.Int32.ToString#4](~/add/codesnippet/csharp/m-system.int32.tostring-_1_1.cs)]"
  syntax:
    content: public string ToString (string format, IFormatProvider provider);
    parameters:
    - id: format
      type: System.String
      description: A standard or custom numeric format string.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of the value of this instance as specified by <code>format</code> and <code>provider</code>.
  overload: System.Int32.ToString*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>format</code> is invalid or not supported.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.TryParse(System.String,System.Int32@)
  id: TryParse(System.String,System.Int32@)
  parent: System.Int32
  langs:
  - csharp
  name: TryParse(String,Int32)
  nameWithType: Int32.TryParse(String,Int32)
  fullName: System.Int32.TryParse(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.
  remarks: "The TryParse method is like the <xref:System.Int32.Parse%2A> method, except the TryParse method does not throw an exception if the conversion fails. It eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be successfully parsed.  \n  \n The `s` parameter contains a number of the form:  \n  \n [ws][sign]digits[ws]  \n  \n Items in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space.|  \n|*sign*|An optional sign.|  \n|*digits*|A sequence of digits ranging from 0 to 9.|  \n  \n The `s` parameter is interpreted using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. In addition to the decimal digits, only leading and trailing spaces together with a leading sign are allowed. To explicitly define the style elements together with the culture-specific formatting information that can be present in `s`, use the <xref:System.Int32.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Int32%40%29?displayProperty=fullName> method.  \n  \n The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object initialized for the current system culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>.  \n  \n This overload of the <xref:System.Int32.TryParse%2A> method interprets all digits in the `s` parameter as decimal digits. To parse the string representation of a hexadecimal number, call the <xref:System.Int32.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Int32%40%29?displayProperty=fullName> overload."
  example:
  - "The following example calls the TryParse method with a number of different string values.  \n  \n [!code-cs[System.Int32.TryParse#1](~/add/codesnippet/csharp/m-system.int32.tryparse-_1.cs)]\n [!code-cpp[System.Int32.TryParse#1](~/add/codesnippet/cpp/m-system.int32.tryparse-_1.cpp)]\n [!code-vb[System.Int32.TryParse#1](~/add/codesnippet/visualbasic/m-system.int32.tryparse-_1.vb)]  \n  \n Some of the strings that the TryParse method is unable to convert in this example are:  \n  \n-   \"9432.0\". The conversion fails because the string cannot contain a decimal separator; it must contain integral digits only.  \n  \n-   \"16,667\". The conversion fails because the string cannot contain group separators; it must contain integral digits only.  \n  \n-   \"(100)\". The conversion fails because the string cannot contain a negative sign other than the one defined by the current culture's <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A?displayProperty=fullName> properties.  \n  \n-   \"01FA\". The conversion fails because the string cannot contain hexadecimal digits; it must contain decimal digits only."
  syntax:
    content: public static bool TryParse (string s, out int result);
    parameters:
    - id: s
      type: System.String
      description: A string containing a number to convert.
    - id: result
      type: System.Int32
      description: When this method returns, contains the 32-bit signed integer value equivalent of the number contained in `s`, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the `s` parameter is <xref uid="langword_csharp_null" name="null" href=""></xref> or <xref href="System.String"></xref>, is not of the correct format, or represents a number less than <xref href="System.Int32"></xref> or greater than <xref href="System.Int32"></xref>. This parameter is passed uninitialized; any value originally supplied in `result` will be overwritten.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if <code>s</code> was converted successfully; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Int32.TryParse*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)
  id: TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)
  parent: System.Int32
  langs:
  - csharp
  name: TryParse(String,NumberStyles,IFormatProvider,Int32)
  nameWithType: Int32.TryParse(String,NumberStyles,IFormatProvider,Int32)
  fullName: System.Int32.TryParse(String,NumberStyles,IFormatProvider,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number in a specified style and culture-specific format to its 32-bit signed integer equivalent. A return value indicates whether the conversion succeeded.
  remarks: "The <xref:System.Int32.TryParse%2A> method is like the <xref:System.Int32.Parse%2A> method, except the TryParse method does not throw an exception if the conversion fails. It eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be parsed successfully.  \n  \n The `style` parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the `s` parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. Depending on the value of `style`, the `s` parameter may include the following elements:  \n  \n [ws][$][sign][digits,]digits[.fractional_digits][e[sign]digits][ws]  \n  \n Or, if the `style` parameter includes <xref:System.Globalization.NumberStyles>:  \n  \n [ws]hexdigits[ws]  \n  \n Items in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space. White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, or at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter. The currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*sign*|An optional sign. A sign symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> or <xref:System.Globalization.NumberStyles?displayProperty=fullName> flags.|  \n|*digits*|A sequence of digits from 0 through 9.|  \n|*,*|A culture-specific thousands separator. The thousands separator of the culture specified by `provider` can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*.*|A culture-specific decimal point symbol. The decimal point symbol of the culture specified by `provider` can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*fractional_digits*|One or more occurrences of the digit 0. Fractional digits can appear in `s` only if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*e*|The 'e' or 'E' character, which indicates that the value is represented in exponential notation. The `s` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  \n  \n A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be but are not required to be present in this input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `s`.  \n  \n|Non-composite NumberStyles values|Elements permitted in s in addition to digits|  \n|----------------------------------------|---------------------------------------------------|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|Decimal digits only.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The decimal point (*.*) and *fractional_digits* elements. However, *fractional_digits* must consist of only one or more 0 digits or the method returns `false`.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The `s` parameter can also use exponential notation. If `s` represents a number in exponential notation, it must represent an integer within the range of the <xref:System.Int32> data type without a non-zero, fractional component.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *ws* element at the beginning of `s`.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *ws* element at the end of `s`.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|A sign can appear before *digits*.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|A sign can appear after *digits*.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *sign* element in the form of parentheses enclosing the numeric value.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The thousands separator (*,*) element.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *$* element.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|All elements. The `s` parameter cannot represent a hexadecimal number or a number in exponential notation.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point (*.*) symbol. The `s` parameter can also use exponential notation.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|The *ws*, *sign*, thousands separator (*,*), and decimal point (*.*) elements.|  \n|<xref:System.Globalization.NumberStyles?displayProperty=fullName>|All styles, except `s` cannot represent a hexadecimal number.|  \n  \n If the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag is used, `s` must be a hexadecimal value without a prefix. For example, \"C9AF3\" parses successfully, but \"0xC9AF3\" does not. The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles?displayProperty=fullName>, that includes both white space flags.)  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation, such as a <xref:System.Globalization.CultureInfo> object or a <xref:System.Globalization.NumberFormatInfo> object, whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `s`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used."
  example:
  - "The following example calls the TryParse method with a number of different string and <xref:System.Globalization.NumberStyles> values.  \n  \n [!code-cpp[System.Int32.TryParse#2](~/add/codesnippet/cpp/3b957430-f086-4303-b329-_1.cpp)]\n [!code-vb[System.Int32.TryParse#2](~/add/codesnippet/visualbasic/3b957430-f086-4303-b329-_1.vb)]\n [!code-cs[System.Int32.TryParse#2](~/add/codesnippet/csharp/3b957430-f086-4303-b329-_1.cs)]"
  syntax:
    content: public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out int result);
    parameters:
    - id: s
      type: System.String
      description: A string containing a number to convert. The string is interpreted using the style specified by `style`.
    - id: style
      type: System.Globalization.NumberStyles
      description: A bitwise combination of enumeration values that indicates the style elements that can be present in `s`. A typical value to specify is <xref href="System.Globalization.NumberStyles"></xref>.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information about `s`.
    - id: result
      type: System.Int32
      description: When this method returns, contains the 32-bit signed integer value equivalent of the number contained in `s`, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the `s` parameter is <xref uid="langword_csharp_null" name="null" href=""></xref> or <xref href="System.String.Empty"></xref>, is not in a format compliant with `style`, or represents a number less than <xref href="System.Int32.MinValue"></xref> or greater than <xref href="System.Int32.MaxValue"></xref>. This parameter is passed uninitialized; any value originally supplied in `result` will be overwritten.
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if <code>s</code> was converted successfully; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Int32.TryParse*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>style</code> is not a <xref href=\"System.Globalization.NumberStyles\"></xref> value.  \n  \n -or-  \n  \n <code>style</code> is not a combination of <xref href=\"System.Globalization.NumberStyles\"></xref> and <xref href=\"System.Globalization.NumberStyles\"></xref> values."
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
- uid: System.OverflowException
  parent: System
  isExternal: false
  name: OverflowException
  nameWithType: OverflowException
  fullName: System.OverflowException
- uid: System.InvalidCastException
  parent: System
  isExternal: false
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.Int32.CompareTo(System.Int32)
  parent: System.Int32
  isExternal: false
  name: CompareTo(Int32)
  nameWithType: Int32.CompareTo(Int32)
  fullName: System.Int32.CompareTo(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32.CompareTo(System.Object)
  parent: System.Int32
  isExternal: false
  name: CompareTo(Object)
  nameWithType: Int32.CompareTo(Object)
  fullName: System.Int32.CompareTo(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32.Equals(System.Int32)
  parent: System.Int32
  isExternal: false
  name: Equals(Int32)
  nameWithType: Int32.Equals(Int32)
  fullName: System.Int32.Equals(Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32.Equals(System.Object)
  parent: System.Int32
  isExternal: false
  name: Equals(Object)
  nameWithType: Int32.Equals(Object)
  fullName: System.Int32.Equals(Object)
- uid: System.Int32.GetHashCode
  parent: System.Int32
  isExternal: false
  name: GetHashCode()
  nameWithType: Int32.GetHashCode()
  fullName: System.Int32.GetHashCode()
- uid: System.Int32.GetTypeCode
  parent: System.Int32
  isExternal: false
  name: GetTypeCode()
  nameWithType: Int32.GetTypeCode()
  fullName: System.Int32.GetTypeCode()
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: TypeCode
  nameWithType: TypeCode
  fullName: System.TypeCode
- uid: System.Int32.MaxValue
  parent: System.Int32
  isExternal: false
  name: MaxValue
  nameWithType: Int32.MaxValue
  fullName: System.Int32.MaxValue
- uid: System.Int32.MinValue
  parent: System.Int32
  isExternal: false
  name: MinValue
  nameWithType: Int32.MinValue
  fullName: System.Int32.MinValue
- uid: System.Int32.Parse(System.String)
  parent: System.Int32
  isExternal: false
  name: Parse(String)
  nameWithType: Int32.Parse(String)
  fullName: System.Int32.Parse(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32.Parse(System.String,System.Globalization.NumberStyles)
  parent: System.Int32
  isExternal: false
  name: Parse(String,NumberStyles)
  nameWithType: Int32.Parse(String,NumberStyles)
  fullName: System.Int32.Parse(String,NumberStyles)
- uid: System.Globalization.NumberStyles
  parent: System.Globalization
  isExternal: false
  name: NumberStyles
  nameWithType: NumberStyles
  fullName: System.Globalization.NumberStyles
- uid: System.Int32.Parse(System.String,System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: Parse(String,IFormatProvider)
  nameWithType: Int32.Parse(String,IFormatProvider)
  fullName: System.Int32.Parse(String,IFormatProvider)
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: Parse(String,NumberStyles,IFormatProvider)
  nameWithType: Int32.Parse(String,NumberStyles,IFormatProvider)
  fullName: System.Int32.Parse(String,NumberStyles,IFormatProvider)
- uid: System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToBoolean(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToBoolean(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToBoolean(IFormatProvider)
- uid: System.Int32.System#IConvertible#ToByte(System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToByte(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToByte(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToByte(IFormatProvider)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Int32.System#IConvertible#ToChar(System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToChar(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToChar(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToChar(IFormatProvider)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToDateTime(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToDateTime(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToDateTime(IFormatProvider)
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToDecimal(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToDecimal(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToDecimal(IFormatProvider)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToDouble(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToDouble(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToDouble(IFormatProvider)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToInt16(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToInt16(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToInt16(IFormatProvider)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToInt32(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToInt32(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToInt32(IFormatProvider)
- uid: System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToInt64(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToInt64(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToInt64(IFormatProvider)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToSByte(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToSByte(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToSByte(IFormatProvider)
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToSingle(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToSingle(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToSingle(IFormatProvider)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToType(Type,IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToType(Type,IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToType(Type,IFormatProvider)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToUInt16(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToUInt16(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToUInt16(IFormatProvider)
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToUInt32(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToUInt32(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToUInt32(IFormatProvider)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToUInt64(IFormatProvider)
  nameWithType: Int32.System.IConvertible.ToUInt64(IFormatProvider)
  fullName: System.Int32.System.IConvertible.ToUInt64(IFormatProvider)
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Int32.ToString
  parent: System.Int32
  isExternal: false
  name: ToString()
  nameWithType: Int32.ToString()
  fullName: System.Int32.ToString()
- uid: System.Int32.ToString(System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: ToString(IFormatProvider)
  nameWithType: Int32.ToString(IFormatProvider)
  fullName: System.Int32.ToString(IFormatProvider)
- uid: System.Int32.ToString(System.String)
  parent: System.Int32
  isExternal: false
  name: ToString(String)
  nameWithType: Int32.ToString(String)
  fullName: System.Int32.ToString(String)
- uid: System.Int32.ToString(System.String,System.IFormatProvider)
  parent: System.Int32
  isExternal: false
  name: ToString(String,IFormatProvider)
  nameWithType: Int32.ToString(String,IFormatProvider)
  fullName: System.Int32.ToString(String,IFormatProvider)
- uid: System.Int32.TryParse(System.String,System.Int32@)
  parent: System.Int32
  isExternal: false
  name: TryParse(String,Int32)
  nameWithType: Int32.TryParse(String,Int32)
  fullName: System.Int32.TryParse(String,Int32)
- uid: System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)
  parent: System.Int32
  isExternal: false
  name: TryParse(String,NumberStyles,IFormatProvider,Int32)
  nameWithType: Int32.TryParse(String,NumberStyles,IFormatProvider,Int32)
  fullName: System.Int32.TryParse(String,NumberStyles,IFormatProvider,Int32)
- uid: System.Int32.CompareTo*
  parent: System.Int32
  isExternal: false
  name: CompareTo
  nameWithType: Int32.CompareTo
- uid: System.Int32.Equals*
  parent: System.Int32
  isExternal: false
  name: Equals
  nameWithType: Int32.Equals
- uid: System.Int32.GetHashCode*
  parent: System.Int32
  isExternal: false
  name: GetHashCode
  nameWithType: Int32.GetHashCode
- uid: System.Int32.GetTypeCode*
  parent: System.Int32
  isExternal: false
  name: GetTypeCode
  nameWithType: Int32.GetTypeCode
- uid: System.Int32.Parse*
  parent: System.Int32
  isExternal: false
  name: Parse
  nameWithType: Int32.Parse
- uid: System.Int32.System#IConvertible#ToBoolean*
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToBoolean
  nameWithType: Int32.System.IConvertible.ToBoolean
- uid: System.Int32.System#IConvertible#ToByte*
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToByte
  nameWithType: Int32.System.IConvertible.ToByte
- uid: System.Int32.System#IConvertible#ToChar*
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToChar
  nameWithType: Int32.System.IConvertible.ToChar
- uid: System.Int32.System#IConvertible#ToDateTime*
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToDateTime
  nameWithType: Int32.System.IConvertible.ToDateTime
- uid: System.Int32.System#IConvertible#ToDecimal*
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToDecimal
  nameWithType: Int32.System.IConvertible.ToDecimal
- uid: System.Int32.System#IConvertible#ToDouble*
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToDouble
  nameWithType: Int32.System.IConvertible.ToDouble
- uid: System.Int32.System#IConvertible#ToInt16*
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToInt16
  nameWithType: Int32.System.IConvertible.ToInt16
- uid: System.Int32.System#IConvertible#ToInt32*
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToInt32
  nameWithType: Int32.System.IConvertible.ToInt32
- uid: System.Int32.System#IConvertible#ToInt64*
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToInt64
  nameWithType: Int32.System.IConvertible.ToInt64
- uid: System.Int32.System#IConvertible#ToSByte*
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToSByte
  nameWithType: Int32.System.IConvertible.ToSByte
- uid: System.Int32.System#IConvertible#ToSingle*
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToSingle
  nameWithType: Int32.System.IConvertible.ToSingle
- uid: System.Int32.System#IConvertible#ToType*
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToType
  nameWithType: Int32.System.IConvertible.ToType
- uid: System.Int32.System#IConvertible#ToUInt16*
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToUInt16
  nameWithType: Int32.System.IConvertible.ToUInt16
- uid: System.Int32.System#IConvertible#ToUInt32*
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToUInt32
  nameWithType: Int32.System.IConvertible.ToUInt32
- uid: System.Int32.System#IConvertible#ToUInt64*
  parent: System.Int32
  isExternal: false
  name: System.IConvertible.ToUInt64
  nameWithType: Int32.System.IConvertible.ToUInt64
- uid: System.Int32.ToString*
  parent: System.Int32
  isExternal: false
  name: ToString
  nameWithType: Int32.ToString
- uid: System.Int32.TryParse*
  parent: System.Int32
  isExternal: false
  name: TryParse
  nameWithType: Int32.TryParse
