### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualC.StlClr.IList`1
  id: IList`1
  children:
  - Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)
  - Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  - Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)
  - Microsoft.VisualC.StlClr.IList`1.back
  - Microsoft.VisualC.StlClr.IList`1.back_item
  - Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)
  - Microsoft.VisualC.StlClr.IList`1.clear
  - Microsoft.VisualC.StlClr.IList`1.empty
  - Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)
  - Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  - Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  - Microsoft.VisualC.StlClr.IList`1.front
  - Microsoft.VisualC.StlClr.IList`1.front_item
  - Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Collections.IEnumerable)
  - Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  - Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Int32,`0)
  - Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`0)
  - Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})
  - Microsoft.VisualC.StlClr.IList`1.pop_back
  - Microsoft.VisualC.StlClr.IList`1.pop_front
  - Microsoft.VisualC.StlClr.IList`1.push_back(`0)
  - Microsoft.VisualC.StlClr.IList`1.push_front(`0)
  - Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)
  - Microsoft.VisualC.StlClr.IList`1.remove(`0)
  - Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)
  - Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)
  - Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)
  - Microsoft.VisualC.StlClr.IList`1.reverse
  - Microsoft.VisualC.StlClr.IList`1.size
  - Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})
  - Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList{`0})
  - Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  - Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  - Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList{`0})
  - Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})
  langs:
  - csharp
  name: IList<TValue>
  nameWithType: IList<TValue>
  fullName: Microsoft.VisualC.StlClr.IList<TValue>
  type: Interface
  summary: Defines the interface for an STL/CLR [list](../Topic/list%20\(STL-CLR\).md) object.
  remarks: '[!INCLUDE[unnamed_parm](~/add/includes/unnamed-parm-md.md)]'
  syntax:
    content: 'public interface IList<TValue> : ICloneable, Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer<TValue>, System.Collections.ICollection'
    typeParameters:
    - id: TValue
      description: The type of a list element.
  implements:
  - Microsoft.VisualC.StlClr.Generic.IBidirectionalContainer<TValue>
  - System.Collections.ICollection
  - System.ICloneable
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)
  id: assign(System.Collections.IEnumerable)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: assign(IEnumerable)
  nameWithType: IList<TValue>.assign(IEnumerable)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(IEnumerable)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Replaces the controlled sequence with the sequence that is designated by the given enumerator.
  remarks: For more information, see [list::assign (STL/CLR)](../Topic/list::assign%20\(STL-CLR\).md).
  syntax:
    content: public void assign (System.Collections.IEnumerable _Right);
    parameters:
    - id: _Right
      type: System.Collections.IEnumerable
      description: The enumeration whose elements are to be inserted into the container.
  overload: Microsoft.VisualC.StlClr.IList`1.assign*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  id: assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: assign(IInputIterator<TValue>,IInputIterator<TValue>)
  nameWithType: IList<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Replaces the controlled sequence with the sequence <code>[</code><code>_First</code><code>,</code><code>_Last</code><code>)</code>.
  remarks: For more information, see [list::assign (STL/CLR)](../Topic/list::assign%20\(STL-CLR\).md).
  syntax:
    content: public void assign (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _First, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Last);
    parameters:
    - id: _First
      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1
      description: The beginning position of the range of elements to insert into the container.
    - id: _Last
      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1
      description: The first position beyond the range of elements to insert into the container.
  overload: Microsoft.VisualC.StlClr.IList`1.assign*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)
  id: assign(System.Int32,`0)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: assign(Int32,TValue)
  nameWithType: IList<TValue>.assign(Int32,TValue)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(Int32,TValue)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Replaces the controlled sequence with the specified number of the given element.
  remarks: For more information, see [list::assign (STL/CLR)](../Topic/list::assign%20\(STL-CLR\).md).
  syntax:
    content: public void assign (int _Count, TValue _Val);
    parameters:
    - id: _Count
      type: System.Int32
      description: The number of elements to insert into the container.
    - id: _Val
      type: TValue
      description: The value of the elements to insert into the container.
  overload: Microsoft.VisualC.StlClr.IList`1.assign*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.back
  id: back
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: back()
  nameWithType: IList<TValue>.back()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.back()
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Accesses the last element of the container.
  remarks: For more information, see [list::back (STL/CLR)](../Topic/list::back%20\(STL-CLR\).md).
  syntax:
    content: public TValue back ();
    parameters: []
    return:
      type: TValue@
      description: The last element of the controlled sequence, which must be non-empty.
  overload: Microsoft.VisualC.StlClr.IList`1.back*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.back_item
  id: back_item
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: back_item
  nameWithType: IList<TValue>.back_item
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.back_item
  type: Property
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Accesses the last element of the container.
  remarks: For more information, see [list::back_item (STL/CLR)](../Topic/list::back_item%20\(STL-CLR\).md).
  syntax:
    content: public TValue back_item { get; set; }
    return:
      type: TValue
      description: The last element of the controlled sequence, which must be non-empty.
  overload: Microsoft.VisualC.StlClr.IList`1.back_item*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)
  id: begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: begin(ContainerBidirectionalIterator<TValue>)
  nameWithType: IList<TValue>.begin(ContainerBidirectionalIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.begin(ContainerBidirectionalIterator<TValue>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Designates the beginning of the controlled sequence.
  remarks: For more information, see [list::begin (STL/CLR)](../Topic/list::begin%20\(STL-CLR\).md).
  syntax:
    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) begin (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> );
    parameters:
    - id: ''
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1
      description: To be added.
    return:
      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)
      description: An iterator.
  overload: Microsoft.VisualC.StlClr.IList`1.begin*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.clear
  id: clear
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: clear()
  nameWithType: IList<TValue>.clear()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.clear()
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Removes all elements from the container.
  remarks: For more information, see [list::clear (STL/CLR)](../Topic/list::clear%20\(STL-CLR\).md).
  syntax:
    content: public void clear ();
    parameters: []
  overload: Microsoft.VisualC.StlClr.IList`1.clear*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.empty
  id: empty
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: empty()
  nameWithType: IList<TValue>.empty()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.empty()
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Tests whether the container has no elements.
  remarks: For more information, see [list::empty (STL/CLR)](../Topic/list::empty%20\(STL-CLR\).md).
  syntax:
    content: public bool empty ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the container has no elements; otherwise, `false`.'
  overload: Microsoft.VisualC.StlClr.IList`1.empty*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)
  id: end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: end(ContainerBidirectionalIterator<TValue>)
  nameWithType: IList<TValue>.end(ContainerBidirectionalIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.end(ContainerBidirectionalIterator<TValue>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Designates the end of the controlled sequence.
  remarks: For more information, see [list::end (STL/CLR)](../Topic/list::end%20\(STL-CLR\).md).
  syntax:
    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) end (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> );
    parameters:
    - id: ''
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1
      description: To be added.
    return:
      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)
      description: An iterator.
  overload: Microsoft.VisualC.StlClr.IList`1.end*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  id: erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)
  nameWithType: IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  syntax:
    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where);
    parameters:
    - id: ''
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1
      description: To be added.
    - id: _Where
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator
      description: To be added.
    return:
      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IList`1.erase*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  id: erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)
  nameWithType: IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  syntax:
    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _First_iter, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Last_iter);
    parameters:
    - id: ''
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1
      description: To be added.
    - id: _First_iter
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator
      description: To be added.
    - id: _Last_iter
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator
      description: To be added.
    return:
      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IList`1.erase*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.front
  id: front
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: front()
  nameWithType: IList<TValue>.front()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.front()
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Accesses the first element of the container.
  remarks: For more information, see [list::front (STL/CLR)](../Topic/list::front%20\(STL-CLR\).md).
  syntax:
    content: public TValue front ();
    parameters: []
    return:
      type: TValue@
      description: The first element of the controlled sequence, which must be non-empty.
  overload: Microsoft.VisualC.StlClr.IList`1.front*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.front_item
  id: front_item
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: front_item
  nameWithType: IList<TValue>.front_item
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.front_item
  type: Property
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Accesses the first element of the container.
  remarks: For more information, see [list::front_item (STL/CLR)](../Topic/list::front_item%20\(STL-CLR\).md).
  syntax:
    content: public TValue front_item { get; set; }
    return:
      type: TValue
      description: The first element of the controlled sequence, which must be non-empty.
  overload: Microsoft.VisualC.StlClr.IList`1.front_item*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Collections.IEnumerable)
  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Collections.IEnumerable)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: insert(ContainerBidirectionalIterator,IEnumerable)
  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,IEnumerable)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,IEnumerable)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  syntax:
    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where_iter, System.Collections.IEnumerable _Right);
    parameters:
    - id: _Where_iter
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator
      description: To be added.
    - id: _Right
      type: System.Collections.IEnumerable
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IList`1.insert*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)
  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  syntax:
    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _First, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Last);
    parameters:
    - id: _Where
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator
      description: To be added.
    - id: _First
      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1
      description: To be added.
    - id: _Last
      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IList`1.insert*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Int32,`0)
  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Int32,`0)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: insert(ContainerBidirectionalIterator,Int32,TValue)
  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,Int32,TValue)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,Int32,TValue)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  syntax:
    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, int _Count, TValue _Val);
    parameters:
    - id: _Where
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator
      description: To be added.
    - id: _Count
      type: System.Int32
      description: To be added.
    - id: _Val
      type: TValue
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IList`1.insert*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`0)
  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`0)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)
  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  syntax:
    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) insert (ref Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, TValue _Val);
    parameters:
    - id: ''
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1
      description: To be added.
    - id: _Where
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator
      description: To be added.
    - id: _Val
      type: TValue
      description: To be added.
    return:
      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IList`1.insert*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})
  id: merge(Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)
  nameWithType: IList<TValue>.merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Merges two ordered controlled sequences.
  remarks: For more information, see [list::merge (STL/CLR)](../Topic/list::merge%20\(STL-CLR\).md).
  syntax:
    content: public void merge (Microsoft.VisualC.StlClr.IList<TValue> _Right, Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,bool> _Pred);
    parameters:
    - id: _Right
      type: Microsoft.VisualC.StlClr.IList`1
      description: The container to merge into this container.
    - id: _Pred
      type: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}
      description: The Boolean functor for comparing pairs of elements.
  overload: Microsoft.VisualC.StlClr.IList`1.merge*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.pop_back
  id: pop_back
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: pop_back()
  nameWithType: IList<TValue>.pop_back()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.pop_back()
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Removes the last element from the container.
  remarks: For more information, see [list::pop_back (STL/CLR)](../Topic/list::pop_back%20\(STL-CLR\).md).
  syntax:
    content: public void pop_back ();
    parameters: []
  overload: Microsoft.VisualC.StlClr.IList`1.pop_back*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.pop_front
  id: pop_front
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: pop_front()
  nameWithType: IList<TValue>.pop_front()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.pop_front()
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Removes the first element from the container.
  remarks: For more information, see [list::pop_front (STL/CLR)](../Topic/list::pop_front%20\(STL-CLR\).md).
  syntax:
    content: public void pop_front ();
    parameters: []
  overload: Microsoft.VisualC.StlClr.IList`1.pop_front*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.push_back(`0)
  id: push_back(`0)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: push_back(TValue)
  nameWithType: IList<TValue>.push_back(TValue)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.push_back(TValue)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Adds a new element to the end of the container.
  remarks: For more information, see [list::push_back (STL/CLR)](../Topic/list::push_back%20\(STL-CLR\).md).
  syntax:
    content: public void push_back (TValue _Val);
    parameters:
    - id: _Val
      type: TValue
      description: The value of the element to append to the container.
  overload: Microsoft.VisualC.StlClr.IList`1.push_back*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.push_front(`0)
  id: push_front(`0)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: push_front(TValue)
  nameWithType: IList<TValue>.push_front(TValue)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.push_front(TValue)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Adds a new element to the beginning of the container.
  remarks: For more information, see [list::push_front (STL/CLR)](../Topic/list::push_front%20\(STL-CLR\).md).
  syntax:
    content: public void push_front (TValue _Val);
    parameters:
    - id: _Val
      type: TValue
      description: The value of the element to insert at the beginning of the container.
  overload: Microsoft.VisualC.StlClr.IList`1.push_front*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)
  id: rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: rbegin(ReverseBidirectionalIterator<TValue>)
  nameWithType: IList<TValue>.rbegin(ReverseBidirectionalIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.rbegin(ReverseBidirectionalIterator<TValue>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Designates the beginning of the reversed controlled sequence.
  remarks: For more information, see [list::rbegin (STL/CLR)](../Topic/list::rbegin%20\(STL-CLR\).md).
  syntax:
    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rbegin (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue> );
    parameters:
    - id: ''
      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1
      description: To be added.
    return:
      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)
      description: An iterator.
  overload: Microsoft.VisualC.StlClr.IList`1.rbegin*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.remove(`0)
  id: remove(`0)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: remove(TValue)
  nameWithType: IList<TValue>.remove(TValue)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.remove(TValue)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Removes an element that has a specified value from the container.
  remarks: For more information, see [list::remove (STL/CLR)](../Topic/list::remove%20\(STL-CLR\).md).
  syntax:
    content: public void remove (TValue _Val);
    parameters:
    - id: _Val
      type: TValue
      description: The value of the element to remove from the container.
  overload: Microsoft.VisualC.StlClr.IList`1.remove*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)
  id: rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: rend(ReverseBidirectionalIterator<TValue>)
  nameWithType: IList<TValue>.rend(ReverseBidirectionalIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.rend(ReverseBidirectionalIterator<TValue>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Designates the end of the reversed controlled sequence.
  remarks: For more information, see [list::rend (STL/CLR)](../Topic/list::rend%20\(STL-CLR\).md).
  syntax:
    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rend (ref Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue> );
    parameters:
    - id: ''
      type: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1
      description: To be added.
    return:
      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)
      description: An iterator.
  overload: Microsoft.VisualC.StlClr.IList`1.rend*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)
  id: resize(System.Int32)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: resize(Int32)
  nameWithType: IList<TValue>.resize(Int32)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.resize(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Changes the number of elements in the container to the specified size.
  remarks: For more information, see [list::resize (STL/CLR)](../Topic/list::resize%20\(STL-CLR\).md).
  syntax:
    content: public void resize (int _Newsize);
    parameters:
    - id: _Newsize
      type: System.Int32
      description: The new size of the container.
  overload: Microsoft.VisualC.StlClr.IList`1.resize*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)
  id: resize(System.Int32,`0)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: resize(Int32,TValue)
  nameWithType: IList<TValue>.resize(Int32,TValue)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.resize(Int32,TValue)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Changes the number of elements in the container to the specified size. If the new size is larger than the old size, the given values will be appended to the container.
  remarks: For more information, see [list::resize (STL/CLR)](../Topic/list::resize%20\(STL-CLR\).md).
  syntax:
    content: public void resize (int _Newsize, TValue _Val);
    parameters:
    - id: _Newsize
      type: System.Int32
      description: The new size of the container.
    - id: _Val
      type: TValue
      description: The value of the padding elements.
  overload: Microsoft.VisualC.StlClr.IList`1.resize*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.reverse
  id: reverse
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: reverse()
  nameWithType: IList<TValue>.reverse()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.reverse()
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Reverses the elements of the controlled sequence.
  remarks: For more information, see [list::reverse (STL/CLR)](../Topic/list::reverse%20\(STL-CLR\).md).
  syntax:
    content: public void reverse ();
    parameters: []
  overload: Microsoft.VisualC.StlClr.IList`1.reverse*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.size
  id: size
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: size()
  nameWithType: IList<TValue>.size()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.size()
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Counts the number of elements in the container.
  remarks: For more information, see [list::size (STL/CLR)](../Topic/list::size%20\(STL-CLR\).md).
  syntax:
    content: public int size ();
    parameters: []
    return:
      type: System.Int32
      description: The length of the controlled sequence.
  overload: Microsoft.VisualC.StlClr.IList`1.size*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})
  id: sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: sort(BinaryDelegate<TValue,TValue,Boolean>)
  nameWithType: IList<TValue>.sort(BinaryDelegate<TValue,TValue,Boolean>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.sort(BinaryDelegate<TValue,TValue,Boolean>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Orders the controlled sequence.
  remarks: For more information, see [list::sort (STL/CLR)](../Topic/list::sort%20\(STL-CLR\).md).
  syntax:
    content: public void sort (Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,bool> _Pred);
    parameters:
    - id: _Pred
      type: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}
      description: The operator that will be used to compare elements for ordering.
  overload: Microsoft.VisualC.StlClr.IList`1.sort*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList{`0})
  id: splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList{`0})
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: splice(ContainerBidirectionalIterator,IList<TValue>)
  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  syntax:
    content: public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, Microsoft.VisualC.StlClr.IList<TValue> _Right);
    parameters:
    - id: _Where
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator
      description: To be added.
    - id: _Right
      type: Microsoft.VisualC.StlClr.IList`1
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IList`1.splice*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  id: splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)
  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  syntax:
    content: public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, Microsoft.VisualC.StlClr.IList<TValue> _Right, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _First);
    parameters:
    - id: _Where
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator
      description: To be added.
    - id: _Right
      type: Microsoft.VisualC.StlClr.IList`1
      description: To be added.
    - id: _First
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IList`1.splice*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  id: splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)
  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  syntax:
    content: public void splice (Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Where, Microsoft.VisualC.StlClr.IList<TValue> _Right, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _First, Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator _Last);
    parameters:
    - id: _Where
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator
      description: To be added.
    - id: _Right
      type: Microsoft.VisualC.StlClr.IList`1
      description: To be added.
    - id: _First
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator
      description: To be added.
    - id: _Last
      type: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IList`1.splice*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList{`0})
  id: swap(Microsoft.VisualC.StlClr.IList{`0})
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: swap(IList<TValue>)
  nameWithType: IList<TValue>.swap(IList<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.swap(IList<TValue>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Swaps the contents of two containers.
  remarks: For more information, see [list::swap (STL/CLR)](../Topic/list::swap%20\(STL-CLR\).md).
  syntax:
    content: public void swap (Microsoft.VisualC.StlClr.IList<TValue> _Right);
    parameters:
    - id: _Right
      type: Microsoft.VisualC.StlClr.IList`1
      description: The container to swap contents with.
  overload: Microsoft.VisualC.StlClr.IList`1.swap*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})
  id: unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})
  parent: Microsoft.VisualC.StlClr.IList`1
  langs:
  - csharp
  name: unique(BinaryDelegate<TValue,TValue,Boolean>)
  nameWithType: IList<TValue>.unique(BinaryDelegate<TValue,TValue,Boolean>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.unique(BinaryDelegate<TValue,TValue,Boolean>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Removes adjacent elements that pass a specified test.
  remarks: For more information, see [list::unique (STL/CLR)](../Topic/list::unique%20\(STL-CLR\).md).
  syntax:
    content: public void unique (Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,bool> _Pred);
    parameters:
    - id: _Pred
      type: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}
      description: The comparer that determines whether element pairs are unique. An element that is not unique will be removed from the container.
  overload: Microsoft.VisualC.StlClr.IList`1.unique*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IList`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IList`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: Microsoft.VisualC.StlClr.IList`1.assign(System.Collections.IEnumerable)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: assign(IEnumerable)
  nameWithType: IList<TValue>.assign(IEnumerable)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(IEnumerable)
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: Microsoft.VisualC.StlClr.IList`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: assign(IInputIterator<TValue>,IInputIterator<TValue>)
  nameWithType: IList<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)
- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1
  parent: Microsoft.VisualC.StlClr.Generic
  isExternal: false
  name: IInputIterator<TValue>
  nameWithType: IInputIterator<TValue>
  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>
- uid: Microsoft.VisualC.StlClr.IList`1.assign(System.Int32,`0)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: assign(Int32,TValue)
  nameWithType: IList<TValue>.assign(Int32,TValue)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.assign(Int32,TValue)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TValue
  isExternal: true
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Microsoft.VisualC.StlClr.IList`1.back
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: back()
  nameWithType: IList<TValue>.back()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.back()
- uid: Microsoft.VisualC.StlClr.IList`1.back_item
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: back_item
  nameWithType: IList<TValue>.back_item
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.back_item
- uid: Microsoft.VisualC.StlClr.IList`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: begin(ContainerBidirectionalIterator<TValue>)
  nameWithType: IList<TValue>.begin(ContainerBidirectionalIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.begin(ContainerBidirectionalIterator<TValue>)
- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator`1
  parent: Microsoft.VisualC.StlClr.Generic
  isExternal: false
  name: ContainerBidirectionalIterator<TValue>
  nameWithType: ContainerBidirectionalIterator<TValue>
  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator<TValue>
- uid: Microsoft.VisualC.StlClr.IList`1.clear
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: clear()
  nameWithType: IList<TValue>.clear()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.clear()
- uid: Microsoft.VisualC.StlClr.IList`1.empty
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: empty()
  nameWithType: IList<TValue>.empty()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.empty()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualC.StlClr.IList`1.end(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: end(ContainerBidirectionalIterator<TValue>)
  nameWithType: IList<TValue>.end(ContainerBidirectionalIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.end(ContainerBidirectionalIterator<TValue>)
- uid: Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)
  nameWithType: IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator)
- uid: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator
  parent: Microsoft.VisualC.StlClr.Generic
  isExternal: true
  name: ContainerBidirectionalIterator
  nameWithType: ContainerBidirectionalIterator
  fullName: Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator
- uid: Microsoft.VisualC.StlClr.IList`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)
  nameWithType: IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.erase(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)
- uid: Microsoft.VisualC.StlClr.IList`1.front
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: front()
  nameWithType: IList<TValue>.front()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.front()
- uid: Microsoft.VisualC.StlClr.IList`1.front_item
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: front_item
  nameWithType: IList<TValue>.front_item
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.front_item
- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Collections.IEnumerable)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: insert(ContainerBidirectionalIterator,IEnumerable)
  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,IEnumerable)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,IEnumerable)
- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)
  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,IInputIterator<TValue>,IInputIterator<TValue>)
- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,System.Int32,`0)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: insert(ContainerBidirectionalIterator,Int32,TValue)
  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator,Int32,TValue)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator,Int32,TValue)
- uid: Microsoft.VisualC.StlClr.IList`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,`0)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)
  nameWithType: IList<TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.insert(ContainerBidirectionalIterator<TValue>,ContainerBidirectionalIterator,TValue)
- uid: Microsoft.VisualC.StlClr.IList`1.merge(Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)
  nameWithType: IList<TValue>.merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.merge(IList<TValue>,BinaryDelegate<TValue,TValue,Boolean>)
- uid: Microsoft.VisualC.StlClr.IList`1
  parent: Microsoft.VisualC.StlClr
  isExternal: false
  name: IList<TValue>
  nameWithType: IList<TValue>
  fullName: Microsoft.VisualC.StlClr.IList<TValue>
- uid: Microsoft.VisualC.StlClr.BinaryDelegate{TValue,TValue,System.Boolean}
  parent: Microsoft.VisualC.StlClr
  isExternal: false
  name: BinaryDelegate<TValue,TValue,Boolean>
  nameWithType: BinaryDelegate<TValue,TValue,Boolean>
  fullName: Microsoft.VisualC.StlClr.BinaryDelegate<TValue,TValue,System.Boolean>
  spec.csharp:
  - uid: Microsoft.VisualC.StlClr.BinaryDelegate`3
    name: BinaryDelegate
    nameWithType: BinaryDelegate
    fullName: BinaryDelegate<TValue,TValue,System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.VisualC.StlClr.IList`1.pop_back
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: pop_back()
  nameWithType: IList<TValue>.pop_back()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.pop_back()
- uid: Microsoft.VisualC.StlClr.IList`1.pop_front
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: pop_front()
  nameWithType: IList<TValue>.pop_front()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.pop_front()
- uid: Microsoft.VisualC.StlClr.IList`1.push_back(`0)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: push_back(TValue)
  nameWithType: IList<TValue>.push_back(TValue)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.push_back(TValue)
- uid: Microsoft.VisualC.StlClr.IList`1.push_front(`0)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: push_front(TValue)
  nameWithType: IList<TValue>.push_front(TValue)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.push_front(TValue)
- uid: Microsoft.VisualC.StlClr.IList`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: rbegin(ReverseBidirectionalIterator<TValue>)
  nameWithType: IList<TValue>.rbegin(ReverseBidirectionalIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.rbegin(ReverseBidirectionalIterator<TValue>)
- uid: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator`1
  parent: Microsoft.VisualC.StlClr.Generic
  isExternal: false
  name: ReverseBidirectionalIterator<TValue>
  nameWithType: ReverseBidirectionalIterator<TValue>
  fullName: Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator<TValue>
- uid: Microsoft.VisualC.StlClr.IList`1.remove(`0)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: remove(TValue)
  nameWithType: IList<TValue>.remove(TValue)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.remove(TValue)
- uid: Microsoft.VisualC.StlClr.IList`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseBidirectionalIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: rend(ReverseBidirectionalIterator<TValue>)
  nameWithType: IList<TValue>.rend(ReverseBidirectionalIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.rend(ReverseBidirectionalIterator<TValue>)
- uid: Microsoft.VisualC.StlClr.IList`1.resize(System.Int32)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: resize(Int32)
  nameWithType: IList<TValue>.resize(Int32)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.resize(Int32)
- uid: Microsoft.VisualC.StlClr.IList`1.resize(System.Int32,`0)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: resize(Int32,TValue)
  nameWithType: IList<TValue>.resize(Int32,TValue)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.resize(Int32,TValue)
- uid: Microsoft.VisualC.StlClr.IList`1.reverse
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: reverse()
  nameWithType: IList<TValue>.reverse()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.reverse()
- uid: Microsoft.VisualC.StlClr.IList`1.size
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: size()
  nameWithType: IList<TValue>.size()
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.size()
- uid: Microsoft.VisualC.StlClr.IList`1.sort(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: sort(BinaryDelegate<TValue,TValue,Boolean>)
  nameWithType: IList<TValue>.sort(BinaryDelegate<TValue,TValue,Boolean>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.sort(BinaryDelegate<TValue,TValue,Boolean>)
- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList{`0})
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: splice(ContainerBidirectionalIterator,IList<TValue>)
  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>)
- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)
  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator)
- uid: Microsoft.VisualC.StlClr.IList`1.splice(Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.IList{`0},Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator,Microsoft.VisualC.StlClr.Generic.ContainerBidirectionalIterator)
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)
  nameWithType: IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.splice(ContainerBidirectionalIterator,IList<TValue>,ContainerBidirectionalIterator,ContainerBidirectionalIterator)
- uid: Microsoft.VisualC.StlClr.IList`1.swap(Microsoft.VisualC.StlClr.IList{`0})
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: swap(IList<TValue>)
  nameWithType: IList<TValue>.swap(IList<TValue>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.swap(IList<TValue>)
- uid: Microsoft.VisualC.StlClr.IList`1.unique(Microsoft.VisualC.StlClr.BinaryDelegate{`0,`0,System.Boolean})
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: unique(BinaryDelegate<TValue,TValue,Boolean>)
  nameWithType: IList<TValue>.unique(BinaryDelegate<TValue,TValue,Boolean>)
  fullName: Microsoft.VisualC.StlClr.IList<TValue>.unique(BinaryDelegate<TValue,TValue,Boolean>)
- uid: Microsoft.VisualC.StlClr.IList`1.assign*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: assign
  nameWithType: IList<TValue>.assign
- uid: Microsoft.VisualC.StlClr.IList`1.back*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: back
  nameWithType: IList<TValue>.back
- uid: Microsoft.VisualC.StlClr.IList`1.back_item*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: back_item
  nameWithType: IList<TValue>.back_item
- uid: Microsoft.VisualC.StlClr.IList`1.begin*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: begin
  nameWithType: IList<TValue>.begin
- uid: Microsoft.VisualC.StlClr.IList`1.clear*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: clear
  nameWithType: IList<TValue>.clear
- uid: Microsoft.VisualC.StlClr.IList`1.empty*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: empty
  nameWithType: IList<TValue>.empty
- uid: Microsoft.VisualC.StlClr.IList`1.end*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: end
  nameWithType: IList<TValue>.end
- uid: Microsoft.VisualC.StlClr.IList`1.erase*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: erase
  nameWithType: IList<TValue>.erase
- uid: Microsoft.VisualC.StlClr.IList`1.front*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: front
  nameWithType: IList<TValue>.front
- uid: Microsoft.VisualC.StlClr.IList`1.front_item*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: front_item
  nameWithType: IList<TValue>.front_item
- uid: Microsoft.VisualC.StlClr.IList`1.insert*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: insert
  nameWithType: IList<TValue>.insert
- uid: Microsoft.VisualC.StlClr.IList`1.merge*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: merge
  nameWithType: IList<TValue>.merge
- uid: Microsoft.VisualC.StlClr.IList`1.pop_back*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: pop_back
  nameWithType: IList<TValue>.pop_back
- uid: Microsoft.VisualC.StlClr.IList`1.pop_front*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: pop_front
  nameWithType: IList<TValue>.pop_front
- uid: Microsoft.VisualC.StlClr.IList`1.push_back*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: push_back
  nameWithType: IList<TValue>.push_back
- uid: Microsoft.VisualC.StlClr.IList`1.push_front*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: push_front
  nameWithType: IList<TValue>.push_front
- uid: Microsoft.VisualC.StlClr.IList`1.rbegin*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: rbegin
  nameWithType: IList<TValue>.rbegin
- uid: Microsoft.VisualC.StlClr.IList`1.remove*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: remove
  nameWithType: IList<TValue>.remove
- uid: Microsoft.VisualC.StlClr.IList`1.rend*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: rend
  nameWithType: IList<TValue>.rend
- uid: Microsoft.VisualC.StlClr.IList`1.resize*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: resize
  nameWithType: IList<TValue>.resize
- uid: Microsoft.VisualC.StlClr.IList`1.reverse*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: reverse
  nameWithType: IList<TValue>.reverse
- uid: Microsoft.VisualC.StlClr.IList`1.size*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: size
  nameWithType: IList<TValue>.size
- uid: Microsoft.VisualC.StlClr.IList`1.sort*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: sort
  nameWithType: IList<TValue>.sort
- uid: Microsoft.VisualC.StlClr.IList`1.splice*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: splice
  nameWithType: IList<TValue>.splice
- uid: Microsoft.VisualC.StlClr.IList`1.swap*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: swap
  nameWithType: IList<TValue>.swap
- uid: Microsoft.VisualC.StlClr.IList`1.unique*
  parent: Microsoft.VisualC.StlClr.IList`1
  isExternal: false
  name: unique
  nameWithType: IList<TValue>.unique
