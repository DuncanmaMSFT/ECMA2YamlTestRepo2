### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualC.StlClr.IVector`1
  id: IVector`1
  children:
  - Microsoft.VisualC.StlClr.IVector`1.assign(System.Collections.IEnumerable)
  - Microsoft.VisualC.StlClr.IVector`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  - Microsoft.VisualC.StlClr.IVector`1.assign(System.Int32,`0)
  - Microsoft.VisualC.StlClr.IVector`1.at(System.Int32)
  - Microsoft.VisualC.StlClr.IVector`1.back
  - Microsoft.VisualC.StlClr.IVector`1.back_item
  - Microsoft.VisualC.StlClr.IVector`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)
  - Microsoft.VisualC.StlClr.IVector`1.capacity
  - Microsoft.VisualC.StlClr.IVector`1.clear
  - Microsoft.VisualC.StlClr.IVector`1.empty
  - Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)
  - Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)
  - Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)
  - Microsoft.VisualC.StlClr.IVector`1.front
  - Microsoft.VisualC.StlClr.IVector`1.front_item
  - Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Collections.IEnumerable)
  - Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  - Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Int32,`0)
  - Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,`0)
  - Microsoft.VisualC.StlClr.IVector`1.Item(System.Int32)
  - Microsoft.VisualC.StlClr.IVector`1.pop_back
  - Microsoft.VisualC.StlClr.IVector`1.push_back(`0)
  - Microsoft.VisualC.StlClr.IVector`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)
  - Microsoft.VisualC.StlClr.IVector`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)
  - Microsoft.VisualC.StlClr.IVector`1.reserve(System.Int32)
  - Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32)
  - Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32,`0)
  - Microsoft.VisualC.StlClr.IVector`1.size
  - Microsoft.VisualC.StlClr.IVector`1.swap(Microsoft.VisualC.StlClr.IVector{`0})
  langs:
  - csharp
  name: IVector<TValue>
  nameWithType: IVector<TValue>
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>
  type: Interface
  summary: Defines the interface for an STL/CLR [vector](../Topic/vector%20\(STL-CLR\).md) object.
  remarks: '[!INCLUDE[unnamed_parm](~/add/includes/unnamed-parm-md.md)]'
  syntax:
    content: 'public interface IVector<TValue> : ICloneable, Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer<TValue>, System.Collections.ICollection'
    typeParameters:
    - id: TValue
      description: The type of an element in the controlled sequence.
  implements:
  - Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer<TValue>
  - System.Collections.ICollection
  - System.ICloneable
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.assign(System.Collections.IEnumerable)
  id: assign(System.Collections.IEnumerable)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: assign(IEnumerable)
  nameWithType: IVector<TValue>.assign(IEnumerable)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.assign(IEnumerable)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Replaces all elements in the container with the elements in the specified enumeration.
  remarks: For more information, see [vector::assign (STL/CLR)](../Topic/vector::assign%20\(STL-CLR\).md).
  syntax:
    content: public void assign (System.Collections.IEnumerable _Right);
    parameters:
    - id: _Right
      type: System.Collections.IEnumerable
      description: The enumeration whose elements are to be inserted into the container.
  overload: Microsoft.VisualC.StlClr.IVector`1.assign*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  id: assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: assign(IInputIterator<TValue>,IInputIterator<TValue>)
  nameWithType: IVector<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Replaces all elements in the container with the elements between the given iterators.
  remarks: For more information, see [vector::assign (STL/CLR)](../Topic/vector::assign%20\(STL-CLR\).md).
  syntax:
    content: public void assign (Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _First, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Last);
    parameters:
    - id: _First
      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1
      description: The beginning position of the range of elements to insert.
    - id: _Last
      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1
      description: The first position beyond the end of the range of elements to insert.
  overload: Microsoft.VisualC.StlClr.IVector`1.assign*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.assign(System.Int32,`0)
  id: assign(System.Int32,`0)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: assign(Int32,TValue)
  nameWithType: IVector<TValue>.assign(Int32,TValue)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.assign(Int32,TValue)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Replaces all elements in the container with the specified number of elements that have given values.
  remarks: For more information, see [vector::assign (STL/CLR)](../Topic/vector::assign%20\(STL-CLR\).md).
  syntax:
    content: public void assign (int _Count, TValue _Val);
    parameters:
    - id: _Count
      type: System.Int32
      description: The number of elements to insert into the container.
    - id: _Val
      type: TValue
      description: The value of the element to insert.
  overload: Microsoft.VisualC.StlClr.IVector`1.assign*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.at(System.Int32)
  id: at(System.Int32)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: at(Int32)
  nameWithType: IVector<TValue>.at(Int32)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.at(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Accesses an element at a specified position in the container.
  remarks: For more information, see [vector::at (STL/CLR)](../Topic/vector::at%20\(STL-CLR\).md).
  syntax:
    content: public TValue at (int _Pos);
    parameters:
    - id: _Pos
      type: System.Int32
      description: The position of the element to access.
    return:
      type: TValue@
      description: The element of the controlled sequence at position <code>_Pos</code>.
  overload: Microsoft.VisualC.StlClr.IVector`1.at*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.back
  id: back
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: back()
  nameWithType: IVector<TValue>.back()
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.back()
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Accesses the last element of the container.
  remarks: For more information, see [vector::back (STL/CLR)](../Topic/vector::back%20\(STL-CLR\).md).
  syntax:
    content: public TValue back ();
    parameters: []
    return:
      type: TValue@
      description: The last element of the controlled sequence, which must be non-empty.
  overload: Microsoft.VisualC.StlClr.IVector`1.back*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.back_item
  id: back_item
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: back_item
  nameWithType: IVector<TValue>.back_item
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.back_item
  type: Property
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Accesses the last element of the container.
  remarks: For more information, see [vector::back_item (STL/CLR)](../Topic/vector::back_item%20\(STL-CLR\).md).
  syntax:
    content: public TValue back_item { get; set; }
    return:
      type: TValue
      description: The last element of the controlled sequence, which must be non-empty.
  overload: Microsoft.VisualC.StlClr.IVector`1.back_item*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)
  id: begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: begin(ContainerRandomAccessIterator<TValue>)
  nameWithType: IVector<TValue>.begin(ContainerRandomAccessIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.begin(ContainerRandomAccessIterator<TValue>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Designates the beginning of the controlled sequence.
  remarks: For more information, see [vector::begin (STL/CLR)](../Topic/vector::begin%20\(STL-CLR\).md).
  syntax:
    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) begin (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> );
    parameters:
    - id: ''
      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1
      description: To be added.
    return:
      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)
      description: An iterator.
  overload: Microsoft.VisualC.StlClr.IVector`1.begin*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.capacity
  id: capacity
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: capacity()
  nameWithType: IVector<TValue>.capacity()
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.capacity()
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Reports the size of allocated storage for the container.
  remarks: For more information, see [vector::capacity (STL/CLR)](../Topic/vector::capacity%20\(STL-CLR\).md).
  syntax:
    content: public int capacity ();
    parameters: []
    return:
      type: System.Int32
      description: The storage that is currently allocated to hold the controlled sequence, a value at least as large as <xref href="crosoft.VisualC.StlClr.IVector%601.size%2A"></xref>.
  overload: Microsoft.VisualC.StlClr.IVector`1.capacity*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.clear
  id: clear
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: clear()
  nameWithType: IVector<TValue>.clear()
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.clear()
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Removes all elements from the container.
  remarks: For more information, see [vector::clear (STL/CLR)](../Topic/vector::clear%20\(STL-CLR\).md).
  syntax:
    content: public void clear ();
    parameters: []
  overload: Microsoft.VisualC.StlClr.IVector`1.clear*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.empty
  id: empty
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: empty()
  nameWithType: IVector<TValue>.empty()
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.empty()
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Tests whether the container has no elements.
  remarks: For more information, see [vector::empty (STL/CLR)](../Topic/vector::empty%20\(STL-CLR\).md).
  syntax:
    content: public bool empty ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the container has no elements; otherwise, `false`.'
  overload: Microsoft.VisualC.StlClr.IVector`1.empty*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)
  id: end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: end(ContainerRandomAccessIterator<TValue>)
  nameWithType: IVector<TValue>.end(ContainerRandomAccessIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.end(ContainerRandomAccessIterator<TValue>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Designates the end of the controlled sequence.
  remarks: For more information, see [vector::end (STL/CLR)](../Topic/vector::end%20\(STL-CLR\).md).
  syntax:
    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) end (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> );
    parameters:
    - id: ''
      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1
      description: To be added.
    return:
      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)
      description: An iterator.
  overload: Microsoft.VisualC.StlClr.IVector`1.end*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)
  id: erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)
  nameWithType: IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  syntax:
    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Where);
    parameters:
    - id: ''
      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1
      description: To be added.
    - id: _Where
      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator
      description: To be added.
    return:
      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IVector`1.erase*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)
  id: erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)
  nameWithType: IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  syntax:
    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) erase (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _First_iter, Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Last_iter);
    parameters:
    - id: ''
      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1
      description: To be added.
    - id: _First_iter
      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator
      description: To be added.
    - id: _Last_iter
      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator
      description: To be added.
    return:
      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IVector`1.erase*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.front
  id: front
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: front()
  nameWithType: IVector<TValue>.front()
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.front()
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Accesses the first element of the container.
  remarks: For more information, see [vector::front (STL/CLR)](../Topic/vector::front%20\(STL-CLR\).md).
  syntax:
    content: public TValue front ();
    parameters: []
    return:
      type: TValue@
      description: The first element of the controlled sequence, which must be non-empty.
  overload: Microsoft.VisualC.StlClr.IVector`1.front*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.front_item
  id: front_item
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: front_item
  nameWithType: IVector<TValue>.front_item
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.front_item
  type: Property
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Accesses the first element of the container.
  remarks: For more information, see [vector::front_item (STL/CLR)](../Topic/vector::front_item%20\(STL-CLR\).md).
  syntax:
    content: public TValue front_item { get; set; }
    return:
      type: TValue
      description: The first element of the controlled sequence, which must be non-empty.
  overload: Microsoft.VisualC.StlClr.IVector`1.front_item*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Collections.IEnumerable)
  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Collections.IEnumerable)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: insert(ContainerRandomAccessIterator,IEnumerable)
  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator,IEnumerable)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator,IEnumerable)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  syntax:
    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Where_iter, System.Collections.IEnumerable _Right);
    parameters:
    - id: _Where_iter
      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator
      description: To be added.
    - id: _Right
      type: System.Collections.IEnumerable
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IVector`1.insert*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)
  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  syntax:
    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Where, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _First, Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue> _Last);
    parameters:
    - id: _Where
      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator
      description: To be added.
    - id: _First
      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1
      description: To be added.
    - id: _Last
      type: Microsoft.VisualC.StlClr.Generic.IInputIterator`1
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IVector`1.insert*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Int32,`0)
  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Int32,`0)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: insert(ContainerRandomAccessIterator,Int32,TValue)
  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator,Int32,TValue)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator,Int32,TValue)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  syntax:
    content: public void insert (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Where, int _Count, TValue _Val);
    parameters:
    - id: _Where
      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator
      description: To be added.
    - id: _Count
      type: System.Int32
      description: To be added.
    - id: _Val
      type: TValue
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IVector`1.insert*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,`0)
  id: insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,`0)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)
  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  syntax:
    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) insert (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue> , Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator _Where, TValue _Val);
    parameters:
    - id: ''
      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1
      description: To be added.
    - id: _Where
      type: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator
      description: To be added.
    - id: _Val
      type: TValue
      description: To be added.
    return:
      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IVector`1.insert*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: IVector<TValue>.Item(Int32)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.Item(Int32)
  type: Property
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Accesses an element at a specified position in the container.
  remarks: For more information, see [vector::operator(STL/CLR)](../Topic/vector::operator\(STL-CLR\).md).
  syntax:
    content: public TValue this[int _Pos] { get; set; }
    parameters:
    - id: _Pos
      type: System.Int32
      description: The position of the element to access.
    return:
      type: TValue
      description: The element at position <code>_Pos</code>.
  overload: Microsoft.VisualC.StlClr.IVector`1.Item*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.pop_back
  id: pop_back
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: pop_back()
  nameWithType: IVector<TValue>.pop_back()
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.pop_back()
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Removes the last element from the container.
  remarks: For more information, see [vector::pop_back (STL/CLR)](../Topic/vector::pop_back%20\(STL-CLR\).md).
  syntax:
    content: public void pop_back ();
    parameters: []
  overload: Microsoft.VisualC.StlClr.IVector`1.pop_back*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.push_back(`0)
  id: push_back(`0)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: push_back(TValue)
  nameWithType: IVector<TValue>.push_back(TValue)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.push_back(TValue)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Adds a new element to the end of the container.
  remarks: For more information, see [vector::push_back (STL/CLR)](../Topic/vector::push_back%20\(STL-CLR\).md).
  syntax:
    content: public void push_back (TValue _Val);
    parameters:
    - id: _Val
      type: TValue
      description: The value of the element to insert into the container.
  overload: Microsoft.VisualC.StlClr.IVector`1.push_back*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)
  id: rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: rbegin(ReverseRandomAccessIterator<TValue>)
  nameWithType: IVector<TValue>.rbegin(ReverseRandomAccessIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.rbegin(ReverseRandomAccessIterator<TValue>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Designates the beginning of the reversed controlled sequence.
  remarks: For more information, see [vector::rbegin (STL/CLR)](../Topic/vector::rbegin%20\(STL-CLR\).md).
  syntax:
    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rbegin (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator<TValue> );
    parameters:
    - id: ''
      type: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1
      description: To be added.
    return:
      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)
      description: An iterator.
  overload: Microsoft.VisualC.StlClr.IVector`1.rbegin*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)
  id: rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: rend(ReverseRandomAccessIterator<TValue>)
  nameWithType: IVector<TValue>.rend(ReverseRandomAccessIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.rend(ReverseRandomAccessIterator<TValue>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Designates the end of the reversed controlled sequence.
  remarks: For more information, see [vector::rend (STL/CLR)](../Topic/vector::rend%20\(STL-CLR\).md).
  syntax:
    content: public Void modreq(System.Runtime.CompilerServices.IsUdtReturn) rend (ref Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator<TValue> );
    parameters:
    - id: ''
      type: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1
      description: To be added.
    return:
      type: System.Void modreq(System.Runtime.CompilerServices.IsUdtReturn)
      description: An iterator.
  overload: Microsoft.VisualC.StlClr.IVector`1.rend*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.reserve(System.Int32)
  id: reserve(System.Int32)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: reserve(Int32)
  nameWithType: IVector<TValue>.reserve(Int32)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.reserve(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Reserves storage to ensure the minimum growth capacity for the container.
  remarks: For more information, see [vector::reserve (STL/CLR)](../Topic/vector::reserve%20\(STL-CLR\).md).
  syntax:
    content: public void reserve (int _Capacity);
    parameters:
    - id: _Capacity
      type: System.Int32
      description: The new minimum capacity of the container.
  overload: Microsoft.VisualC.StlClr.IVector`1.reserve*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32)
  id: resize(System.Int32)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: resize(Int32)
  nameWithType: IVector<TValue>.resize(Int32)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.resize(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Changes the number of elements in the container to the specified size.
  remarks: For more information, see [vector::resize (STL/CLR)](../Topic/vector::resize%20\(STL-CLR\).md).
  syntax:
    content: public void resize (int _Newsize);
    parameters:
    - id: _Newsize
      type: System.Int32
      description: The new size of the controlled sequence.
  overload: Microsoft.VisualC.StlClr.IVector`1.resize*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32,`0)
  id: resize(System.Int32,`0)
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: resize(Int32,TValue)
  nameWithType: IVector<TValue>.resize(Int32,TValue)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.resize(Int32,TValue)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Changes the number of elements in the container to the specified size. If the new size is larger than the old size, the method appends elements that have value <code>_Val</code>.
  remarks: For more information, see [vector::resize (STL/CLR)](../Topic/vector::resize%20\(STL-CLR\).md).
  syntax:
    content: public void resize (int _Newsize, TValue _Val);
    parameters:
    - id: _Newsize
      type: System.Int32
      description: The new size of the controlled sequence.
    - id: _Val
      type: TValue
      description: The value of the elements to insert.
  overload: Microsoft.VisualC.StlClr.IVector`1.resize*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.size
  id: size
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: size()
  nameWithType: IVector<TValue>.size()
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.size()
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Counts the number of elements in the container.
  remarks: For more information, see [vector::size (STL/CLR)](../Topic/vector::size%20\(STL-CLR\).md).
  syntax:
    content: public int size ();
    parameters: []
    return:
      type: System.Int32
      description: The length of the controlled sequence.
  overload: Microsoft.VisualC.StlClr.IVector`1.size*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: Microsoft.VisualC.StlClr.IVector`1.swap(Microsoft.VisualC.StlClr.IVector{`0})
  id: swap(Microsoft.VisualC.StlClr.IVector{`0})
  parent: Microsoft.VisualC.StlClr.IVector`1
  langs:
  - csharp
  name: swap(IVector<TValue>)
  nameWithType: IVector<TValue>.swap(IVector<TValue>)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.swap(IVector<TValue>)
  type: Method
  assemblies:
  - Microsoft.VisualC.STLCLR
  namespace: Microsoft.VisualC.StlClr
  summary: Swaps the contents of two containers.
  remarks: For more information, see [vector::swap (STL/CLR)](../Topic/vector::swap%20\(STL-CLR\).md).
  syntax:
    content: public void swap (Microsoft.VisualC.StlClr.IVector<TValue> A_0);
    parameters:
    - id: ''
      type: Microsoft.VisualC.StlClr.IVector`1
      description: To be added.
  overload: Microsoft.VisualC.StlClr.IVector`1.swap*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\Microsoft.VisualC.StlClr\IVector`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/Microsoft.VisualC.StlClr/IVector`1.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: Microsoft.VisualC.StlClr.IVector`1.assign(System.Collections.IEnumerable)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: assign(IEnumerable)
  nameWithType: IVector<TValue>.assign(IEnumerable)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.assign(IEnumerable)
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: Microsoft.VisualC.StlClr.IVector`1.assign(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: assign(IInputIterator<TValue>,IInputIterator<TValue>)
  nameWithType: IVector<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.assign(IInputIterator<TValue>,IInputIterator<TValue>)
- uid: Microsoft.VisualC.StlClr.Generic.IInputIterator`1
  parent: Microsoft.VisualC.StlClr.Generic
  isExternal: false
  name: IInputIterator<TValue>
  nameWithType: IInputIterator<TValue>
  fullName: Microsoft.VisualC.StlClr.Generic.IInputIterator<TValue>
- uid: Microsoft.VisualC.StlClr.IVector`1.assign(System.Int32,`0)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: assign(Int32,TValue)
  nameWithType: IVector<TValue>.assign(Int32,TValue)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.assign(Int32,TValue)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: TValue
  isExternal: true
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Microsoft.VisualC.StlClr.IVector`1.at(System.Int32)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: at(Int32)
  nameWithType: IVector<TValue>.at(Int32)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.at(Int32)
- uid: Microsoft.VisualC.StlClr.IVector`1.back
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: back()
  nameWithType: IVector<TValue>.back()
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.back()
- uid: Microsoft.VisualC.StlClr.IVector`1.back_item
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: back_item
  nameWithType: IVector<TValue>.back_item
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.back_item
- uid: Microsoft.VisualC.StlClr.IVector`1.begin(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: begin(ContainerRandomAccessIterator<TValue>)
  nameWithType: IVector<TValue>.begin(ContainerRandomAccessIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.begin(ContainerRandomAccessIterator<TValue>)
- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1
  parent: Microsoft.VisualC.StlClr.Generic
  isExternal: false
  name: ContainerRandomAccessIterator<TValue>
  nameWithType: ContainerRandomAccessIterator<TValue>
  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator<TValue>
- uid: Microsoft.VisualC.StlClr.IVector`1.capacity
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: capacity()
  nameWithType: IVector<TValue>.capacity()
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.capacity()
- uid: Microsoft.VisualC.StlClr.IVector`1.clear
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: clear()
  nameWithType: IVector<TValue>.clear()
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.clear()
- uid: Microsoft.VisualC.StlClr.IVector`1.empty
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: empty()
  nameWithType: IVector<TValue>.empty()
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.empty()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualC.StlClr.IVector`1.end(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: end(ContainerRandomAccessIterator<TValue>)
  nameWithType: IVector<TValue>.end(ContainerRandomAccessIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.end(ContainerRandomAccessIterator<TValue>)
- uid: Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)
  nameWithType: IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator)
- uid: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator
  parent: Microsoft.VisualC.StlClr.Generic
  isExternal: true
  name: ContainerRandomAccessIterator
  nameWithType: ContainerRandomAccessIterator
  fullName: Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator
- uid: Microsoft.VisualC.StlClr.IVector`1.erase(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)
  nameWithType: IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.erase(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,ContainerRandomAccessIterator)
- uid: Microsoft.VisualC.StlClr.IVector`1.front
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: front()
  nameWithType: IVector<TValue>.front()
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.front()
- uid: Microsoft.VisualC.StlClr.IVector`1.front_item
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: front_item
  nameWithType: IVector<TValue>.front_item
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.front_item
- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Collections.IEnumerable)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: insert(ContainerRandomAccessIterator,IEnumerable)
  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator,IEnumerable)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator,IEnumerable)
- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,Microsoft.VisualC.StlClr.Generic.IInputIterator{`0},Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)
  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator,IInputIterator<TValue>,IInputIterator<TValue>)
- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,System.Int32,`0)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: insert(ContainerRandomAccessIterator,Int32,TValue)
  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator,Int32,TValue)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator,Int32,TValue)
- uid: Microsoft.VisualC.StlClr.IVector`1.insert(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator,`0)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)
  nameWithType: IVector<TValue>.insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.insert(ContainerRandomAccessIterator<TValue>,ContainerRandomAccessIterator,TValue)
- uid: Microsoft.VisualC.StlClr.IVector`1.Item(System.Int32)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: Item(Int32)
  nameWithType: IVector<TValue>.Item(Int32)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.Item(Int32)
- uid: Microsoft.VisualC.StlClr.IVector`1.pop_back
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: pop_back()
  nameWithType: IVector<TValue>.pop_back()
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.pop_back()
- uid: Microsoft.VisualC.StlClr.IVector`1.push_back(`0)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: push_back(TValue)
  nameWithType: IVector<TValue>.push_back(TValue)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.push_back(TValue)
- uid: Microsoft.VisualC.StlClr.IVector`1.rbegin(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: rbegin(ReverseRandomAccessIterator<TValue>)
  nameWithType: IVector<TValue>.rbegin(ReverseRandomAccessIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.rbegin(ReverseRandomAccessIterator<TValue>)
- uid: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1
  parent: Microsoft.VisualC.StlClr.Generic
  isExternal: false
  name: ReverseRandomAccessIterator<TValue>
  nameWithType: ReverseRandomAccessIterator<TValue>
  fullName: Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator<TValue>
- uid: Microsoft.VisualC.StlClr.IVector`1.rend(Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator{`0}@)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: rend(ReverseRandomAccessIterator<TValue>)
  nameWithType: IVector<TValue>.rend(ReverseRandomAccessIterator<TValue>)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.rend(ReverseRandomAccessIterator<TValue>)
- uid: Microsoft.VisualC.StlClr.IVector`1.reserve(System.Int32)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: reserve(Int32)
  nameWithType: IVector<TValue>.reserve(Int32)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.reserve(Int32)
- uid: Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: resize(Int32)
  nameWithType: IVector<TValue>.resize(Int32)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.resize(Int32)
- uid: Microsoft.VisualC.StlClr.IVector`1.resize(System.Int32,`0)
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: resize(Int32,TValue)
  nameWithType: IVector<TValue>.resize(Int32,TValue)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.resize(Int32,TValue)
- uid: Microsoft.VisualC.StlClr.IVector`1.size
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: size()
  nameWithType: IVector<TValue>.size()
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.size()
- uid: Microsoft.VisualC.StlClr.IVector`1.swap(Microsoft.VisualC.StlClr.IVector{`0})
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: swap(IVector<TValue>)
  nameWithType: IVector<TValue>.swap(IVector<TValue>)
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>.swap(IVector<TValue>)
- uid: Microsoft.VisualC.StlClr.IVector`1
  parent: Microsoft.VisualC.StlClr
  isExternal: false
  name: IVector<TValue>
  nameWithType: IVector<TValue>
  fullName: Microsoft.VisualC.StlClr.IVector<TValue>
- uid: Microsoft.VisualC.StlClr.IVector`1.assign*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: assign
  nameWithType: IVector<TValue>.assign
- uid: Microsoft.VisualC.StlClr.IVector`1.at*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: at
  nameWithType: IVector<TValue>.at
- uid: Microsoft.VisualC.StlClr.IVector`1.back*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: back
  nameWithType: IVector<TValue>.back
- uid: Microsoft.VisualC.StlClr.IVector`1.back_item*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: back_item
  nameWithType: IVector<TValue>.back_item
- uid: Microsoft.VisualC.StlClr.IVector`1.begin*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: begin
  nameWithType: IVector<TValue>.begin
- uid: Microsoft.VisualC.StlClr.IVector`1.capacity*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: capacity
  nameWithType: IVector<TValue>.capacity
- uid: Microsoft.VisualC.StlClr.IVector`1.clear*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: clear
  nameWithType: IVector<TValue>.clear
- uid: Microsoft.VisualC.StlClr.IVector`1.empty*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: empty
  nameWithType: IVector<TValue>.empty
- uid: Microsoft.VisualC.StlClr.IVector`1.end*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: end
  nameWithType: IVector<TValue>.end
- uid: Microsoft.VisualC.StlClr.IVector`1.erase*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: erase
  nameWithType: IVector<TValue>.erase
- uid: Microsoft.VisualC.StlClr.IVector`1.front*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: front
  nameWithType: IVector<TValue>.front
- uid: Microsoft.VisualC.StlClr.IVector`1.front_item*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: front_item
  nameWithType: IVector<TValue>.front_item
- uid: Microsoft.VisualC.StlClr.IVector`1.insert*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: insert
  nameWithType: IVector<TValue>.insert
- uid: Microsoft.VisualC.StlClr.IVector`1.Item*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: Item
  nameWithType: IVector<TValue>.Item
- uid: Microsoft.VisualC.StlClr.IVector`1.pop_back*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: pop_back
  nameWithType: IVector<TValue>.pop_back
- uid: Microsoft.VisualC.StlClr.IVector`1.push_back*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: push_back
  nameWithType: IVector<TValue>.push_back
- uid: Microsoft.VisualC.StlClr.IVector`1.rbegin*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: rbegin
  nameWithType: IVector<TValue>.rbegin
- uid: Microsoft.VisualC.StlClr.IVector`1.rend*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: rend
  nameWithType: IVector<TValue>.rend
- uid: Microsoft.VisualC.StlClr.IVector`1.reserve*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: reserve
  nameWithType: IVector<TValue>.reserve
- uid: Microsoft.VisualC.StlClr.IVector`1.resize*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: resize
  nameWithType: IVector<TValue>.resize
- uid: Microsoft.VisualC.StlClr.IVector`1.size*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: size
  nameWithType: IVector<TValue>.size
- uid: Microsoft.VisualC.StlClr.IVector`1.swap*
  parent: Microsoft.VisualC.StlClr.IVector`1
  isExternal: false
  name: swap
  nameWithType: IVector<TValue>.swap
