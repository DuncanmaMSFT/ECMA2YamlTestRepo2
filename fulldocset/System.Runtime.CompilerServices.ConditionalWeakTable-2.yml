### YamlMime:ManagedReference
items:
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2
  id: ConditionalWeakTable`2
  children:
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
  langs:
  - csharp
  name: ConditionalWeakTable<TKey,TValue>
  nameWithType: ConditionalWeakTable<TKey,TValue>
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>
  type: Class
  summary: Enables compilers to dynamically attach object fields to managed objects.
  remarks: "The ConditionalWeakTable(TKey, class enables language compilers to attach arbitrary properties to managed objects at run time. A ConditionalWeakTable(TKey, object is a dictionary that binds a managed object, which is represented by a key, to its attached property, which is represented by a value. The object's keys are the individual instances of the `TKey` class to which the property is attached, and its values are the property values that are assigned to the corresponding objects.  \n  \n Keys must be unique; in other words, the ConditionalWeakTable(TKey, class supports one attached value per managed object. Two keys are equal if passing them to the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method returns `true`.  \n  \n> [!NOTE]\n>  You cannot control equality comparisons by overriding <xref:System.Object.GetHashCode%2A?displayProperty=fullName> to explicitly set the hash code for a key. The ConditionalWeakTable(TKey, class does not use the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> method to compute hash codes, and therefore does not invoke <xref:System.Object.GetHashCode%2A?displayProperty=fullName> overrides.  \n  \n Although the ConditionalWeakTable(TKey, class holds a collection of key/value pairs, it is best thought of as a table rather than a dictionary object. The ConditionalWeakTable(TKey, class differs from a dictionary in several ways:  \n  \n-   It does not persist keys. That is, a key is not kept alive only because it is a member of the collection.  \n  \n-   It does not include all the methods (such as `GetEnumerator` or `Contains`) that a dictionary typically has.  \n  \n-   It does not implement the <xref:System.Collections.Generic.IDictionary%602> interface.  \n  \n The ConditionalWeakTable(TKey, class differs from other collection objects in its management of the object lifetime of keys stored in the collection. Ordinarily, when an object is stored in a collection, its lifetime lasts until it is removed (and there are no additional references to the object) or until the collection object itself is destroyed. However, in the ConditionalWeakTable(TKey, class, adding a key/value pair to the table does not ensure that the key will persist, even if it can be reached directly from a value stored in the table (for example, if the table contains one key, A, with a value V1, and a second key, B, with a value P2 that contains a reference to A). Instead, ConditionalWeakTable(TKey, automatically removes the key/value entry as soon as no other references to a key exist outside the table. The example provides an illustration."
  example:
  - "The following example illustrates that a key stored in the ConditionalWeakTable(TKey, table does not persist after references to it outside the table are destroyed. The example defines two classes: `ManagedClass`, which represents the key in the table, and `ClassData`, which represents the key's value. The example instantiates three objects of each type. It also instantiates a <xref:System.WeakReference> object that represents the second `ManagedClass`, and then destroys the second `ManagedClass` instance. The attempt to retrieve the second `ManagedClass` object from the <xref:System.WeakReference.Target%2A> property indicates that no references to the object remain.  \n  \n [!code-cs[System.Runtime.CompilerServices.ConditionalWeakTable.Class#1](~/add/codesnippet/csharp/t-system.runtime.compile_1_1.cs)]\n [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.Class#1](~/add/codesnippet/visualbasic/t-system.runtime.compile_1_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public sealed class ConditionalWeakTable<TKey,TValue> where TKey : class where TValue : class
    typeParameters:
    - id: TKey
      description: The reference type to which the field is attached.
    - id: TValue
      description: The field's type. This must be a reference type.
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Runtime.CompilerServices\ConditionalWeakTable`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor
  id: '#ctor'
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  name: ConditionalWeakTable<TKey,TValue>()
  nameWithType: ConditionalWeakTable<TKey,TValue>.ConditionalWeakTable<TKey,TValue>()
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.ConditionalWeakTable<TKey,TValue>()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.CompilerServices
  summary: Initializes a new instance of the <xref href="stem.Runtime.CompilerServices.ConditionalWeakTable%602"></xref> class.
  remarks: "The ConditionalWeakTable(TKey, constructor instantiates an empty <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table; that is, the table contains no key/value pairs. You can add key/value pairs by calling the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>, or <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method.  \n  \n Every key in a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object must be unique. Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method returns `true`)."
  syntax:
    content: public ConditionalWeakTable ();
    parameters: []
  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Runtime.CompilerServices\ConditionalWeakTable`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  name: Add(TKey,TValue)
  nameWithType: ConditionalWeakTable<TKey,TValue>.Add(TKey,TValue)
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.Add(TKey,TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.CompilerServices
  summary: Adds a key to the table.
  remarks: "Every key in a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object must be unique. Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method returns `true`).  \n  \n If the key is garbage-collected during the addition operation, the existing key/value pair is removed and the new key/value pair is added without an exception being thrown."
  example:
  - "The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance. The example then calls the Add method to add a `MainClass` object and its attached `MainInfo` object to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table. The example also illustrates calls to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> methods to add key/value pairs to the table, and to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method to retrieve the value of an existing key.  \n  \n [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/add/codesnippet/visualbasic/m-system.runtime.compile_2_1.vb)]\n [!code-cs[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/add/codesnippet/csharp/m-system.runtime.compile_2_1.cs)]"
  syntax:
    content: public void Add (TKey key, TValue value);
    parameters:
    - id: key
      type: TKey
      description: The key to add. <code>key</code> represents the object to which the property is attached.
    - id: value
      type: TValue
      description: The key's property value.
  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>key</code> already exists.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Runtime.CompilerServices\ConditionalWeakTable`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize
  id: Finalize
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  name: Finalize()
  nameWithType: ConditionalWeakTable<TKey,TValue>.Finalize()
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.CompilerServices
  summary: Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <xref href="stem.Runtime.CompilerServices.ConditionalWeakTable%602"></xref> object.
  remarks: The garbage collector calls Finalize when the current object is ready to be finalized.
  syntax:
    content: ~ConditionalWeakTable`2 ();
    parameters: []
  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Runtime.CompilerServices\ConditionalWeakTable`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
  id: GetOrCreateValue(`0)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  name: GetOrCreateValue(TKey)
  nameWithType: ConditionalWeakTable<TKey,TValue>.GetOrCreateValue(TKey)
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.GetOrCreateValue(TKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.CompilerServices
  summary: Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes the default constructor of the class that represents the table's value to create a value that is bound to the specified key.
  remarks: "If `key` does not exist in the table, the method adds it, along with the object that is instantiated by calling the default constructor of the class defined by the `TValue` generic type parameter. If the `TValue` class has no default constructor, a <xref:System.MissingMethodException> is thrown.  \n  \n This is the recommended method of retrieving an existing value or adding a new value to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table if the class of the table's value defines a default constructor. If it does not define a default constructor, you can instead call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> method, which relies on a callback-provided method to instantiate the object representing the table's value  \n  \n To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method."
  example:
  - "The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance. The example calls the GetOrCreateValue method to add a `MainClass` object and its attached `MainInfo` object to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table. The example also illustrates calls to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> methods to add key/value pairs to the table, and to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method to retrieve the value of an existing key.  \n  \n [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/add/codesnippet/visualbasic/m-system.runtime.compile_11_1.vb)]\n [!code-cs[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/add/codesnippet/csharp/m-system.runtime.compile_11_1.cs)]"
  syntax:
    content: public TValue GetOrCreateValue (TKey key);
    parameters:
    - id: key
      type: TKey
      description: The key to search for. <code>key</code> represents the object to which the property is attached.
    return:
      type: TValue
      description: The value that corresponds to <code>key</code>, if <code>key</code> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <code>TValue</code> generic type parameter.
  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "<div class=\"alert NOTE\">  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md), catch the base class exception, <xref href=\"System.MissingMemberException\"></xref>, instead.  \n  \n</div>  \n  \n The class that represents the table's value does not define a default constructor."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Runtime.CompilerServices\ConditionalWeakTable`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  id: GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  name: GetValue(TKey,ConditionalWeakTable<TKey,TValue>)
  nameWithType: ConditionalWeakTable<TKey,TValue>.GetValue(TKey,ConditionalWeakTable<TKey,TValue>)
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.GetValue(TKey,ConditionalWeakTable<TKey,TValue>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.CompilerServices
  summary: Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.
  remarks: "If `key` does not exist in the table, GetValue invokes the method that is defined by the `createValueCallback` parameter and passes it the key. A new value is bound to the key in the table and returned as a result.  \n  \n Use this method only when the class that represents the table's value does not define a default constructor. If it does define a default constructor, use the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method instead. To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method.  \n  \n If multiple threads try to create the same key, `createValueCallback` may be invoked multiple times with the same key. Only one of these calls will succeed, and its returned value will be added to the table. Which thread succeeds in creating the value is indeterminate. This rule permits the table to invoke `createValueCallback` outside the internal table lock to prevent deadlocks."
  example:
  - "The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance. It also defines a static (`Shared` in Visual Basic) `CreateAttachedValue` method that can be assigned to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback> delegate and passed to the GetValue method. The example calls the GetValue method to add a `MainClass` object and its attached `MainInfo` object to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table. The example also illustrates calls to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> methods to add key/value pairs to the table, and to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method to retrieve the value of an existing key.  \n  \n [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/add/codesnippet/visualbasic/81db18e1-f021-44af-afa3-_1.vb)]\n [!code-cs[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/add/codesnippet/csharp/81db18e1-f021-44af-afa3-_1.cs)]"
  syntax:
    content: public TValue GetValue (TKey key, System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.CreateValueCallback createValueCallback);
    parameters:
    - id: key
      type: TKey
      description: The key to search for. <code>key</code> represents the object to which the property is attached.
    - id: createValueCallback
      type: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback
      description: A delegate to a method that can create a value for the given <code>key</code>. It has a single parameter of type <code>TKey</code>, and returns a value of type <code>TValue</code>.
    return:
      type: TValue
      description: The value attached to <code>key</code>, if <code>key</code> already exists in the table; otherwise, the new value returned by the <code>createValueCallback</code> delegate.
  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> or <code>createValueCallback</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Runtime.CompilerServices\ConditionalWeakTable`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)
  id: Remove(`0)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  name: Remove(TKey)
  nameWithType: ConditionalWeakTable<TKey,TValue>.Remove(TKey)
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.Remove(TKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.CompilerServices
  summary: Removes a key and its value from the table.
  remarks: If the key is garbage-collected during this operation, the method does not raise an exception and the return value is undefined.
  syntax:
    content: public bool Remove (TKey key);
    parameters:
    - id: key
      type: TKey
      description: The key to remove.
    return:
      type: System.Boolean
      description: '`true` if the key is found and removed; otherwise, `false`.'
  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Runtime.CompilerServices\ConditionalWeakTable`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  name: TryGetValue(TKey,TValue)
  nameWithType: ConditionalWeakTable<TKey,TValue>.TryGetValue(TKey,TValue)
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.TryGetValue(TKey,TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.CompilerServices
  summary: Gets the value of the specified key.
  remarks: If the key is garbage-collected during this operation, the method may return `false` and set `value` to the default value (as if the key were not present).
  example:
  - "The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance. The example calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A>, and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> methods to add key/value pairs to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table. In each case, the example calls the TryGetValue method to confirm that the key/value pair has been added to the table.  \n  \n [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/add/codesnippet/visualbasic/m-system.runtime.compile_8_1.vb)]\n [!code-cs[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/add/codesnippet/csharp/m-system.runtime.compile_8_1.cs)]"
  syntax:
    content: public bool TryGetValue (TKey key, out TValue value);
    parameters:
    - id: key
      type: TKey
      description: The key that represents an object with an attached property.
    - id: value
      type: TValue
      description: When this method returns, contains the attached property value. If <code>key</code> is not found, <code>value</code> contains the default value.
    return:
      type: System.Boolean
      description: '`true` if <code>key</code> is found; otherwise, `false`.'
  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Runtime.CompilerServices\ConditionalWeakTable`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.MissingMethodException
  parent: System
  isExternal: false
  name: MissingMethodException
  nameWithType: MissingMethodException
  fullName: System.MissingMethodException
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  isExternal: false
  name: ConditionalWeakTable<TKey,TValue>()
  nameWithType: ConditionalWeakTable<TKey,TValue>.ConditionalWeakTable<TKey,TValue>()
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.ConditionalWeakTable<TKey,TValue>()
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  isExternal: false
  name: Add(TKey,TValue)
  nameWithType: ConditionalWeakTable<TKey,TValue>.Add(TKey,TValue)
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.Add(TKey,TValue)
- uid: TKey
  isExternal: true
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  isExternal: true
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  isExternal: false
  name: Finalize()
  nameWithType: ConditionalWeakTable<TKey,TValue>.Finalize()
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.Finalize()
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  isExternal: false
  name: GetOrCreateValue(TKey)
  nameWithType: ConditionalWeakTable<TKey,TValue>.GetOrCreateValue(TKey)
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.GetOrCreateValue(TKey)
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  isExternal: false
  name: GetValue(TKey,ConditionalWeakTable<TKey,TValue>)
  nameWithType: ConditionalWeakTable<TKey,TValue>.GetValue(TKey,ConditionalWeakTable<TKey,TValue>)
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.GetValue(TKey,ConditionalWeakTable<TKey,TValue>)
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: ConditionalWeakTable<TKey,TValue>+CreateValueCallback
  nameWithType: ConditionalWeakTable<TKey,TValue>+CreateValueCallback
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>+CreateValueCallback
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  isExternal: false
  name: Remove(TKey)
  nameWithType: ConditionalWeakTable<TKey,TValue>.Remove(TKey)
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.Remove(TKey)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  isExternal: false
  name: TryGetValue(TKey,TValue)
  nameWithType: ConditionalWeakTable<TKey,TValue>.TryGetValue(TKey,TValue)
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.TryGetValue(TKey,TValue)
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor*
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  isExternal: false
  name: ConditionalWeakTable<TKey,TValue>
  nameWithType: ConditionalWeakTable<TKey,TValue>.ConditionalWeakTable<TKey,TValue>
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Add*
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  isExternal: false
  name: Add
  nameWithType: ConditionalWeakTable<TKey,TValue>.Add
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize*
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  isExternal: false
  name: Finalize
  nameWithType: ConditionalWeakTable<TKey,TValue>.Finalize
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue*
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  isExternal: false
  name: GetOrCreateValue
  nameWithType: ConditionalWeakTable<TKey,TValue>.GetOrCreateValue
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue*
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  isExternal: false
  name: GetValue
  nameWithType: ConditionalWeakTable<TKey,TValue>.GetValue
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove*
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  isExternal: false
  name: Remove
  nameWithType: ConditionalWeakTable<TKey,TValue>.Remove
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue*
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  isExternal: false
  name: TryGetValue
  nameWithType: ConditionalWeakTable<TKey,TValue>.TryGetValue
