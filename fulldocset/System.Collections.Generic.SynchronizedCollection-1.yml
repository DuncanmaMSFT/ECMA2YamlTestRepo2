### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.SynchronizedCollection`1
  id: SynchronizedCollection`1
  children:
  - System.Collections.Generic.SynchronizedCollection`1.#ctor
  - System.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object)
  - System.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,`0[])
  - System.Collections.Generic.SynchronizedCollection`1.Add(`0)
  - System.Collections.Generic.SynchronizedCollection`1.Clear
  - System.Collections.Generic.SynchronizedCollection`1.ClearItems
  - System.Collections.Generic.SynchronizedCollection`1.Contains(`0)
  - System.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.SynchronizedCollection`1.Count
  - System.Collections.Generic.SynchronizedCollection`1.GetEnumerator
  - System.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)
  - System.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)
  - System.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)
  - System.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)
  - System.Collections.Generic.SynchronizedCollection`1.Items
  - System.Collections.Generic.SynchronizedCollection`1.Remove(`0)
  - System.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)
  - System.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)
  - System.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)
  - System.Collections.Generic.SynchronizedCollection`1.SyncRoot
  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Add(System.Object)
  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsFixedSize
  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsReadOnly
  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: SynchronizedCollection<T>
  nameWithType: SynchronizedCollection<T>
  fullName: System.Collections.Generic.SynchronizedCollection<T>
  type: Class
  summary: Provides a thread-safe collection that contains objects of a type specified by the generic parameter as elements.
  remarks: The SynchronizedCollection(T) stores data in a <xref:System.Collections.Generic.List%601> container and provides an object that can be set and used to synchronize access to the collection so that it is thread-safe. The <xref:System.Collections.Generic.IList%601> container can be recovered using the <xref:System.Collections.Generic.SynchronizedCollection%601.Items%2A> method. The synchronized object can be recovered using the <xref:System.Collections.Generic.SynchronizedCollection%601.SyncRoot%2A> property. It can only be set using one of the constructors that take the `syncRoot` parameter.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public class SynchronizedCollection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.IList
    typeParameters:
    - id: T
      description: The type of object contained as items in the thread-safe collection.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.IList<T>
  - System.Collections.IList
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: SynchronizedCollection<T>()
  nameWithType: SynchronizedCollection<T>.SynchronizedCollection<T>()
  fullName: System.Collections.Generic.SynchronizedCollection<T>.SynchronizedCollection<T>()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.SynchronizedCollection%601"></xref> class.
  syntax:
    content: public SynchronizedCollection ();
    parameters: []
  overload: System.Collections.Generic.SynchronizedCollection`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: SynchronizedCollection<T>(Object)
  nameWithType: SynchronizedCollection<T>.SynchronizedCollection<T>(Object)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.SynchronizedCollection<T>(Object)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.SynchronizedCollection%601"></xref> class with the object used to synchronize access to the thread-safe collection.
  remarks: If multiple instances of the <xref:System.Collections.Generic.SynchronizedCollection%601> are created using the same `syncRoot`, then access is protected across all instances.
  syntax:
    content: public SynchronizedCollection (object syncRoot);
    parameters:
    - id: syncRoot
      type: System.Object
      description: The object used to synchronize access the thread-safe collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>syncRoot</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: SynchronizedCollection<T>(Object,IEnumerable<T>)
  nameWithType: SynchronizedCollection<T>.SynchronizedCollection<T>(Object,IEnumerable<T>)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.SynchronizedCollection<T>(Object,IEnumerable<T>)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.SynchronizedCollection%601"></xref> class from a specified enumerable list of elements and with the object used to synchronize access to the thread-safe collection.
  syntax:
    content: public SynchronizedCollection (object syncRoot, System.Collections.Generic.IEnumerable<T> list);
    parameters:
    - id: syncRoot
      type: System.Object
      description: The object used to synchronize access to the thread-safe collection.
    - id: list
      type: System.Collections.Generic.IEnumerable`1
      description: The <xref href="stem.Collections.Generic.IEnumerable%601"></xref> collection of elements used to initialize the thread-safe collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>syncRoot</code> or <code>list</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,`0[])
  id: '#ctor(System.Object,`0[])'
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: SynchronizedCollection<T>(Object,T[])
  nameWithType: SynchronizedCollection<T>.SynchronizedCollection<T>(Object,T[])
  fullName: System.Collections.Generic.SynchronizedCollection<T>.SynchronizedCollection<T>(Object,T[])
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.SynchronizedCollection%601"></xref> class from a specified array of elements and with the object used to synchronize access to the thread-safe collection.
  syntax:
    content: public SynchronizedCollection (object syncRoot, T[] list);
    parameters:
    - id: syncRoot
      type: System.Object
      description: The object used to synchronize access the thread-safe collection.
    - id: list
      type: T[]
      description: The <xref href="System.Array"></xref> of type <code>T</code> elements used to initialize the thread-safe collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>syncRoot</code> or <code>list</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: Add(T)
  nameWithType: SynchronizedCollection<T>.Add(T)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Add(T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Adds an item to the thread-safe, read-only collection.
  syntax:
    content: public void Add (T item);
    parameters:
    - id: item
      type: T
      description: The element to be added to the collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.Add*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The value set is `null` or is not of the correct generic type <code>T</code> for the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.Clear
  id: Clear
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: Clear()
  nameWithType: SynchronizedCollection<T>.Clear()
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Clear()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Removes all items from the collection.
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Generic.SynchronizedCollection`1.Clear*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.ClearItems
  id: ClearItems
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: ClearItems()
  nameWithType: SynchronizedCollection<T>.ClearItems()
  fullName: System.Collections.Generic.SynchronizedCollection<T>.ClearItems()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Removes all items from the collection.
  syntax:
    content: protected virtual void ClearItems ();
    parameters: []
  overload: System.Collections.Generic.SynchronizedCollection`1.ClearItems*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: SynchronizedCollection<T>.Contains(T)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Contains(T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Determines whether the collection contains an element with a specific value.
  syntax:
    content: public bool Contains (T item);
    parameters:
    - id: item
      type: T
      description: The object to locate in the collection.
    return:
      type: System.Boolean
      description: '`true` if the element value is found in the collection; otherwise` false`.'
  overload: System.Collections.Generic.SynchronizedCollection`1.Contains*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The value set is `null` or is not of the correct generic type <code>T</code> for the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: SynchronizedCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Copies the elements of the collection to a specified array, starting at a particular index.
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: The destination <xref href="System.Array"></xref> for the elements of type <code>T</code> copied from the collection.
    - id: index
      type: System.Int32
      description: The zero-based index in the array at which copying begins.
  overload: System.Collections.Generic.SynchronizedCollection`1.CopyTo*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.Count
  id: Count
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: Count
  nameWithType: SynchronizedCollection<T>.Count
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Count
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets the number of elements contained in the thread-safe collection.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of elements contained in the thread-safe, read-only collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SynchronizedCollection<T>.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedCollection<T>.GetEnumerator()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the synchronized collection.
  syntax:
    content: public System.Collections.Generic.IEnumerator<T> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: An <xref href="stem.Collections.Generic.IEnumerator%601"></xref> for objects of the type stored in the collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: IndexOf(T)
  nameWithType: SynchronizedCollection<T>.IndexOf(T)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IndexOf(T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Returns the index of the first occurrence of a value in the collection.
  syntax:
    content: public int IndexOf (T item);
    parameters:
    - id: item
      type: T
      description: Removes all items from the collection.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of the value in the collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.IndexOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The value set is `null` or is not of the correct generic type <code>T</code> for the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: Insert(Int32,T)
  nameWithType: SynchronizedCollection<T>.Insert(Int32,T)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Insert(Int32,T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Inserts an item into the collection at a specified index.
  remarks: If the `index` is equal to the number of elements in the collection, the item is appended to the list. If the `index` is less than the number of elements in the collection, the elements that follow the point of insertion of the item move down to accommodate the new element.
  syntax:
    content: public void Insert (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to be retrieved from the collection.
    - id: item
      type: T
      description: The object to be inserted into the collection as an element.
  overload: System.Collections.Generic.SynchronizedCollection`1.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>index</code> specified is less than zero or greater than the number of items in the collection.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The value set is `null` or is not of the correct generic type <code>T</code> for the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)
  id: InsertItem(System.Int32,`0)
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: InsertItem(Int32,T)
  nameWithType: SynchronizedCollection<T>.InsertItem(Int32,T)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.InsertItem(Int32,T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Inserts an item into the collection at a specified index.
  remarks: If the `index` is equal to the number of elements in the collection, the item is appended to the list. If the `index` is less than the number of elements in the collection, the elements that follow the point of insertion of the item move down to accommodate the new element.
  syntax:
    content: protected virtual void InsertItem (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the collection where the object is to be inserted.
    - id: item
      type: T
      description: The object to be inserted into the collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.InsertItem*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>index</code> specified is less than zero or greater than the number of items in the collection.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The value set is `null` or is not of the correct generic type <code>T</code> for the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SynchronizedCollection<T>.Item(Int32)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Item(Int32)
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets an element from the thread-safe collection with a specified index.
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to be retrieved from the collection.
    return:
      type: T
      description: The object in the collection that has the specified <code>index</code>.
  overload: System.Collections.Generic.SynchronizedCollection`1.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>index</code> specified is less than zero or greater than the number of items in the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.Items
  id: Items
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: Items
  nameWithType: SynchronizedCollection<T>.Items
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Items
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets the list of elements contained in the thread-safe collection.
  syntax:
    content: protected System.Collections.Generic.List<T> Items { get; }
    return:
      type: System.Collections.Generic.List`1
      description: The <xref href="stem.Collections.Generic.IList%601"></xref> of elements that are contained in the thread-safe, read-only collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.Items*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: Remove(T)
  nameWithType: SynchronizedCollection<T>.Remove(T)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Remove(T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Removes the first occurrence of a specified item from the collection.
  remarks: The elements in the collection that follow the removed element move up to occupy the vacated spot and their indices are updated accordingly.
  syntax:
    content: public bool Remove (T item);
    parameters:
    - id: item
      type: T
      description: The object to remove from the collection.
    return:
      type: System.Boolean
      description: '`true` if item was successfully removed from the collection; otherwise, `false`.'
  overload: System.Collections.Generic.SynchronizedCollection`1.Remove*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SynchronizedCollection<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Removes an item at a specified index from the collection.
  remarks: The elements in the collection that follow the removed element move up to occupy the vacated spot and their indices are updated accordingly.
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to be retrieved from the collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>index</code> specified is less than zero or greater than the number of items in the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)
  id: RemoveItem(System.Int32)
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: RemoveItem(Int32)
  nameWithType: SynchronizedCollection<T>.RemoveItem(Int32)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.RemoveItem(Int32)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Removes an item at a specified <code>index</code> from the collection.
  syntax:
    content: protected virtual void RemoveItem (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to be retrieved from the collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.RemoveItem*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>index</code> specified is less than zero or greater than the number of items in the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)
  id: SetItem(System.Int32,`0)
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: SetItem(Int32,T)
  nameWithType: SynchronizedCollection<T>.SetItem(Int32,T)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.SetItem(Int32,T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Replaces the item at a specified index with another item.
  syntax:
    content: protected virtual void SetItem (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the object to be replaced.
    - id: item
      type: T
      description: The object to replace
  overload: System.Collections.Generic.SynchronizedCollection`1.SetItem*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>index</code> specified is less than zero or greater than the number of items in the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.SyncRoot
  id: SyncRoot
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: SyncRoot
  nameWithType: SynchronizedCollection<T>.SyncRoot
  fullName: System.Collections.Generic.SynchronizedCollection<T>.SyncRoot
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets the object used to synchronize access to the thread-safe collection.
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: An object used to synchronize access to the thread-safe collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.SyncRoot*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: ICollection<T>.IsReadOnly
  nameWithType: SynchronizedCollection<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.SynchronizedCollection<T>.ICollection<T>.IsReadOnly
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets a value that indicates whether the collection is read only.
  remarks: This property always returns `false` because the collection can be added to and so is not read only.
  syntax:
    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`false`'
  overload: System.Collections.Generic.SynchronizedCollection`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: SynchronizedCollection<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Copies the elements of the collection to a specified array, starting at a particular index.
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The destination <xref href="System.Array"></xref> for the elements of type <code>T</code> copied from the collection.
    - id: index
      type: System.Int32
      description: The zero-based index in the array at which copying begins.
  overload: System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#CopyTo*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: SynchronizedCollection<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.SynchronizedCollection<T>.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets a value that indicates whether the collection is thread safe.
  remarks: This property always returns `true` because the collection is thread safe.
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: '`true`'
  overload: System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: SynchronizedCollection<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.SynchronizedCollection<T>.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets the object used to synchronize access to the thread-safe collection.
  remarks: The value of this `syncRoot` object can be set when creating the thread-safe collection using the <xref:System.Collections.Generic.SynchronizedCollection%601.%23ctor%28System.Object%29> constructor.
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: An object used to synchronize access to the thread-safe collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: SynchronizedCollection<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the synchronized collection.
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="stem.Collections.Generic.IEnumerator%601"></xref> for objects of the type stored in the collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: IList.Add(Object)
  nameWithType: SynchronizedCollection<T>.IList.Add(Object)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.Add(Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Adds an element to the collection.
  remarks: The position is given by a zero-based index.
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to add to the collection.
    return:
      type: System.Int32
      description: The position into which the new element was inserted.
  overload: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Add*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: IList.Contains(Object)
  nameWithType: SynchronizedCollection<T>.IList.Contains(Object)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.Contains(Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Determines whether the collection contains an element with a specific value.
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to locate in the collection.
    return:
      type: System.Boolean
      description: '`true` if the element <code>value</code> is found in the collection; otherwise` false`.'
  overload: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Contains*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>value</code> is not an object of the type contained in the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: IList.IndexOf(Object)
  nameWithType: SynchronizedCollection<T>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Determines the zero-based index of an element in the collection.
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: The element in the collection whose index is being determined.
    return:
      type: System.Int32
      description: The index of the <code>value</code> if found in the collection; otherwise, -1.
  overload: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IndexOf*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: IList.Insert(Int32,Object)
  nameWithType: SynchronizedCollection<T>.IList.Insert(Int32,Object)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Inserts an object into the collection at a specified index.
  remarks: If the `index` is equal to the number of elements in the collection, the item is appended to the list. If the `index` is less than the number of elements in the collection, the elements that follow the point of insertion of the item move down to accommodate the new element.
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <code>value</code> is to be inserted.
    - id: value
      type: System.Object
      description: The object to insert into the collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>index</code> specified is less than zero or greater than the number of items in the collection.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>value</code> set is `null` or is not of the correct generic type <code>T</code> for the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: IList.IsFixedSize
  nameWithType: SynchronizedCollection<T>.IList.IsFixedSize
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.IsFixedSize
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets a value that indicates whether the collection is fixed in size.
  remarks: This property returns `false` because the collection can be added to and so is not fixed in size.
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: '`false`'
  overload: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsFixedSize*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: IList.IsReadOnly
  nameWithType: SynchronizedCollection<T>.IList.IsReadOnly
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.IsReadOnly
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets a value that indicates whether the collection is read only.
  remarks: This property always returns `false` because the collection can be added to and so is not read only.
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`false`'
  overload: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: IList.Item(Int32)
  nameWithType: SynchronizedCollection<T>.IList.Item(Int32)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.Item(Int32)
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets or sets the item at a specified zero-based index.
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to be retrieved from the collection.
    return:
      type: System.Object
      description: The item with the specified <code>index</code>.
  overload: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Item*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The value set is `null` or is not of the correct generic type <code>T</code> for the collection.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>index</code> specified is less than zero or greater than the number of items in the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedCollection`1
  langs:
  - csharp
  name: IList.Remove(Object)
  nameWithType: SynchronizedCollection<T>.IList.Remove(Object)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.Remove(Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Removes the first occurrence of a specified object as an element from the collection.
  remarks: The elements in the collection that follow the removed element move up to occupy the vacated spot and their indices are updated accordingly.
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to be removed from the collection.
  overload: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Remove*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Collections.Generic.SynchronizedCollection`1.#ctor
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: SynchronizedCollection<T>()
  nameWithType: SynchronizedCollection<T>.SynchronizedCollection<T>()
  fullName: System.Collections.Generic.SynchronizedCollection<T>.SynchronizedCollection<T>()
- uid: System.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: SynchronizedCollection<T>(Object)
  nameWithType: SynchronizedCollection<T>.SynchronizedCollection<T>(Object)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.SynchronizedCollection<T>(Object)
- uid: System.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: SynchronizedCollection<T>(Object,IEnumerable<T>)
  nameWithType: SynchronizedCollection<T>.SynchronizedCollection<T>(Object,IEnumerable<T>)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.SynchronizedCollection<T>(Object,IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.SynchronizedCollection`1.#ctor(System.Object,`0[])
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: SynchronizedCollection<T>(Object,T[])
  nameWithType: SynchronizedCollection<T>.SynchronizedCollection<T>(Object,T[])
  fullName: System.Collections.Generic.SynchronizedCollection<T>.SynchronizedCollection<T>(Object,T[])
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Generic.SynchronizedCollection`1.Add(`0)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Add(T)
  nameWithType: SynchronizedCollection<T>.Add(T)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Add(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.SynchronizedCollection`1.Clear
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Clear()
  nameWithType: SynchronizedCollection<T>.Clear()
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Clear()
- uid: System.Collections.Generic.SynchronizedCollection`1.ClearItems
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: ClearItems()
  nameWithType: SynchronizedCollection<T>.ClearItems()
  fullName: System.Collections.Generic.SynchronizedCollection<T>.ClearItems()
- uid: System.Collections.Generic.SynchronizedCollection`1.Contains(`0)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Contains(T)
  nameWithType: SynchronizedCollection<T>.Contains(T)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Contains(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.SynchronizedCollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: SynchronizedCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.CopyTo(T[],Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.SynchronizedCollection`1.Count
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Count
  nameWithType: SynchronizedCollection<T>.Count
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Count
- uid: System.Collections.Generic.SynchronizedCollection`1.GetEnumerator
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: SynchronizedCollection<T>.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedCollection<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Generic.SynchronizedCollection`1.IndexOf(`0)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: IndexOf(T)
  nameWithType: SynchronizedCollection<T>.IndexOf(T)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IndexOf(T)
- uid: System.Collections.Generic.SynchronizedCollection`1.Insert(System.Int32,`0)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Insert(Int32,T)
  nameWithType: SynchronizedCollection<T>.Insert(Int32,T)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Insert(Int32,T)
- uid: System.Collections.Generic.SynchronizedCollection`1.InsertItem(System.Int32,`0)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: InsertItem(Int32,T)
  nameWithType: SynchronizedCollection<T>.InsertItem(Int32,T)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.InsertItem(Int32,T)
- uid: System.Collections.Generic.SynchronizedCollection`1.Item(System.Int32)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Item(Int32)
  nameWithType: SynchronizedCollection<T>.Item(Int32)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Item(Int32)
- uid: System.Collections.Generic.SynchronizedCollection`1.Items
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Items
  nameWithType: SynchronizedCollection<T>.Items
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Items
- uid: System.Collections.Generic.List`1
  parent: System.Collections.Generic
  isExternal: false
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
- uid: System.Collections.Generic.SynchronizedCollection`1.Remove(`0)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Remove(T)
  nameWithType: SynchronizedCollection<T>.Remove(T)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.Remove(T)
- uid: System.Collections.Generic.SynchronizedCollection`1.RemoveAt(System.Int32)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SynchronizedCollection<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.RemoveAt(Int32)
- uid: System.Collections.Generic.SynchronizedCollection`1.RemoveItem(System.Int32)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: RemoveItem(Int32)
  nameWithType: SynchronizedCollection<T>.RemoveItem(Int32)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.RemoveItem(Int32)
- uid: System.Collections.Generic.SynchronizedCollection`1.SetItem(System.Int32,`0)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: SetItem(Int32,T)
  nameWithType: SynchronizedCollection<T>.SetItem(Int32,T)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.SetItem(Int32,T)
- uid: System.Collections.Generic.SynchronizedCollection`1.SyncRoot
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: SyncRoot
  nameWithType: SynchronizedCollection<T>.SyncRoot
  fullName: System.Collections.Generic.SynchronizedCollection<T>.SyncRoot
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: ICollection<T>.IsReadOnly
  nameWithType: SynchronizedCollection<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.SynchronizedCollection<T>.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: SynchronizedCollection<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: SynchronizedCollection<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.SynchronizedCollection<T>.ICollection.IsSynchronized
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: SynchronizedCollection<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.SynchronizedCollection<T>.ICollection.SyncRoot
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: SynchronizedCollection<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: IList.Add(Object)
  nameWithType: SynchronizedCollection<T>.IList.Add(Object)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.Add(Object)
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: IList.Contains(Object)
  nameWithType: SynchronizedCollection<T>.IList.Contains(Object)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.Contains(Object)
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: IList.IndexOf(Object)
  nameWithType: SynchronizedCollection<T>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.IndexOf(Object)
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: IList.Insert(Int32,Object)
  nameWithType: SynchronizedCollection<T>.IList.Insert(Int32,Object)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.Insert(Int32,Object)
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsFixedSize
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: IList.IsFixedSize
  nameWithType: SynchronizedCollection<T>.IList.IsFixedSize
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.IsFixedSize
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsReadOnly
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: IList.IsReadOnly
  nameWithType: SynchronizedCollection<T>.IList.IsReadOnly
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.IsReadOnly
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: IList.Item(Int32)
  nameWithType: SynchronizedCollection<T>.IList.Item(Int32)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.Item(Int32)
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: IList.Remove(Object)
  nameWithType: SynchronizedCollection<T>.IList.Remove(Object)
  fullName: System.Collections.Generic.SynchronizedCollection<T>.IList.Remove(Object)
- uid: System.Collections.Generic.SynchronizedCollection`1.#ctor*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: SynchronizedCollection<T>
  nameWithType: SynchronizedCollection<T>.SynchronizedCollection<T>
- uid: System.Collections.Generic.SynchronizedCollection`1.Add*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Add
  nameWithType: SynchronizedCollection<T>.Add
- uid: System.Collections.Generic.SynchronizedCollection`1.Clear*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Clear
  nameWithType: SynchronizedCollection<T>.Clear
- uid: System.Collections.Generic.SynchronizedCollection`1.ClearItems*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: ClearItems
  nameWithType: SynchronizedCollection<T>.ClearItems
- uid: System.Collections.Generic.SynchronizedCollection`1.Contains*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Contains
  nameWithType: SynchronizedCollection<T>.Contains
- uid: System.Collections.Generic.SynchronizedCollection`1.CopyTo*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: CopyTo
  nameWithType: SynchronizedCollection<T>.CopyTo
- uid: System.Collections.Generic.SynchronizedCollection`1.Count*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Count
  nameWithType: SynchronizedCollection<T>.Count
- uid: System.Collections.Generic.SynchronizedCollection`1.GetEnumerator*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: GetEnumerator
  nameWithType: SynchronizedCollection<T>.GetEnumerator
- uid: System.Collections.Generic.SynchronizedCollection`1.IndexOf*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: IndexOf
  nameWithType: SynchronizedCollection<T>.IndexOf
- uid: System.Collections.Generic.SynchronizedCollection`1.Insert*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Insert
  nameWithType: SynchronizedCollection<T>.Insert
- uid: System.Collections.Generic.SynchronizedCollection`1.InsertItem*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: InsertItem
  nameWithType: SynchronizedCollection<T>.InsertItem
- uid: System.Collections.Generic.SynchronizedCollection`1.Item*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Item
  nameWithType: SynchronizedCollection<T>.Item
- uid: System.Collections.Generic.SynchronizedCollection`1.Items*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Items
  nameWithType: SynchronizedCollection<T>.Items
- uid: System.Collections.Generic.SynchronizedCollection`1.Remove*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: Remove
  nameWithType: SynchronizedCollection<T>.Remove
- uid: System.Collections.Generic.SynchronizedCollection`1.RemoveAt*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: RemoveAt
  nameWithType: SynchronizedCollection<T>.RemoveAt
- uid: System.Collections.Generic.SynchronizedCollection`1.RemoveItem*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: RemoveItem
  nameWithType: SynchronizedCollection<T>.RemoveItem
- uid: System.Collections.Generic.SynchronizedCollection`1.SetItem*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: SetItem
  nameWithType: SynchronizedCollection<T>.SetItem
- uid: System.Collections.Generic.SynchronizedCollection`1.SyncRoot*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: SyncRoot
  nameWithType: SynchronizedCollection<T>.SyncRoot
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType: SynchronizedCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: SynchronizedCollection<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SynchronizedCollection<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SynchronizedCollection<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SynchronizedCollection<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Add*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: SynchronizedCollection<T>.System.Collections.IList.Add
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Contains*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: SynchronizedCollection<T>.System.Collections.IList.Contains
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IndexOf*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: SynchronizedCollection<T>.System.Collections.IList.IndexOf
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Insert*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: SynchronizedCollection<T>.System.Collections.IList.Insert
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsFixedSize*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: SynchronizedCollection<T>.System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#IsReadOnly*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: SynchronizedCollection<T>.System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Item*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: SynchronizedCollection<T>.System.Collections.IList.Item
- uid: System.Collections.Generic.SynchronizedCollection`1.System#Collections#IList#Remove*
  parent: System.Collections.Generic.SynchronizedCollection`1
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: SynchronizedCollection<T>.System.Collections.IList.Remove
