### YamlMime:ManagedReference
items:
- uid: System.Web.Routing.RouteCollection
  id: RouteCollection
  children:
  - System.Web.Routing.RouteCollection.#ctor
  - System.Web.Routing.RouteCollection.#ctor(System.Web.Hosting.VirtualPathProvider)
  - System.Web.Routing.RouteCollection.Add(System.String,System.Web.Routing.RouteBase)
  - System.Web.Routing.RouteCollection.AppendTrailingSlash
  - System.Web.Routing.RouteCollection.ClearItems
  - System.Web.Routing.RouteCollection.GetReadLock
  - System.Web.Routing.RouteCollection.GetRouteData(System.Web.HttpContextBase)
  - System.Web.Routing.RouteCollection.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)
  - System.Web.Routing.RouteCollection.GetVirtualPath(System.Web.Routing.RequestContext,System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.Routing.RouteCollection.GetWriteLock
  - System.Web.Routing.RouteCollection.Ignore(System.String)
  - System.Web.Routing.RouteCollection.Ignore(System.String,System.Object)
  - System.Web.Routing.RouteCollection.InsertItem(System.Int32,System.Web.Routing.RouteBase)
  - System.Web.Routing.RouteCollection.Item(System.String)
  - System.Web.Routing.RouteCollection.LowercaseUrls
  - System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String)
  - System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean)
  - System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary)
  - System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)
  - System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)
  - System.Web.Routing.RouteCollection.RemoveItem(System.Int32)
  - System.Web.Routing.RouteCollection.RouteExistingFiles
  - System.Web.Routing.RouteCollection.SetItem(System.Int32,System.Web.Routing.RouteBase)
  langs:
  - csharp
  name: RouteCollection
  nameWithType: RouteCollection
  fullName: System.Web.Routing.RouteCollection
  type: Class
  summary: Provides a collection of routes for ASP.NET routing.
  remarks: "The RouteCollection class provides methods that enable you to manage a collection of objects that derive from the <xref:System.Web.Routing.RouteBase> class.  \n  \n Typically, you will use the `static`<xref:System.Web.Routing.RouteTable.Routes%2A> property of the <xref:System.Web.Routing.RouteTable> class to retrieve a RouteCollection object. The <xref:System.Web.Routing.RouteTable.Routes%2A> property stores all the routes for an ASP.NET application. ASP.NET routing iterates through the routes in the <xref:System.Web.Routing.RouteTable.Routes%2A> property to find the route that matches a URL.  \n  \n To construct a URL, you call the <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method and pass in a collection of values. The <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method finds the first route with parameters that match the values that you passed in, and returns a <xref:System.Web.Routing.VirtualPathData> object that contains information about the matching route. You retrieve the URL through the <xref:System.Web.Routing.VirtualPathData.VirtualPath%2A> property of the <xref:System.Web.Routing.VirtualPathData> object.  \n  \n You can add a route either with a name or without a name. Including a name enables you to distinguish between similar routes when URLs are constructed. If you do not specify a name, ASP.NET routing uses the first matching route in the collection to construct a URL.  \n  \n When you add an unnamed route to the RouteCollection object, you cannot add a route that already is in the collection. When you add a named route, you cannot use a name that already identifies a route in the collection.  \n  \n You use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.  \n  \n For more information about how to add a route to a route collection, see [ASP.NET Routing](../Topic/ASP.NET%20Routing.md)."
  syntax:
    content: >-
      [System.Runtime.CompilerServices.TypeForwardedFrom("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")]

      public class RouteCollection : System.Collections.ObjectModel.Collection<System.Web.Routing.RouteBase>
  inheritance:
  - System.Object
  - System.Collections.ObjectModel.Collection`1
  implements: []
  inheritedMembers:
  - System.Collections.ObjectModel.Collection`1.Add(`0)
  - System.Collections.ObjectModel.Collection`1.Clear
  - System.Collections.ObjectModel.Collection`1.Contains(`0)
  - System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)
  - System.Collections.ObjectModel.Collection`1.Count
  - System.Collections.ObjectModel.Collection`1.GetEnumerator
  - System.Collections.ObjectModel.Collection`1.IndexOf(`0)
  - System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)
  - System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)
  - System.Collections.ObjectModel.Collection`1.Item(System.Int32)
  - System.Collections.ObjectModel.Collection`1.Items
  - System.Collections.ObjectModel.Collection`1.Remove(`0)
  - System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)
  - System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)
  - System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.#ctor
  id: '#ctor'
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: RouteCollection()
  nameWithType: RouteCollection.RouteCollection()
  fullName: System.Web.Routing.RouteCollection.RouteCollection()
  type: Constructor
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Initializes a new instance of the <xref href="System.Web.Routing.RouteCollection"></xref> class.
  syntax:
    content: public RouteCollection ();
    parameters: []
  overload: System.Web.Routing.RouteCollection.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.#ctor(System.Web.Hosting.VirtualPathProvider)
  id: '#ctor(System.Web.Hosting.VirtualPathProvider)'
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: RouteCollection(VirtualPathProvider)
  nameWithType: RouteCollection.RouteCollection(VirtualPathProvider)
  fullName: System.Web.Routing.RouteCollection.RouteCollection(VirtualPathProvider)
  type: Constructor
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Initializes a new instance of the <xref href="System.Web.Routing.RouteCollection"></xref> class by using the specified virtual path provider.
  syntax:
    content: public RouteCollection (System.Web.Hosting.VirtualPathProvider virtualPathProvider);
    parameters:
    - id: virtualPathProvider
      type: System.Web.Hosting.VirtualPathProvider
      description: A provider for retrieving resources from a virtual file system.
  overload: System.Web.Routing.RouteCollection.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.Add(System.String,System.Web.Routing.RouteBase)
  id: Add(System.String,System.Web.Routing.RouteBase)
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: Add(String,RouteBase)
  nameWithType: RouteCollection.Add(String,RouteBase)
  fullName: System.Web.Routing.RouteCollection.Add(String,RouteBase)
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Adds a route to the end of the <xref href="System.Web.Routing.RouteCollection"></xref> object and assigns the specified name to the route.
  remarks: "The Add method enables you to define a name for a route when you add it to the route collection. By defining a name for the route, you can specify a particular route to use when you use routing to construct a URL. Specifying a particular route is important when more than one route matches the values that you pass to the <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> method. If you do not specify a named route, ASP.NET routing will use the first route in the collection that matches the values. For more information, see [How to: Construct URLs from Routes](../Topic/How%20to:%20Construct%20URLs%20from%20Routes.md).  \n  \n A name can be used only one time in the <xref:System.Web.Routing.RouteCollection> object.  \n  \n If you do not have to specify a name for the route, you can add the route by calling the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> method.  \n  \n Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes."
  example:
  - "The following example shows how to add a route to a <xref:System.Web.Routing.RouteCollection> object and assign a name to the route.  \n  \n [!code-vb[System.Web.Routing.RouteCollection.MapPageRoute#1](~/add/codesnippet/visualbasic/3206eec6-8603-497d-b81b-_1.asax)]\n [!code-cs[System.Web.Routing.RouteCollection.MapPageRoute#1](~/add/codesnippet/csharp/3206eec6-8603-497d-b81b-_1.asax)]"
  syntax:
    content: public void Add (string name, System.Web.Routing.RouteBase item);
    parameters:
    - id: name
      type: System.String
      description: The value that identifies the route. The value can be `null` or an empty string.
    - id: item
      type: System.Web.Routing.RouteBase
      description: The route to add to the end of the collection.
  overload: System.Web.Routing.RouteCollection.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>item</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>name</code> is already used in the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.AppendTrailingSlash
  id: AppendTrailingSlash
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: AppendTrailingSlash
  nameWithType: RouteCollection.AppendTrailingSlash
  fullName: System.Web.Routing.RouteCollection.AppendTrailingSlash
  type: Property
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Gets or sets a value that indicates whether trailing slashes are added when virtual paths are normalized.
  syntax:
    content: public bool AppendTrailingSlash { get; set; }
    return:
      type: System.Boolean
      description: '`true` if trailing slashes are added; otherwise, `false`. The default is `false`.'
  overload: System.Web.Routing.RouteCollection.AppendTrailingSlash*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.ClearItems
  id: ClearItems
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: ClearItems()
  nameWithType: RouteCollection.ClearItems()
  fullName: System.Web.Routing.RouteCollection.ClearItems()
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Removes all the elements from the <xref href="System.Web.Routing.RouteCollection"></xref> object.
  remarks: Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.
  syntax:
    content: protected override void ClearItems ();
    parameters: []
  overload: System.Web.Routing.RouteCollection.ClearItems*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.GetReadLock
  id: GetReadLock
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: GetReadLock()
  nameWithType: RouteCollection.GetReadLock()
  fullName: System.Web.Routing.RouteCollection.GetReadLock()
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Provides an object for managing thread safety when you retrieve an object from the collection.
  remarks: "The <xref:System.Web.Routing.RouteCollection> object is available to multiple processes in the application. Therefore, if you have to retrieve a route when the application is running, use the GetReadLock method in order to guarantee thread safety. By obtaining a read lock on the route collection, you make sure that the collection will not be modified while you are trying to retrieve it.  \n  \n The GetReadLock method stops the thread from continuing until the lock can be acquired. If a write lock is in place, the thread waits until the update is completed and the write lock is released. The read lock on the route collection is released when the <xref:System.IDisposable> object that is returned by this method is disposed.  \n  \n If you do not use GetReadLock, you might get an error while you are reading through the <xref:System.Web.Routing.RouteCollection> collection. For example, suppose you loop through the objects in the <xref:System.Web.Routing.RouteCollection> collection to read them, without calling GetReadLock. While you are doing that, another thread from another request might call <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> and add a route to the collection. The first thread will then fail with an error.  \n  \n There are two scenarios in which you do not have to call GetReadLock:  \n  \n-   Public methods of the <xref:System.Web.Routing.RouteCollection> class such as <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> and <xref:System.Web.Routing.RouteCollection.GetRouteData%2A> call GetReadLock internally. Therefore, you do not have to explicitly call GetReadLock when you call a public method of the <xref:System.Web.Routing.RouteCollection> class to retrieve data from the collection.  \n  \n-   When the application is starting and is not yet processing requests, such as in the `Application_Start` event handler, only one thread is running. Because there are no other threads that might update the collection while you are reading it, you do not have to call GetReadLock."
  example:
  - "The following example shows how to use the GetReadLock method when you retrieve a route while the application is running. The `Using` statement ensures that no matter what happens at run time when you read from the collection (whether the code completes normally or an exception is thrown) the lock will be safely released at the end of the `Using` code block.  \n  \n [!CODE [System.Web.Routing.RouteCollection.MapPageRoute#2](../CodeSnippet/VS_Snippets_WebNet/system.web.routing.routecollection.mappageroute#2)]"
  syntax:
    content: public IDisposable GetReadLock ();
    parameters: []
    return:
      type: System.IDisposable
      description: An object that manages thread safety.
  overload: System.Web.Routing.RouteCollection.GetReadLock*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.GetRouteData(System.Web.HttpContextBase)
  id: GetRouteData(System.Web.HttpContextBase)
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: GetRouteData(HttpContextBase)
  nameWithType: RouteCollection.GetRouteData(HttpContextBase)
  fullName: System.Web.Routing.RouteCollection.GetRouteData(HttpContextBase)
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Returns information about the route in the collection that matches the specified values.
  syntax:
    content: public System.Web.Routing.RouteData GetRouteData (System.Web.HttpContextBase httpContext);
    parameters:
    - id: httpContext
      type: System.Web.HttpContextBase
      description: An object that encapsulates information about the HTTP request.
    return:
      type: System.Web.Routing.RouteData
      description: An object that contains the values from the route definition.
  overload: System.Web.Routing.RouteCollection.GetRouteData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>context</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="stem.Web.HttpContextBase.Request%2A"></xref> property of the object in the <code>context</code> parameter is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)
  id: GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: GetVirtualPath(RequestContext,RouteValueDictionary)
  nameWithType: RouteCollection.GetVirtualPath(RequestContext,RouteValueDictionary)
  fullName: System.Web.Routing.RouteCollection.GetVirtualPath(RequestContext,RouteValueDictionary)
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Returns information about the URL path that is associated with the route, given the specified context and parameter values.
  syntax:
    content: public System.Web.Routing.VirtualPathData GetVirtualPath (System.Web.Routing.RequestContext requestContext, System.Web.Routing.RouteValueDictionary values);
    parameters:
    - id: requestContext
      type: System.Web.Routing.RequestContext
      description: An object that encapsulates information about the requested route.
    - id: values
      type: System.Web.Routing.RouteValueDictionary
      description: An object that contains the parameters for a route.
    return:
      type: System.Web.Routing.VirtualPathData
      description: An object that contains information about the URL path that is associated with the route.
  overload: System.Web.Routing.RouteCollection.GetVirtualPath*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.GetVirtualPath(System.Web.Routing.RequestContext,System.String,System.Web.Routing.RouteValueDictionary)
  id: GetVirtualPath(System.Web.Routing.RequestContext,System.String,System.Web.Routing.RouteValueDictionary)
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: GetVirtualPath(RequestContext,String,RouteValueDictionary)
  nameWithType: RouteCollection.GetVirtualPath(RequestContext,String,RouteValueDictionary)
  fullName: System.Web.Routing.RouteCollection.GetVirtualPath(RequestContext,String,RouteValueDictionary)
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Returns information about the URL path that is associated with the named route, given the specified context, route name, and parameter values.
  syntax:
    content: public System.Web.Routing.VirtualPathData GetVirtualPath (System.Web.Routing.RequestContext requestContext, string name, System.Web.Routing.RouteValueDictionary values);
    parameters:
    - id: requestContext
      type: System.Web.Routing.RequestContext
      description: An object that encapsulates information about the requested route.
    - id: name
      type: System.String
      description: The name of the route to use when information about the URL path is retrieved.
    - id: values
      type: System.Web.Routing.RouteValueDictionary
      description: An object that contains the parameters for a route.
    return:
      type: System.Web.Routing.VirtualPathData
      description: An object that contains information about the URL path that is associated with the route.
  overload: System.Web.Routing.RouteCollection.GetVirtualPath*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: No route could be found that has the name specified in the <code>name</code> parameter.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.GetWriteLock
  id: GetWriteLock
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: GetWriteLock()
  nameWithType: RouteCollection.GetWriteLock()
  fullName: System.Web.Routing.RouteCollection.GetWriteLock()
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Provides an object for managing thread safety when you add or remove elements in the collection.
  remarks: "The recommended approach for defining routes in an ASP.NET application is to add the routes to the <xref:System.Web.Routing.RouteTable.Routes%2A> property in an event handler for the `Application_Start` event in the Global.asax file. For more information, see <xref:System.Web.Routing.RouteCollection>.  \n  \n If you have to add a route when the application is running, you use the GetWriteLock method to guarantee thread safety. The write lock on the route collection is released when the <xref:System.IDisposable> object that is returned by this method is disposed."
  example:
  - "The following example shows how to use the GetWriteLock method when you add a route while the application is running.  \n  \n [!CODE [System.Web.Routing.RouteCollection.MapPageRoute#3](../CodeSnippet/VS_Snippets_WebNet/system.web.routing.routecollection.mappageroute#3)]"
  syntax:
    content: public IDisposable GetWriteLock ();
    parameters: []
    return:
      type: System.IDisposable
      description: An object that manages thread safety.
  overload: System.Web.Routing.RouteCollection.GetWriteLock*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.Ignore(System.String)
  id: Ignore(System.String)
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: Ignore(String)
  nameWithType: RouteCollection.Ignore(String)
  fullName: System.Web.Routing.RouteCollection.Ignore(String)
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Defines a URL pattern that should not be checked for matches against routes.
  remarks: "This method creates a route that is mapped to the <xref:System.Web.Routing.StopRoutingHandler> route handler. After you call this method, requests that match the specified URL pattern will not be processed as route requests.  \n  \n ASP.NET routing automatically ignores requests when the URL matches a physical file, such as an image file. In some cases you might also want routing to ignore requests when there is no physical file. For example, the requests that ASP.NET automatically makes for .axd files should not be treated as route requests even though there is no physical file that corresponds to the .axd file-name extension."
  example:
  - "The default template for MVC projects uses this method to exclude .axd files from routing, as shown in the following example:  \n  \n [!code-vb[MvcDefaultApp#2](~/add/codesnippet/visualbasic/m-system.web.routing.rou_2_1.vb)]\n [!code-cs[MvcDefaultApp#2](~/add/codesnippet/csharp/m-system.web.routing.rou_2_1.cs)]"
  syntax:
    content: public void Ignore (string url);
    parameters:
    - id: url
      type: System.String
      description: The URL pattern to be ignored.
  overload: System.Web.Routing.RouteCollection.Ignore*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.Ignore(System.String,System.Object)
  id: Ignore(System.String,System.Object)
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: Ignore(String,Object)
  nameWithType: RouteCollection.Ignore(String,Object)
  fullName: System.Web.Routing.RouteCollection.Ignore(String,Object)
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Defines a URL pattern that should not be checked for matches against routes if a request URL meets the specified constraints.
  remarks: "This method creates a route that is mapped to the <xref:System.Web.Routing.StopRoutingHandler> route handler. After you call this method, requests that match the specified URL pattern will not be processed as route requests.  \n  \n ASP.NET routing automatically ignores requests when the URL matches a physical file, such as an image file. In some cases you might also want routing to ignore requests when there is no physical file. For example, the requests that ASP.NET automatically makes for .axd files should not be treated as route requests even though there is no physical file that corresponds to the .axd file-name extension."
  example:
  - "The following example shows how to use this method to ignore all URLs that have an .aspx extension. You might want to do this if you register a custom HTTP handler to handle all URLs for files that have the extension \".aspx\". A single URL pattern that would match all .aspx requests would require two catchall parameters such as `{*path}.aspx/{*pathinfo}`. (This pattern would match any URL that ends in .aspx, including those that have query-string parameters.) However, routing allows only one catchall parameter at the end. As an alternative, you can specify a URL pattern that has a single catchall parameter that matches all URLs and then specify constraints that exclude everything that does not have the .aspx extension, as shown in the following example:  \n  \n```vb#  \nroutes.Ignore(\"{*allaspx}\", new With {.allaspx = \".*\\.aspx(/.*)?\"})  \n```  \n  \n```c#  \nroutes.Ignore(\"{*allaspx}\", new {allaspx=@\".*\\.aspx(/.*)?\"});  \n```  \n  \n The previous line of code would typically be added to a method that is called from the `Application_Start` method in the Global.asax, as shown in the example for the <xref:System.Web.Routing.RouteCollection.Ignore%28System.String%29> overload."
  syntax:
    content: public void Ignore (string url, object constraints);
    parameters:
    - id: url
      type: System.String
      description: The URL pattern to be ignored.
    - id: constraints
      type: System.Object
      description: Additional criteria that determine whether a request that matches the URL pattern will be ignored.
  overload: System.Web.Routing.RouteCollection.Ignore*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>url</code> parameter is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.InsertItem(System.Int32,System.Web.Routing.RouteBase)
  id: InsertItem(System.Int32,System.Web.Routing.RouteBase)
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: InsertItem(Int32,RouteBase)
  nameWithType: RouteCollection.InsertItem(Int32,RouteBase)
  fullName: System.Web.Routing.RouteCollection.InsertItem(Int32,RouteBase)
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Inserts the specified route into the <xref href="System.Web.Routing.RouteCollection"></xref> object at the specified index.
  remarks: "When you add an unnamed route to the <xref:System.Web.Routing.RouteCollection> object, you cannot add a route that already is in the collection.  \n  \n Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes."
  syntax:
    content: protected override void InsertItem (int index, System.Web.Routing.RouteBase item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <code>item</code> is inserted.
    - id: item
      type: System.Web.Routing.RouteBase
      description: The route to insert.
  overload: System.Web.Routing.RouteCollection.InsertItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>item</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>item</code> is already in the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.Item(System.String)
  id: Item(System.String)
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: Item(String)
  nameWithType: RouteCollection.Item(String)
  fullName: System.Web.Routing.RouteCollection.Item(String)
  type: Property
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Gets the route in the collection that has the specified name.
  remarks: Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.
  syntax:
    content: public System.Web.Routing.RouteBase this[string name] { get; }
    parameters:
    - id: name
      type: System.String
      description: The value that identifies the route to get.
    return:
      type: System.Web.Routing.RouteBase
      description: An object that has the specified name, or `null` if <code>name</code> is `null`, is an empty string, or does not match any route in the collection.
  overload: System.Web.Routing.RouteCollection.Item*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.LowercaseUrls
  id: LowercaseUrls
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: LowercaseUrls
  nameWithType: RouteCollection.LowercaseUrls
  fullName: System.Web.Routing.RouteCollection.LowercaseUrls
  type: Property
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Gets or sets a value that indicates whether URLs are converted to lower case when virtual paths are normalized.
  remarks: If a query string is included in the URL, that part of the URL is not converted to lower case.
  syntax:
    content: public bool LowercaseUrls { get; set; }
    return:
      type: System.Boolean
      description: '`true` to convert URLs to lower case; otherwise `false`. The default is `false`.'
  overload: System.Web.Routing.RouteCollection.LowercaseUrls*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String)
  id: MapPageRoute(System.String,System.String,System.String)
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: MapPageRoute(String,String,String)
  nameWithType: RouteCollection.MapPageRoute(String,String,String)
  fullName: System.Web.Routing.RouteCollection.MapPageRoute(String,String,String)
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Provides a way to define routes for Web Forms applications.
  remarks: This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.
  example:
  - "The following example shows how to define a route by using this method. The first statement defines a route that does not have a name. The second statement defines a named route. This example is part of a larger example that is available in the <xref:System.Web.Routing.RouteCollection.MapPageRoute%2A> method overview.  \n  \n [!code-vb[System.Web.Routing.RouteCollection.MapPageRoute#140](~/add/codesnippet/visualbasic/4e9854f3-7cf7-42cb-af4b-_1.asax)]\n [!code-cs[System.Web.Routing.RouteCollection.MapPageRoute#140](~/add/codesnippet/csharp/4e9854f3-7cf7-42cb-af4b-_1.asax)]"
  syntax:
    content: public System.Web.Routing.Route MapPageRoute (string routeName, string routeUrl, string physicalFile);
    parameters:
    - id: routeName
      type: System.String
      description: The name of the route.
    - id: routeUrl
      type: System.String
      description: The URL pattern for the route.
    - id: physicalFile
      type: System.String
      description: The physical URL for the route.
    return:
      type: System.Web.Routing.Route
      description: The route that is added to the route collection.
  overload: System.Web.Routing.RouteCollection.MapPageRoute*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean)
  id: MapPageRoute(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: MapPageRoute(String,String,String,Boolean)
  nameWithType: RouteCollection.MapPageRoute(String,String,String,Boolean)
  fullName: System.Web.Routing.RouteCollection.MapPageRoute(String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Provides a way to define routes for Web Forms applications.
  remarks: This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.
  example:
  - "The following example shows how to define a route by using this method. This example is part of a larger example that is available in the <xref:System.Web.Routing.RouteCollection.MapPageRoute%2A> method overview.  \n  \n [!code-vb[System.Web.Routing.RouteCollection.MapPageRoute#145](~/add/codesnippet/visualbasic/dc3eec84-e4b5-4b12-b030-_1.asax)]\n [!code-cs[System.Web.Routing.RouteCollection.MapPageRoute#145](~/add/codesnippet/csharp/dc3eec84-e4b5-4b12-b030-_1.asax)]"
  syntax:
    content: public System.Web.Routing.Route MapPageRoute (string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess);
    parameters:
    - id: routeName
      type: System.String
      description: The name of the route.
    - id: routeUrl
      type: System.String
      description: The URL pattern for the route.
    - id: physicalFile
      type: System.String
      description: The physical URL for the route.
    - id: checkPhysicalUrlAccess
      type: System.Boolean
      description: A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href="stem.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A"></xref> property.
    return:
      type: System.Web.Routing.Route
      description: The route that is added to the route collection.
  overload: System.Web.Routing.RouteCollection.MapPageRoute*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary)
  id: MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary)
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: MapPageRoute(String,String,String,Boolean,RouteValueDictionary)
  nameWithType: RouteCollection.MapPageRoute(String,String,String,Boolean,RouteValueDictionary)
  fullName: System.Web.Routing.RouteCollection.MapPageRoute(String,String,String,Boolean,RouteValueDictionary)
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Provides a way to define routes for Web Forms applications.
  remarks: This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.
  example:
  - "The following example shows how to define a route by using this method. This example is part of a larger example that is available in the <xref:System.Web.Routing.RouteCollection.MapPageRoute%2A> method overview.  \n  \n [!code-vb[System.Web.Routing.RouteCollection.MapPageRoute#150](~/add/codesnippet/visualbasic/deb2f4d0-ef2c-4a87-b7ac-_1.asax)]\n [!code-cs[System.Web.Routing.RouteCollection.MapPageRoute#150](~/add/codesnippet/csharp/deb2f4d0-ef2c-4a87-b7ac-_1.asax)]"
  syntax:
    content: public System.Web.Routing.Route MapPageRoute (string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess, System.Web.Routing.RouteValueDictionary defaults);
    parameters:
    - id: routeName
      type: System.String
      description: The name of the route.
    - id: routeUrl
      type: System.String
      description: The URL pattern for the route.
    - id: physicalFile
      type: System.String
      description: The physical URL for the route.
    - id: checkPhysicalUrlAccess
      type: System.Boolean
      description: A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href="stem.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A"></xref> property.
    - id: defaults
      type: System.Web.Routing.RouteValueDictionary
      description: Default values for the route parameters.
    return:
      type: System.Web.Routing.Route
      description: The route that is added to the route collection.
  overload: System.Web.Routing.RouteCollection.MapPageRoute*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)
  id: MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: MapPageRoute(String,String,String,Boolean,RouteValueDictionary,RouteValueDictionary)
  nameWithType: RouteCollection.MapPageRoute(String,String,String,Boolean,RouteValueDictionary,RouteValueDictionary)
  fullName: System.Web.Routing.RouteCollection.MapPageRoute(String,String,String,Boolean,RouteValueDictionary,RouteValueDictionary)
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Provides a way to define routes for Web Forms applications.
  remarks: This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.
  example:
  - "The following example shows how to define a route by using this method. This example is part of a larger example that is available in the <xref:System.Web.Routing.RouteCollection.MapPageRoute%2A> method overview.  \n  \n [!code-vb[System.Web.Routing.RouteCollection.MapPageRoute#155](~/add/codesnippet/visualbasic/6356f9bc-1b98-48bb-880b-_1.asax)]\n [!code-cs[System.Web.Routing.RouteCollection.MapPageRoute#155](~/add/codesnippet/csharp/6356f9bc-1b98-48bb-880b-_1.asax)]"
  syntax:
    content: public System.Web.Routing.Route MapPageRoute (string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess, System.Web.Routing.RouteValueDictionary defaults, System.Web.Routing.RouteValueDictionary constraints);
    parameters:
    - id: routeName
      type: System.String
      description: The name of the route.
    - id: routeUrl
      type: System.String
      description: The URL pattern for the route.
    - id: physicalFile
      type: System.String
      description: The physical URL for the route.
    - id: checkPhysicalUrlAccess
      type: System.Boolean
      description: A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href="stem.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A"></xref> property.
    - id: defaults
      type: System.Web.Routing.RouteValueDictionary
      description: Default values for the route.
    - id: constraints
      type: System.Web.Routing.RouteValueDictionary
      description: Constraints that a URL request must meet in order to be processed as this route.
    return:
      type: System.Web.Routing.Route
      description: The route that is added to the route collection.
  overload: System.Web.Routing.RouteCollection.MapPageRoute*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)
  id: MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: MapPageRoute(String,String,String,Boolean,RouteValueDictionary,RouteValueDictionary,RouteValueDictionary)
  nameWithType: RouteCollection.MapPageRoute(String,String,String,Boolean,RouteValueDictionary,RouteValueDictionary,RouteValueDictionary)
  fullName: System.Web.Routing.RouteCollection.MapPageRoute(String,String,String,Boolean,RouteValueDictionary,RouteValueDictionary,RouteValueDictionary)
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Provides a way to define routes for Web Forms applications.
  remarks: This method is provided for coding convenience. It is equivalent to calling the <xref:System.Web.Routing.RouteCollection.Add%2A> method and passing a <xref:System.Web.Routing.Route> object that is created by using the <xref:System.Web.Routing.PageRouteHandler> class.
  example:
  - "The following example shows how to define a route by using this method. This example is part of a larger example that is available in the <xref:System.Web.Routing.RouteCollection.MapPageRoute%2A> method overview.  \n  \n [!code-vb[System.Web.Routing.RouteCollection.MapPageRoute#160](~/add/codesnippet/visualbasic/acd99d33-9518-42a1-84d8-_1.asax)]\n [!code-cs[System.Web.Routing.RouteCollection.MapPageRoute#160](~/add/codesnippet/csharp/acd99d33-9518-42a1-84d8-_1.asax)]"
  syntax:
    content: public System.Web.Routing.Route MapPageRoute (string routeName, string routeUrl, string physicalFile, bool checkPhysicalUrlAccess, System.Web.Routing.RouteValueDictionary defaults, System.Web.Routing.RouteValueDictionary constraints, System.Web.Routing.RouteValueDictionary dataTokens);
    parameters:
    - id: routeName
      type: System.String
      description: The name of the route.
    - id: routeUrl
      type: System.String
      description: The URL pattern for the route.
    - id: physicalFile
      type: System.String
      description: The physical URL for the route.
    - id: checkPhysicalUrlAccess
      type: System.Boolean
      description: A value that indicates whether ASP.NET should validate that the user has authority to access the physical URL (the route URL is always checked). This parameter sets the <xref href="stem.Web.Routing.PageRouteHandler.CheckPhysicalUrlAccess%2A"></xref> property.
    - id: defaults
      type: System.Web.Routing.RouteValueDictionary
      description: Default values for the route parameters.
    - id: constraints
      type: System.Web.Routing.RouteValueDictionary
      description: Constraints that a URL request must meet in order to be processed as this route.
    - id: dataTokens
      type: System.Web.Routing.RouteValueDictionary
      description: Values that are associated with the route that are not used to determine whether a route matches a URL pattern.
    return:
      type: System.Web.Routing.Route
      description: The route that is added to the route collection.
  overload: System.Web.Routing.RouteCollection.MapPageRoute*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>routeUrl</code> parameter is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.RemoveItem(System.Int32)
  id: RemoveItem(System.Int32)
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: RemoveItem(Int32)
  nameWithType: RouteCollection.RemoveItem(Int32)
  fullName: System.Web.Routing.RouteCollection.RemoveItem(Int32)
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Removes the route from the <xref href="System.Web.Routing.RouteCollection"></xref> object at the specified index.
  remarks: Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes.
  syntax:
    content: protected override void RemoveItem (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the route to remove.
  overload: System.Web.Routing.RouteCollection.RemoveItem*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.RouteExistingFiles
  id: RouteExistingFiles
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: RouteExistingFiles
  nameWithType: RouteCollection.RouteExistingFiles
  fullName: System.Web.Routing.RouteCollection.RouteExistingFiles
  type: Property
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Gets or sets a value that indicates whether ASP.NET routing should handle URLs that match an existing file.
  remarks: Although this value can be changed dynamically, any change made after a service has been activated will be ignored when using ASP.NET routing integration. [!INCLUDE[crdefault](~/add/includes/crdefault-md.md)][ASP.NET Routing Integration](http://go.microsoft.com/fwlink/?LinkId=195235).
  syntax:
    content: public bool RouteExistingFiles { get; set; }
    return:
      type: System.Boolean
      description: '`true` if ASP.NET routing handles all requests, even those that match an existing file; otherwise, `false`. The default value is `false`.'
  overload: System.Web.Routing.RouteCollection.RouteExistingFiles*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Web.Routing.RouteCollection.SetItem(System.Int32,System.Web.Routing.RouteBase)
  id: SetItem(System.Int32,System.Web.Routing.RouteBase)
  parent: System.Web.Routing.RouteCollection
  langs:
  - csharp
  name: SetItem(Int32,RouteBase)
  nameWithType: RouteCollection.SetItem(Int32,RouteBase)
  fullName: System.Web.Routing.RouteCollection.SetItem(Int32,RouteBase)
  type: Method
  assemblies:
  - System.Web.Routing
  - System.Web
  namespace: System.Web.Routing
  summary: Replaces the route at the specified index.
  remarks: "When you add an unnamed route to the <xref:System.Web.Routing.RouteCollection> object, you cannot add a route that already is in the collection.  \n  \n Use the <xref:System.Web.Routing.RouteCollection.GetReadLock%2A> method and the <xref:System.Web.Routing.RouteCollection.GetWriteLock%2A> method to make sure that you interact with the collection without conflicts from other processes."
  syntax:
    content: protected override void SetItem (int index, System.Web.Routing.RouteBase item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the route to replace.
    - id: item
      type: System.Web.Routing.RouteBase
      description: The route to add at the specified index.
  overload: System.Web.Routing.RouteCollection.SetItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>item</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>item</code> is already in the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Web.Routing\RouteCollection.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Web.Routing/RouteCollection.xml
  version:
  - netframework-3.5
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Collections.ObjectModel.Collection`1
  isExternal: false
  name: System.Collections.ObjectModel.Collection<System.Web.Routing.RouteBase>
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Web.Routing.RouteCollection.#ctor
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: RouteCollection()
  nameWithType: RouteCollection.RouteCollection()
  fullName: System.Web.Routing.RouteCollection.RouteCollection()
- uid: System.Web.Routing.RouteCollection.#ctor(System.Web.Hosting.VirtualPathProvider)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: RouteCollection(VirtualPathProvider)
  nameWithType: RouteCollection.RouteCollection(VirtualPathProvider)
  fullName: System.Web.Routing.RouteCollection.RouteCollection(VirtualPathProvider)
- uid: System.Web.Hosting.VirtualPathProvider
  parent: System.Web.Hosting
  isExternal: false
  name: VirtualPathProvider
  nameWithType: VirtualPathProvider
  fullName: System.Web.Hosting.VirtualPathProvider
- uid: System.Web.Routing.RouteCollection.Add(System.String,System.Web.Routing.RouteBase)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: Add(String,RouteBase)
  nameWithType: RouteCollection.Add(String,RouteBase)
  fullName: System.Web.Routing.RouteCollection.Add(String,RouteBase)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Routing.RouteBase
  parent: System.Web.Routing
  isExternal: false
  name: RouteBase
  nameWithType: RouteBase
  fullName: System.Web.Routing.RouteBase
- uid: System.Web.Routing.RouteCollection.AppendTrailingSlash
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: AppendTrailingSlash
  nameWithType: RouteCollection.AppendTrailingSlash
  fullName: System.Web.Routing.RouteCollection.AppendTrailingSlash
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Routing.RouteCollection.ClearItems
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: ClearItems()
  nameWithType: RouteCollection.ClearItems()
  fullName: System.Web.Routing.RouteCollection.ClearItems()
- uid: System.Web.Routing.RouteCollection.GetReadLock
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: GetReadLock()
  nameWithType: RouteCollection.GetReadLock()
  fullName: System.Web.Routing.RouteCollection.GetReadLock()
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Web.Routing.RouteCollection.GetRouteData(System.Web.HttpContextBase)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: GetRouteData(HttpContextBase)
  nameWithType: RouteCollection.GetRouteData(HttpContextBase)
  fullName: System.Web.Routing.RouteCollection.GetRouteData(HttpContextBase)
- uid: System.Web.Routing.RouteData
  parent: System.Web.Routing
  isExternal: false
  name: RouteData
  nameWithType: RouteData
  fullName: System.Web.Routing.RouteData
- uid: System.Web.HttpContextBase
  parent: System.Web
  isExternal: false
  name: HttpContextBase
  nameWithType: HttpContextBase
  fullName: System.Web.HttpContextBase
- uid: System.Web.Routing.RouteCollection.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: GetVirtualPath(RequestContext,RouteValueDictionary)
  nameWithType: RouteCollection.GetVirtualPath(RequestContext,RouteValueDictionary)
  fullName: System.Web.Routing.RouteCollection.GetVirtualPath(RequestContext,RouteValueDictionary)
- uid: System.Web.Routing.VirtualPathData
  parent: System.Web.Routing
  isExternal: false
  name: VirtualPathData
  nameWithType: VirtualPathData
  fullName: System.Web.Routing.VirtualPathData
- uid: System.Web.Routing.RequestContext
  parent: System.Web.Routing
  isExternal: false
  name: RequestContext
  nameWithType: RequestContext
  fullName: System.Web.Routing.RequestContext
- uid: System.Web.Routing.RouteValueDictionary
  parent: System.Web.Routing
  isExternal: false
  name: RouteValueDictionary
  nameWithType: RouteValueDictionary
  fullName: System.Web.Routing.RouteValueDictionary
- uid: System.Web.Routing.RouteCollection.GetVirtualPath(System.Web.Routing.RequestContext,System.String,System.Web.Routing.RouteValueDictionary)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: GetVirtualPath(RequestContext,String,RouteValueDictionary)
  nameWithType: RouteCollection.GetVirtualPath(RequestContext,String,RouteValueDictionary)
  fullName: System.Web.Routing.RouteCollection.GetVirtualPath(RequestContext,String,RouteValueDictionary)
- uid: System.Web.Routing.RouteCollection.GetWriteLock
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: GetWriteLock()
  nameWithType: RouteCollection.GetWriteLock()
  fullName: System.Web.Routing.RouteCollection.GetWriteLock()
- uid: System.Web.Routing.RouteCollection.Ignore(System.String)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: Ignore(String)
  nameWithType: RouteCollection.Ignore(String)
  fullName: System.Web.Routing.RouteCollection.Ignore(String)
- uid: System.Web.Routing.RouteCollection.Ignore(System.String,System.Object)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: Ignore(String,Object)
  nameWithType: RouteCollection.Ignore(String,Object)
  fullName: System.Web.Routing.RouteCollection.Ignore(String,Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Routing.RouteCollection.InsertItem(System.Int32,System.Web.Routing.RouteBase)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: InsertItem(Int32,RouteBase)
  nameWithType: RouteCollection.InsertItem(Int32,RouteBase)
  fullName: System.Web.Routing.RouteCollection.InsertItem(Int32,RouteBase)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Routing.RouteCollection.Item(System.String)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: Item(String)
  nameWithType: RouteCollection.Item(String)
  fullName: System.Web.Routing.RouteCollection.Item(String)
- uid: System.Web.Routing.RouteCollection.LowercaseUrls
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: LowercaseUrls
  nameWithType: RouteCollection.LowercaseUrls
  fullName: System.Web.Routing.RouteCollection.LowercaseUrls
- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: MapPageRoute(String,String,String)
  nameWithType: RouteCollection.MapPageRoute(String,String,String)
  fullName: System.Web.Routing.RouteCollection.MapPageRoute(String,String,String)
- uid: System.Web.Routing.Route
  parent: System.Web.Routing
  isExternal: false
  name: Route
  nameWithType: Route
  fullName: System.Web.Routing.Route
- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: MapPageRoute(String,String,String,Boolean)
  nameWithType: RouteCollection.MapPageRoute(String,String,String,Boolean)
  fullName: System.Web.Routing.RouteCollection.MapPageRoute(String,String,String,Boolean)
- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: MapPageRoute(String,String,String,Boolean,RouteValueDictionary)
  nameWithType: RouteCollection.MapPageRoute(String,String,String,Boolean,RouteValueDictionary)
  fullName: System.Web.Routing.RouteCollection.MapPageRoute(String,String,String,Boolean,RouteValueDictionary)
- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: MapPageRoute(String,String,String,Boolean,RouteValueDictionary,RouteValueDictionary)
  nameWithType: RouteCollection.MapPageRoute(String,String,String,Boolean,RouteValueDictionary,RouteValueDictionary)
  fullName: System.Web.Routing.RouteCollection.MapPageRoute(String,String,String,Boolean,RouteValueDictionary,RouteValueDictionary)
- uid: System.Web.Routing.RouteCollection.MapPageRoute(System.String,System.String,System.String,System.Boolean,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: MapPageRoute(String,String,String,Boolean,RouteValueDictionary,RouteValueDictionary,RouteValueDictionary)
  nameWithType: RouteCollection.MapPageRoute(String,String,String,Boolean,RouteValueDictionary,RouteValueDictionary,RouteValueDictionary)
  fullName: System.Web.Routing.RouteCollection.MapPageRoute(String,String,String,Boolean,RouteValueDictionary,RouteValueDictionary,RouteValueDictionary)
- uid: System.Web.Routing.RouteCollection.RemoveItem(System.Int32)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: RemoveItem(Int32)
  nameWithType: RouteCollection.RemoveItem(Int32)
  fullName: System.Web.Routing.RouteCollection.RemoveItem(Int32)
- uid: System.Web.Routing.RouteCollection.RouteExistingFiles
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: RouteExistingFiles
  nameWithType: RouteCollection.RouteExistingFiles
  fullName: System.Web.Routing.RouteCollection.RouteExistingFiles
- uid: System.Web.Routing.RouteCollection.SetItem(System.Int32,System.Web.Routing.RouteBase)
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: SetItem(Int32,RouteBase)
  nameWithType: RouteCollection.SetItem(Int32,RouteBase)
  fullName: System.Web.Routing.RouteCollection.SetItem(Int32,RouteBase)
- uid: System.Web.Routing.RouteCollection.#ctor*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: RouteCollection
  nameWithType: RouteCollection.RouteCollection
- uid: System.Web.Routing.RouteCollection.Add*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: Add
  nameWithType: RouteCollection.Add
- uid: System.Web.Routing.RouteCollection.AppendTrailingSlash*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: AppendTrailingSlash
  nameWithType: RouteCollection.AppendTrailingSlash
- uid: System.Web.Routing.RouteCollection.ClearItems*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: ClearItems
  nameWithType: RouteCollection.ClearItems
- uid: System.Web.Routing.RouteCollection.GetReadLock*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: GetReadLock
  nameWithType: RouteCollection.GetReadLock
- uid: System.Web.Routing.RouteCollection.GetRouteData*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: GetRouteData
  nameWithType: RouteCollection.GetRouteData
- uid: System.Web.Routing.RouteCollection.GetVirtualPath*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: GetVirtualPath
  nameWithType: RouteCollection.GetVirtualPath
- uid: System.Web.Routing.RouteCollection.GetWriteLock*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: GetWriteLock
  nameWithType: RouteCollection.GetWriteLock
- uid: System.Web.Routing.RouteCollection.Ignore*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: Ignore
  nameWithType: RouteCollection.Ignore
- uid: System.Web.Routing.RouteCollection.InsertItem*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: InsertItem
  nameWithType: RouteCollection.InsertItem
- uid: System.Web.Routing.RouteCollection.Item*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: Item
  nameWithType: RouteCollection.Item
- uid: System.Web.Routing.RouteCollection.LowercaseUrls*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: LowercaseUrls
  nameWithType: RouteCollection.LowercaseUrls
- uid: System.Web.Routing.RouteCollection.MapPageRoute*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: MapPageRoute
  nameWithType: RouteCollection.MapPageRoute
- uid: System.Web.Routing.RouteCollection.RemoveItem*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: RemoveItem
  nameWithType: RouteCollection.RemoveItem
- uid: System.Web.Routing.RouteCollection.RouteExistingFiles*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: RouteExistingFiles
  nameWithType: RouteCollection.RouteExistingFiles
- uid: System.Web.Routing.RouteCollection.SetItem*
  parent: System.Web.Routing.RouteCollection
  isExternal: false
  name: SetItem
  nameWithType: RouteCollection.SetItem
