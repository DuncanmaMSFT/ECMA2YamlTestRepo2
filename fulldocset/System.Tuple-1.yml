### YamlMime:ManagedReference
items:
- uid: System.Tuple`1
  id: Tuple`1
  children:
  - System.Tuple`1.#ctor(`0)
  - System.Tuple`1.Equals(System.Object)
  - System.Tuple`1.GetHashCode
  - System.Tuple`1.Item1
  - System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  - System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  - System.Tuple`1.System#IComparable#CompareTo(System.Object)
  - System.Tuple`1.ToString
  langs:
  - csharp
  name: Tuple<T1>
  nameWithType: Tuple<T1>
  fullName: System.Tuple<T1>
  type: Class
  summary: Represents a 1-tuple, or singleton.
  remarks: "A tuple is a data structure that has a specific number and sequence of values. The Tuple(T1) class represents a 1-tuple, or singleton, which is a tuple that has a single component. A singleton is used comparatively rarely in application development.  \n  \n You can instantiate a Tuple(T1) object by calling either the <xref:System.Tuple%601.%23ctor%2A> constructor or the static <xref:System.Tuple.Create%2A?displayProperty=fullName> method. You can retrieve the value of the tuple's single component by using the read-only <xref:System.Tuple%601.Item1%2A> instance property."
  syntax:
    content: 'public class Tuple<T1> : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable'
    typeParameters:
    - id: T1
      description: The type of the tuple's only component.
  inheritance:
  - System.Object
  implements:
  - System.Collections.IStructuralComparable
  - System.Collections.IStructuralEquatable
  - System.IComparable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: System.Tuple`1
  langs:
  - csharp
  name: Tuple<T1>(T1)
  nameWithType: Tuple<T1>.Tuple<T1>(T1)
  fullName: System.Tuple<T1>.Tuple<T1>(T1)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="stem.Tuple%601"></xref> class.
  remarks: "You can also use the static <xref:System.Tuple.Create%2A?displayProperty=fullName> method to instantiate a 1-tuple object without having to explicitly specify the type of its component. The following example uses the <xref:System.Tuple.Create%2A> method to instantiate a 1-tuple whose component is of type <xref:System.Int32>.  \n  \n [!code-cs[System.Tuple.Create#1](~/add/codesnippet/csharp/m-system.tuple`1.sharpct_1.cs)]\n [!code-vb[System.Tuple.Create#1](~/add/codesnippet/visualbasic/m-system.tuple`1.sharpct_1.vb)]  \n  \n This is equivalent to the following call to the Tuple(T1) class constructor.  \n  \n [!code-cs[System.Tuple.Create#2](~/add/codesnippet/csharp/m-system.tuple`1.sharpct_2.cs)]\n [!code-vb[System.Tuple.Create#2](~/add/codesnippet/visualbasic/m-system.tuple`1.sharpct_2.vb)]"
  syntax:
    content: public Tuple (T1 item1);
    parameters:
    - id: item1
      type: T1
      description: The value of the tuple's only component.
  overload: System.Tuple`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Tuple`1
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Tuple<T1>.Equals(Object)
  fullName: System.Tuple<T1>.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether the current <xref href="stem.Tuple%601"></xref> object is equal to a specified object.
  remarks: "The `obj` parameter is considered to be equal to the current instance under the following conditions:  \n  \n-   It is a <xref:System.Tuple%601> object.  \n  \n-   Its single component is of the same type as the current instance.  \n  \n-   Its single component is equal to that of the current instance. Equality is determined by the default object equality comparer for each component."
  example:
  - "The following example calls the Equals method to compare a <xref:System.Tuple%601> object whose component is a <xref:System.Double> value with three <xref:System.Tuple%601> objects whose components have the following characteristics:  \n  \n-   Same type (<xref:System.Double>) and same value.  \n  \n-   Same type (<xref:System.Double>), but different value.  \n  \n-   Different type (<xref:System.Single>), but same value.  \n  \n [!code-cs[System.Tuple`1.Equals#1](~/add/codesnippet/csharp/m-system.tuple`1.equals-_1.cs)]\n [!code-vb[System.Tuple`1.Equals#1](~/add/codesnippet/visualbasic/m-system.tuple`1.equals-_1.vb)]"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with this instance.
    return:
      type: System.Boolean
      description: '`true` if the current instance is equal to the specified object; otherwise, `false`.'
  overload: System.Tuple`1.Equals*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`1.GetHashCode
  id: GetHashCode
  parent: System.Tuple`1
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Tuple<T1>.GetHashCode()
  fullName: System.Tuple<T1>.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the hash code for the current <xref href="stem.Tuple%601"></xref> object.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Tuple`1.GetHashCode*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`1.Item1
  id: Item1
  parent: System.Tuple`1
  langs:
  - csharp
  name: Item1
  nameWithType: Tuple<T1>.Item1
  fullName: System.Tuple<T1>.Item1
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value of the <xref href="stem.Tuple%601"></xref> object's single component.
  remarks: "You can determine the type of the Item1 component in one of two ways:  \n  \n-   By calling the `GetType` method on the value that is returned by the Item1 property.  \n  \n-   By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%601> object, and retrieving the first element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method.  \n  \n The example illustrates both approaches."
  example:
  - "The following example displays information about two singletons and their components.  \n  \n [!code-vb[System.Tuple`1.Item1#1](~/add/codesnippet/visualbasic/p-system.tuple`1.item1_1.vb)]\n [!code-cs[System.Tuple`1.Item1#1](~/add/codesnippet/csharp/p-system.tuple`1.item1_1.cs)]"
  syntax:
    content: public T1 Item1 { get; }
    return:
      type: T1
      description: The value of the current <xref href="stem.Tuple%601"></xref> object's single component.
  overload: System.Tuple`1.Item1*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  isEii: true
  parent: System.Tuple`1
  langs:
  - csharp
  name: IStructuralComparable.CompareTo(Object,IComparer)
  nameWithType: Tuple<T1>.IStructuralComparable.CompareTo(Object,IComparer)
  fullName: System.Tuple<T1>.IStructuralComparable.CompareTo(Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares the current <xref href="stem.Tuple%601"></xref> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.
  remarks: "Although this method can be called directly, it is most commonly called by collection sorting methods that include <xref:System.Collections.IComparer> parameters to order the members of a collection. For example, it is called by the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=fullName> method and the <xref:System.Collections.SortedList.Add%2A> method of a <xref:System.Collections.SortedList> object that is instantiated by using the <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=fullName> constructor.  \n  \n> [!CAUTION]\n>  The IStructuralComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <xref:System.Tuple%601.System%23Collections%23IStructuralEquatable%23Equals%2A> method."
  example:
  - "The following example defines a generic class named `DescendingComparer` that implements the <xref:System.Collections.Generic.IComparer%601> interface. `DescendingComparer` sorts objects in descending rather than ascending order by reversing the value returned by the default comparer for a particular type. An instance of the generic `DescendingComparer` class is then passed to the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=fullName> method to sort an array of <xref:System.Tuple%601> objects in descending order. Note that the example does not directly call the IStructuralComparable.CompareTo method. This method is called implicitly by the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=fullName> method for each element in the array.  \n  \n [!code-cs[System.Tuple`1.CompareTo#2](~/add/codesnippet/csharp/e8d2c0b9-9bde-4c46-98e2-_1.cs)]\n [!code-vb[System.Tuple`1.CompareTo#2](~/add/codesnippet/visualbasic/e8d2c0b9-9bde-4c46-98e2-_1.vb)]"
  syntax:
    content: int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);
    parameters:
    - id: other
      type: System.Object
      description: An object to compare with the current instance.
    - id: comparer
      type: System.Collections.IComparer
      description: An object that provides custom rules for comparison.
    return:
      type: System.Int32
      description: "A signed integer that indicates the relative position of this instance and <code>other</code> in the sort order, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> A negative integer  \n  \n </td><td> This instance precedes <code>other</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> This instance and <code>other</code> have the same position in the sort order.  \n  \n </td></tr><tr><td> A positive integer  \n  \n </td><td> This instance follows <code>other</code>.  \n  \n </td></tr></tbody></table>"
  overload: System.Tuple`1.System#Collections#IStructuralComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>other</code> is not a <xref href="stem.Tuple%601"></xref> object.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Tuple`1
  langs:
  - csharp
  name: IStructuralEquatable.Equals(Object,IEqualityComparer)
  nameWithType: Tuple<T1>.IStructuralEquatable.Equals(Object,IEqualityComparer)
  fullName: System.Tuple<T1>.IStructuralEquatable.Equals(Object,IEqualityComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether the current <xref href="stem.Tuple%601"></xref> object is equal to a specified object based on a specified comparison method.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Tuple%601> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.  \n  \n The <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> implementation is called only if `other` is not `null`, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <xref:System.Tuple%601> object whose single component is of the same type as the current instance. The method is passed the <xref:System.Tuple%601.Item1%2A> component of the current instance and the <xref:System.Tuple%601.Item1%2A> component of the <xref:System.Tuple%601> object represented by the `other` parameter."
  example:
  - "The following example defines an <xref:System.Collections.IEqualityComparer> implementation that considers two floating-point values to be equal if they are approximately equal to each other (that is, if one value is within .01 percent of the other).  \n  \n [!code-cs[System.Tuple`1.Equals#2](~/add/codesnippet/csharp/ac65b506-da4d-4fc3-b732-_1.cs)]\n [!code-vb[System.Tuple`1.Equals#2](~/add/codesnippet/visualbasic/ac65b506-da4d-4fc3-b732-_1.vb)]"
  syntax:
    content: bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);
    parameters:
    - id: other
      type: System.Object
      description: The object to compare with this instance.
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: An object that defines the method to use to evaluate whether the two objects are equal.
    return:
      type: System.Boolean
      description: '`true` if the current instance is equal to the specified object; otherwise, `false`.'
  overload: System.Tuple`1.System#Collections#IStructuralEquatable#Equals*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Tuple`1
  langs:
  - csharp
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType: Tuple<T1>.IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Tuple<T1>.IStructuralEquatable.GetHashCode(IEqualityComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Calculates the hash code for the current <xref href="stem.Tuple%601"></xref> object by using a specified computation method.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Tuple%601> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.  \n  \n The method simply wraps a call to the `comparer` object's <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=fullName> implementation.  \n  \n The algorithm used to compute the hash code should return the same hash code for two <xref:System.Tuple%601> objects that are considered to be equal."
  syntax:
    content: int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: An object whose <xref href="stem.Collections.IEqualityComparer.GetHashCode%2A"></xref> method calculates the hash code of the current <xref href="stem.Tuple%601"></xref> object.
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`1.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.Tuple`1
  langs:
  - csharp
  name: IComparable.CompareTo(Object)
  nameWithType: Tuple<T1>.IComparable.CompareTo(Object)
  fullName: System.Tuple<T1>.IComparable.CompareTo(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares the current <xref href="stem.Tuple%601"></xref> object to a specified object, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Tuple%601> instance is cast to an <xref:System.IComparable> interface.  \n  \n This method provides the <xref:System.IComparable.CompareTo%2A?displayProperty=fullName> implementation for the <xref:System.Tuple%601> class. Although the method can be called directly, it is most commonly called by the default overloads of collection sorting methods, such as <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> and <xref:System.Collections.SortedList.Add%2A?displayProperty=fullName>, to order the members of a collection.  \n  \n> [!CAUTION]\n>  The IComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <xref:System.Tuple%601.Equals%2A> method.  \n  \n The IComparable.CompareTo method uses the default object  comparer."
  example:
  - "The following example creates an array of singletons whose component is a <xref:System.Double> value. It displays the value of each tuple component in unsorted order, sorts the array, and then displays the values in sorted order. Note that the example does not directly call the IComparable.CompareTo method. This method is called implicitly by the <xref:System.Array.Sort%28System.Array%29> method for each element in the array.  \n  \n [!code-cs[System.Tuple`1.CompareTo#1](~/add/codesnippet/csharp/m-system.tuple`1.systems_1.cs)]\n [!code-vb[System.Tuple`1.CompareTo#1](~/add/codesnippet/visualbasic/m-system.tuple`1.systems_1.vb)]"
  syntax:
    content: int IComparable.CompareTo (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with the current instance.
    return:
      type: System.Int32
      description: "A signed integer that indicates the relative position of this instance and <code>obj</code> in the sort order, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> A negative integer  \n  \n </td><td> This instance precedes <code>obj</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> This instance and <code>obj</code> have the same position in the sort order.  \n  \n </td></tr><tr><td> A positive integer  \n  \n </td><td> This instance follows <code>obj</code>.  \n  \n </td></tr></tbody></table>"
  overload: System.Tuple`1.System#IComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>obj</code> is not a <xref href="stem.Tuple%601"></xref> object.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`1.ToString
  id: ToString
  parent: System.Tuple`1
  langs:
  - csharp
  name: ToString()
  nameWithType: Tuple<T1>.ToString()
  fullName: System.Tuple<T1>.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a string that represents the value of this <xref href="stem.Tuple%601"></xref> instance.
  remarks: The string returned by this method takes the form (*Item1*), where *Item1* represents the value of the <xref:System.Tuple%601.Item1%2A> property. If the value of <xref:System.Tuple%601.Item1%2A> is `null`, it is represented as <xref:System.String.Empty?displayProperty=fullName>.
  example:
  - "The following example illustrates the ToString method.  \n  \n [!code-vb[System.Tuple`1.ToString#1](~/add/codesnippet/visualbasic/m-system.tuple`1.tostring_1.vb)]\n [!code-cs[System.Tuple`1.ToString#1](~/add/codesnippet/csharp/m-system.tuple`1.tostring_1.cs)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The string representation of this <xref href="stem.Tuple%601"></xref> object.
  overload: System.Tuple`1.ToString*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Tuple`1.#ctor(`0)
  parent: System.Tuple`1
  isExternal: false
  name: Tuple<T1>(T1)
  nameWithType: Tuple<T1>.Tuple<T1>(T1)
  fullName: System.Tuple<T1>.Tuple<T1>(T1)
- uid: T1
  isExternal: true
  name: T1
  nameWithType: T1
  fullName: T1
- uid: System.Tuple`1.Equals(System.Object)
  parent: System.Tuple`1
  isExternal: false
  name: Equals(Object)
  nameWithType: Tuple<T1>.Equals(Object)
  fullName: System.Tuple<T1>.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Tuple`1.GetHashCode
  parent: System.Tuple`1
  isExternal: false
  name: GetHashCode()
  nameWithType: Tuple<T1>.GetHashCode()
  fullName: System.Tuple<T1>.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Tuple`1.Item1
  parent: System.Tuple`1
  isExternal: false
  name: Item1
  nameWithType: Tuple<T1>.Item1
  fullName: System.Tuple<T1>.Item1
- uid: System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Tuple`1
  isExternal: false
  name: IStructuralComparable.CompareTo(Object,IComparer)
  nameWithType: Tuple<T1>.IStructuralComparable.CompareTo(Object,IComparer)
  fullName: System.Tuple<T1>.IStructuralComparable.CompareTo(Object,IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Tuple`1
  isExternal: false
  name: IStructuralEquatable.Equals(Object,IEqualityComparer)
  nameWithType: Tuple<T1>.IStructuralEquatable.Equals(Object,IEqualityComparer)
  fullName: System.Tuple<T1>.IStructuralEquatable.Equals(Object,IEqualityComparer)
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Tuple`1
  isExternal: false
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType: Tuple<T1>.IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Tuple<T1>.IStructuralEquatable.GetHashCode(IEqualityComparer)
- uid: System.Tuple`1.System#IComparable#CompareTo(System.Object)
  parent: System.Tuple`1
  isExternal: false
  name: IComparable.CompareTo(Object)
  nameWithType: Tuple<T1>.IComparable.CompareTo(Object)
  fullName: System.Tuple<T1>.IComparable.CompareTo(Object)
- uid: System.Tuple`1.ToString
  parent: System.Tuple`1
  isExternal: false
  name: ToString()
  nameWithType: Tuple<T1>.ToString()
  fullName: System.Tuple<T1>.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Tuple`1.#ctor*
  parent: System.Tuple`1
  isExternal: false
  name: Tuple<T1>
  nameWithType: Tuple<T1>.Tuple<T1>
- uid: System.Tuple`1.Equals*
  parent: System.Tuple`1
  isExternal: false
  name: Equals
  nameWithType: Tuple<T1>.Equals
- uid: System.Tuple`1.GetHashCode*
  parent: System.Tuple`1
  isExternal: false
  name: GetHashCode
  nameWithType: Tuple<T1>.GetHashCode
- uid: System.Tuple`1.Item1*
  parent: System.Tuple`1
  isExternal: false
  name: Item1
  nameWithType: Tuple<T1>.Item1
- uid: System.Tuple`1.System#Collections#IStructuralComparable#CompareTo*
  parent: System.Tuple`1
  isExternal: false
  name: System.Collections.IStructuralComparable.CompareTo
  nameWithType: Tuple<T1>.System.Collections.IStructuralComparable.CompareTo
- uid: System.Tuple`1.System#Collections#IStructuralEquatable#Equals*
  parent: System.Tuple`1
  isExternal: false
  name: System.Collections.IStructuralEquatable.Equals
  nameWithType: Tuple<T1>.System.Collections.IStructuralEquatable.Equals
- uid: System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode*
  parent: System.Tuple`1
  isExternal: false
  name: System.Collections.IStructuralEquatable.GetHashCode
  nameWithType: Tuple<T1>.System.Collections.IStructuralEquatable.GetHashCode
- uid: System.Tuple`1.System#IComparable#CompareTo*
  parent: System.Tuple`1
  isExternal: false
  name: System.IComparable.CompareTo
  nameWithType: Tuple<T1>.System.IComparable.CompareTo
- uid: System.Tuple`1.ToString*
  parent: System.Tuple`1
  isExternal: false
  name: ToString
  nameWithType: Tuple<T1>.ToString
