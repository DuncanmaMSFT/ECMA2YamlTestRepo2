### YamlMime:ManagedReference
items:
- uid: System.ArraySegment`1
  id: ArraySegment`1
  children:
  - System.ArraySegment`1.#ctor(`0[])
  - System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)
  - System.ArraySegment`1.Array
  - System.ArraySegment`1.Count
  - System.ArraySegment`1.Equals(System.ArraySegment{`0})
  - System.ArraySegment`1.Equals(System.Object)
  - System.ArraySegment`1.GetHashCode
  - System.ArraySegment`1.Offset
  - System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  - System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  langs:
  - csharp
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  type: Struct
  syntax:
    content: public struct ArraySegment<T>
    typeParameters:
    - id: T
      description: To be added.
  inheritance:
  - System.Object
  - System.ValueType
  implements: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.ArraySegment`1.#ctor(`0[])
  id: '#ctor(`0[])'
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: ArraySegment<T>(T[])
  nameWithType: ArraySegment<T>.ArraySegment<T>(T[])
  fullName: System.ArraySegment<T>.ArraySegment<T>(T[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  syntax:
    content: public ArraySegment (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
  overload: System.ArraySegment`1.#ctor*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)
  id: '#ctor(`0[],System.Int32,System.Int32)'
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: ArraySegment<T>(T[],Int32,Int32)
  nameWithType: ArraySegment<T>.ArraySegment<T>(T[],Int32,Int32)
  fullName: System.ArraySegment<T>.ArraySegment<T>(T[],Int32,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  syntax:
    content: public ArraySegment (T[] array, int offset, int count);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: offset
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
  overload: System.ArraySegment`1.#ctor*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.ArraySegment`1.Array
  id: Array
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: Array
  nameWithType: ArraySegment<T>.Array
  fullName: System.ArraySegment<T>.Array
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  syntax:
    content: public T[] Array { get; }
    return:
      type: T[]
      description: To be added.
  overload: System.ArraySegment`1.Array*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.ArraySegment`1.Count
  id: Count
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: Count
  nameWithType: ArraySegment<T>.Count
  fullName: System.ArraySegment<T>.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.ArraySegment`1.Count*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.ArraySegment`1.Equals(System.ArraySegment{`0})
  id: Equals(System.ArraySegment{`0})
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: Equals(ArraySegment<T>)
  nameWithType: ArraySegment<T>.Equals(ArraySegment<T>)
  fullName: System.ArraySegment<T>.Equals(ArraySegment<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  syntax:
    content: public bool Equals (ArraySegment<T> obj);
    parameters:
    - id: obj
      type: System.ArraySegment`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.ArraySegment`1.Equals*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.ArraySegment`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ArraySegment<T>.Equals(Object)
  fullName: System.ArraySegment<T>.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.ArraySegment`1.Equals*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.ArraySegment`1.GetHashCode
  id: GetHashCode
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ArraySegment<T>.GetHashCode()
  fullName: System.ArraySegment<T>.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: To be added.
  overload: System.ArraySegment`1.GetHashCode*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.ArraySegment`1.Offset
  id: Offset
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: Offset
  nameWithType: ArraySegment<T>.Offset
  fullName: System.ArraySegment<T>.Offset
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  syntax:
    content: public int Offset { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.ArraySegment`1.Offset*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  id: op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: op_Equality(ArraySegment<T>,ArraySegment<T>)
  nameWithType: ArraySegment<T>.op_Equality(ArraySegment<T>,ArraySegment<T>)
  fullName: System.ArraySegment<T>.op_Equality(ArraySegment<T>,ArraySegment<T>)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  syntax:
    content: public static bool op_Equality (ArraySegment<T> a, ArraySegment<T> b);
    parameters:
    - id: a
      type: System.ArraySegment`1
      description: To be added.
    - id: b
      type: System.ArraySegment`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.ArraySegment`1.op_Equality*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  id: op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: op_Inequality(ArraySegment<T>,ArraySegment<T>)
  nameWithType: ArraySegment<T>.op_Inequality(ArraySegment<T>,ArraySegment<T>)
  fullName: System.ArraySegment<T>.op_Inequality(ArraySegment<T>,ArraySegment<T>)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  syntax:
    content: public static bool op_Inequality (ArraySegment<T> a, ArraySegment<T> b);
    parameters:
    - id: a
      type: System.ArraySegment`1
      description: To be added.
    - id: b
      type: System.ArraySegment`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.ArraySegment`1.op_Inequality*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.ArraySegment`1.#ctor(`0[])
  parent: System.ArraySegment`1
  isExternal: false
  name: ArraySegment<T>(T[])
  nameWithType: ArraySegment<T>.ArraySegment<T>(T[])
  fullName: System.ArraySegment<T>.ArraySegment<T>(T[])
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)
  parent: System.ArraySegment`1
  isExternal: false
  name: ArraySegment<T>(T[],Int32,Int32)
  nameWithType: ArraySegment<T>.ArraySegment<T>(T[],Int32,Int32)
  fullName: System.ArraySegment<T>.ArraySegment<T>(T[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ArraySegment`1.Array
  parent: System.ArraySegment`1
  isExternal: false
  name: Array
  nameWithType: ArraySegment<T>.Array
  fullName: System.ArraySegment<T>.Array
- uid: System.ArraySegment`1.Count
  parent: System.ArraySegment`1
  isExternal: false
  name: Count
  nameWithType: ArraySegment<T>.Count
  fullName: System.ArraySegment<T>.Count
- uid: System.ArraySegment`1.Equals(System.ArraySegment{`0})
  parent: System.ArraySegment`1
  isExternal: false
  name: Equals(ArraySegment<T>)
  nameWithType: ArraySegment<T>.Equals(ArraySegment<T>)
  fullName: System.ArraySegment<T>.Equals(ArraySegment<T>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ArraySegment`1
  parent: System
  isExternal: false
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
- uid: System.ArraySegment`1.Equals(System.Object)
  parent: System.ArraySegment`1
  isExternal: false
  name: Equals(Object)
  nameWithType: ArraySegment<T>.Equals(Object)
  fullName: System.ArraySegment<T>.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArraySegment`1.GetHashCode
  parent: System.ArraySegment`1
  isExternal: false
  name: GetHashCode()
  nameWithType: ArraySegment<T>.GetHashCode()
  fullName: System.ArraySegment<T>.GetHashCode()
- uid: System.ArraySegment`1.Offset
  parent: System.ArraySegment`1
  isExternal: false
  name: Offset
  nameWithType: ArraySegment<T>.Offset
  fullName: System.ArraySegment<T>.Offset
- uid: System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  parent: System.ArraySegment`1
  isExternal: false
  name: op_Equality(ArraySegment<T>,ArraySegment<T>)
  nameWithType: ArraySegment<T>.op_Equality(ArraySegment<T>,ArraySegment<T>)
  fullName: System.ArraySegment<T>.op_Equality(ArraySegment<T>,ArraySegment<T>)
- uid: System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  parent: System.ArraySegment`1
  isExternal: false
  name: op_Inequality(ArraySegment<T>,ArraySegment<T>)
  nameWithType: ArraySegment<T>.op_Inequality(ArraySegment<T>,ArraySegment<T>)
  fullName: System.ArraySegment<T>.op_Inequality(ArraySegment<T>,ArraySegment<T>)
- uid: System.ArraySegment`1.#ctor*
  parent: System.ArraySegment`1
  isExternal: false
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>.ArraySegment<T>
- uid: System.ArraySegment`1.Array*
  parent: System.ArraySegment`1
  isExternal: false
  name: Array
  nameWithType: ArraySegment<T>.Array
- uid: System.ArraySegment`1.Count*
  parent: System.ArraySegment`1
  isExternal: false
  name: Count
  nameWithType: ArraySegment<T>.Count
- uid: System.ArraySegment`1.Equals*
  parent: System.ArraySegment`1
  isExternal: false
  name: Equals
  nameWithType: ArraySegment<T>.Equals
- uid: System.ArraySegment`1.GetHashCode*
  parent: System.ArraySegment`1
  isExternal: false
  name: GetHashCode
  nameWithType: ArraySegment<T>.GetHashCode
- uid: System.ArraySegment`1.Offset*
  parent: System.ArraySegment`1
  isExternal: false
  name: Offset
  nameWithType: ArraySegment<T>.Offset
- uid: System.ArraySegment`1.op_Equality*
  parent: System.ArraySegment`1
  isExternal: false
  name: op_Equality
  nameWithType: ArraySegment<T>.op_Equality
- uid: System.ArraySegment`1.op_Inequality*
  parent: System.ArraySegment`1
  isExternal: false
  name: op_Inequality
  nameWithType: ArraySegment<T>.op_Inequality
