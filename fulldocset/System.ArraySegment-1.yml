### YamlMime:ManagedReference
items:
- uid: System.ArraySegment`1
  id: ArraySegment`1
  children:
  - System.ArraySegment`1.#ctor(`0[])
  - System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)
  - System.ArraySegment`1.Array
  - System.ArraySegment`1.Count
  - System.ArraySegment`1.Equals(System.ArraySegment{`0})
  - System.ArraySegment`1.Equals(System.Object)
  - System.ArraySegment`1.GetHashCode
  - System.ArraySegment`1.Offset
  - System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  - System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  - System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  - System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  - System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  - System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  - System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  type: Struct
  summary: Delimits a section of a one-dimensional array.
  remarks: "ArraySegment(T) is a wrapper around an array that delimits a range of elements in that array. Multiple ArraySegment(T) instances can refer to the same original array and can overlap. The original array must be one-dimensional and must have zero-based indexing.  \n  \n> [!NOTE]\n>  ArraySegment(T) implements the <xref:System.Collections.Generic.IReadOnlyCollection%601> interface starting with the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)]; in previous versions of the .NET Framework, the ArraySegment(T) structure did not implement this interface.  \n  \n The ArraySegment(T) structure is useful whenever the elements of an array will be manipulated in distinct segments. For example:  \n  \n-   You can pass an ArraySegment(T) object that represents only a portion of an array as an argument to a method, rather than call a relatively expensive method like <xref:System.Array.Copy%2A> to pass a copy of a portion of an array.  \n  \n-   In a multithreaded app, you can use the ArraySegment(T) structure to have each thread operate on only a portion of the array.  \n  \n-   For task-based asynchronous operations, you can use an ArraySegment(T) object to ensure that each task operates on a distinct segment of the array. The following example divides an array into individual segments with up to ten elements. Each element in the segment is multiplied by its segment number. The result shows that using the ArraySegment(T) class to manipulate elements in this way changes the values of its underlying array.  \n  \n     [!code-cs[System.ArraySegment#2](~/add/codesnippet/csharp/t-system.arraysegment`1_1.cs)]\n     [!code-vb[System.ArraySegment#2](~/add/codesnippet/visualbasic/t-system.arraysegment`1_1.vb)]  \n  \n Note, however, that although the ArraySegment(T) structure can be used to divide an array into distinct segments, the segments are not completely independent of one another. The <xref:System.ArraySegment%601.Array%2A> property returns the entire original array, not a copy of the array; therefore, changes made to the array returned by the <xref:System.ArraySegment%601.Array%2A> property are made to the original array. If this is undesirable, you should perform operations on a copy of the array, rather than an ArraySegment(T) object that represents a portion of the array.  \n  \n The<xref:System.ArraySegment%601.Equals%2A> method and the equality and inequality operators test for reference equality when they compare two ArraySegment(T) objects. For two ArraySegment(T) objects to be considered equal, they must meet all of the following conditions:  \n  \n-   Reference the same array.  \n  \n-   Begin at the same index in the array.  \n  \n-   Have the same number of elements.  \n  \n If you want to retrieve an element by its index in the ArraySegment(T) object, you must cast it to an <xref:System.Collections.Generic.IList%601> object and retrieve it or modify it by using the <xref:System.Collections.Generic.IList%601.Item%2A?displayProperty=fullName> property. The following example retrieves the element in an ArraySegment(T) object that delimits a section of a string array.  \n  \n [!code-vb[System.ArraySegment.Class#1](~/add/codesnippet/visualbasic/t-system.arraysegment`1_2.vb)]\n [!code-cs[System.ArraySegment.Class#1](~/add/codesnippet/csharp/t-system.arraysegment`1_2.cs)]"
  example:
  - "The following code example passes an ArraySegment(T) structure to a method.  \n  \n [!code-cs[System.ArraySegment#1](~/add/codesnippet/csharp/t-system.arraysegment`1_3.cs)]\n [!code-cpp[System.ArraySegment#1](~/add/codesnippet/cpp/t-system.arraysegment`1_3.cpp)]\n [!code-vb[System.ArraySegment#1](~/add/codesnippet/visualbasic/t-system.arraysegment`1_3.vb)]"
  syntax:
    content: 'public struct ArraySegment<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>'
    typeParameters:
    - id: T
      description: The type of the elements in the array segment.
  inheritance:
  - System.Object
  - System.ValueType
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.IList<T>
  - System.Collections.Generic.IReadOnlyCollection<T>
  - System.Collections.Generic.IReadOnlyList<T>
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.#ctor(`0[])
  id: '#ctor(`0[])'
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: ArraySegment<T>(T[])
  nameWithType: ArraySegment<T>.ArraySegment<T>(T[])
  fullName: System.ArraySegment<T>.ArraySegment<T>(T[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="stem.ArraySegment%601"></xref> structure that delimits all the elements in the specified array.
  remarks: "This constructor creates an <xref:System.ArraySegment%601> that delimits all the elements of `array`. That is, the <xref:System.ArraySegment%601.Offset%2A> property of the <xref:System.ArraySegment%601> is 0 and its <xref:System.ArraySegment%601.Count%2A> property is the length of `array`. To create an <xref:System.ArraySegment%601> that delimits only part of an array, use the [ArraySegment\\<T>(T\\<xref:System.ArraySegment%601.%23ctor%28%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor.  \n  \n The original array must be one-dimensional and must have zero-based indexing.  \n  \n Multiple <xref:System.ArraySegment%601> instances can refer to the same original array and can overlap."
  example:
  - "The following code example passes an <xref:System.ArraySegment%601> structure to a method.  \n  \n [!code-cs[System.ArraySegment#1](~/add/codesnippet/csharp/m-system.arraysegment`1._0_1.cs)]\n [!code-cpp[System.ArraySegment#1](~/add/codesnippet/cpp/m-system.arraysegment`1._0_1.cpp)]\n [!code-vb[System.ArraySegment#1](~/add/codesnippet/visualbasic/m-system.arraysegment`1._0_1.vb)]"
  syntax:
    content: public ArraySegment (T[] array);
    parameters:
    - id: array
      type: T[]
      description: The array to wrap.
  overload: System.ArraySegment`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)
  id: '#ctor(`0[],System.Int32,System.Int32)'
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: ArraySegment<T>(T[],Int32,Int32)
  nameWithType: ArraySegment<T>.ArraySegment<T>(T[],Int32,Int32)
  fullName: System.ArraySegment<T>.ArraySegment<T>(T[],Int32,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="stem.ArraySegment%601"></xref> structure that delimits the specified range of the elements in the specified array.
  remarks: "The original array must be one-dimensional and must have zero-based indexing.  \n  \n Multiple <xref:System.ArraySegment%601> instances can refer to the same original array and can overlap."
  example:
  - "The following code example passes an <xref:System.ArraySegment%601> structure to a method.  \n  \n [!code-cs[System.ArraySegment#1](~/add/codesnippet/csharp/m-system.arraysegment`1._1_1.cs)]\n [!code-cpp[System.ArraySegment#1](~/add/codesnippet/cpp/m-system.arraysegment`1._1_1.cpp)]\n [!code-vb[System.ArraySegment#1](~/add/codesnippet/visualbasic/m-system.arraysegment`1._1_1.vb)]"
  syntax:
    content: public ArraySegment (T[] array, int offset, int count);
    parameters:
    - id: array
      type: T[]
      description: The array containing the range of elements to delimit.
    - id: offset
      type: System.Int32
      description: The zero-based index of the first element in the range.
    - id: count
      type: System.Int32
      description: The number of elements in the range.
  overload: System.ArraySegment`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>offset</code> or <code>count</code> is less than 0.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>offset</code> and <code>count</code> do not specify a valid range in <code>array</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.Array
  id: Array
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: Array
  nameWithType: ArraySegment<T>.Array
  fullName: System.ArraySegment<T>.Array
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the original array containing the range of elements that the array segment delimits.
  remarks: The Array property returns the original array, not a copy of the array; therefore, changes made through the property are made directly to the original array.
  example:
  - "The following code example passes an <xref:System.ArraySegment%601> to a method.  \n  \n [!code-cs[System.ArraySegment#1](~/add/codesnippet/csharp/p-system.arraysegment`1._2_1.cs)]\n [!code-cpp[System.ArraySegment#1](~/add/codesnippet/cpp/p-system.arraysegment`1._2_1.cpp)]\n [!code-vb[System.ArraySegment#1](~/add/codesnippet/visualbasic/p-system.arraysegment`1._2_1.vb)]"
  syntax:
    content: public T[] Array { get; }
    return:
      type: T[]
      description: The original array that was passed to the constructor, and that contains the range delimited by the <xref href="stem.ArraySegment%601"></xref>.
  overload: System.ArraySegment`1.Array*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.Count
  id: Count
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: Count
  nameWithType: ArraySegment<T>.Count
  fullName: System.ArraySegment<T>.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the number of elements in the range delimited by the array segment.
  remarks: ''
  example:
  - "The following code example passes an <xref:System.ArraySegment%601> structure to a method.  \n  \n [!code-cs[System.ArraySegment#1](~/add/codesnippet/csharp/p-system.arraysegment`1._1_1.cs)]\n [!code-cpp[System.ArraySegment#1](~/add/codesnippet/cpp/p-system.arraysegment`1._1_1.cpp)]\n [!code-vb[System.ArraySegment#1](~/add/codesnippet/visualbasic/p-system.arraysegment`1._1_1.vb)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of elements in the range delimited by the <xref href="stem.ArraySegment%601"></xref>.
  overload: System.ArraySegment`1.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.Equals(System.ArraySegment{`0})
  id: Equals(System.ArraySegment{`0})
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: Equals(ArraySegment<T>)
  nameWithType: ArraySegment<T>.Equals(ArraySegment<T>)
  fullName: System.ArraySegment<T>.Equals(ArraySegment<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether the specified <xref href="stem.ArraySegment%601"></xref> structure is equal to the current instance.
  remarks: "Two <xref:System.ArraySegment%601> objects are considered to be equal if all the following conditions are met:  \n  \n-   They reference the same array.  \n  \n-   They begin at the same index in the array.  \n  \n-   They have the same number of elements."
  syntax:
    content: public bool Equals (ArraySegment<T> obj);
    parameters:
    - id: obj
      type: System.ArraySegment`1
      description: The structure to compare with the current instance.
    return:
      type: System.Boolean
      description: '`true` if the specified <xref href="stem.ArraySegment%601"></xref> structure is equal to the current instance; otherwise, `false`.'
  overload: System.ArraySegment`1.Equals*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ArraySegment<T>.Equals(Object)
  fullName: System.ArraySegment<T>.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether the specified object is equal to the current instance.
  remarks: "Two <xref:System.ArraySegment%601> objects are considered to be equal if all the following conditions are met:  \n  \n-   They reference the same array.  \n  \n-   They begin at the same index in the array.  \n  \n-   They have the same number of elements."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object to be compared with the current instance.
    return:
      type: System.Boolean
      description: '`true` if the specified object is a <xref href="stem.ArraySegment%601"></xref> structure and is equal to the current instance; otherwise, `false`.'
  overload: System.ArraySegment`1.Equals*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.GetHashCode
  id: GetHashCode
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ArraySegment<T>.GetHashCode()
  fullName: System.ArraySegment<T>.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the hash code for the current instance.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.ArraySegment`1.GetHashCode*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.Offset
  id: Offset
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: Offset
  nameWithType: ArraySegment<T>.Offset
  fullName: System.ArraySegment<T>.Offset
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the position of the first element in the range delimited by the array segment, relative to the start of the original array.
  remarks: ''
  example:
  - "The following code example passes an <xref:System.ArraySegment%601> structure to a method.  \n  \n [!code-cs[System.ArraySegment#1](~/add/codesnippet/csharp/p-system.arraysegment`1._0_1.cs)]\n [!code-cpp[System.ArraySegment#1](~/add/codesnippet/cpp/p-system.arraysegment`1._0_1.cpp)]\n [!code-vb[System.ArraySegment#1](~/add/codesnippet/visualbasic/p-system.arraysegment`1._0_1.vb)]"
  syntax:
    content: public int Offset { get; }
    return:
      type: System.Int32
      description: The position of the first element in the range delimited by the <xref href="stem.ArraySegment%601"></xref>, relative to the start of the original array.
  overload: System.ArraySegment`1.Offset*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  id: op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: op_Equality(ArraySegment<T>,ArraySegment<T>)
  nameWithType: ArraySegment<T>.op_Equality(ArraySegment<T>,ArraySegment<T>)
  fullName: System.ArraySegment<T>.op_Equality(ArraySegment<T>,ArraySegment<T>)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether two <xref href="stem.ArraySegment%601"></xref> structures are equal.
  remarks: "Two <xref:System.ArraySegment%601> objects are considered to be equal if all the following conditions are met:  \n  \n-   They reference the same array.  \n  \n-   They begin at the same index.  \n  \n-   They have the same number of elements."
  syntax:
    content: public static bool op_Equality (ArraySegment<T> a, ArraySegment<T> b);
    parameters:
    - id: a
      type: System.ArraySegment`1
      description: The  structure on the left side of the equality operator.
    - id: b
      type: System.ArraySegment`1
      description: The structure on the right side of the equality operator.
    return:
      type: System.Boolean
      description: '`true` if <code>a</code> is equal to <code>b</code>; otherwise, `false`.'
  overload: System.ArraySegment`1.op_Equality*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  id: op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: op_Inequality(ArraySegment<T>,ArraySegment<T>)
  nameWithType: ArraySegment<T>.op_Inequality(ArraySegment<T>,ArraySegment<T>)
  fullName: System.ArraySegment<T>.op_Inequality(ArraySegment<T>,ArraySegment<T>)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Indicates whether two <xref href="stem.ArraySegment%601"></xref> structures are unequal.
  remarks: "Two <xref:System.ArraySegment%601> objects are considered to be unequal if they are of the same closed generic type but any of the following conditions is true:  \n  \n-   They do not reference the same array.  \n  \n-   They have different starting indexes.  \n  \n-   They have a different number of elements."
  syntax:
    content: public static bool op_Inequality (ArraySegment<T> a, ArraySegment<T> b);
    parameters:
    - id: a
      type: System.ArraySegment`1
      description: The structure on the left side of the inequality operator.
    - id: b
      type: System.ArraySegment`1
      description: The structure on the right side of the inequality operator.
    return:
      type: System.Boolean
      description: '`true` if <code>a</code> is not equal to <code>b</code>; otherwise, `false`.'
  overload: System.ArraySegment`1.op_Inequality*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: ICollection<T>.Add(T)
  nameWithType: ArraySegment<T>.ICollection<T>.Add(T)
  fullName: System.ArraySegment<T>.ICollection<T>.Add(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Adds an item to the array segment.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.ArraySegment%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.
  syntax:
    content: void ICollection<T>.Add (T item);
    parameters:
    - id: item
      type: T
      description: The object to add to the array segment.
  overload: System.ArraySegment`1.System#Collections#Generic#ICollection<T>#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The array segment is read-only.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear
  id: System#Collections#Generic#ICollection{T}#Clear
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: ICollection<T>.Clear()
  nameWithType: ArraySegment<T>.ICollection<T>.Clear()
  fullName: System.ArraySegment<T>.ICollection<T>.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Removes all items from the array segment.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.ArraySegment%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.
  syntax:
    content: void ICollection<T>.Clear ();
    parameters: []
  overload: System.ArraySegment`1.System#Collections#Generic#ICollection<T>#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The array segment is read-only.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  id: System#Collections#Generic#ICollection{T}#Contains(`0)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: ICollection<T>.Contains(T)
  nameWithType: ArraySegment<T>.ICollection<T>.Contains(T)
  fullName: System.ArraySegment<T>.ICollection<T>.Contains(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether the array segment contains a specific value.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.ArraySegment%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.
  syntax:
    content: bool ICollection<T>.Contains (T item);
    parameters:
    - id: item
      type: T
      description: The object to locate in the array segment.
    return:
      type: System.Boolean
      description: '`true` if <code>item</code> is found in the array segment; otherwise, `false`.'
  overload: System.ArraySegment`1.System#Collections#Generic#ICollection<T>#Contains*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  id: System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: ICollection<T>.CopyTo(T[],Int32)
  nameWithType: ArraySegment<T>.ICollection<T>.CopyTo(T[],Int32)
  fullName: System.ArraySegment<T>.ICollection<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Copies the elements of the array segment to an array, starting at the specified array index.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.ArraySegment%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.
  syntax:
    content: void ICollection<T>.CopyTo (T[] array, int arrayIndex);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional array that is the destination of the elements copied from the array segment. The array must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.ArraySegment`1.System#Collections#Generic#ICollection<T>#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>arrayIndex</code> is less than 0.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.  \n  \n -or-  \n  \n The number of elements in the source array segment is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.  \n  \n -or-  \n  \n Type <code>T</code> cannot be cast automatically to the type of the destination <code>array</code>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: ICollection<T>.IsReadOnly
  nameWithType: ArraySegment<T>.ICollection<T>.IsReadOnly
  fullName: System.ArraySegment<T>.ICollection<T>.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value that indicates whether the array segment  is read-only.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.ArraySegment%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.
  syntax:
    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the array segment is read-only; otherwise, `false`.'
  overload: System.ArraySegment`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  id: System#Collections#Generic#ICollection{T}#Remove(`0)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: ICollection<T>.Remove(T)
  nameWithType: ArraySegment<T>.ICollection<T>.Remove(T)
  fullName: System.ArraySegment<T>.ICollection<T>.Remove(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Removes the first occurrence of a specific object from the array segment.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.ArraySegment%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.
  syntax:
    content: bool ICollection<T>.Remove (T item);
    parameters:
    - id: item
      type: T
      description: The object to remove from the array segment.
    return:
      type: System.Boolean
      description: '`true` if <code>item</code> was successfully removed from the array segment; otherwise, `false`. This method also returns `false` if <code>item</code> is not found in the array segment.'
  overload: System.ArraySegment`1.System#Collections#Generic#ICollection<T>#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The array segment is read-only.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: ArraySegment<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.ArraySegment<T>.IEnumerable<T>.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an enumerator that iterates through the array segment.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.ArraySegment%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.
  syntax:
    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: An enumerator that can be used to iterate through the array segment.
  overload: System.ArraySegment`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  id: System#Collections#Generic#IList{T}#IndexOf(`0)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: IList<T>.IndexOf(T)
  nameWithType: ArraySegment<T>.IList<T>.IndexOf(T)
  fullName: System.ArraySegment<T>.IList<T>.IndexOf(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines the index of a specific item in the array segment.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.ArraySegment%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.
  syntax:
    content: int IList<T>.IndexOf (T item);
    parameters:
    - id: item
      type: T
      description: The object to locate in the array segment.
    return:
      type: System.Int32
      description: The index of <code>item</code> if found in the list; otherwise, -1.
  overload: System.ArraySegment`1.System#Collections#Generic#IList<T>#IndexOf*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: IList<T>.Insert(Int32,T)
  nameWithType: ArraySegment<T>.IList<T>.Insert(Int32,T)
  fullName: System.ArraySegment<T>.IList<T>.Insert(Int32,T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Inserts an item into the array segment at the specified index.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.ArraySegment%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.
  syntax:
    content: void IList<T>.Insert (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <code>item</code> should be inserted.
    - id: item
      type: T
      description: The object to insert into the array segment.
  overload: System.ArraySegment`1.System#Collections#Generic#IList<T>#Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is not a valid index in the array segment.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The array segment is read-only.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  id: System#Collections#Generic#IList{T}#Item(System.Int32)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: IList<T>.Item(Int32)
  nameWithType: ArraySegment<T>.IList<T>.Item(Int32)
  fullName: System.ArraySegment<T>.IList<T>.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets or sets the element at the specified index.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.ArraySegment%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface, as the following example shows.  \n  \n [!code-vb[System.ArraySegment.Class#1](~/add/codesnippet/visualbasic/09f71211-90d1-4538-9cbe-_1.vb)]\n [!code-cs[System.ArraySegment.Class#1](~/add/codesnippet/csharp/09f71211-90d1-4538-9cbe-_1.cs)]"
  syntax:
    content: T System.Collections.Generic.IList<T>.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get or set.
    return:
      type: T
      description: The element at the specified index.
  overload: System.ArraySegment`1.System#Collections#Generic#IList<T>#Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is not a valid index in the <xref href="stem.ArraySegment%601"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The property is set and the array segment is read-only.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: IList<T>.RemoveAt(Int32)
  nameWithType: ArraySegment<T>.IList<T>.RemoveAt(Int32)
  fullName: System.ArraySegment<T>.IList<T>.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Removes the array segment item at the specified index.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.ArraySegment%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.
  syntax:
    content: void IList<T>.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to remove.
  overload: System.ArraySegment`1.System#Collections#Generic#IList<T>#RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is not a valid index in the array segment.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The array segment is read-only.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  id: System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: IReadOnlyList<T>.Item(Int32)
  nameWithType: ArraySegment<T>.IReadOnlyList<T>.Item(Int32)
  fullName: System.ArraySegment<T>.IReadOnlyList<T>.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the element at the specified index of the array segment.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.ArraySegment%601> instance is cast to an <xref:System.Collections.Generic.IReadOnlyList%601> interface.
  syntax:
    content: T System.Collections.Generic.IReadOnlyList<T>.Item[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get.
    return:
      type: T
      description: The element at the specified index.
  overload: System.ArraySegment`1.System#Collections#Generic#IReadOnlyList<T>#Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is not a valid index in the <xref href="stem.ArraySegment%601"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The property is set.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.ArraySegment`1
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: ArraySegment<T>.IEnumerable.GetEnumerator()
  fullName: System.ArraySegment<T>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an enumerator that iterates through an array segment.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.ArraySegment%601> instance is cast to an <xref:System.Collections.IEnumerable> interface.
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An enumerator that can be used to iterate through the array segment.
  overload: System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\ArraySegment`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/ArraySegment`1.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArraySegment`1.#ctor(`0[])
  parent: System.ArraySegment`1
  isExternal: false
  name: ArraySegment<T>(T[])
  nameWithType: ArraySegment<T>.ArraySegment<T>(T[])
  fullName: System.ArraySegment<T>.ArraySegment<T>(T[])
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)
  parent: System.ArraySegment`1
  isExternal: false
  name: ArraySegment<T>(T[],Int32,Int32)
  nameWithType: ArraySegment<T>.ArraySegment<T>(T[],Int32,Int32)
  fullName: System.ArraySegment<T>.ArraySegment<T>(T[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ArraySegment`1.Array
  parent: System.ArraySegment`1
  isExternal: false
  name: Array
  nameWithType: ArraySegment<T>.Array
  fullName: System.ArraySegment<T>.Array
- uid: System.ArraySegment`1.Count
  parent: System.ArraySegment`1
  isExternal: false
  name: Count
  nameWithType: ArraySegment<T>.Count
  fullName: System.ArraySegment<T>.Count
- uid: System.ArraySegment`1.Equals(System.ArraySegment{`0})
  parent: System.ArraySegment`1
  isExternal: false
  name: Equals(ArraySegment<T>)
  nameWithType: ArraySegment<T>.Equals(ArraySegment<T>)
  fullName: System.ArraySegment<T>.Equals(ArraySegment<T>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ArraySegment`1
  parent: System
  isExternal: false
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
- uid: System.ArraySegment`1.Equals(System.Object)
  parent: System.ArraySegment`1
  isExternal: false
  name: Equals(Object)
  nameWithType: ArraySegment<T>.Equals(Object)
  fullName: System.ArraySegment<T>.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArraySegment`1.GetHashCode
  parent: System.ArraySegment`1
  isExternal: false
  name: GetHashCode()
  nameWithType: ArraySegment<T>.GetHashCode()
  fullName: System.ArraySegment<T>.GetHashCode()
- uid: System.ArraySegment`1.Offset
  parent: System.ArraySegment`1
  isExternal: false
  name: Offset
  nameWithType: ArraySegment<T>.Offset
  fullName: System.ArraySegment<T>.Offset
- uid: System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})
  parent: System.ArraySegment`1
  isExternal: false
  name: op_Equality(ArraySegment<T>,ArraySegment<T>)
  nameWithType: ArraySegment<T>.op_Equality(ArraySegment<T>,ArraySegment<T>)
  fullName: System.ArraySegment<T>.op_Equality(ArraySegment<T>,ArraySegment<T>)
- uid: System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})
  parent: System.ArraySegment`1
  isExternal: false
  name: op_Inequality(ArraySegment<T>,ArraySegment<T>)
  nameWithType: ArraySegment<T>.op_Inequality(ArraySegment<T>,ArraySegment<T>)
  fullName: System.ArraySegment<T>.op_Inequality(ArraySegment<T>,ArraySegment<T>)
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)
  parent: System.ArraySegment`1
  isExternal: false
  name: ICollection<T>.Add(T)
  nameWithType: ArraySegment<T>.ICollection<T>.Add(T)
  fullName: System.ArraySegment<T>.ICollection<T>.Add(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear
  parent: System.ArraySegment`1
  isExternal: false
  name: ICollection<T>.Clear()
  nameWithType: ArraySegment<T>.ICollection<T>.Clear()
  fullName: System.ArraySegment<T>.ICollection<T>.Clear()
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)
  parent: System.ArraySegment`1
  isExternal: false
  name: ICollection<T>.Contains(T)
  nameWithType: ArraySegment<T>.ICollection<T>.Contains(T)
  fullName: System.ArraySegment<T>.ICollection<T>.Contains(T)
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)
  parent: System.ArraySegment`1
  isExternal: false
  name: ICollection<T>.CopyTo(T[],Int32)
  nameWithType: ArraySegment<T>.ICollection<T>.CopyTo(T[],Int32)
  fullName: System.ArraySegment<T>.ICollection<T>.CopyTo(T[],Int32)
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.ArraySegment`1
  isExternal: false
  name: ICollection<T>.IsReadOnly
  nameWithType: ArraySegment<T>.ICollection<T>.IsReadOnly
  fullName: System.ArraySegment<T>.ICollection<T>.IsReadOnly
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  parent: System.ArraySegment`1
  isExternal: false
  name: ICollection<T>.Remove(T)
  nameWithType: ArraySegment<T>.ICollection<T>.Remove(T)
  fullName: System.ArraySegment<T>.ICollection<T>.Remove(T)
- uid: System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.ArraySegment`1
  isExternal: false
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: ArraySegment<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.ArraySegment<T>.IEnumerable<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)
  parent: System.ArraySegment`1
  isExternal: false
  name: IList<T>.IndexOf(T)
  nameWithType: ArraySegment<T>.IList<T>.IndexOf(T)
  fullName: System.ArraySegment<T>.IList<T>.IndexOf(T)
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  parent: System.ArraySegment`1
  isExternal: false
  name: IList<T>.Insert(Int32,T)
  nameWithType: ArraySegment<T>.IList<T>.Insert(Int32,T)
  fullName: System.ArraySegment<T>.IList<T>.Insert(Int32,T)
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  parent: System.ArraySegment`1
  isExternal: false
  name: IList<T>.Item(Int32)
  nameWithType: ArraySegment<T>.IList<T>.Item(Int32)
  fullName: System.ArraySegment<T>.IList<T>.Item(Int32)
- uid: System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  parent: System.ArraySegment`1
  isExternal: false
  name: IList<T>.RemoveAt(Int32)
  nameWithType: ArraySegment<T>.IList<T>.RemoveAt(Int32)
  fullName: System.ArraySegment<T>.IList<T>.RemoveAt(Int32)
- uid: System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)
  parent: System.ArraySegment`1
  isExternal: false
  name: IReadOnlyList<T>.Item(Int32)
  nameWithType: ArraySegment<T>.IReadOnlyList<T>.Item(Int32)
  fullName: System.ArraySegment<T>.IReadOnlyList<T>.Item(Int32)
- uid: System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.ArraySegment`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: ArraySegment<T>.IEnumerable.GetEnumerator()
  fullName: System.ArraySegment<T>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArraySegment`1.#ctor*
  parent: System.ArraySegment`1
  isExternal: false
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>.ArraySegment<T>
- uid: System.ArraySegment`1.Array*
  parent: System.ArraySegment`1
  isExternal: false
  name: Array
  nameWithType: ArraySegment<T>.Array
- uid: System.ArraySegment`1.Count*
  parent: System.ArraySegment`1
  isExternal: false
  name: Count
  nameWithType: ArraySegment<T>.Count
- uid: System.ArraySegment`1.Equals*
  parent: System.ArraySegment`1
  isExternal: false
  name: Equals
  nameWithType: ArraySegment<T>.Equals
- uid: System.ArraySegment`1.GetHashCode*
  parent: System.ArraySegment`1
  isExternal: false
  name: GetHashCode
  nameWithType: ArraySegment<T>.GetHashCode
- uid: System.ArraySegment`1.Offset*
  parent: System.ArraySegment`1
  isExternal: false
  name: Offset
  nameWithType: ArraySegment<T>.Offset
- uid: System.ArraySegment`1.op_Equality*
  parent: System.ArraySegment`1
  isExternal: false
  name: op_Equality
  nameWithType: ArraySegment<T>.op_Equality
- uid: System.ArraySegment`1.op_Inequality*
  parent: System.ArraySegment`1
  isExternal: false
  name: op_Inequality
  nameWithType: ArraySegment<T>.op_Inequality
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection<T>#Add*
  parent: System.ArraySegment`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Add
  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection<T>.Add
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection<T>#Clear*
  parent: System.ArraySegment`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Clear
  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection<T>.Clear
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection<T>#Contains*
  parent: System.ArraySegment`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Contains
  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection<T>.Contains
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection<T>#CopyTo*
  parent: System.ArraySegment`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.CopyTo
  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection<T>.CopyTo
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  parent: System.ArraySegment`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.ArraySegment`1.System#Collections#Generic#ICollection<T>#Remove*
  parent: System.ArraySegment`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Remove
  nameWithType: ArraySegment<T>.System.Collections.Generic.ICollection<T>.Remove
- uid: System.ArraySegment`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  parent: System.ArraySegment`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType: ArraySegment<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.ArraySegment`1.System#Collections#Generic#IList<T>#IndexOf*
  parent: System.ArraySegment`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.IndexOf
  nameWithType: ArraySegment<T>.System.Collections.Generic.IList<T>.IndexOf
- uid: System.ArraySegment`1.System#Collections#Generic#IList<T>#Insert*
  parent: System.ArraySegment`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.Insert
  nameWithType: ArraySegment<T>.System.Collections.Generic.IList<T>.Insert
- uid: System.ArraySegment`1.System#Collections#Generic#IList<T>#Item*
  parent: System.ArraySegment`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.Item
  nameWithType: ArraySegment<T>.System.Collections.Generic.IList<T>.Item
- uid: System.ArraySegment`1.System#Collections#Generic#IList<T>#RemoveAt*
  parent: System.ArraySegment`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.RemoveAt
  nameWithType: ArraySegment<T>.System.Collections.Generic.IList<T>.RemoveAt
- uid: System.ArraySegment`1.System#Collections#Generic#IReadOnlyList<T>#Item*
  parent: System.ArraySegment`1
  isExternal: false
  name: System.Collections.Generic.IReadOnlyList<T>.Item
  nameWithType: ArraySegment<T>.System.Collections.Generic.IReadOnlyList<T>.Item
- uid: System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.ArraySegment`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ArraySegment<T>.System.Collections.IEnumerable.GetEnumerator
