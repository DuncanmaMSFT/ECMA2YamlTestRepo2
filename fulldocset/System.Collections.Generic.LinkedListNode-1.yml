### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.LinkedListNode`1
  id: LinkedListNode`1
  children:
  - System.Collections.Generic.LinkedListNode`1.#ctor(`0)
  - System.Collections.Generic.LinkedListNode`1.List
  - System.Collections.Generic.LinkedListNode`1.Next
  - System.Collections.Generic.LinkedListNode`1.Previous
  - System.Collections.Generic.LinkedListNode`1.Value
  langs:
  - csharp
  name: LinkedListNode<T>
  nameWithType: LinkedListNode<T>
  fullName: System.Collections.Generic.LinkedListNode<T>
  type: Class
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public sealed class LinkedListNode<T>
    typeParameters:
    - id: T
      description: To be added.
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Collections.Generic.LinkedListNode`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: System.Collections.Generic.LinkedListNode`1
  langs:
  - csharp
  name: LinkedListNode(T)
  nameWithType: LinkedListNode<T>.LinkedListNode(T)
  fullName: System.Collections.Generic.LinkedListNode<T>.LinkedListNode(T)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public LinkedListNode (T value);
    parameters:
    - id: value
      type: T
      description: To be added.
  overload: System.Collections.Generic.LinkedListNode`1.#ctor*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Collections.Generic.LinkedListNode`1.List
  id: List
  parent: System.Collections.Generic.LinkedListNode`1
  langs:
  - csharp
  name: List
  nameWithType: LinkedListNode<T>.List
  fullName: System.Collections.Generic.LinkedListNode<T>.List
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.LinkedList<T> List { get; }
    return:
      type: System.Collections.Generic.LinkedList`1
      description: To be added.
  overload: System.Collections.Generic.LinkedListNode`1.List*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Collections.Generic.LinkedListNode`1.Next
  id: Next
  parent: System.Collections.Generic.LinkedListNode`1
  langs:
  - csharp
  name: Next
  nameWithType: LinkedListNode<T>.Next
  fullName: System.Collections.Generic.LinkedListNode<T>.Next
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> Next { get; }
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
  overload: System.Collections.Generic.LinkedListNode`1.Next*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Collections.Generic.LinkedListNode`1.Previous
  id: Previous
  parent: System.Collections.Generic.LinkedListNode`1
  langs:
  - csharp
  name: Previous
  nameWithType: LinkedListNode<T>.Previous
  fullName: System.Collections.Generic.LinkedListNode<T>.Previous
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.LinkedListNode<T> Previous { get; }
    return:
      type: System.Collections.Generic.LinkedListNode`1
      description: To be added.
  overload: System.Collections.Generic.LinkedListNode`1.Previous*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Collections.Generic.LinkedListNode`1.Value
  id: Value
  parent: System.Collections.Generic.LinkedListNode`1
  langs:
  - csharp
  name: Value
  nameWithType: LinkedListNode<T>.Value
  fullName: System.Collections.Generic.LinkedListNode<T>.Value
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public T Value { get; set; }
    return:
      type: T
      description: To be added.
  overload: System.Collections.Generic.LinkedListNode`1.Value*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Collections.Generic.LinkedListNode`1.#ctor(`0)
  parent: System.Collections.Generic.LinkedListNode`1
  isExternal: false
  name: LinkedListNode(T)
  nameWithType: LinkedListNode<T>.LinkedListNode(T)
  fullName: System.Collections.Generic.LinkedListNode<T>.LinkedListNode(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.LinkedListNode`1.List
  parent: System.Collections.Generic.LinkedListNode`1
  isExternal: false
  name: List
  nameWithType: LinkedListNode<T>.List
  fullName: System.Collections.Generic.LinkedListNode<T>.List
- uid: System.Collections.Generic.LinkedList`1
  parent: System.Collections.Generic
  isExternal: false
  name: LinkedList<T>
  nameWithType: LinkedList<T>
  fullName: System.Collections.Generic.LinkedList<T>
- uid: System.Collections.Generic.LinkedListNode`1.Next
  parent: System.Collections.Generic.LinkedListNode`1
  isExternal: false
  name: Next
  nameWithType: LinkedListNode<T>.Next
  fullName: System.Collections.Generic.LinkedListNode<T>.Next
- uid: System.Collections.Generic.LinkedListNode`1
  parent: System.Collections.Generic
  isExternal: false
  name: LinkedListNode<T>
  nameWithType: LinkedListNode<T>
  fullName: System.Collections.Generic.LinkedListNode<T>
- uid: System.Collections.Generic.LinkedListNode`1.Previous
  parent: System.Collections.Generic.LinkedListNode`1
  isExternal: false
  name: Previous
  nameWithType: LinkedListNode<T>.Previous
  fullName: System.Collections.Generic.LinkedListNode<T>.Previous
- uid: System.Collections.Generic.LinkedListNode`1.Value
  parent: System.Collections.Generic.LinkedListNode`1
  isExternal: false
  name: Value
  nameWithType: LinkedListNode<T>.Value
  fullName: System.Collections.Generic.LinkedListNode<T>.Value
- uid: System.Collections.Generic.LinkedListNode`1.#ctor*
  parent: System.Collections.Generic.LinkedListNode`1
  isExternal: false
  name: LinkedListNode<T>
  nameWithType: LinkedListNode<T>.LinkedListNode<T>
- uid: System.Collections.Generic.LinkedListNode`1.List*
  parent: System.Collections.Generic.LinkedListNode`1
  isExternal: false
  name: List
  nameWithType: LinkedListNode<T>.List
- uid: System.Collections.Generic.LinkedListNode`1.Next*
  parent: System.Collections.Generic.LinkedListNode`1
  isExternal: false
  name: Next
  nameWithType: LinkedListNode<T>.Next
- uid: System.Collections.Generic.LinkedListNode`1.Previous*
  parent: System.Collections.Generic.LinkedListNode`1
  isExternal: false
  name: Previous
  nameWithType: LinkedListNode<T>.Previous
- uid: System.Collections.Generic.LinkedListNode`1.Value*
  parent: System.Collections.Generic.LinkedListNode`1
  isExternal: false
  name: Value
  nameWithType: LinkedListNode<T>.Value
