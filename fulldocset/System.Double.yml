### YamlMime:ManagedReference
items:
- uid: System.Double
  id: Double
  children:
  - System.Double.CompareTo(System.Double)
  - System.Double.CompareTo(System.Object)
  - System.Double.Epsilon
  - System.Double.Equals(System.Double)
  - System.Double.Equals(System.Object)
  - System.Double.GetHashCode
  - System.Double.GetTypeCode
  - System.Double.IsInfinity(System.Double)
  - System.Double.IsNaN(System.Double)
  - System.Double.IsNegativeInfinity(System.Double)
  - System.Double.IsPositiveInfinity(System.Double)
  - System.Double.MaxValue
  - System.Double.MinValue
  - System.Double.NaN
  - System.Double.NegativeInfinity
  - System.Double.op_Equality(System.Double,System.Double)
  - System.Double.op_GreaterThan(System.Double,System.Double)
  - System.Double.op_GreaterThanOrEqual(System.Double,System.Double)
  - System.Double.op_Inequality(System.Double,System.Double)
  - System.Double.op_LessThan(System.Double,System.Double)
  - System.Double.op_LessThanOrEqual(System.Double,System.Double)
  - System.Double.Parse(System.String)
  - System.Double.Parse(System.String,System.Globalization.NumberStyles)
  - System.Double.Parse(System.String,System.IFormatProvider)
  - System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - System.Double.PositiveInfinity
  - System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)
  - System.Double.System#IConvertible#ToByte(System.IFormatProvider)
  - System.Double.System#IConvertible#ToChar(System.IFormatProvider)
  - System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)
  - System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)
  - System.Double.System#IConvertible#ToDouble(System.IFormatProvider)
  - System.Double.System#IConvertible#ToInt16(System.IFormatProvider)
  - System.Double.System#IConvertible#ToInt32(System.IFormatProvider)
  - System.Double.System#IConvertible#ToInt64(System.IFormatProvider)
  - System.Double.System#IConvertible#ToSByte(System.IFormatProvider)
  - System.Double.System#IConvertible#ToSingle(System.IFormatProvider)
  - System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  - System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)
  - System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)
  - System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)
  - System.Double.ToString
  - System.Double.ToString(System.IFormatProvider)
  - System.Double.ToString(System.String)
  - System.Double.ToString(System.String,System.IFormatProvider)
  - System.Double.TryParse(System.String,System.Double@)
  - System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)
  langs:
  - csharp
  name: Double
  nameWithType: Double
  fullName: System.Double
  type: Struct
  summary: Represents a double-precision floating-point number.
  remarks: "The Double value type represents a double-precision 64-bit number with values ranging from negative 1.79769313486232e308 to positive 1.79769313486232e308, as well as positive or negative zero, <xref:System.Double.PositiveInfinity>, <xref:System.Double.NegativeInfinity>, and not a number (<xref:System.Double.NaN>). It is intended to represent values that are extremely large (such as distances between planets or galaxies) or extremely small (the molecular mass of a substance in kilograms) and that often are imprecise (such as the distance from earth to another solar system), The Double type complies with the IEC 60559:1989 (IEEE 754) standard for binary floating-point arithmetic.  \n  \n This topic consists of the following sections:  \n  \n-   [Floating-point representation and precision](#Precision)  \n  \n-   [Testing for equality](#Equality)  \n  \n-   [Floating-point values and exceptions](#Exceptions)  \n  \n-   [Type conversions and the Double structure](#Conversions)  \n  \n-   [Floating-point functionality](#Functionality)  \n  \n<a name=\"Precision\"></a>   \n## Floating-Point Representation and Precision  \n The Double data type stores double-precision floating-point values in a 64-bit binary format, as shown in the following table:  \n  \n|Part|Bits|  \n|----------|----------|  \n|Significand or mantissa|0-51|  \n|Exponent|52-62|  \n|Sign (0 = Positive, 1 = Negative)|63|  \n  \n Just as decimal fractions are unable to precisely represent some fractional values (such as 1/3 or <xref:System.Math.PI?displayProperty=fullName>), binary fractions are unable to represent some fractional values. For example, 1/10, which is represented precisely by .1 as a decimal fraction, is represented by .001100110011 as a binary fraction, with the pattern \"0011\" repeating to infinity. In this case, the floating-point value provides an imprecise representation of the number that it represents. Performing additional mathematical operations on the original floating-point value often tends to increase its lack of precision. For example, if we compare the result of multiplying .1 by 10 and adding .1 to .1 nine times, we see that addition, because it has involved eight more operations, has produced the less precise result. Note that this disparity is apparent only if we display the two Double values by using the \"R\" [standard numeric format string](~/add/includes/ajax-current-ext-md.md), which if necessary displays all 17 digits of precision supported by the Double type.  \n  \n [!code-cs[System.Double.Structure#3](~/add/codesnippet/csharp/t-system.double_1.cs)]\n [!code-vb[System.Double.Structure#3](~/add/codesnippet/visualbasic/t-system.double_1.vb)]  \n  \n Because some numbers cannot be represented exactly as fractional binary values, floating-point numbers can only approximate real numbers.  \n  \n All floating-point numbers also have a limited number of significant digits, which also determines how accurately a floating-point value approximates a real number.   A Double value has up to 15 decimal digits of precision, although a maximum of 17 digits is maintained internally. This means that some floating-point operations may lack the precision to change a floating point value. The following example provides an illustration. It defines a very large floating-point value, and then adds the product of <xref:System.Double.Epsilon?displayProperty=fullName> and one quadrillion to it. The product, however, is too small to modify the original floating-point value. Its least significant digit is thousandths, whereas the most significant digit in the product is 1<sup>-312</sup>.  \n  \n [!code-cs[System.Double.Structure#4](~/add/codesnippet/csharp/t-system.double_2.cs)]\n [!code-vb[System.Double.Structure#4](~/add/codesnippet/visualbasic/t-system.double_2.vb)]  \n  \n The limited precision of a floating-point number has several consequences:  \n  \n-   Two floating-point numbers that appear equal for a particular precision might not compare equal because their least significant digits are different. In the following example, a series of numbers are added together, and their total is compared with their expected total. Although the two values appear to be the same, a call to the `Equals` method indicates that they are not.  \n  \n     [!code-cs[System.Double.Structure#6](~/add/codesnippet/csharp/t-system.double_3.cs)]\n     [!code-vb[System.Double.Structure#6](~/add/codesnippet/visualbasic/t-system.double_3.vb)]  \n  \n     If you change the format items in the <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=fullName> statement from `{0}` and `{1}` to `{0:R}` and `{1:R}` to display all significant digits of the two Double values, it is clear that the two values are unequal because of a loss of precision during the addition operations. In this case, the issue can be resolved by calling the <xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=fullName> method to round the Double values to the desired precision before performing the comparison.  \n  \n-   A mathematical or comparison operation that uses a floating-point number might not yield the same result if a decimal number is used, because the binary floating-point number might not equal the decimal number. A previous example illustrated this by displaying the result of multiplying .1 by 10 and adding .1 times.  \n  \n     When accuracy in numeric operations with fractional values is important, you can use the <xref:System.Decimal> rather than the Double type. When accuracy in numeric operations with integral values beyond the range of the <xref:System.Int64> or <xref:System.UInt64> types is important, use the <xref:System.Numerics.BigInteger> type.  \n  \n-   A value might not round-trip if a floating-point number is involved. A value is said to round-trip if an operation converts an original floating-point number to another form, an inverse operation transforms the converted form back to a floating-point number, and the final floating-point number is not equal to the original floating-point number. The roundtrip might fail because one or more least significant digits are lost or changed in a conversion. In the following example, three Double values are converted to strings and saved in a file. As the output shows, however, even though the values appear to be identical, the restored values are not equal to the original values.  \n  \n     [!code-cs[System.Double.Structure#7](~/add/codesnippet/csharp/t-system.double_4.cs)]\n     [!code-vb[System.Double.Structure#7](~/add/codesnippet/visualbasic/t-system.double_4.vb)]  \n  \n     In this case, the values can be successfully round-tripped by using the \"R\" [standard numeric format string](../Topic/Standard%20Numeric%20Format%20Strings.md) to preserve the full precision of Double values, as the following example shows.  \n  \n     [!code-cs[System.Double.Structure#8](~/add/codesnippet/csharp/t-system.double_5.cs)]\n     [!code-vb[System.Double.Structure#8](~/add/codesnippet/visualbasic/t-system.double_5.vb)]  \n  \n-   <xref:System.Single> values have less precision than Double values. A <xref:System.Single> value that is converted to a seemingly equivalent Double often does not equal the Double value because of differences in precision. In the following example, the result of identical division operations is assigned to a Double and a <xref:System.Single> value. After the <xref:System.Single> value is cast to a Double, a comparison of the two values shows that they are unequal.  \n  \n     [!code-cs[System.Double.Structure#5](~/add/codesnippet/csharp/t-system.double_6.cs)]\n     [!code-vb[System.Double.Structure#5](~/add/codesnippet/visualbasic/t-system.double_6.vb)]  \n  \n     To avoid this problem, use either the Double in place of the <xref:System.Single> data type, or use the <xref:System.Math.Round%2A> method so that both values have the same precision.  \n  \n In addition, the result of arithmetic and assignment operations with Double values may differ slightly by platform because of the loss of precision of the Double type. For example, the result of assigning a literal Double value may differ in the 32-bit and 64-bit versions of the .NET Framework. The following example illustrates this difference when the literal value -4.42330604244772E-305 and a variable whose value is -4.42330604244772E-305 are assigned to a Double variable. Note that the result of the <xref:System.Double.Parse%28System.String%29> method in this case does not suffer from a loss of precision.  \n  \n [!code-vb[System.Double.Class.Precision#1](~/add/codesnippet/visualbasic/t-system.double_7.vb)]\n [!code-cs[System.Double.Class.Precision#1](~/add/codesnippet/csharp/t-system.double_7.cs)]  \n  \n<a name=\"Equality\"></a>   \n## Testing for Equality  \n To be considered equal, two Double values must represent identical values. However, because of differences in precision between values, or because of a loss of precision by one or both values, floating-point values that are expected to be identical often turn out to be unequal because of differences in their least significant digits. As a result, calls to the <xref:System.Double.Equals%2A> method to determine whether two values are equal, or calls to the <xref:System.Double.CompareTo%2A> method to determine the relationship between two Double values, often yield unexpected results. This is evident in the following example, where two apparently equal Double values turn out to be unequal because the first has 15 digits of precision, while the second has 17.  \n  \n [!code-cs[System.Double.Structure#9](~/add/codesnippet/csharp/t-system.double_8.cs)]\n [!code-vb[System.Double.Structure#9](~/add/codesnippet/visualbasic/t-system.double_8.vb)]  \n  \n Calculated values that follow different code paths and that are manipulated in different ways often prove to be unequal. In the following example, one Double value is squared, and then the square root is calculated to restore the original value. A second Double is multiplied by 3.51 and squared before the square root of the result is divided by 3.51 to restore the original value. Although the two values appear to be identical, a call to the <xref:System.Double.Equals%28System.Double%29> method indicates that they are not equal. Using the \"R\" standard format string to return a result string that displays all the significant digits of each Double value shows that the second value is .0000000000001 less than the first.  \n  \n [!code-cs[System.Double.Structure#10](~/add/codesnippet/csharp/t-system.double_9.cs)]\n [!code-vb[System.Double.Structure#10](~/add/codesnippet/visualbasic/t-system.double_9.vb)]  \n  \n In cases where a loss of precision is likely to affect the result of a comparison, you can adopt any of the following alternatives to calling the <xref:System.Double.Equals%2A> or <xref:System.Double.CompareTo%2A> method:  \n  \n-   Call the <xref:System.Math.Round%2A?displayProperty=fullName> method to ensure that both values have the same precision. The following example modifies a previous example to use this approach so that two fractional values are equivalent.  \n  \n     [!code-cs[System.Double.Structure#11](~/add/codesnippet/csharp/t-system.double_10.cs)]\n     [!code-vb[System.Double.Structure#11](~/add/codesnippet/visualbasic/t-system.double_10.vb)]  \n  \n     Note, though, that the problem of precision still applies to rounding of midpoint values. For more information, see the <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=fullName> method.  \n  \n-   Test for approximate equality rather than equality. This requires that you define either an absolute amount by which the two values can differ but still be equal, or that you define a relative amount by which the smaller value can diverge from the larger value.  \n  \n    > [!WARNING]\n    >  <xref:System.Double.Epsilon?displayProperty=fullName> is sometimes used as an absolute measure of the distance between two Double values when testing for equality.  However, <xref:System.Double.Epsilon?displayProperty=fullName> measures the smallest possible value that can be added to, or subtracted from, a Double whose value is zero. For most positive and negative Double values, the value of <xref:System.Double.Epsilon?displayProperty=fullName> is too small to be detected. Therefore, except for values that are zero, we do not recommend its use in tests for equality.  \n  \n     The following example uses the latter approach to define an `IsApproximatelyEqual` method that tests the relative difference between two values. It also contrasts the result of calls to the `IsApproximatelyEqual` method and the <xref:System.Double.Equals%28System.Double%29> method.  \n  \n     [!code-cs[System.Double.Structure#12](~/add/codesnippet/csharp/t-system.double_11.cs)]\n     [!code-vb[System.Double.Structure#12](~/add/codesnippet/visualbasic/t-system.double_11.vb)]  \n  \n<a name=\"Exceptions\"></a>   \n## Floating-Point Values and Exceptions  \n Unlike operations with integral types, which throw exceptions in cases of overflow or illegal operations such as division by zero, operations with floating-point values do not throw exceptions. Instead, in exceptional situations, the result of a floating-point operation is zero, positive infinity, negative infinity, or not a number (NaN):  \n  \n-   If the result of a floating-point operation is too small for the destination format, the result is zero. This can occur when two very small numbers are multiplied, as the following example shows.  \n  \n     [!code-cs[System.Double.Structure#1](~/add/codesnippet/csharp/t-system.double_12.cs)]\n     [!code-vb[System.Double.Structure#1](~/add/codesnippet/visualbasic/t-system.double_12.vb)]  \n  \n-   If the magnitude of the result of a floating-point operation exceeds the range of the destination format, the result of the operation is <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity>, as appropriate for the sign of the result. The result of an operation that overflows <xref:System.Double.MaxValue?displayProperty=fullName> is <xref:System.Double.PositiveInfinity>, and the result of an operation that overflows <xref:System.Double.MinValue?displayProperty=fullName> is <xref:System.Double.NegativeInfinity>, as the following example shows.  \n  \n     [!code-cs[System.Double.Structure#2](~/add/codesnippet/csharp/t-system.double_13.cs)]\n     [!code-vb[System.Double.Structure#2](~/add/codesnippet/visualbasic/t-system.double_13.vb)]  \n  \n     <xref:System.Double.PositiveInfinity> also results from a division by zero with a positive dividend, and <xref:System.Double.NegativeInfinity> results from a division by zero with a negative dividend.  \n  \n-   If a floating-point operation is invalid, the result of the operation is <xref:System.Double.NaN>. For example, <xref:System.Double.NaN> results from the following operations:  \n  \n    -   Division by zero with a dividend of zero. Note that other cases of division by zero result in either <xref:System.Double.PositiveInfinity> or <xref:System.Double.NegativeInfinity>.  \n  \n-   Any floating-point operation with an invalid input. For example, calling the <xref:System.Math.Sqrt%2A?displayProperty=fullName> method with a negative value returns <xref:System.Double.NaN>, as does calling the <xref:System.Math.Acos%2A?displayProperty=fullName> method with a value that is greater than one or less than negative one.  \n  \n-   Any operation with an argument whose value is <xref:System.Double.NaN?displayProperty=fullName>.  \n  \n<a name=\"Conversions\"></a>   \n## Type conversions and the Double structure  \n The Double structure does not define any explicit or implicit conversion operators; instead, conversions are implemented by the compiler.  \n  \n The conversion of the value of any primitive numeric type to a Double is a widening conversion and therefore does not require an explicit cast operator or call to a conversion method unless a compiler explicitly requires it. For example, the C# compiler requires a casting operator for conversions from <xref:System.Decimal> to Double, while the Visual Basic compiler does not. The following example converts the minimum or maximum value of other primitive numeric types to a Double.  \n  \n [!code-cs[System.Double.Structure#20](~/add/codesnippet/csharp/t-system.double_14.cs)]\n [!code-vb[System.Double.Structure#20](~/add/codesnippet/visualbasic/t-system.double_14.vb)]  \n  \n In addition, the <xref:System.Single> values <xref:System.Single.NaN?displayProperty=fullName>, <xref:System.Single.PositiveInfinity?displayProperty=fullName>, and <xref:System.Single.NegativeInfinity?displayProperty=fullName> covert to <xref:System.Double.NaN?displayProperty=fullName>, <xref:System.Double.PositiveInfinity?displayProperty=fullName>, and <xref:System.Double.NegativeInfinity?displayProperty=fullName>, respectively.  \n  \n Note that the conversion of the value of some numeric types to a Double value can involve a loss of precision. As the example illustrates, a loss of precision is possible when converting <xref:System.Decimal>, <xref:System.Int64>, <xref:System.Single>, and <xref:System.UInt64> values to Double values.  \n  \n The conversion of a Double value to a value of any other primitive numeric data type is a narrowing conversion and requires a cast operator (in C#), a conversion method (in Visual Basic), or a call to a <xref:System.Convert> method. Values that are outside the range of the target data type, which are defined by the target type's `MinValue` and `MaxValue` properties, behave as shown in the following table.  \n  \n|Target type|Result|  \n|-----------------|------------|  \n|Any integral type|An <xref:System.OverflowException> exception if the conversion occurs in a checked context.<br /><br /> If the conversion occurs in an unchecked context (the default in C#), the conversion operation succeeds but the value overflows.|  \n|<xref:System.Decimal>|An <xref:System.OverflowException> exception.|  \n|<xref:System.Single>|<xref:System.Single.NegativeInfinity?displayProperty=fullName> for negative values.<br /><br /> <xref:System.Single.PositiveInfinity?displayProperty=fullName> for positive values.|  \n  \n In addition, <xref:System.Double.NaN?displayProperty=fullName>, <xref:System.Double.PositiveInfinity?displayProperty=fullName>, and <xref:System.Double.NegativeInfinity?displayProperty=fullName> throw an <xref:System.OverflowException> for conversions to integers in a checked context, but these values overflow when converted to integers in an unchecked context. For conversions to <xref:System.Decimal>, they always throw an <xref:System.OverflowException>. For conversions to <xref:System.Single>, they convert to <xref:System.Single.NaN?displayProperty=fullName>, <xref:System.Single.PositiveInfinity?displayProperty=fullName>, and <xref:System.Single.NegativeInfinity?displayProperty=fullName>, respectively.  \n  \n Note that a loss of precision may result from converting a Double value to another numeric type. In the case of converting non-integral Double values, as the output from the example shows, the fractional component is lost when the Double value is either rounded (as in Visual Basic) or truncated (as in C#). For conversions to <xref:System.Decimal> and <xref:System.Single> values, the Double value may not have a precise representation in the target data type.  \n  \n The following example converts a number of Double values to several other numeric types. The conversions occur in a checked context in Visual Basic (the default) and in C# (because of the [checked](~/add/includes/ajax-current-ext-md.md) keyword). The output from the example shows the result for conversions in both a checked an unchecked context. You can perform conversions in an unchecked context in Visual Basic by compiling with the `/removeintchecks+` compiler switch and in C# by commenting out the `checked` statement.  \n  \n [!code-vb[System.Double.Structure#21](~/add/codesnippet/visualbasic/t-system.double_15.vb)]\n [!code-cs[System.Double.Structure#21](~/add/codesnippet/csharp/t-system.double_15.cs)]  \n  \n For more information on the conversion of numeric types, see [Type Conversion in the .NET Framework](~/add/includes/ajax-current-ext-md.md) and [Type Conversion Tables](~/add/includes/ajax-current-ext-md.md).  \n  \n<a name=\"Functionality\"></a>   \n## Floating-Point Functionality  \n The Double structure and related types provide methods to perform operations in the following areas:  \n  \n-   **Comparison of values**. You can call the <xref:System.Double.Equals%2A> method to determine whether two Double values are equal, or the <xref:System.Double.CompareTo%2A> method to determine the relationship between two values.  \n  \n     The Double structure also supports a complete set of comparison operators. For example, you can test for equality or inequality, or determine whether one value is greater than or equal to another. If one of the operands is a numeric type other than a Double, it is converted to a Double before performing the comparison.  \n  \n    > [!WARNING]\n    >  Because of differences in precision, two Double values that you expect to be equal may turn out to be unequal, which affects the result of the comparison. See the [Testing for Equality](#Equality) section for more information about comparing two Double values.  \n  \n     You can also call the <xref:System.Double.IsNaN%2A>, <xref:System.Double.IsInfinity%2A>, <xref:System.Double.IsPositiveInfinity%2A>, and <xref:System.Double.IsNegativeInfinity%2A> methods to test for these special values.  \n  \n-   **Mathematical operations**. Common arithmetic operations, such as addition, subtraction, multiplication, and division, are implemented by language compilers and Common Intermediate Language (CIL) instructions, rather than by Double methods. If one of the operands in a mathematical operation is a numeric type other than a Double, it is converted to a Double before performing the operation. The result of the operation is also a Double value.  \n  \n     Other mathematical operations can be performed by calling `static` (`Shared` in Visual Basic) methods in the <xref:System.Math?displayProperty=fullName> class. It includes additional methods commonly used for arithmetic (such as <xref:System.Math.Abs%2A?displayProperty=fullName>, <xref:System.Math.Sign%2A?displayProperty=fullName>, and <xref:System.Math.Sqrt%2A?displayProperty=fullName>), geometry (such as <xref:System.Math.Cos%2A?displayProperty=fullName> and <xref:System.Math.Sin%2A?displayProperty=fullName>), and calculus (such as <xref:System.Math.Log%2A?displayProperty=fullName>).  \n  \n     You can also manipulate the individual bits in a Double value. The <xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=fullName> method preserves a Double value's bit pattern in a 64-bit integer. The <xref:System.BitConverter.GetBytes%28System.Double%29?displayProperty=fullName> method returns its bit pattern in a byte array.  \n  \n-   **Rounding**. Rounding is often used as a technique for reducing the impact of differences between values caused by problems of floating-point representation and precision. You can round a Double value by calling the <xref:System.Math.Round%2A?displayProperty=fullName> method.  \n  \n-   **Formatting**. You can convert a Double value to its string representation by calling the <xref:System.Double.ToString%2A> method or by using the composite formatting feature. For information about how format strings control the string representation of floating-point values, see the [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) topics.  \n  \n-   **Parsing strings**. You can convert the string representation of a floating-point value to a Double value by calling either the <xref:System.Double.Parse%2A> or <xref:System.Double.TryParse%2A> method. If the parse operation fails, the <xref:System.Double.Parse%2A> method throws an exception, whereas the <xref:System.Double.TryParse%2A> method returns `false`.  \n  \n-   **Type conversion**. The Double structure provides an explicit interface implementation for the <xref:System.IConvertible> interface, which supports conversion between any two standard .NET Framework data types. Language compilers also support the implicit conversion of values of all other standard numeric types to Double values. Conversion of a value of any standard numeric type to a Double is a widening conversion and does not require the user of a casting operator or conversion method,  \n  \n     However, conversion of <xref:System.Int64> and <xref:System.Single> values can involve a loss of precision. The following table lists the differences in precision for each of these types:  \n  \n    |Type|Maximum precision|Internal precision|  \n    |----------|-----------------------|------------------------|  \n    |Double|15|17|  \n    |<xref:System.Int64>|19 decimal digits|19 decimal digits|  \n    |<xref:System.Single>|7 decimal digits|9 decimal digits|  \n  \n     The problem of precision most frequently affects <xref:System.Single> values that are converted to Double values. In the following example, two values produced by identical division operations are unequal because one of the values is a a single-precision floating point value converted to a Double.  \n  \n     [!code-cs[System.Double.Structure#3](~/add/codesnippet/csharp/t-system.double_1.cs)]\n     [!code-vb[System.Double.Structure#3](~/add/codesnippet/visualbasic/t-system.double_1.vb)]"
  example:
  - "The following code example illustrates the use of Double:  \n  \n [!code-cpp[Double Example#1](~/add/codesnippet/cpp/t-system.double_16.cpp)]\n [!code-vb[Double Example#1](~/add/codesnippet/visualbasic/t-system.double_16.vb)]\n [!code-cs[Double Example#1](~/add/codesnippet/csharp/t-system.double_16.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public struct Double : IComparable, IComparable<double>, IConvertible, IEquatable<double>, IFormattable
  inheritance:
  - System.Object
  - System.ValueType
  implements:
  - System.IComparable
  - System.IComparable<System.Double>
  - System.IConvertible
  - System.IEquatable<System.Double>
  - System.IFormattable
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.CompareTo(System.Double)
  id: CompareTo(System.Double)
  parent: System.Double
  langs:
  - csharp
  name: CompareTo(Double)
  nameWithType: Double.CompareTo(Double)
  fullName: System.Double.CompareTo(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares this instance to a specified double-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified double-precision floating-point number.
  remarks: "Values must be identical to be considered equal. Particularly when floating-point values depend on multiple mathematical operations, it is common for them to lose precision and for their values to be nearly identical except for their least significant digits. Because of this, the return value of the CompareTo method at times may seem surprising. For example, multiplication by a particular value followed by division by the same value should produce the original value. In the following example, however, the computed value turns out to be greater than the original value. Showing all significant digits of the two values by using the \"R\" [standard numeric format string](~/add/includes/ajax-current-ext-md.md) indicates that the computed value differs from the original value in its least significant digits. For information on handling such comparisons, see the Remarks section of the <xref:System.Double.Equals%28System.Double%29> method.  \n  \n [!code-vb[System.Double.CompareTo#1](~/add/codesnippet/visualbasic/m-system.double.comparet_0_1.vb)]\n [!code-cs[System.Double.CompareTo#1](~/add/codesnippet/csharp/m-system.double.comparet_0_1.cs)]  \n  \n This method implements the <xref:System.IComparable%601?displayProperty=fullName> interface and performs slightly better than the <xref:System.Double.CompareTo%2A?displayProperty=fullName> method because it does not have to convert the `value` parameter to an object.  \n  \n Note that, although an object whose value is <xref:System.Double.NaN> is not considered equal to another object whose value is <xref:System.Double.NaN> (even itself), the <xref:System.IComparable%601> interface requires that `A.CompareTo(A)` return zero.  \n  \n## Widening Conversions  \n Depending on your programming language, it might be possible to code a CompareTo method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.  \n  \n For example, suppose the instance type is <xref:System.Double> and the parameter type is <xref:System.Int32>. The Microsoft C# compiler generates instructions to represent the value of the parameter as a <xref:System.Double> object, then generates a CompareTo method that compares the values of the instance and the widened representation of the parameter.  \n  \n Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types. For more information, see the [Type Conversion Tables](~/add/includes/ajax-current-ext-md.md) topic.  \n  \n## Precision in Comparisons  \n The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change."
  example:
  - "The following code example demonstrates generic and nongeneric versions of the <xref:System.Double.CompareTo%2A> method for several value and reference types.  \n  \n [!code-vb[T.CompareTo#1](~/add/codesnippet/visualbasic/m-system.double.comparet_0_2.vb)]\n [!code-cpp[T.CompareTo#1](~/add/codesnippet/cpp/m-system.double.comparet_0_2.cpp)]\n [!code-cs[T.CompareTo#1](~/add/codesnippet/csharp/m-system.double.comparet_0_2.cs)]"
  syntax:
    content: public int CompareTo (double value);
    parameters:
    - id: value
      type: System.Double
      description: A double-precision floating-point number to compare.
    return:
      type: System.Int32
      description: "A signed number indicating the relative values of this instance and <code>value</code>.  \n  \n|Return Value|Description|  \n|------------------|-----------------|  \n|Less than zero|This instance is less than <code>value</code>.<br /><br /> -or-<br /><br /> This instance is not a number (<xref href=\"System.Double\"></xref>) and <code>value</code> is a number.|  \n|Zero|This instance is equal to <code>value</code>.<br /><br /> -or-<br /><br /> Both this instance and <code>value</code> are not a number (<xref href=\"System.Double\"></xref>), <xref href=\"System.Double\"></xref>, or <xref href=\"System.Double\"></xref>.|  \n|Greater than zero|This instance is greater than <code>value</code>.<br /><br /> -or-<br /><br /> This instance is a number and <code>value</code> is not a number (<xref href=\"System.Double.NaN\"></xref>).|"
  overload: System.Double.CompareTo*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: System.Double
  langs:
  - csharp
  name: CompareTo(Object)
  nameWithType: Double.CompareTo(Object)
  fullName: System.Double.CompareTo(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.
  remarks: "The `value` parameter must be `null` or an instance of `Double`; otherwise, an exception is thrown. Any instance of <xref:System.Double>, regardless of its value, is considered greater than `null`.  \n  \n Values must be identical to be considered equal. Particularly when floating-point values depend on multiple mathematical operations, it is common for them to lose precision and for their values to be nearly identical except for their least significant digits. Because of this, the return value of the CompareTo method at times may seem surprising. For example, multiplication by a particular value followed by division by the same value should produce the original value. In the following example, however, the computed value turns out to be greater than the original value. Showing all significant digits of the two values by using the \"R\" [standard numeric format string](~/add/includes/ajax-current-ext-md.md) indicates that the computed value differs from the original value in its least significant digits. For information on handling such comparisons, see the Remarks section of the <xref:System.Double.Equals%28System.Double%29> method.  \n  \n [!code-cs[System.Double.CompareTo#2](~/add/codesnippet/csharp/m-system.double.comparet_1_1.cs)]\n [!code-vb[System.Double.CompareTo#2](~/add/codesnippet/visualbasic/m-system.double.comparet_1_1.vb)]  \n  \n This method is implemented to support the <xref:System.IComparable> interface. Note that, although a <xref:System.Double.NaN> is not considered to be equal to another <xref:System.Double.NaN> (even itself), the <xref:System.IComparable> interface requires that `A.CompareTo(A)` return zero.  \n  \n## Precision in Comparisons  \n The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change."
  example:
  - "The following code example illustrates the use of `CompareTo` in the context of `Double`.  \n  \n [!code-cs[System.Double#16](~/add/codesnippet/csharp/m-system.double.comparet_1_2.cs)]\n [!code-vb[System.Double#16](~/add/codesnippet/visualbasic/m-system.double.comparet_1_2.vb)]\n [!code-cpp[System.Double#16](~/add/codesnippet/cpp/m-system.double.comparet_1_2.cpp)]"
  syntax:
    content: public int CompareTo (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object to compare, or `null`.
    return:
      type: System.Int32
      description: "A signed number indicating the relative values of this instance and <code>value</code>.  \n  \n|Value|Description|  \n|-----------|-----------------|  \n|A negative integer|This instance is less than <code>value</code>.<br /><br /> -or-<br /><br /> This instance is not a number (<xref href=\"System.Double.NaN\"></xref>) and <code>value</code> is a number.|  \n|Zero|This instance is equal to <code>value</code>.<br /><br /> -or-<br /><br /> This instance and <code>value</code> are both `Double.NaN`, <xref href=\"System.Double.PositiveInfinity\"></xref>, or <xref href=\"System.Double.NegativeInfinity\"></xref>|  \n|A positive integer|This instance is greater than <code>value</code>.<br /><br /> -or-<br /><br /> This instance is a number and <code>value</code> is not a number (<xref href=\"System.Double.NaN\"></xref>).<br /><br /> -or-<br /><br /><code>value</code> is `null`.|"
  overload: System.Double.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>value</code> is not a <xref href="System.Double"></xref>.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.Epsilon
  id: Epsilon
  parent: System.Double
  langs:
  - csharp
  name: Epsilon
  nameWithType: Double.Epsilon
  fullName: System.Double.Epsilon
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents the smallest positive <xref href="System.Double"></xref> value that is greater than zero. This field is constant.
  remarks: "The value of the Epsilon property reflects the smallest positive <xref:System.Double> value that is significant in numeric operations or comparisons when the value of the <xref:System.Double> instance is zero. For example, the following code shows that zero and Epsilon are considered to be unequal values, whereas zero and half the value of Epsilon are considered to be equal.  \n  \n [!code-cs[System.Double.Epsilon#5](~/add/codesnippet/csharp/f-system.double.epsilon_1.cs)]\n [!code-vb[System.Double.Epsilon#5](~/add/codesnippet/visualbasic/f-system.double.epsilon_1.vb)]  \n  \n More precisely, the floating point format consists of a sign, a 52-bit mantissa or significand, and an 11-bit exponent. As the following example shows, zero has an exponent of -1022 and a mantissa of 0. Epsilon has an exponent of -1022 and a mantissa of 1. This means that Epsilon is the smallest positive <xref:System.Double> value greater than zero and represents the smallest possible value and the smallest possible increment for a <xref:System.Double> whose exponent is -1022.  \n  \n [!code-vb[System.Double.Epsilon#6](~/add/codesnippet/visualbasic/f-system.double.epsilon_2.vb)]\n [!code-cs[System.Double.Epsilon#6](~/add/codesnippet/csharp/f-system.double.epsilon_2.cs)]  \n  \n However, the Epsilon property is not a general measure of precision of the <xref:System.Double> type; it applies only to <xref:System.Double> instances that have a value of zero or an exponent of -1022.  \n  \n> [!NOTE]\n>  The value of the Epsilon property is not equivalent to machine epsilon, which represents the upper bound of the relative error due to rounding in floating-point arithmetic.  \n  \n The value of this constant is 4.94065645841247e-324.  \n  \n Two apparently equivalent floating-point numbers might not compare equal because of differences in their least significant digits. For example, the C# expression, `(double)1/3 == (double)0.33333`, does not compare equal because the division operation on the left side has maximum precision while the constant on the right side is precise only to the specified digits. If you create a custom algorithm that determines whether two floating-point numbers can be considered equal, we do not recommend that you base your algorithm on the value of the Epsilon constant to establish the acceptable absolute margin of difference for the two values to be considered equal.  (Typically, that margin of difference is many times greater than Epsilon.) For information about comparing two double-precision floating-point values, see <xref:System.Double> and <xref:System.Double.Equals%28System.Double%29>.  \n  \n## Platform Notes  \n On ARM systems, the value of the Epsilon constant is too small to be detected, so it equates to zero. You can define an alternative epsilon value that equals 2.2250738585072014E-308 instead."
  syntax:
    content: public const double Epsilon = 4.94065645841247E-324;
    return:
      type: System.Double
      description: To be added.
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.Equals(System.Double)
  id: Equals(System.Double)
  parent: System.Double
  langs:
  - csharp
  name: Equals(Double)
  nameWithType: Double.Equals(Double)
  fullName: System.Double.Equals(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value indicating whether this instance and a specified <xref href="System.Double"></xref> object represent the same value.
  remarks: "This method implements the <xref:System.IEquatable%601?displayProperty=fullName> interface, and performs slightly better than <xref:System.Double.Equals%2A> because it does not have to convert the `obj` parameter to an object.  \n  \n## Widening Conversions  \n Depending on your programming language, it might be possible to code a Equals method where the parameter type has fewer bits (is narrower) than the instance type. This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.  \n  \n For example, suppose the instance type is <xref:System.Double> and the parameter type is <xref:System.Int32>. The Microsoft C# compiler generates instructions to represent the value of the parameter as a <xref:System.Double> object, then generates a Equals method that compares the values of the instance and the widened representation of the parameter.  \n  \n Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types. For more information, see the [Type Conversion Tables](~/add/includes/ajax-current-ext-md.md) topic.  \n  \n## Precision in Comparisons  \n TheEquals method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values. The following example reports that the <xref:System.Double> value .333333 and the <xref:System.Double> value returned by dividing 1 by 3 are unequal.  \n  \n [!code-vb[System.Double.Epsilon#1](~/add/codesnippet/visualbasic/m-system.double.equals-s_1_1.vb)]\n [!code-cs[System.Double.Epsilon#1](~/add/codesnippet/csharp/m-system.double.equals-s_1_1.cs)]  \n  \n Rather than comparing for equality, one technique involves defining an acceptable relative margin of difference between two values (such as .001% of one of the values). If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to differences in precision and, therefore, the values are likely to be equal. The following example uses this technique to compare .33333 and 1/3, the two <xref:System.Double> values that the previous code example found to be unequal. In this case, the values are equal.  \n  \n [!code-vb[System.Double.Epsilon#2](~/add/codesnippet/visualbasic/m-system.double.equals-s_1_2.vb)]\n [!code-cs[System.Double.Epsilon#2](~/add/codesnippet/csharp/m-system.double.equals-s_1_2.cs)]  \n  \n> [!NOTE]\n>  Because <xref:System.Double.Epsilon> defines the minimum expression of a positive value whose range is near zero, the margin of difference between two similar values must be greater than <xref:System.Double.Epsilon>. Typically, it is many times greater than <xref:System.Double.Epsilon>. Because of this, we recommend that you do not use <xref:System.Double.Epsilon> when comparing <xref:System.Double> values for equality.  \n  \n A second technique involves comparing the difference between two floating-point numbers with some absolute value. If the difference is less than or equal to that absolute value, the numbers are equal. If it is greater, the numbers are not equal. One alternative is to arbitrarily select an absolute value. This is problematic, however, because an acceptable margin of difference depends on the magnitude of the <xref:System.Double> values. A second alternative takes advantage of a design feature of the floating-point format: The difference between the integer representation of two floating-point values indicates the number of possible floating-point values that separates them. For example, the difference between 0.0 and <xref:System.Double.Epsilon> is 1, because <xref:System.Double.Epsilon> is the smallest representable value when working with a <xref:System.Double> whose value is zero. The following example uses this technique to compare .33333 and 1/3, which are the two <xref:System.Double> values that the previous code example with the Equals method found to be unequal. Note that the example uses the <xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=fullName> method to convert a double-precision floating-point value to its integer representation.  \n  \n [!code-cs[System.Double.Equals#1](~/add/codesnippet/csharp/m-system.double.equals-s_1_3.cs)]\n [!code-vb[System.Double.Equals#1](~/add/codesnippet/visualbasic/m-system.double.equals-s_1_3.vb)]  \n  \n The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.  \n  \n If two <xref:System.Double.NaN?displayProperty=fullName> values are tested for equality by calling the Equals method, the method returns `true`. However, if two <xref:System.Double.NaN> values are tested for equality by using the equality operator, the operator returns `false`. When you want to determine whether the value of a <xref:System.Double> is not a number (NaN), an alternative is to call the <xref:System.Double.IsNaN%2A> method."
  syntax:
    content: public bool Equals (double obj);
    parameters:
    - id: obj
      type: System.Double
      description: A <xref href="System.Double"></xref> object to compare to this instance.
    return:
      type: System.Boolean
      description: '`true` if <code>obj</code> is equal to this instance; otherwise, `false`.'
  overload: System.Double.Equals*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Double
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Double.Equals(Object)
  fullName: System.Double.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value indicating whether this instance is equal to a specified object.
  remarks: "The<xref:System.Double.Equals%2A> method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values. The following example reports that the <xref:System.Double> value .3333 and the <xref:System.Double> returned by dividing 1 by 3 are unequal.  \n  \n [!code-vb[System.Double.Epsilon#3](~/add/codesnippet/visualbasic/m-system.double.equals-s_0_1.vb)]\n [!code-cs[System.Double.Epsilon#3](~/add/codesnippet/csharp/m-system.double.equals-s_0_1.cs)]  \n  \n For alternatives to calling the Equals method, see the documentation for the <xref:System.Double.Equals%28System.Double%29> overload.  \n  \n> [!NOTE]\n>  Because <xref:System.Double.Epsilon> defines the minimum expression of a positive value whose range is near zero, the margin of difference between two similar values must be greater than <xref:System.Double.Epsilon>. Typically, it is many times greater than <xref:System.Double.Epsilon>.  \n  \n The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.  \n  \n If two <xref:System.Double.NaN?displayProperty=fullName> values are tested for equality by calling the <xref:System.Double.Equals%2A> method, the method returns `true`. However, if two <xref:System.Double.NaN> values are tested for equality by using the equality operator, the operator returns `false`. When you want to determine whether the value of a <xref:System.Double> is not a number (NaN), an alternative is to call the <xref:System.Double.IsNaN%2A> method."
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance.
    return:
      type: System.Boolean
      description: '`true` if <code>obj</code> is an instance of <xref href="System.Double"></xref> and equals the value of this instance; otherwise, `false`.'
  overload: System.Double.Equals*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.GetHashCode
  id: GetHashCode
  parent: System.Double
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Double.GetHashCode()
  fullName: System.Double.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Double.GetHashCode*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.GetTypeCode
  id: GetTypeCode
  parent: System.Double
  langs:
  - csharp
  name: GetTypeCode()
  nameWithType: Double.GetTypeCode()
  fullName: System.Double.GetTypeCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the <xref href="System.TypeCode"></xref> for value type <xref href="System.Double"></xref>.
  syntax:
    content: public TypeCode GetTypeCode ();
    parameters: []
    return:
      type: System.TypeCode
      description: The enumerated constant, <xref href="System.TypeCode"></xref>.
  overload: System.Double.GetTypeCode*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.IsInfinity(System.Double)
  id: IsInfinity(System.Double)
  parent: System.Double
  langs:
  - csharp
  name: IsInfinity(Double)
  nameWithType: Double.IsInfinity(Double)
  fullName: System.Double.IsInfinity(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value indicating whether the specified number evaluates to negative or positive infinity
  remarks: Floating-point operations return <xref:System.Double> or <xref:System.Double> to signal an overflow condition.
  example:
  - "The following code example illustrates the use of IsInfinity:  \n  \n [!code-cs[System.Double#11](~/add/codesnippet/csharp/m-system.double.isinfini_1.cs)]\n [!code-vb[System.Double#11](~/add/codesnippet/visualbasic/m-system.double.isinfini_1.vb)]\n [!code-cpp[System.Double#11](~/add/codesnippet/cpp/m-system.double.isinfini_1.cpp)]"
  syntax:
    content: public static bool IsInfinity (double d);
    parameters:
    - id: d
      type: System.Double
      description: A double-precision floating-point number.
    return:
      type: System.Boolean
      description: '`true` if <code>d</code> evaluates to <xref href="System.Double"></xref> or <xref href="System.Double"></xref>; otherwise, `false`.'
  overload: System.Double.IsInfinity*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.IsNaN(System.Double)
  id: IsNaN(System.Double)
  parent: System.Double
  langs:
  - csharp
  name: IsNaN(Double)
  nameWithType: Double.IsNaN(Double)
  fullName: System.Double.IsNaN(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether the specified value is not a number (<xref href="System.Double.NaN"></xref>).
  remarks: "Floating-point operations return <xref:System.Double> to signal that that result of the operation is undefined. For example, dividing 0.0 by 0.0 results in <xref:System.Double>.  \n  \n> [!NOTE]\n>  IsNaN returns `false` if a <xref:System.Double> value is either <xref:System.Double> or <xref:System.Double.NegativeInfinity>. To test for these values, use the <xref:System.Double.IsInfinity%2A>, <xref:System.Double.IsPositiveInfinity%2A>, and <xref:System.Double.IsNegativeInfinity%2A> methods."
  example:
  - "The following code example illustrates the use of IsNaN:  \n  \n [!code-cs[System.Double#8](~/add/codesnippet/csharp/m-system.double.isnan-sy_1.cs)]\n [!code-vb[System.Double#8](~/add/codesnippet/visualbasic/m-system.double.isnan-sy_1.vb)]\n [!code-cpp[System.Double#8](~/add/codesnippet/cpp/m-system.double.isnan-sy_1.cpp)]"
  syntax:
    content: public static bool IsNaN (double d);
    parameters:
    - id: d
      type: System.Double
      description: A double-precision floating-point number.
    return:
      type: System.Boolean
      description: '`true` if <code>d</code> evaluates to <xref href="System.Double"></xref>; otherwise, `false`.'
  overload: System.Double.IsNaN*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.IsNegativeInfinity(System.Double)
  id: IsNegativeInfinity(System.Double)
  parent: System.Double
  langs:
  - csharp
  name: IsNegativeInfinity(Double)
  nameWithType: Double.IsNegativeInfinity(Double)
  fullName: System.Double.IsNegativeInfinity(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value indicating whether the specified number evaluates to negative infinity.
  remarks: Floating-point operations return <xref:System.Double> to signal an overflow condition.
  example:
  - "The following code example illustrates the use of IsNegativeInfinity:  \n  \n [!code-cs[System.Double#13](~/add/codesnippet/csharp/m-system.double.isnegati_1.cs)]\n [!code-vb[System.Double#13](~/add/codesnippet/visualbasic/m-system.double.isnegati_1.vb)]\n [!code-cpp[System.Double#13](~/add/codesnippet/cpp/m-system.double.isnegati_1.cpp)]  \n[!code-cs[System.Double#4](~/add/codesnippet/csharp/m-system.double.isnegati_2.cs)]\n[!code-vb[System.Double#4](~/add/codesnippet/visualbasic/m-system.double.isnegati_2.vb)]\n[!code-cpp[System.Double#4](~/add/codesnippet/cpp/m-system.double.isnegati_2.cpp)]  \n[!code-cs[System.Double#9](~/add/codesnippet/csharp/m-system.double.isnegati_3.cs)]\n[!code-vb[System.Double#9](~/add/codesnippet/visualbasic/m-system.double.isnegati_3.vb)]\n[!code-cpp[System.Double#9](~/add/codesnippet/cpp/m-system.double.isnegati_3.cpp)]"
  syntax:
    content: public static bool IsNegativeInfinity (double d);
    parameters:
    - id: d
      type: System.Double
      description: A double-precision floating-point number.
    return:
      type: System.Boolean
      description: '`true` if <code>d</code> evaluates to <xref href="System.Double"></xref>; otherwise, `false`.'
  overload: System.Double.IsNegativeInfinity*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.IsPositiveInfinity(System.Double)
  id: IsPositiveInfinity(System.Double)
  parent: System.Double
  langs:
  - csharp
  name: IsPositiveInfinity(Double)
  nameWithType: Double.IsPositiveInfinity(Double)
  fullName: System.Double.IsPositiveInfinity(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value indicating whether the specified number evaluates to positive infinity.
  remarks: Floating-point operations return <xref:System.Double> to signal an overflow condition.
  example:
  - "The following code example illustrates the use of IsPositiveInfinity:  \n  \n [!code-cs[System.Double#12](~/add/codesnippet/csharp/m-system.double.ispositi_1.cs)]\n [!code-vb[System.Double#12](~/add/codesnippet/visualbasic/m-system.double.ispositi_1.vb)]\n [!code-cpp[System.Double#12](~/add/codesnippet/cpp/m-system.double.ispositi_1.cpp)]"
  syntax:
    content: public static bool IsPositiveInfinity (double d);
    parameters:
    - id: d
      type: System.Double
      description: A double-precision floating-point number.
    return:
      type: System.Boolean
      description: '`true` if <code>d</code> evaluates to <xref href="System.Double"></xref>; otherwise, `false`.'
  overload: System.Double.IsPositiveInfinity*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.MaxValue
  id: MaxValue
  parent: System.Double
  langs:
  - csharp
  name: MaxValue
  nameWithType: Double.MaxValue
  fullName: System.Double.MaxValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents the largest possible value of a <xref href="System.Double"></xref>. This field is constant.
  remarks: "The value of this constant is positive 1.7976931348623157E+308.  \n  \n The result of an operation that exceeds MaxValue is <xref:System.Double?displayProperty=fullName>. In the following example, <xref:System.Double?displayProperty=fullName> results from addition, multiplication, and exponentiation operations when the result exceeds MaxValue.  \n  \n [!code-vb[System.Double.MaxValue#1](~/add/codesnippet/visualbasic/f-system.double.maxvalue_1.vb)]\n [!code-cs[System.Double.MaxValue#1](~/add/codesnippet/csharp/f-system.double.maxvalue_1.cs)]"
  example:
  - "The following code example illustrates the use of MaxValue:  \n  \n [!code-cpp[Double Example#2](~/add/codesnippet/cpp/f-system.double.maxvalue_2.cpp)]\n [!code-vb[Double Example#2](~/add/codesnippet/visualbasic/f-system.double.maxvalue_2.vb)]\n [!code-cs[Double Example#2](~/add/codesnippet/csharp/f-system.double.maxvalue_2.cs)]"
  syntax:
    content: public const double MaxValue = 1.79769313486232E+308;
    return:
      type: System.Double
      description: To be added.
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.MinValue
  id: MinValue
  parent: System.Double
  langs:
  - csharp
  name: MinValue
  nameWithType: Double.MinValue
  fullName: System.Double.MinValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents the smallest possible value of a <xref href="System.Double"></xref>. This field is constant.
  remarks: "The value of this constant is negative 1.7976931348623157E+308.  \n  \n The result of an operation that is less than MinValue is <xref:System.Double?displayProperty=fullName>. In the following example, <xref:System.Double?displayProperty=fullName> results from subtraction and multiplication operations when the result is less than MinValue.  \n  \n [!code-cs[System.Double.MinValue#1](~/add/codesnippet/csharp/f-system.double.minvalue_1.cs)]\n [!code-vb[System.Double.MinValue#1](~/add/codesnippet/visualbasic/f-system.double.minvalue_1.vb)]"
  example:
  - "The following code example illustrates the use of MinValue:  \n  \n [!code-cpp[Double Example#2](~/add/codesnippet/cpp/f-system.double.minvalue_2.cpp)]\n [!code-vb[Double Example#2](~/add/codesnippet/visualbasic/f-system.double.minvalue_2.vb)]\n [!code-cs[Double Example#2](~/add/codesnippet/csharp/f-system.double.minvalue_2.cs)]"
  syntax:
    content: public const double MinValue = -1.79769313486232E+308;
    return:
      type: System.Double
      description: To be added.
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.NaN
  id: NaN
  parent: System.Double
  langs:
  - csharp
  name: NaN
  nameWithType: Double.NaN
  fullName: System.Double.NaN
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents a value that is not a number (`NaN`). This field is constant.
  remarks: "A method or operator returns NaN when the result of an operation is undefined. For example, the result of dividing zero by zero is NaN, as the following example shows. (But note that dividing a non-zero number by zero returns either <xref:System.Double> or <xref:System.Double>, depending on the sign of the divisor.)  \n  \n [!code-cs[System.Double.NaN#1](~/add/codesnippet/csharp/f-system.double.nan_1.cs)]\n [!code-vb[System.Double.NaN#1](~/add/codesnippet/visualbasic/f-system.double.nan_1.vb)]  \n  \n In addition, a method call with a NaN value or an operation on a NaN value returns NaN, as the following example shows.  \n  \n [!code-cs[System.Double.NaN#2](~/add/codesnippet/csharp/f-system.double.nan_2.cs)]\n [!code-vb[System.Double.NaN#2](~/add/codesnippet/visualbasic/f-system.double.nan_2.vb)]  \n  \n Use the <xref:System.Double.IsNaN%2A> method to determine whether a value is not a number. The <xref:System.Double.op_Equality%2A> operator considers two NaN values to be unequal to one another. In general, <xref:System.Double> operators cannot be used to compare NaN with other <xref:System.Double> values, although comparison methods (such as <xref:System.Double.Equals%2A> and <xref:System.Double.CompareTo%2A>) can. The following example illustrates the difference in behavior between <xref:System.Double> comparison operators and methods.  \n  \n [!code-vb[System.Double.NaN#4](~/add/codesnippet/visualbasic/f-system.double.nan_3.vb)]\n [!code-cs[System.Double.NaN#4](~/add/codesnippet/csharp/f-system.double.nan_3.cs)]"
  example:
  - "The following example illustrates the use of NaN:  \n  \n [!code-cs[System.Double#7](~/add/codesnippet/csharp/f-system.double.nan_4.cs)]\n [!code-vb[System.Double#7](~/add/codesnippet/visualbasic/f-system.double.nan_4.vb)]\n [!code-cpp[System.Double#7](~/add/codesnippet/cpp/f-system.double.nan_4.cpp)]"
  syntax:
    content: public const double NaN = NaN;
    return:
      type: System.Double
      description: To be added.
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.NegativeInfinity
  id: NegativeInfinity
  parent: System.Double
  langs:
  - csharp
  name: NegativeInfinity
  nameWithType: Double.NegativeInfinity
  fullName: System.Double.NegativeInfinity
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents negative infinity. This field is constant.
  remarks: "The value of this constant is the result of dividing a negative number by zero.  \n  \n This constant is returned when the result of an operation is less than <xref:System.Double>.  \n  \n Use <xref:System.Double.IsNegativeInfinity%2A> to determine whether a value evaluates to negative infinity."
  example:
  - "The following code example illustrates the use of NegativeInfinity:  \n  \n [!code-cs[System.Double#9](~/add/codesnippet/csharp/f-system.double.negative_1.cs)]\n [!code-vb[System.Double#9](~/add/codesnippet/visualbasic/f-system.double.negative_1.vb)]\n [!code-cpp[System.Double#9](~/add/codesnippet/cpp/f-system.double.negative_1.cpp)]"
  syntax:
    content: public const double NegativeInfinity = -Infinity;
    return:
      type: System.Double
      description: To be added.
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.op_Equality(System.Double,System.Double)
  id: op_Equality(System.Double,System.Double)
  parent: System.Double
  langs:
  - csharp
  name: op_Equality(Double,Double)
  nameWithType: Double.op_Equality(Double,Double)
  fullName: System.Double.op_Equality(Double,Double)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether two specified <xref href="System.Double"></xref> values are equal.
  remarks: "The Equality method defines the equality operator for <xref:System.Double> values.  \n  \n If two <xref:System.Double?displayProperty=fullName> values are tested for equality by using the equality operator, the result is `false`; two <xref:System.Double?displayProperty=fullName> values are not considered equal. If they are tested for equality by calling the <xref:System.Double.Equals%2A> method, the result is `true`.  When you want to determine whether the value of a <xref:System.Double> is not a number (NaN), an alternative is to call the <xref:System.Double.IsNaN%2A> method."
  syntax:
    content: public static bool op_Equality (double left, double right);
    parameters:
    - id: left
      type: System.Double
      description: The first value to compare.
    - id: right
      type: System.Double
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> and <code>right</code> are equal; otherwise, `false`.'
  overload: System.Double.op_Equality*
  exceptions: []
  version:
  - netframework-40
- uid: System.Double.op_GreaterThan(System.Double,System.Double)
  id: op_GreaterThan(System.Double,System.Double)
  parent: System.Double
  langs:
  - csharp
  name: op_GreaterThan(Double,Double)
  nameWithType: Double.op_GreaterThan(Double,Double)
  fullName: System.Double.op_GreaterThan(Double,Double)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether a specified <xref href="System.Double"></xref> value is greater than another specified <xref href="System.Double"></xref> value.
  remarks: The GreaterThan method defines the operation of the greater-than operator for <xref:System.Double> values.
  syntax:
    content: public static bool op_GreaterThan (double left, double right);
    parameters:
    - id: left
      type: System.Double
      description: The first value to compare.
    - id: right
      type: System.Double
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'
  overload: System.Double.op_GreaterThan*
  exceptions: []
  version:
  - netframework-40
- uid: System.Double.op_GreaterThanOrEqual(System.Double,System.Double)
  id: op_GreaterThanOrEqual(System.Double,System.Double)
  parent: System.Double
  langs:
  - csharp
  name: op_GreaterThanOrEqual(Double,Double)
  nameWithType: Double.op_GreaterThanOrEqual(Double,Double)
  fullName: System.Double.op_GreaterThanOrEqual(Double,Double)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether a specified <xref href="System.Double"></xref> value is greater than or equal to another specified <xref href="System.Double"></xref> value.
  remarks: The GreaterThanOrEqual method defines the operation of the greater-than-or-equal operator for <xref:System.Double> values.
  syntax:
    content: public static bool op_GreaterThanOrEqual (double left, double right);
    parameters:
    - id: left
      type: System.Double
      description: The first value to compare.
    - id: right
      type: System.Double
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is greater than or equal to <code>right</code>; otherwise, `false`.'
  overload: System.Double.op_GreaterThanOrEqual*
  exceptions: []
  version:
  - netframework-40
- uid: System.Double.op_Inequality(System.Double,System.Double)
  id: op_Inequality(System.Double,System.Double)
  parent: System.Double
  langs:
  - csharp
  name: op_Inequality(Double,Double)
  nameWithType: Double.op_Inequality(Double,Double)
  fullName: System.Double.op_Inequality(Double,Double)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether two specified <xref href="System.Double"></xref> values are not equal.
  remarks: The Inequality method defines the inequality operator for <xref:System.Double> values.
  syntax:
    content: public static bool op_Inequality (double left, double right);
    parameters:
    - id: left
      type: System.Double
      description: The first value to compare.
    - id: right
      type: System.Double
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.'
  overload: System.Double.op_Inequality*
  exceptions: []
  version:
  - netframework-40
- uid: System.Double.op_LessThan(System.Double,System.Double)
  id: op_LessThan(System.Double,System.Double)
  parent: System.Double
  langs:
  - csharp
  name: op_LessThan(Double,Double)
  nameWithType: Double.op_LessThan(Double,Double)
  fullName: System.Double.op_LessThan(Double,Double)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether a specified <xref href="System.Double"></xref> value is less than another specified <xref href="System.Double"></xref> value.
  remarks: The LessThan method defines the operation of the less-than operator for <xref:System.Double> values.
  syntax:
    content: public static bool op_LessThan (double left, double right);
    parameters:
    - id: left
      type: System.Double
      description: The first value to compare.
    - id: right
      type: System.Double
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.'
  overload: System.Double.op_LessThan*
  exceptions: []
  version:
  - netframework-40
- uid: System.Double.op_LessThanOrEqual(System.Double,System.Double)
  id: op_LessThanOrEqual(System.Double,System.Double)
  parent: System.Double
  langs:
  - csharp
  name: op_LessThanOrEqual(Double,Double)
  nameWithType: Double.op_LessThanOrEqual(Double,Double)
  fullName: System.Double.op_LessThanOrEqual(Double,Double)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether a specified <xref href="System.Double"></xref> value is less than or equal to another specified <xref href="System.Double"></xref> value.
  remarks: The LessThanOrEqual method defines the operation of the less-than-or-equal operator for <xref:System.Double> values.
  syntax:
    content: public static bool op_LessThanOrEqual (double left, double right);
    parameters:
    - id: left
      type: System.Double
      description: The first value to compare.
    - id: right
      type: System.Double
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.'
  overload: System.Double.op_LessThanOrEqual*
  exceptions: []
  version:
  - netframework-40
- uid: System.Double.Parse(System.String)
  id: Parse(System.String)
  parent: System.Double
  langs:
  - csharp
  name: Parse(String)
  nameWithType: Double.Parse(String)
  fullName: System.Double.Parse(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number to its double-precision floating-point number equivalent.
  remarks: "The `s` parameter can contain the current culture's <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=fullName>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=fullName>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=fullName>, or a string of the form:  \n  \n [*ws*][*sign*][*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|A series of white-space characters.|  \n|*sign*|A negative sign symbol (-) or a positive sign symbol (+). Only a leading sign can be used.|  \n|*integral-digits*|A series of digits ranging from 0 to 9 that specify the integral part of the number. Runs of *integral-digits* can be partitioned by a group-separator symbol. For example, in some cultures a comma (,) separates groups of thousands. The *integral-digits* element can be absent if the string contains the *fractional-digits* element.|  \n|,|A culture-specific thousands separator symbol.|  \n|.|A culture-specific decimal point symbol.|  \n|*fractional-digits*|A series of digits ranging from 0 to 9 that specify the fractional part of the number.|  \n|E|The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation.|  \n|*exponential-digits*|A series of digits ranging from 0 to 9 that specify an exponent.|  \n  \n The `s` parameter is interpreted using a combination of the <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName> flags. This means that white space and thousands separators are allowed, for example, while currency symbols are not. For finer control over which style elements are permitted in `s` for the parse operation to succeed, call the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName> or the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName> method.  \n  \n The `s` parameter is interpreted using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current thread culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>. To parse a string using the formatting information of some other culture, call the <xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> or <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName> method.  \n  \n Ordinarily, if you pass the <xref:System.Double.Parse%2A?displayProperty=fullName> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method, the original <xref:System.Double> value is returned. However, because of a loss of precision, the values may not be equal. In addition, attempting to parse the string representation of either <xref:System.Double.MinValue> or <xref:System.Double.MaxValue> throws an <xref:System.OverflowException>, as the following example illustrates.  \n  \n [!code-cs[System.Double.Parse#3](~/add/codesnippet/csharp/m-system.double.parse-sy_1_1.cs)]\n [!code-vb[System.Double.Parse#3](~/add/codesnippet/visualbasic/m-system.double.parse-sy_1_1.vb)]  \n  \n If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>."
  example:
  - "The following example illustrates the use of the Parse method.  \n  \n [!code-cpp[Double Example#5](~/add/codesnippet/cpp/m-system.double.parse-sy_1_2.cpp)]\n [!code-vb[Double Example#5](~/add/codesnippet/visualbasic/m-system.double.parse-sy_1_2.vb)]\n [!code-cs[Double Example#5](~/add/codesnippet/csharp/m-system.double.parse-sy_1_2.cs)]"
  syntax:
    content: public static double Parse (string s);
    parameters:
    - id: s
      type: System.String
      description: A string that contains a number to convert.
    return:
      type: System.Double
      description: A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <code>s</code>.
  overload: System.Double.Parse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>s</code> is `null`.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>s</code> does not represent a number in a valid format.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>s</code> represents a number that is less than <xref href="System.Double"></xref> or greater than <xref href="System.Double"></xref>.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.Parse(System.String,System.Globalization.NumberStyles)
  id: Parse(System.String,System.Globalization.NumberStyles)
  parent: System.Double
  langs:
  - csharp
  name: Parse(String,NumberStyles)
  nameWithType: Double.Parse(String,NumberStyles)
  fullName: System.Double.Parse(String,NumberStyles)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number in a specified style to its double-precision floating-point number equivalent.
  remarks: "The `style` parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the `s` parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. The following <xref:System.Globalization.NumberStyles> members are not supported:  \n  \n-   <xref:System.Globalization.NumberStyles>  \n  \n-   <xref:System.Globalization.NumberStyles>  \n  \n The `s` parameter can contain the current culture's <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=fullName>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=fullName>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=fullName>. Depending on the value of `style`, it can also take the form:  \n  \n [*ws*][*$*][*sign*][*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|A series of white-space characters. White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|$|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> properties of the current culture. The current culture's currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*sign*|A negative sign symbol (-) or a positive sign symbol (+). The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*integral-digits*|A series of digits ranging from 0 to 9 that specify the integral part of the number. The *integral-digits* element can be absent if the string contains the *fractional-digits* element.|  \n|,|A culture-specific group separator. The current culture's group separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag|  \n|.|A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*fractional-digits*|A series of digits ranging from 0 to 9 that specify the fractional part of the number. Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|E|The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The `s` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*exponential-digits*|A series of digits ranging from 0 to 9 that specify an exponent.|  \n  \n A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. The remaining <xref:System.Globalization.NumberStyles?displayProperty=fullName> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.  \n  \n|NumberStyles value|Elements permitted in `s` in addition to digits|  \n|------------------------|-----------------------------------------------------|  \n|<xref:System.Globalization.NumberStyles>|The *integral-digits* element only.|  \n|<xref:System.Globalization.NumberStyles>|The decimal point (*.*) and *fractional-digits* elements.|  \n|<xref:System.Globalization.NumberStyles>|The \"e\" or \"E\" character, which indicates exponential notation. This flag by itself supports values in the form *digits*E*digits*; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the beginning of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the end of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element at the beginning of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element at the end of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element in the form of parentheses enclosing the numeric value.|  \n|<xref:System.Globalization.NumberStyles>|The thousands separator (,) element.|  \n|<xref:System.Globalization.NumberStyles>|The currency ($) element.|  \n|<xref:System.Globalization.NumberStyles>|All elements. However, `s` cannot represent a hexadecimal number or a number in exponential notation.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point (.) symbol. The `s` parameter can also use exponential notation.|  \n|<xref:System.Globalization.NumberStyles>|The `ws`, `sign`, thousands separator (,) and decimal point (.) elements.|  \n|<xref:System.Globalization.NumberStyles>|All elements. However, `s` cannot represent a hexadecimal number.|  \n  \n The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>.  \n  \n Ordinarily, if you pass the <xref:System.Double.Parse%2A?displayProperty=fullName> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method, the original <xref:System.Double> value is returned. However, because of a loss of precision, the values may not be equal. In addition, attempting to parse the string representation of either <xref:System.Double.MinValue> or <xref:System.Double.MaxValue> throws an <xref:System.OverflowException>, as the following example illustrates.  \n  \n [!code-cs[System.Double.Parse#3](~/add/codesnippet/csharp/m-system.double.parse-sy_2_1.cs)]\n [!code-vb[System.Double.Parse#3](~/add/codesnippet/visualbasic/m-system.double.parse-sy_2_1.vb)]  \n  \n If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>."
  example:
  - "The following example uses the Parse method to parse the string representations of <xref:System.Double> values using the en-US culture.  \n  \n [!code-cs[System.Double.Parse#1](~/add/codesnippet/csharp/m-system.double.parse-sy_2_2.cs)]\n [!code-vb[System.Double.Parse#1](~/add/codesnippet/visualbasic/m-system.double.parse-sy_2_2.vb)]"
  syntax:
    content: public static double Parse (string s, System.Globalization.NumberStyles style);
    parameters:
    - id: s
      type: System.String
      description: A string that contains a number to convert.
    - id: style
      type: System.Globalization.NumberStyles
      description: A bitwise combination of enumeration values that indicate the style elements that can be present in `s`. A typical value to specify is a combination of <xref href="System.Globalization.NumberStyles"></xref> combined with <xref href="System.Globalization.NumberStyles"></xref>.
    return:
      type: System.Double
      description: A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <code>s</code>.
  overload: System.Double.Parse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>s</code> is `null`.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>s</code> does not represent a number in a valid format.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>s</code> represents a number that is less than <xref href="System.Double"></xref> or greater than <xref href="System.Double"></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>style</code> is not a <xref href=\"System.Globalization.NumberStyles\"></xref> value.  \n  \n -or-  \n  \n <code>style</code> includes the <xref href=\"System.Globalization.NumberStyles\"></xref> value."
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.Parse(System.String,System.IFormatProvider)
  id: Parse(System.String,System.IFormatProvider)
  parent: System.Double
  langs:
  - csharp
  name: Parse(String,IFormatProvider)
  nameWithType: Double.Parse(String,IFormatProvider)
  fullName: System.Double.Parse(String,IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number in a specified culture-specific format to its double-precision floating-point number equivalent.
  remarks: "This overload of the Parse method is typically used to convert text that can be formatted in a variety of ways to a <xref:System.Double> value. For example, it can be used to convert the text that is entered by a user into an HTML text box to a numeric value.  \n  \n The `s` parameter is interpreted using a combination of the <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName> flags. The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=fullName>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=fullName>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=fullName> for the culture specified by `provider`, or it can contain a string of the form:  \n  \n [*ws*][*sign*]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]  \n  \n Optional elements are framed in square brackets ([ and ]). Elements that contain the term \"digits\" consist of a series of numeric characters ranging from 0 to 9.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|A series of white-space characters.|  \n|*sign*|A negative sign symbol (-) or a positive sign symbol (+).|  \n|*integral-digits*|A series of digits ranging from 0 to 9 that specify the integral part of the number. Runs of *integral-digits* can be partitioned by a group-separator symbol. For example, in some cultures a comma (,) separates groups of thousands. The *integral-digits* element can be absent if the string contains the *fractional-digits* element.|  \n|.|A culture-specific decimal point symbol.|  \n|*fractional-digits*|A series of digits ranging from 0 to 9 that specify the fractional part of the number.|  \n|E|The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation.|  \n|*exponential-digits*|A series of digits ranging from 0 to 9 that specify an exponent.|  \n  \n For more information about numeric formats, see the [Formatting Types](~/add/includes/ajax-current-ext-md.md) topic.  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that supplies culture-specific information used in interpreting the format of `s`. Typically, it is a <xref:System.Globalization.NumberFormatInfo> or <xref:System.Globalization.CultureInfo> object. If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> cannot be obtained, the formatting information for the current system culture is used.  \n  \n Ordinarily, if you pass the <xref:System.Double.Parse%2A?displayProperty=fullName> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method, the original <xref:System.Double> value is returned. However, because of a loss of precision, the values may not be equal. In addition, attempting to parse the string representation of either <xref:System.Double.MinValue> or <xref:System.Double.MaxValue> throws an <xref:System.OverflowException>, as the following example illustrates.  \n  \n [!code-cs[System.Double.Parse#3](~/add/codesnippet/csharp/m-system.double.parse-sy_0_1.cs)]\n [!code-vb[System.Double.Parse#3](~/add/codesnippet/visualbasic/m-system.double.parse-sy_0_1.vb)]  \n  \n If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>."
  example:
  - "The following example is the button click event handler of a Web form. It uses the array returned by the <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=fullName> property to determine the user's locale. It then instantiates a <xref:System.Globalization.CultureInfo> object that corresponds to that locale. The <xref:System.Globalization.NumberFormatInfo> object that belongs to that <xref:System.Globalization.CultureInfo> object is then passed to the Parse method to convert the user's input to a <xref:System.Double> value.  \n  \n [!code-cs[ParseMethod#2](~/add/codesnippet/csharp/parsemethod/Default.aspx.cs#2)]\n [!code-vb[ParseMethod#2](~/add/codesnippet/visualbasic/parsemethod/Default.aspx.vb#2)]"
  syntax:
    content: public static double Parse (string s, IFormatProvider provider);
    parameters:
    - id: s
      type: System.String
      description: A string that contains a number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information about `s`.
    return:
      type: System.Double
      description: A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <code>s</code>.
  overload: System.Double.Parse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>s</code> is `null`.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>s</code> does not represent a number in a valid format.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>s</code> represents a number that is less than <xref href="System.Double"></xref> or greater than <xref href="System.Double"></xref>.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  parent: System.Double
  langs:
  - csharp
  name: Parse(String,NumberStyles,IFormatProvider)
  nameWithType: Double.Parse(String,NumberStyles,IFormatProvider)
  fullName: System.Double.Parse(String,NumberStyles,IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.
  remarks: "The `style` parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the `s` parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. The following <xref:System.Globalization.NumberStyles> members are not supported:  \n  \n-   <xref:System.Globalization.NumberStyles>  \n  \n-   <xref:System.Globalization.NumberStyles>  \n  \n The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=fullName>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=fullName>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=fullName> for the culture specified by `provider`. Depending on the value of `style`, it can also take the form:  \n  \n [*ws*] [*$*] [*sign*][*integral-digits*,]*integral-digits*[.[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]  \n  \n Elements framed in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|A series of white-space characters. White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|$|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> properties of the current culture. The current culture's currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*sign*|A negative sign symbol (-) or a positive sign symbol (+). The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*integral-digits*|A series of digits ranging from 0 to 9 that specify the integral part of the number. The *integral-digits* element can be absent if the string contains the *fractional-digits* element.|  \n|,|A culture-specific group separator. The current culture's group separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag|  \n|.|A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*fractional-digits*|A series of digits ranging from 0 to 9 that specify the fractional part of the number. Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|E|The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The `s` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*exponential-digits*|A series of digits ranging from 0 to 9 that specify an exponent.|  \n  \n A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. The remaining <xref:System.Globalization.NumberStyles?displayProperty=fullName> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.  \n  \n|NumberStyles value|Elements permitted in `s` in addition to digits|  \n|------------------------|-----------------------------------------------------|  \n|<xref:System.Globalization.NumberStyles>|The *integral-digits* element only.|  \n|<xref:System.Globalization.NumberStyles>|The decimal point (*.*) and *fractional-digits* elements.|  \n|<xref:System.Globalization.NumberStyles>|The \"e\" or \"E\" character, which indicates exponential notation. This flag by itself supports values in the form *digits*E*digits*; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the beginning of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the end of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element at the beginning of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element at the end of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element in the form of parentheses enclosing the numeric value.|  \n|<xref:System.Globalization.NumberStyles>|The thousands separator (,) element.|  \n|<xref:System.Globalization.NumberStyles>|The currency ($) element.|  \n|<xref:System.Globalization.NumberStyles>|All elements. However, `s` cannot represent a hexadecimal number or a number in exponential notation.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point (.) symbol. The `s` parameter can also use exponential notation.|  \n|<xref:System.Globalization.NumberStyles>|The `ws`, `sign`, thousands separator (,) and decimal point (.) elements.|  \n|<xref:System.Globalization.NumberStyles>|All elements. However, `s` cannot represent a hexadecimal number.|  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that supplies culture-specific information used in interpreting the format of `s`. Typically, it is a <xref:System.Globalization.NumberFormatInfo> or <xref:System.Globalization.CultureInfo> object. If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> cannot be obtained, the formatting information for the current system culture is used.  \n  \n Ordinarily, if you pass the <xref:System.Double.Parse%2A?displayProperty=fullName> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method, the original <xref:System.Double> value is returned. However, because of a loss of precision, the values may not be equal. In addition, attempting to parse the string representation of either <xref:System.Double.MinValue> or <xref:System.Double.MaxValue> throws an <xref:System.OverflowException>, as the following example illustrates.  \n  \n [!code-cs[System.Double.Parse#3](~/add/codesnippet/csharp/2d0a27e0-d732-4763-930c-_1.cs)]\n [!code-vb[System.Double.Parse#3](~/add/codesnippet/visualbasic/2d0a27e0-d732-4763-930c-_1.vb)]  \n  \n If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>."
  example:
  - "The following example illustrates the use of the Parse method to assign several string representations of temperature values to a `Temperature` object.  \n  \n [!code-cs[System.Double.Parse#2](~/add/codesnippet/csharp/2d0a27e0-d732-4763-930c-_2.cs)]\n [!code-vb[System.Double.Parse#2](~/add/codesnippet/visualbasic/2d0a27e0-d732-4763-930c-_2.vb)]"
  syntax:
    content: public static double Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);
    parameters:
    - id: s
      type: System.String
      description: A string that contains a number to convert.
    - id: style
      type: System.Globalization.NumberStyles
      description: A bitwise combination of enumeration values that indicate the style elements that can be present in `s`. A typical value to specify is <xref href="System.Globalization.NumberStyles"></xref> combined with <xref href="System.Globalization.NumberStyles"></xref>.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information about `s`.
    return:
      type: System.Double
      description: A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <code>s</code>.
  overload: System.Double.Parse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>s</code> is `null`.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>s</code> does not represent a numeric value.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>style</code> is not a <xref href=\"System.Globalization.NumberStyles\"></xref> value.  \n  \n -or-  \n  \n <code>style</code> is the <xref href=\"System.Globalization.NumberStyles\"></xref> value."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: <code>s</code> represents a number that is less than <xref href="System.Double"></xref> or greater than <xref href="System.Double"></xref>.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.PositiveInfinity
  id: PositiveInfinity
  parent: System.Double
  langs:
  - csharp
  name: PositiveInfinity
  nameWithType: Double.PositiveInfinity
  fullName: System.Double.PositiveInfinity
  type: Field
  assemblies:
  - mscorlib
  namespace: System
  summary: Represents positive infinity. This field is constant.
  remarks: "The value of this constant is the result of dividing a positive number by zero.  \n  \n This constant is returned when the result of an operation is greater than <xref:System.Double>.  \n  \n Use <xref:System.Double.IsPositiveInfinity%2A> to determine whether a value evaluates to positive infinity."
  example:
  - "The following code example illustrates the use of PositiveInfinity:  \n  \n [!code-cs[System.Double#10](~/add/codesnippet/csharp/f-system.double.positive_1.cs)]\n [!code-vb[System.Double#10](~/add/codesnippet/visualbasic/f-system.double.positive_1.vb)]\n [!code-cpp[System.Double#10](~/add/codesnippet/cpp/f-system.double.positive_1.cpp)]"
  syntax:
    content: public const double PositiveInfinity = Infinity;
    return:
      type: System.Double
      description: To be added.
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)
  id: System#IConvertible#ToBoolean(System.IFormatProvider)
  isEii: true
  parent: System.Double
  langs:
  - csharp
  name: System.IConvertible.ToBoolean(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToBoolean(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToBoolean(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToBoolean*?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.Double%29?displayProperty=fullName> method.
  syntax:
    content: bool IConvertible.ToBoolean (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Boolean
      description: '`true` if the value of the current instance is not zero; otherwise, `false`.'
  overload: System.Double.System#IConvertible#ToBoolean*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.System#IConvertible#ToByte(System.IFormatProvider)
  id: System#IConvertible#ToByte(System.IFormatProvider)
  isEii: true
  parent: System.Double
  langs:
  - csharp
  name: System.IConvertible.ToByte(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToByte(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToByte(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToByte*?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToByte%28System.Double%29?displayProperty=fullName> method.
  syntax:
    content: byte IConvertible.ToByte (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Byte
      description: The value of the current instance, converted to a <xref href="System.Byte"></xref>.
  overload: System.Double.System#IConvertible#ToByte*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.System#IConvertible#ToChar(System.IFormatProvider)
  id: System#IConvertible#ToChar(System.IFormatProvider)
  isEii: true
  parent: System.Double
  langs:
  - csharp
  name: System.IConvertible.ToChar(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToChar(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToChar(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: This conversion is not supported. Attempting to use this method throws an <xref href="System.InvalidCastException"></xref>.
  syntax:
    content: char IConvertible.ToChar (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Char
      description: This conversion is not supported. No value is returned.
  overload: System.Double.System#IConvertible#ToChar*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: In all cases.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)
  id: System#IConvertible#ToDateTime(System.IFormatProvider)
  isEii: true
  parent: System.Double
  langs:
  - csharp
  name: System.IConvertible.ToDateTime(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToDateTime(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToDateTime(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: This conversion is not supported. Attempting to use this method throws an <xref href="System.InvalidCastException"></xref>
  syntax:
    content: DateTime IConvertible.ToDateTime (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.DateTime
      description: This conversion is not supported. No value is returned.
  overload: System.Double.System#IConvertible#ToDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: In all cases.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)
  id: System#IConvertible#ToDecimal(System.IFormatProvider)
  isEii: true
  parent: System.Double
  langs:
  - csharp
  name: System.IConvertible.ToDecimal(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToDecimal(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToDecimal(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToDecimal*?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=fullName> method.
  syntax:
    content: decimal IConvertible.ToDecimal (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Decimal
      description: The value of the current instance, converted to a <xref href="System.Decimal"></xref>.
  overload: System.Double.System#IConvertible#ToDecimal*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.System#IConvertible#ToDouble(System.IFormatProvider)
  id: System#IConvertible#ToDouble(System.IFormatProvider)
  isEii: true
  parent: System.Double
  langs:
  - csharp
  name: System.IConvertible.ToDouble(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToDouble(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToDouble(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToDouble*?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface.
  syntax:
    content: double IConvertible.ToDouble (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Double
      description: The value of the current instance, unchanged.
  overload: System.Double.System#IConvertible#ToDouble*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.System#IConvertible#ToInt16(System.IFormatProvider)
  id: System#IConvertible#ToInt16(System.IFormatProvider)
  isEii: true
  parent: System.Double
  langs:
  - csharp
  name: System.IConvertible.ToInt16(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToInt16(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToInt16(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToInt16*?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.Double%29?displayProperty=fullName> method.
  syntax:
    content: short IConvertible.ToInt16 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Int16
      description: The value of the current instance, converted to an <xref href="System.Int16"></xref>.
  overload: System.Double.System#IConvertible#ToInt16*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.System#IConvertible#ToInt32(System.IFormatProvider)
  id: System#IConvertible#ToInt32(System.IFormatProvider)
  isEii: true
  parent: System.Double
  langs:
  - csharp
  name: System.IConvertible.ToInt32(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToInt32(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToInt32(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToInt32*?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.Double%29?displayProperty=fullName> method.
  syntax:
    content: int IConvertible.ToInt32 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Int32
      description: The value of the current instance, converted to an <xref href="System.Int32"></xref>.
  overload: System.Double.System#IConvertible#ToInt32*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.System#IConvertible#ToInt64(System.IFormatProvider)
  id: System#IConvertible#ToInt64(System.IFormatProvider)
  isEii: true
  parent: System.Double
  langs:
  - csharp
  name: System.IConvertible.ToInt64(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToInt64(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToInt64(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToInt64*?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.Double%29?displayProperty=fullName> method.
  syntax:
    content: long IConvertible.ToInt64 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Int64
      description: The value of the current instance, converted to an <xref href="System.Int64"></xref>.
  overload: System.Double.System#IConvertible#ToInt64*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.System#IConvertible#ToSByte(System.IFormatProvider)
  id: System#IConvertible#ToSByte(System.IFormatProvider)
  isEii: true
  parent: System.Double
  langs:
  - csharp
  name: System.IConvertible.ToSByte(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToSByte(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToSByte(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToSByte*?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.Double%29?displayProperty=fullName> method.
  syntax:
    content: sbyte IConvertible.ToSByte (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.SByte
      description: The value of the current instance, converted to an <xref href="System.SByte"></xref>.
  overload: System.Double.System#IConvertible#ToSByte*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.System#IConvertible#ToSingle(System.IFormatProvider)
  id: System#IConvertible#ToSingle(System.IFormatProvider)
  isEii: true
  parent: System.Double
  langs:
  - csharp
  name: System.IConvertible.ToSingle(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToSingle(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToSingle(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToSingle*?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.Double%29?displayProperty=fullName> method.
  syntax:
    content: float IConvertible.ToSingle (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.Single
      description: The value of the current instance, converted to a <xref href="System.Single"></xref>.
  overload: System.Double.System#IConvertible#ToSingle*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)
  isEii: true
  parent: System.Double
  langs:
  - csharp
  name: System.IConvertible.ToType(Type,IFormatProvider)
  nameWithType: Double.System.IConvertible.ToType(Type,IFormatProvider)
  fullName: System.Double.System.IConvertible.ToType(Type,IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToType*?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the `static` (`Shared` in Visual Basic) <xref:System.Convert.ChangeType%2A?displayProperty=fullName> method.
  syntax:
    content: object IConvertible.ToType (Type type, IFormatProvider provider);
    parameters:
    - id: type
      type: System.Type
      description: The type to which to convert this <xref href="System.Double"></xref> value.
    - id: provider
      type: System.IFormatProvider
      description: An <xref href="System.IFormatProvider"></xref> implementation that supplies culture-specific information about the format of the returned value.
    return:
      type: System.Object
      description: The value of the current instance, converted to <code>type</code>.
  overload: System.Double.System#IConvertible#ToType*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)
  id: System#IConvertible#ToUInt16(System.IFormatProvider)
  isEii: true
  parent: System.Double
  langs:
  - csharp
  name: System.IConvertible.ToUInt16(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToUInt16(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToUInt16(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToUInt16*?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.Double%29?displayProperty=fullName> method.
  syntax:
    content: ushort IConvertible.ToUInt16 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.UInt16
      description: The value of the current instance, converted to a <xref href="System.UInt16"></xref>.
  overload: System.Double.System#IConvertible#ToUInt16*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)
  id: System#IConvertible#ToUInt32(System.IFormatProvider)
  isEii: true
  parent: System.Double
  langs:
  - csharp
  name: System.IConvertible.ToUInt32(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToUInt32(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToUInt32(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToUInt32*?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.Double%29?displayProperty=fullName> method.
  syntax:
    content: uint IConvertible.ToUInt32 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.UInt32
      description: The value of the current instance, converted to a <xref href="System.UInt32"></xref>.
  overload: System.Double.System#IConvertible#ToUInt32*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)
  id: System#IConvertible#ToUInt64(System.IFormatProvider)
  isEii: true
  parent: System.Double
  langs:
  - csharp
  name: System.IConvertible.ToUInt64(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToUInt64(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToUInt64(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: For a description of this member, see <xref:System.IConvertible.ToUInt64*?displayProperty=fullName>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Double> instance is cast to an <xref:System.IConvertible> interface. The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.Double%29?displayProperty=fullName> method.
  syntax:
    content: ulong IConvertible.ToUInt64 (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: This parameter is ignored.
    return:
      type: System.UInt64
      description: The value of the current instance, converted to a <xref href="System.UInt64"></xref>.
  overload: System.Double.System#IConvertible#ToUInt64*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.ToString
  id: ToString
  parent: System.Double
  langs:
  - csharp
  name: ToString()
  nameWithType: Double.ToString()
  fullName: System.Double.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the numeric value of this instance to its equivalent string representation.
  remarks: "The ToString method formats a <xref:System.Double> value in the default (\"G\", or general) format of the current culture. If you want to specify a different format, precision, or culture, use the other overloads of the <xref:System.Double.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Default (\"G\") format|A specific culture|<xref:System.Double.ToString%28System.IFormatProvider%29>|  \n|A specific format or precision|Default (current) culture|<xref:System.Double.ToString%28System.String%29>|  \n|A specific format or precision|A specific culture|<xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29>|  \n  \n The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or a string of the form:  \n  \n [sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]  \n  \n Optional elements are framed in square brackets ([ and ]). Elements that contain the term \"digits\" consist of a series of numeric characters ranging from 0 to 9. The elements listed in the following table are supported.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*sign*|A negative sign or positive sign symbol.|  \n|*integral-digits*|A series of digits specifying the integral part of the number. Integral-digits can be absent if there are fractional-digits.|  \n|'*.*'|A culture-specific decimal point symbol.|  \n|*fractional-digits*|A series of digits specifying the fractional part of the number.|  \n|'*e*'|A lowercase character 'e', indicating exponential (scientific) notation.|  \n|*exponential-digits*|A series of digits specifying an exponent.|  \n  \n Some examples of the return value are \"100\", \"-123,456,789\", \"123.45e+6\", \"500\", \"3.1416\", \"600\", \"-0.123\", and \"-Infinity\".  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the default ToString method to display the string representations of a number of <xref:System.Double> values.  \n  \n [!code-cs[System.Double.ToString#1](~/add/codesnippet/csharp/m-system.double.tostring_1.cs)]\n [!code-vb[System.Double.ToString#1](~/add/codesnippet/visualbasic/m-system.double.tostring_1.vb)]  \n  \n The following example illustrates the use of ToString.  \n  \n [!code-cs[System.Double#3](~/add/codesnippet/csharp/m-system.double.tostring_2.cs)]\n [!code-vb[System.Double#3](~/add/codesnippet/visualbasic/m-system.double.tostring_2.vb)]\n [!code-cpp[System.Double#3](~/add/codesnippet/cpp/m-system.double.tostring_2.cpp)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The string representation of the value of this instance.
  overload: System.Double.ToString*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Double
  langs:
  - csharp
  name: ToString(IFormatProvider)
  nameWithType: Double.ToString(IFormatProvider)
  fullName: System.Double.ToString(IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.
  remarks: "The ToString method formats a <xref:System.Double> value in the default (\"G\", or general) format of a specified culture. If you want to specify a different format or culture, use the other overloads of the <xref:System.Double.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Default (\"G\") format|Default (current)|<xref:System.Double.ToString>|  \n|A specific format or precision|Default (current) culture|<xref:System.Double.ToString%28System.String%29>|  \n|A specific format or precision|A specific culture|<xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29>|  \n  \n The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or a string of the form:  \n  \n [sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]  \n  \n Optional elements are framed in square brackets ([ and ]). Elements that contain the term \"digits\" consist of a series of numeric characters ranging from 0 to 9. The elements listed in the following table are supported.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*sign*|A negative sign or positive sign symbol.|  \n|*integral-digits*|A series of digits specifying the integral part of the number. Integral-digits can be absent if there are fractional-digits.|  \n|'*.*'|A culture-specific decimal point symbol.|  \n|*fractional-digits*|A series of digits specifying the fractional part of the number.|  \n|'*e*'|A lowercase character 'e', indicating exponential (scientific) notation.|  \n|*exponential-digits*|A series of digits specifying an exponent.|  \n  \n Some examples of the return value are \"100\", \"-123,456,789\", \"123.45e+6\", \"500\", \"3.1416\", \"600\", \"-0.123\", and \"-Infinity\".  \n  \n This instance is formatted with the general numeric format specifier (\"G\").  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object. Typically, `provider` is a <xref:System.Globalization.CultureInfo> object or a <xref:System.Globalization.NumberFormatInfo> object. The `provider` parameter supplies culture-specific information used in formatting. If `provider` is `null`, the return value is formatted using the <xref:System.Globalization.NumberFormatInfo> object for the current culture."
  example:
  - "The following example displays the string representation of two <xref:System.Double> values using <xref:System.Globalization.CultureInfo> objects that represent several different cultures.  \n  \n [!code-cs[System.Double.ToString#2](~/add/codesnippet/csharp/m-system.double.tostring_2_1.cs)]\n [!code-vb[System.Double.ToString#2](~/add/codesnippet/visualbasic/m-system.double.tostring_2_1.vb)]  \n  \n The following example illustrates the use of <xref:System.Double.ToString%2A>, taking a <xref:System.String> and an <xref:System.IFormatProvider> as parameters.  \n  \n [!code-cpp[Double Example#4](~/add/codesnippet/cpp/m-system.double.tostring_2_2.cpp)]\n [!code-vb[Double Example#4](~/add/codesnippet/visualbasic/m-system.double.tostring_2_2.vb)]\n [!code-cs[Double Example#4](~/add/codesnippet/csharp/m-system.double.tostring_2_2.cs)]"
  syntax:
    content: public string ToString (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of the value of this instance as specified by <code>provider</code>.
  overload: System.Double.ToString*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.ToString(System.String)
  id: ToString(System.String)
  parent: System.Double
  langs:
  - csharp
  name: ToString(String)
  nameWithType: Double.ToString(String)
  fullName: System.Double.ToString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the numeric value of this instance to its equivalent string representation, using the specified format.
  remarks: "The ToString method formats a <xref:System.Double> value in a specified format by using the conventions of the current culture. If you want to specify a different format or culture, use the other overloads of the ToString method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Default (\"G\") format|Default (current) culture|<xref:System.Double.ToString>|  \n|Default (\"G\") format|A specific culture|<xref:System.Double.ToString%28System.IFormatProvider%29>|  \n|A specific format or precision|A specific culture|<xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29>|  \n  \n The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or the string representation of a number, as specified by `format`.  \n  \n The `format` parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers. If `format` is `null` or an empty string, the return value is formatted with the general numeric format specifier (\"G\").  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \n  \n By default, the return value only contains 15 digits of precision although a maximum of 17 digits is maintained internally. If the value of this instance has greater than 15 digits, <xref:System.Double.ToString%2A> returns <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> or <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> instead of the expected number. If you require more precision, specify `format` with the \"G17\" format specification, which always returns 17 digits of precision, or \"R\", which returns 15 digits if the number can be represented with that precision or 17 digits if the number can only be represented with maximum precision."
  example:
  - "The following example defines a numeric value and formats it as a currency value by using the \"C\" standard numeric format string and as a numeric value to three decimal places by using the \"N\" standard numeric format string. The result strings are formatted by using the conventions of the en-US culture. For more information on numeric format strings, see [Standard Numeric Format Strings](../Topic/Standard%20Numeric%20Format%20Strings.md) and [Custom Numeric Format Strings](../Topic/Custom%20Numeric%20Format%20Strings.md).  \n  \n [!code-cs[System.Double.ToString#7](~/add/codesnippet/csharp/m-system.double.tostring_0_1.cs)]\n [!code-vb[System.Double.ToString#7](~/add/codesnippet/visualbasic/m-system.double.tostring_0_1.vb)]  \n  \n The following example displays several <xref:System.Double> values using the supported standard numeric format specifiers together with three custom numeric format strings. One of those custom format strings illustrates how to pad a <xref:System.Single> value with leading zeros. In addition, the example uses precision specifiers with each standard format specifier except for \"R\". The values of the precision specifiers range from 0 to 3. To convert the numeric values to strings, the example uses the formatting conventions of the en-US culture.  \n  \n [!code-cs[System.Double.ToString#3](~/add/codesnippet/csharp/m-system.double.tostring_0_2.cs)]\n [!code-cpp[System.Double.ToString#3](~/add/codesnippet/cpp/m-system.double.tostring_0_2.cpp)]\n [!code-vb[System.Double.ToString#3](~/add/codesnippet/visualbasic/m-system.double.tostring_0_2.vb)]"
  syntax:
    content: public string ToString (string format);
    parameters:
    - id: format
      type: System.String
      description: A numeric format string.
    return:
      type: System.String
      description: The string representation of the value of this instance as specified by <code>format</code>.
  overload: System.Double.ToString*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>format</code> is invalid.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.Double
  langs:
  - csharp
  name: ToString(String,IFormatProvider)
  nameWithType: Double.ToString(String,IFormatProvider)
  fullName: System.Double.ToString(String,IFormatProvider)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.
  remarks: "The ToString method formats a <xref:System.Double> value in a specified format of a specified culture. If you want to specify a different format or culture, use the other overloads of the <xref:System.Double.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Default (\"G\") format|Default (current) culture|<xref:System.Double.ToString>|  \n|Default (\"G\") format|A specific culture|<xref:System.Double.ToString%28System.IFormatProvider%29>|  \n|A specific format or precision|Default (current) culture|<xref:System.Double.ToString%28System.String%29>|  \n  \n The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or the string representation of a number, as specified by `format`.  \n  \n The `format` parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers. If `format` is `null` or an empty string, the return value for this instance is formatted with the general numeric format specifier (\"G\").  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object. Typically, `provider` is a <xref:System.Globalization.CultureInfo> object or a <xref:System.Globalization.NumberFormatInfo> object. The `provider` parameter supplies culture-specific information used in formatting. If `provider` is `null`, the return value is formatted using the <xref:System.Globalization.NumberFormatInfo> object for the current culture.  \n  \n By default, the return value only contains 15 digits of precision although a maximum of 17 digits is maintained internally. If the value of this instance has greater than 15 digits, <xref:System.Double.ToString%2A> returns <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> or <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> instead of the expected number. If you require more precision, specify `format` with the \"G17\" format specification, which always returns 17 digits of precision, or \"R\", which returns 15 digits if the number can be represented with that precision or 17 digits if the number can only be represented with maximum precision."
  example:
  - "The following example displays a <xref:System.Double> value using each of the supported standard numeric format specifiers for several different cultures.  \n  \n [!code-cs[System.Double.ToString#4](~/add/codesnippet/csharp/m-system.double.tostring_1_1.cs)]\n [!code-cpp[System.Double.ToString#4](~/add/codesnippet/cpp/m-system.double.tostring_1_1.cpp)]\n [!code-vb[System.Double.ToString#4](~/add/codesnippet/visualbasic/m-system.double.tostring_1_1.vb)]  \n  \n The following example illustrates the use of <xref:System.Double.ToString%2A>, taking a <xref:System.String> and an <xref:System.IFormatProvider> as parameters.  \n  \n [!code-cpp[Double Example#4](~/add/codesnippet/cpp/m-system.double.tostring_1_2.cpp)]\n [!code-vb[Double Example#4](~/add/codesnippet/visualbasic/m-system.double.tostring_1_2.vb)]\n [!code-cs[Double Example#4](~/add/codesnippet/csharp/m-system.double.tostring_1_2.cs)]"
  syntax:
    content: public string ToString (string format, IFormatProvider provider);
    parameters:
    - id: format
      type: System.String
      description: A numeric format string.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of the value of this instance as specified by <code>format</code> and <code>provider</code>.
  overload: System.Double.ToString*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.TryParse(System.String,System.Double@)
  id: TryParse(System.String,System.Double@)
  parent: System.Double
  langs:
  - csharp
  name: TryParse(String,Double)
  nameWithType: Double.TryParse(String,Double)
  fullName: System.Double.TryParse(String,Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.
  remarks: "This overload differs from the <xref:System.Double.Parse%28System.String%29?displayProperty=fullName> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value. It eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be successfully parsed.  \n  \n The `s` parameter can contain the current culture's <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=fullName>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=fullName>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=fullName> (the string comparison is case-sensitive), or a string of the form:  \n  \n [ws][sign][integral-digits,]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|A series of white-space characters.|  \n|*sign*|A negative sign or positive sign symbol.|  \n|*integral-digits*|A series of numeric characters ranging from 0 to 9 that specify the integral part of the number. Integral-digits can be absent if there are fractional-digits.|  \n|*,*|A culture-specific group separator symbol.|  \n|*.*|A culture-specific decimal point symbol.|  \n|*fractional-digits*|A series of numeric characters ranging from 0 to 9 that specify the fractional part of the number.|  \n|*E*|An uppercase or lowercase character 'e', that indicates exponential (scientific) notation.|  \n|*exponential-digits*|A series of numeric characters ranging from 0 to 9 that specify an exponent.|  \n  \n For more information about numeric formats, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \n  \n The `s` parameter is interpreted by using a combination of the <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName> flags. This means that white space and thousands separators are allowed but currency symbols are not. To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in `s`, use the <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=fullName> method overload.  \n  \n The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>. To parse a string using the formatting information of some other specified culture, use the <xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=fullName> method overload.  \n  \n Ordinarily, if you pass the <xref:System.Double.TryParse%2A?displayProperty=fullName> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method, the original <xref:System.Double> value is returned. However, because of a loss of precision, the values may not be equal. In addition, attempting to parse the string representation of either <xref:System.Double.MinValue> or <xref:System.Double.MaxValue> throws an <xref:System.OverflowException>, as the following example illustrates.  \n  \n [!code-cs[System.Double.TryParse#3](~/add/codesnippet/csharp/m-system.double.tryparse_1.cs)]\n [!code-vb[System.Double.TryParse#3](~/add/codesnippet/visualbasic/m-system.double.tryparse_1.vb)]  \n  \n If a separator is encountered in the `s` parameter during a parse operation, and the decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>."
  example:
  - "The following example uses the TryParse method to convert the string representations of numeric values to <xref:System.Double> values. It assumes that en-US is the current culture.  \n  \n [!code-cs[System.Double.TryParse#1](~/add/codesnippet/csharp/m-system.double.tryparse_2.cs)]\n [!code-vb[System.Double.TryParse#1](~/add/codesnippet/visualbasic/m-system.double.tryparse_2.vb)]"
  syntax:
    content: public static bool TryParse (string s, out double result);
    parameters:
    - id: s
      type: System.String
      description: A string containing a number to convert.
    - id: result
      type: System.Double
      description: When this method returns, contains the double-precision floating-point number equivalent of the `s` parameter, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the `s` parameter is `null` or <xref href="System.String"></xref>, is not a number in a valid format, or represents a number less than <xref href="System.Double"></xref> or greater than <xref href="System.Double"></xref>. This parameter is passed uninitialized; any value originally supplied in `result` will be overwritten.
    return:
      type: System.Boolean
      description: '`true` if <code>s</code> was converted successfully; otherwise, `false`.'
  overload: System.Double.TryParse*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)
  id: TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)
  parent: System.Double
  langs:
  - csharp
  name: TryParse(String,NumberStyles,IFormatProvider,Double)
  nameWithType: Double.TryParse(String,NumberStyles,IFormatProvider,Double)
  fullName: System.Double.TryParse(String,NumberStyles,IFormatProvider,Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.
  remarks: "The TryParse method is like the <xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except this method does not throw an exception if the conversion fails. If the conversion succeeds, the return value is `true` and the `result` parameter is set to the outcome of the conversion. If the conversion fails, the return value is `false` and the `result` parameter is set to zero. This eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be successfully parsed.  \n  \n The `style` parameter defines the allowable format of the `s` parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. The following <xref:System.Globalization.NumberStyles> members are not supported:  \n  \n-   <xref:System.Globalization.NumberStyles?displayProperty=fullName>  \n  \n-   <xref:System.Globalization.NumberStyles?displayProperty=fullName>  \n  \n The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=fullName>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=fullName>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=fullName> for the culture indicated by `provider`. In addition, depending on the value of `style`, the `s` parameter may include the following elements:  \n  \n [ws] [$] [sign][integral-digits,]integral-digits[.fractional-digits][e[sign]exponential-digits][ws]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space. White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. It can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> or <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> properties of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method of the `provider` parameter. The currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*sign*|An optional sign. The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*integral-digits*|A series of digits ranging from 0 to 9 that specify the integral part of the number. Integral-digits can be absent if there are fractional-digits.|  \n|*,*|A culture-specific thousands separator symbol. The current culture's thousands separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*.*|A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*fractional-digits*|A series of digits ranging from 0 to 9 that specify the fractional part of the number. Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*e*|The e or E character, which indicates that `s` can represent a number using exponential notation. The `s` parameter can represent a number in exponential notation if style includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*exponential-digits*|A series of digits ranging from 0 to 9 that specify an exponent.|  \n  \n A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. The remaining <xref:System.Globalization.NumberStyles?displayProperty=fullName> members control elements that may be but are not required to be present in the input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.  \n  \n|NumberStyles value|Elements permitted in s in addition to digits|  \n|------------------------|---------------------------------------------------|  \n|<xref:System.Globalization.NumberStyles>|The *integral-digits* element only.|  \n|<xref:System.Globalization.NumberStyles>|The *.* and *fractional-digits* elements.|  \n|<xref:System.Globalization.NumberStyles>|The `s` parameter can also use exponential notation. This flag by itself supports values in the form *integral-digits*E*exponential-digits*; additional flags are needed to successfully parse strings in exponential notation with such elements as positive or negative signs and decimal point symbols.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the beginning of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the end of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element at the beginning of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element at the end of `s`.|  \n|<xref:System.Globalization.NumberStyles>|The *sign* element in the form of parentheses enclosing the numeric value.|  \n|<xref:System.Globalization.NumberStyles>|The *,* element.|  \n|<xref:System.Globalization.NumberStyles>|The *$* element.|  \n|<xref:System.Globalization.NumberStyles>|All. The `s` parameter cannot represent a hexadecimal number or a number in exponential notation.|  \n|<xref:System.Globalization.NumberStyles>|The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the *.* symbol. The `s` parameter can also use exponential notation.|  \n|<xref:System.Globalization.NumberStyles>|The `ws`, `sign`, thousands separator (*,),* and decimal point (*.*) elements.|  \n|<xref:System.Globalization.NumberStyles>|All styles, except `s` cannot represent a hexadecimal number.|  \n  \n The `provider` parameter is a <xref:System.IFormatProvider> implementation, such as a <xref:System.Globalization.NumberFormatInfo> or <xref:System.Globalization.CultureInfo> object. The `provider` parameter supplies culture-specific information used in parsing. If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> object cannot be obtained, the format information for the current culture is used.  \n  \n The conversion fails if the `s` parameter is `null` or not a numeric value, the `provider` parameter does not yield a <xref:System.Globalization.NumberFormatInfo> object, or the `style` parameter is not a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.  \n  \n Ordinarily, if you pass the <xref:System.Double.TryParse%2A?displayProperty=fullName> method a string that is created by calling the <xref:System.Double.ToString%2A?displayProperty=fullName> method, the original <xref:System.Double> value is returned. However, because of a loss of precision, the values may not be equal. In addition, attempting to parse the string representation of either <xref:System.Double.MinValue> or <xref:System.Double.MaxValue> throws an <xref:System.OverflowException>, as the following example illustrates.  \n  \n [!code-cs[System.Double.TryParse#3](~/add/codesnippet/csharp/c8ef72ed-e525-429f-b3e7-_1.cs)]\n [!code-vb[System.Double.TryParse#3](~/add/codesnippet/visualbasic/c8ef72ed-e525-429f-b3e7-_1.vb)]  \n  \n If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>."
  example:
  - "The following example demonstrates the use of the TryParse method to parse the string representation of numbers that have a particular style and are formatted using the conventions of a particular culture.  \n  \n [!code-cs[System.Double.TryParse#2](~/add/codesnippet/csharp/c8ef72ed-e525-429f-b3e7-_2.cs)]\n [!code-vb[System.Double.TryParse#2](~/add/codesnippet/visualbasic/c8ef72ed-e525-429f-b3e7-_2.vb)]"
  syntax:
    content: public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out double result);
    parameters:
    - id: s
      type: System.String
      description: A string containing a number to convert.
    - id: style
      type: System.Globalization.NumberStyles
      description: A bitwise combination of <xref href="System.Globalization.NumberStyles"></xref> values that indicates the permitted format of `s`. A typical value to specify is <xref href="System.Globalization.NumberStyles"></xref> combined with <xref href="System.Globalization.NumberStyles"></xref>.
    - id: provider
      type: System.IFormatProvider
      description: An <xref href="System.IFormatProvider"></xref> that supplies culture-specific formatting information about `s`.
    - id: result
      type: System.Double
      description: When this method returns, contains a double-precision floating-point number equivalent of the numeric value or symbol contained in `s`, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the `s` parameter is `null` or <xref href="System.String.Empty"></xref>, is not in a format compliant with `style`, represents a number less than <xref href="System.SByte.MinValue"></xref> or greater than <xref href="System.SByte.MaxValue"></xref>, or if `style` is not a valid combination of <xref href="System.Globalization.NumberStyles"></xref> enumerated constants. This parameter is passed uninitialized; any value originally supplied in `result` will be overwritten.
    return:
      type: System.Boolean
      description: '`true` if <code>s</code> was converted successfully; otherwise, `false`.'
  overload: System.Double.TryParse*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>style</code> is not a <xref href=\"System.Globalization.NumberStyles\"></xref> value.  \n  \n -or-  \n  \n <code>style</code> includes the <xref href=\"System.Globalization.NumberStyles\"></xref> value."
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
- uid: System.OverflowException
  parent: System
  isExternal: false
  name: OverflowException
  nameWithType: OverflowException
  fullName: System.OverflowException
- uid: System.InvalidCastException
  parent: System
  isExternal: false
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.Double.CompareTo(System.Double)
  parent: System.Double
  isExternal: false
  name: CompareTo(Double)
  nameWithType: Double.CompareTo(Double)
  fullName: System.Double.CompareTo(Double)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Double.CompareTo(System.Object)
  parent: System.Double
  isExternal: false
  name: CompareTo(Object)
  nameWithType: Double.CompareTo(Object)
  fullName: System.Double.CompareTo(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Double.Epsilon
  parent: System.Double
  isExternal: false
  name: Epsilon
  nameWithType: Double.Epsilon
  fullName: System.Double.Epsilon
- uid: System.Double.Equals(System.Double)
  parent: System.Double
  isExternal: false
  name: Equals(Double)
  nameWithType: Double.Equals(Double)
  fullName: System.Double.Equals(Double)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Double.Equals(System.Object)
  parent: System.Double
  isExternal: false
  name: Equals(Object)
  nameWithType: Double.Equals(Object)
  fullName: System.Double.Equals(Object)
- uid: System.Double.GetHashCode
  parent: System.Double
  isExternal: false
  name: GetHashCode()
  nameWithType: Double.GetHashCode()
  fullName: System.Double.GetHashCode()
- uid: System.Double.GetTypeCode
  parent: System.Double
  isExternal: false
  name: GetTypeCode()
  nameWithType: Double.GetTypeCode()
  fullName: System.Double.GetTypeCode()
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: TypeCode
  nameWithType: TypeCode
  fullName: System.TypeCode
- uid: System.Double.IsInfinity(System.Double)
  parent: System.Double
  isExternal: false
  name: IsInfinity(Double)
  nameWithType: Double.IsInfinity(Double)
  fullName: System.Double.IsInfinity(Double)
- uid: System.Double.IsNaN(System.Double)
  parent: System.Double
  isExternal: false
  name: IsNaN(Double)
  nameWithType: Double.IsNaN(Double)
  fullName: System.Double.IsNaN(Double)
- uid: System.Double.IsNegativeInfinity(System.Double)
  parent: System.Double
  isExternal: false
  name: IsNegativeInfinity(Double)
  nameWithType: Double.IsNegativeInfinity(Double)
  fullName: System.Double.IsNegativeInfinity(Double)
- uid: System.Double.IsPositiveInfinity(System.Double)
  parent: System.Double
  isExternal: false
  name: IsPositiveInfinity(Double)
  nameWithType: Double.IsPositiveInfinity(Double)
  fullName: System.Double.IsPositiveInfinity(Double)
- uid: System.Double.MaxValue
  parent: System.Double
  isExternal: false
  name: MaxValue
  nameWithType: Double.MaxValue
  fullName: System.Double.MaxValue
- uid: System.Double.MinValue
  parent: System.Double
  isExternal: false
  name: MinValue
  nameWithType: Double.MinValue
  fullName: System.Double.MinValue
- uid: System.Double.NaN
  parent: System.Double
  isExternal: false
  name: NaN
  nameWithType: Double.NaN
  fullName: System.Double.NaN
- uid: System.Double.NegativeInfinity
  parent: System.Double
  isExternal: false
  name: NegativeInfinity
  nameWithType: Double.NegativeInfinity
  fullName: System.Double.NegativeInfinity
- uid: System.Double.op_Equality(System.Double,System.Double)
  parent: System.Double
  isExternal: false
  name: op_Equality(Double,Double)
  nameWithType: Double.op_Equality(Double,Double)
  fullName: System.Double.op_Equality(Double,Double)
- uid: System.Double.op_GreaterThan(System.Double,System.Double)
  parent: System.Double
  isExternal: false
  name: op_GreaterThan(Double,Double)
  nameWithType: Double.op_GreaterThan(Double,Double)
  fullName: System.Double.op_GreaterThan(Double,Double)
- uid: System.Double.op_GreaterThanOrEqual(System.Double,System.Double)
  parent: System.Double
  isExternal: false
  name: op_GreaterThanOrEqual(Double,Double)
  nameWithType: Double.op_GreaterThanOrEqual(Double,Double)
  fullName: System.Double.op_GreaterThanOrEqual(Double,Double)
- uid: System.Double.op_Inequality(System.Double,System.Double)
  parent: System.Double
  isExternal: false
  name: op_Inequality(Double,Double)
  nameWithType: Double.op_Inequality(Double,Double)
  fullName: System.Double.op_Inequality(Double,Double)
- uid: System.Double.op_LessThan(System.Double,System.Double)
  parent: System.Double
  isExternal: false
  name: op_LessThan(Double,Double)
  nameWithType: Double.op_LessThan(Double,Double)
  fullName: System.Double.op_LessThan(Double,Double)
- uid: System.Double.op_LessThanOrEqual(System.Double,System.Double)
  parent: System.Double
  isExternal: false
  name: op_LessThanOrEqual(Double,Double)
  nameWithType: Double.op_LessThanOrEqual(Double,Double)
  fullName: System.Double.op_LessThanOrEqual(Double,Double)
- uid: System.Double.Parse(System.String)
  parent: System.Double
  isExternal: false
  name: Parse(String)
  nameWithType: Double.Parse(String)
  fullName: System.Double.Parse(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Double.Parse(System.String,System.Globalization.NumberStyles)
  parent: System.Double
  isExternal: false
  name: Parse(String,NumberStyles)
  nameWithType: Double.Parse(String,NumberStyles)
  fullName: System.Double.Parse(String,NumberStyles)
- uid: System.Globalization.NumberStyles
  parent: System.Globalization
  isExternal: false
  name: NumberStyles
  nameWithType: NumberStyles
  fullName: System.Globalization.NumberStyles
- uid: System.Double.Parse(System.String,System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: Parse(String,IFormatProvider)
  nameWithType: Double.Parse(String,IFormatProvider)
  fullName: System.Double.Parse(String,IFormatProvider)
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: Parse(String,NumberStyles,IFormatProvider)
  nameWithType: Double.Parse(String,NumberStyles,IFormatProvider)
  fullName: System.Double.Parse(String,NumberStyles,IFormatProvider)
- uid: System.Double.PositiveInfinity
  parent: System.Double
  isExternal: false
  name: PositiveInfinity
  nameWithType: Double.PositiveInfinity
  fullName: System.Double.PositiveInfinity
- uid: System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToBoolean(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToBoolean(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToBoolean(IFormatProvider)
- uid: System.Double.System#IConvertible#ToByte(System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToByte(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToByte(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToByte(IFormatProvider)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Double.System#IConvertible#ToChar(System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToChar(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToChar(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToChar(IFormatProvider)
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToDateTime(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToDateTime(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToDateTime(IFormatProvider)
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToDecimal(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToDecimal(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToDecimal(IFormatProvider)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Double.System#IConvertible#ToDouble(System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToDouble(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToDouble(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToDouble(IFormatProvider)
- uid: System.Double.System#IConvertible#ToInt16(System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToInt16(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToInt16(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToInt16(IFormatProvider)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Double.System#IConvertible#ToInt32(System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToInt32(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToInt32(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToInt32(IFormatProvider)
- uid: System.Double.System#IConvertible#ToInt64(System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToInt64(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToInt64(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToInt64(IFormatProvider)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Double.System#IConvertible#ToSByte(System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToSByte(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToSByte(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToSByte(IFormatProvider)
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Double.System#IConvertible#ToSingle(System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToSingle(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToSingle(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToSingle(IFormatProvider)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToType(Type,IFormatProvider)
  nameWithType: Double.System.IConvertible.ToType(Type,IFormatProvider)
  fullName: System.Double.System.IConvertible.ToType(Type,IFormatProvider)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToUInt16(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToUInt16(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToUInt16(IFormatProvider)
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToUInt32(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToUInt32(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToUInt32(IFormatProvider)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToUInt64(IFormatProvider)
  nameWithType: Double.System.IConvertible.ToUInt64(IFormatProvider)
  fullName: System.Double.System.IConvertible.ToUInt64(IFormatProvider)
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Double.ToString
  parent: System.Double
  isExternal: false
  name: ToString()
  nameWithType: Double.ToString()
  fullName: System.Double.ToString()
- uid: System.Double.ToString(System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: ToString(IFormatProvider)
  nameWithType: Double.ToString(IFormatProvider)
  fullName: System.Double.ToString(IFormatProvider)
- uid: System.Double.ToString(System.String)
  parent: System.Double
  isExternal: false
  name: ToString(String)
  nameWithType: Double.ToString(String)
  fullName: System.Double.ToString(String)
- uid: System.Double.ToString(System.String,System.IFormatProvider)
  parent: System.Double
  isExternal: false
  name: ToString(String,IFormatProvider)
  nameWithType: Double.ToString(String,IFormatProvider)
  fullName: System.Double.ToString(String,IFormatProvider)
- uid: System.Double.TryParse(System.String,System.Double@)
  parent: System.Double
  isExternal: false
  name: TryParse(String,Double)
  nameWithType: Double.TryParse(String,Double)
  fullName: System.Double.TryParse(String,Double)
- uid: System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)
  parent: System.Double
  isExternal: false
  name: TryParse(String,NumberStyles,IFormatProvider,Double)
  nameWithType: Double.TryParse(String,NumberStyles,IFormatProvider,Double)
  fullName: System.Double.TryParse(String,NumberStyles,IFormatProvider,Double)
- uid: System.Double.CompareTo*
  parent: System.Double
  isExternal: false
  name: CompareTo
  nameWithType: Double.CompareTo
- uid: System.Double.Equals*
  parent: System.Double
  isExternal: false
  name: Equals
  nameWithType: Double.Equals
- uid: System.Double.GetHashCode*
  parent: System.Double
  isExternal: false
  name: GetHashCode
  nameWithType: Double.GetHashCode
- uid: System.Double.GetTypeCode*
  parent: System.Double
  isExternal: false
  name: GetTypeCode
  nameWithType: Double.GetTypeCode
- uid: System.Double.IsInfinity*
  parent: System.Double
  isExternal: false
  name: IsInfinity
  nameWithType: Double.IsInfinity
- uid: System.Double.IsNaN*
  parent: System.Double
  isExternal: false
  name: IsNaN
  nameWithType: Double.IsNaN
- uid: System.Double.IsNegativeInfinity*
  parent: System.Double
  isExternal: false
  name: IsNegativeInfinity
  nameWithType: Double.IsNegativeInfinity
- uid: System.Double.IsPositiveInfinity*
  parent: System.Double
  isExternal: false
  name: IsPositiveInfinity
  nameWithType: Double.IsPositiveInfinity
- uid: System.Double.op_Equality*
  parent: System.Double
  isExternal: false
  name: op_Equality
  nameWithType: Double.op_Equality
- uid: System.Double.op_GreaterThan*
  parent: System.Double
  isExternal: false
  name: op_GreaterThan
  nameWithType: Double.op_GreaterThan
- uid: System.Double.op_GreaterThanOrEqual*
  parent: System.Double
  isExternal: false
  name: op_GreaterThanOrEqual
  nameWithType: Double.op_GreaterThanOrEqual
- uid: System.Double.op_Inequality*
  parent: System.Double
  isExternal: false
  name: op_Inequality
  nameWithType: Double.op_Inequality
- uid: System.Double.op_LessThan*
  parent: System.Double
  isExternal: false
  name: op_LessThan
  nameWithType: Double.op_LessThan
- uid: System.Double.op_LessThanOrEqual*
  parent: System.Double
  isExternal: false
  name: op_LessThanOrEqual
  nameWithType: Double.op_LessThanOrEqual
- uid: System.Double.Parse*
  parent: System.Double
  isExternal: false
  name: Parse
  nameWithType: Double.Parse
- uid: System.Double.System#IConvertible#ToBoolean*
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToBoolean
  nameWithType: Double.System.IConvertible.ToBoolean
- uid: System.Double.System#IConvertible#ToByte*
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToByte
  nameWithType: Double.System.IConvertible.ToByte
- uid: System.Double.System#IConvertible#ToChar*
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToChar
  nameWithType: Double.System.IConvertible.ToChar
- uid: System.Double.System#IConvertible#ToDateTime*
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToDateTime
  nameWithType: Double.System.IConvertible.ToDateTime
- uid: System.Double.System#IConvertible#ToDecimal*
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToDecimal
  nameWithType: Double.System.IConvertible.ToDecimal
- uid: System.Double.System#IConvertible#ToDouble*
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToDouble
  nameWithType: Double.System.IConvertible.ToDouble
- uid: System.Double.System#IConvertible#ToInt16*
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToInt16
  nameWithType: Double.System.IConvertible.ToInt16
- uid: System.Double.System#IConvertible#ToInt32*
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToInt32
  nameWithType: Double.System.IConvertible.ToInt32
- uid: System.Double.System#IConvertible#ToInt64*
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToInt64
  nameWithType: Double.System.IConvertible.ToInt64
- uid: System.Double.System#IConvertible#ToSByte*
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToSByte
  nameWithType: Double.System.IConvertible.ToSByte
- uid: System.Double.System#IConvertible#ToSingle*
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToSingle
  nameWithType: Double.System.IConvertible.ToSingle
- uid: System.Double.System#IConvertible#ToType*
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToType
  nameWithType: Double.System.IConvertible.ToType
- uid: System.Double.System#IConvertible#ToUInt16*
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToUInt16
  nameWithType: Double.System.IConvertible.ToUInt16
- uid: System.Double.System#IConvertible#ToUInt32*
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToUInt32
  nameWithType: Double.System.IConvertible.ToUInt32
- uid: System.Double.System#IConvertible#ToUInt64*
  parent: System.Double
  isExternal: false
  name: System.IConvertible.ToUInt64
  nameWithType: Double.System.IConvertible.ToUInt64
- uid: System.Double.ToString*
  parent: System.Double
  isExternal: false
  name: ToString
  nameWithType: Double.ToString
- uid: System.Double.TryParse*
  parent: System.Double
  isExternal: false
  name: TryParse
  nameWithType: Double.TryParse
