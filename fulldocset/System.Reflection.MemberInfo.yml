### YamlMime:ManagedReference
items:
- uid: System.Reflection.MemberInfo
  id: MemberInfo
  children:
  - System.Reflection.MemberInfo.#ctor
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.Equals(System.Object)
  - System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
  - System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.GetCustomAttributesData
  - System.Reflection.MemberInfo.GetHashCode
  - System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.MemberType
  - System.Reflection.MemberInfo.MetadataToken
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.ReflectedType
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  langs:
  - csharp
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
  type: Class
  summary: Obtains information about the attributes of a member and provides access to member metadata.
  remarks: "The MemberInfo class is the abstract base class for classes used to obtain information about all members of a class (constructors, events, fields, methods, and properties).  \n  \n This class introduces the basic functionality that all members provide."
  example:
  - "This example shows how to use various reflection classes to analyze the metadata contained in an assembly.  \n  \n [!code-vb[Reflection#1](~/add/codesnippet/visualbasic/t-system.reflection.memb_1_1.vb)]\n [!code-cpp[Reflection#1](~/add/codesnippet/cpp/t-system.reflection.memb_1_1.cpp)]\n [!code-cs[Reflection#1](~/add/codesnippet/csharp/t-system.reflection.memb_1_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MemberInfo))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class MemberInfo : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo
  inheritance:
  - System.Object
  implements:
  - System.Reflection.ICustomAttributeProvider
  - System.Runtime.InteropServices._MemberInfo
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Reflection.MemberInfo.#ctor
  id: '#ctor'
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: MemberInfo()
  nameWithType: MemberInfo.MemberInfo()
  fullName: System.Reflection.MemberInfo.MemberInfo()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Initializes a new instance of the <xref href="System.Reflection.MemberInfo"></xref> class.
  remarks: Only a derived class can create this `MemberInfo` class.
  syntax:
    content: protected MemberInfo ();
    parameters: []
  overload: System.Reflection.MemberInfo.#ctor*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Reflection.MemberInfo.DeclaringType
  id: DeclaringType
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: DeclaringType
  nameWithType: MemberInfo.DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the class that declares this member.
  remarks: "The DeclaringType property retrieves a reference to the <xref:System.Type> object for the type that declares this member. A member of a type is either declared by the type or inherited from a base type, so the `Type` object returned by the DeclaringType property might not be the same as the `Type` object used to obtain the current <xref:System.Reflection.MemberInfo> object.  \n  \n-   If the `Type` object from which this `MemberInfo` object was obtained did not declare this member, the DeclaringType property will represent one of its base types.  \n  \n-   If the `MemberInfo` object is a global member (that is, if it was obtained from the <xref:System.Reflection.Module.GetMethods%2A?displayProperty=fullName> method, which returns global methods on a module), the returned DeclaringType will be `null`."
  example:
  - "The following example defines an interface, `IValue`, with a single member, `GetValue`. It also defines four classes: `A`, a base class that implements the `IValue` interface; `B`, which inherits from `A` and hides its implementation of `GetValue` from the base class implementation; `C`, which simply inherits from `A`; and `D`, which inherits from `A` and overrides its `GetValue` method.  The example then retrieves a <xref:System.Reflection.MemberInfo> object for each member of the type (including members inherited from <xref:System.Object>) and displays the value of its DeclaringType property.  \n  \n [!code-cs[Classic MemberInfo.DeclaringType Example#2](~/add/codesnippet/csharp/p-system.reflection.memb_4_1.cs)]\n [!code-vb[Classic MemberInfo.DeclaringType Example#2](~/add/codesnippet/visualbasic/p-system.reflection.memb_4_1.vb)]  \n  \n Note that the declaring type of `A.GetValue` is `A`, that `B` includes two `GetValue` methods, one declared by `A` and one by `B`, and that the declaring type of `D.GetValue` is `D`.  \n  \n> [!NOTE]\n>  `DeclaringType` returns only the member names and the names of their declaring types. To return the member names with their prototypes, call `MemberInfo.ToString`."
  syntax:
    content: public abstract Type DeclaringType { get; }
    return:
      type: System.Type
      description: The `Type` object for the class that declares this member.
  overload: System.Reflection.MemberInfo.DeclaringType*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: MemberInfo.Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a value that indicates whether this instance is equal to a specified object.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance, or `null`.
    return:
      type: System.Boolean
      description: '`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`.'
  overload: System.Reflection.MemberInfo.Equals*
  exceptions: []
  version:
  - netframework-40
- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
  id: GetCustomAttributes(System.Boolean)
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: GetCustomAttributes(Boolean)
  nameWithType: MemberInfo.GetCustomAttributes(Boolean)
  fullName: System.Reflection.MemberInfo.GetCustomAttributes(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: When overridden in a derived class, returns an array of all custom attributes applied to this member.
  remarks: "This method ignores the `inherit` parameter for properties and events. To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if they are stored in the new metadata format. Assemblies compiled with version 2.0 use this format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5)."
  example:
  - "The following example defines a custom attribute and associates the attribute with `MyClass.MyMethod`, retrieves the attribute at run time, and displays the result.  \n  \n [!code-cs[MemberInfo_GetCustomAttributes1#1](~/add/codesnippet/csharp/m-system.reflection.memb_2_1.cs)]\n [!code-cpp[MemberInfo_GetCustomAttributes1#1](~/add/codesnippet/cpp/m-system.reflection.memb_2_1.cpp)]\n [!code-vb[MemberInfo_GetCustomAttributes1#1](~/add/codesnippet/visualbasic/m-system.reflection.memb_2_1.vb)]"
  syntax:
    content: public abstract object[] GetCustomAttributes (bool inherit);
    parameters:
    - id: inherit
      type: System.Boolean
      description: '`true` to search this member''s inheritance chain to find the attributes; otherwise, `false`. This parameter is ignored for properties and events; see Remarks.'
    return:
      type: System.Object[]
      description: An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.
  overload: System.Reflection.MemberInfo.GetCustomAttributes*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'This member belongs to a type that is loaded into the reflection-only context. See [How to: Load Assemblies into the Reflection-Only Context](~/add/includes/ajax-current-ext-md.md).'
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: A custom attribute type could not be loaded.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)
  id: GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: MemberInfo.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.MemberInfo.GetCustomAttributes(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <xref href="System.Type"></xref>.
  remarks: "This method ignores the `inherit` parameter for properties and events. To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 use this format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5)."
  example:
  - "The following example defines a class named `BaseClass` that has two non-inherited members: a thread static field named `total` and a non-CLS-compliant method named `MethodA`.  A class named `DerivedClass` inherits from `BaseClass` and overrides its `MethodA` method. Note that no attributes are applied to the members of `DerivedClass`. The example iterates the members of `DerivedClass` to determine whether the <xref:System.CLSCompliantAttribute> or <xref:System.ThreadStaticAttribute> attribute as been applied to them. Because `inherit` is `true`, the method searches the inheritance hierarchy of `DerivedClass` for the specified attribute. As the output from the example shows, the `total` field is decorated with the <xref:System.ThreadStaticAttribute> attribute, and the `MethodA` method is decorated with the <xref:System.CLSCompliantAttribute> attribute.  \n  \n [!code-vb[System.Reflection.MemberInfo.GetCustomAttributes#1](~/add/codesnippet/visualbasic/m-system.reflection.memb_1_1.vb)]\n [!code-cs[System.Reflection.MemberInfo.GetCustomAttributes#1](~/add/codesnippet/csharp/m-system.reflection.memb_1_1.cs)]"
  syntax:
    content: public abstract object[] GetCustomAttributes (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The type of attribute to search for. Only attributes that are assignable to this type are returned.
    - id: inherit
      type: System.Boolean
      description: '`true` to search this member''s inheritance chain to find the attributes; otherwise, `false`. This parameter is ignored for properties and events; see Remarks.'
    return:
      type: System.Object[]
      description: An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to <code>attributeType</code> have been applied.
  overload: System.Reflection.MemberInfo.GetCustomAttributes*
  exceptions:
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: A custom attribute type cannot be loaded.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: If <code>attributeType</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'This member belongs to a type that is loaded into the reflection-only context. See [How to: Load Assemblies into the Reflection-Only Context](~/add/includes/ajax-current-ext-md.md).'
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Reflection.MemberInfo.GetCustomAttributesData
  id: GetCustomAttributesData
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: GetCustomAttributesData()
  nameWithType: MemberInfo.GetCustomAttributesData()
  fullName: System.Reflection.MemberInfo.GetCustomAttributesData()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns a list of <xref href="System.Reflection.CustomAttributeData"></xref> objects representing data about the attributes that have been applied to the target member.
  remarks: "Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> and <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class.  \n  \n This method gets custom attribute data for types, nested types, and type members, because the <xref:System.Type> class and the classes in the <xref:System.Reflection> namespace that represent type members all derive from <xref:System.Reflection.MemberInfo>."
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: A generic list of <xref href="System.Reflection.CustomAttributeData"></xref> objects representing data about the attributes that have been applied to the target member.
  overload: System.Reflection.MemberInfo.GetCustomAttributesData*
  exceptions: []
  version:
  - netframework-40
- uid: System.Reflection.MemberInfo.GetHashCode
  id: GetHashCode
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: MemberInfo.GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Reflection.MemberInfo.GetHashCode*
  exceptions: []
  version:
  - netframework-40
- uid: System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)
  id: IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: IsDefined(Type,Boolean)
  nameWithType: MemberInfo.IsDefined(Type,Boolean)
  fullName: System.Reflection.MemberInfo.IsDefined(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.
  remarks: "This method ignores the `inherit` parameter for properties and events. To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <xref:System.Attribute.IsDefined%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  In the .NET Framework version 2.0, this method returns `true` if a type, method, or constructor has security attributes stored in the new metadata format. Assemblies compiled with version 2.0 use this format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5)."
  example:
  - "The following example determines whether the specified attribute is applied to the specified member.  \n  \n [!code-cs[MemberInfo_GetCustomAttribute_IsDefined#1](~/add/codesnippet/csharp/m-system.reflection.memb_0_1.cs)]\n [!code-vb[MemberInfo_GetCustomAttribute_IsDefined#1](~/add/codesnippet/visualbasic/m-system.reflection.memb_0_1.vb)]\n [!code-cpp[MemberInfo_GetCustomAttribute_IsDefined#1](~/add/codesnippet/cpp/m-system.reflection.memb_0_1.cpp)]"
  syntax:
    content: public abstract bool IsDefined (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The type of custom attribute to search for. The search includes derived types.
    - id: inherit
      type: System.Boolean
      description: '`true` to search this member''s inheritance chain to find the attributes; otherwise, `false`. This parameter is ignored for properties and events; see Remarks.'
    return:
      type: System.Boolean
      description: '`true` if one or more instances of <code>attributeType</code> or any of its derived types is applied to this member; otherwise, `false`.'
  overload: System.Reflection.MemberInfo.IsDefined*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Reflection.MemberInfo.MemberType
  id: MemberType
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: MemberType
  nameWithType: MemberInfo.MemberType
  fullName: System.Reflection.MemberInfo.MemberType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: When overridden in a derived class, gets a <xref href="System.Reflection.MemberTypes"></xref> value indicating the type of the member — method, constructor, event, and so on.
  remarks: "This property is overridden in derived classes, and the override returns the appropriate member type. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the MemberType property can be used to determine the member type of any given member.  \n  \n To get the `MemberType` property, get the class <xref:System.Type>. From the `Type`, get the <xref:System.Reflection.MethodInfo> array. From the `MethodInfo` array, get the `MemberTypes`."
  example:
  - "The following example displays the member name and type of a specified class.  \n  \n [!code-cpp[Classic MemberInfo.MemberType Example#1](~/add/codesnippet/cpp/p-system.reflection.memb_1_1.cpp)]\n [!code-cs[Classic MemberInfo.MemberType Example#1](~/add/codesnippet/csharp/p-system.reflection.memb_1_1.cs)]\n [!code-vb[Classic MemberInfo.MemberType Example#1](~/add/codesnippet/visualbasic/p-system.reflection.memb_1_1.vb)]"
  syntax:
    content: public abstract System.Reflection.MemberTypes MemberType { get; }
    return:
      type: System.Reflection.MemberTypes
      description: A <xref href="System.Reflection.MemberTypes"></xref> value indicating the type of member.
  overload: System.Reflection.MemberInfo.MemberType*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Reflection.MemberInfo.MetadataToken
  id: MetadataToken
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: MetadataToken
  nameWithType: MemberInfo.MetadataToken
  fullName: System.Reflection.MemberInfo.MetadataToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a value that identifies a metadata element.
  remarks: "The tokens obtained using this property can be passed to the unmanaged reflection API. For more information, please see [Unmanaged Reflection API](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).  \n  \n> [!NOTE]\n>  Using the unmanaged reflection API requires familiarity with the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: public virtual int MetadataToken { get; }
    return:
      type: System.Int32
      description: A value which, in combination with <xref:System.Reflection.MemberInfo.Module*>, uniquely identifies a metadata element.
  overload: System.Reflection.MemberInfo.MetadataToken*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current <xref href="System.Reflection.MemberInfo"></xref> represents an array method, such as `Address`, on an array type whose element type is a dynamic type that has not been completed. To get a metadata token in this case, pass the <xref href="System.Reflection.MemberInfo"></xref> object to the &lt;xref:System.Reflection.Emit.ModuleBuilder.GetMethodToken%2A?displayProperty=fullName&gt; method; or use the &lt;xref:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken%2A?displayProperty=fullName&gt; method to get the token directly, instead of using the &lt;xref:System.Reflection.Emit.ModuleBuilder.GetArrayMethod%2A?displayProperty=fullName&gt; method to get a <xref href="System.Reflection.MethodInfo"></xref> first.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Reflection.MemberInfo.Module
  id: Module
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: Module
  nameWithType: MemberInfo.Module
  fullName: System.Reflection.MemberInfo.Module
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the module in which the type that declares the member represented by the current <xref href="System.Reflection.MemberInfo"></xref> is defined.
  remarks: This property is provided as a convenience. It is equivalent to using the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property to get the type in which the method is declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.
  example:
  - "The following code example declares a class that inherits <xref:System.Object> and overrides <xref:System.Object.ToString%2A?displayProperty=fullName>. The example obtains <xref:System.Reflection.MethodInfo> objects for the class's `ToString` method and for the inherited <xref:System.Object.GetHashCode%2A> method, and displays the names of the modules in which the two methods are declared.  \n  \n [!code-vb[System.Reflection.MemberInfo.Module#1](~/add/codesnippet/visualbasic/p-system.reflection.memb_2_1.vb)]\n [!code-cs[System.Reflection.MemberInfo.Module#1](~/add/codesnippet/csharp/p-system.reflection.memb_2_1.cs)]\n [!code-cpp[System.Reflection.MemberInfo.Module#1](~/add/codesnippet/cpp/p-system.reflection.memb_2_1.cpp)]"
  syntax:
    content: public virtual System.Reflection.Module Module { get; }
    return:
      type: System.Reflection.Module
      description: The <xref href="System.Reflection.Module"></xref> in which the type that declares the member represented by the current <xref href="System.Reflection.MemberInfo"></xref> is defined.
  overload: System.Reflection.MemberInfo.Module*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: This method is not implemented.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Reflection.MemberInfo.Name
  id: Name
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: Name
  nameWithType: MemberInfo.Name
  fullName: System.Reflection.MemberInfo.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the name of the current member.
  remarks: "Only the simple name of the member is returned, not the fully qualified name.  \n  \n To get the Name property, get the class <xref:System.Type>. From the `Type`, get the <xref:System.Reflection.MemberInfo> array. From a `MemberInfo` element of the array, obtain the `Name` property."
  example:
  - "This example lists the `Name` and `DeclaringType` property of each member of the specified class.  \n  \n [!code-cpp[Classic MemberInfo.Name Example#1](~/add/codesnippet/cpp/p-system.reflection.memb_0_1.cpp)]\n [!code-cs[Classic MemberInfo.Name Example#1](~/add/codesnippet/csharp/p-system.reflection.memb_0_1.cs)]\n [!code-vb[Classic MemberInfo.Name Example#1](~/add/codesnippet/visualbasic/p-system.reflection.memb_0_1.vb)]"
  syntax:
    content: public abstract string Name { get; }
    return:
      type: System.String
      description: A <xref href="System.String"></xref> containing the name of this member.
  overload: System.Reflection.MemberInfo.Name*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  id: op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: op_Equality(MemberInfo,MemberInfo)
  nameWithType: MemberInfo.op_Equality(MemberInfo,MemberInfo)
  fullName: System.Reflection.MemberInfo.op_Equality(MemberInfo,MemberInfo)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Indicates whether two <xref href="System.Reflection.MemberInfo"></xref> objects are equal.
  syntax:
    content: public static bool op_Equality (System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);
    parameters:
    - id: left
      type: System.Reflection.MemberInfo
      description: The <xref href="System.Reflection.MemberInfo"></xref> to compare to `right`.
    - id: right
      type: System.Reflection.MemberInfo
      description: The <xref href="System.Reflection.MemberInfo"></xref> to compare to `left`.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is equal to <code>right</code>; otherwise `false`.'
  overload: System.Reflection.MemberInfo.op_Equality*
  exceptions: []
  version:
  - netframework-40
- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  id: op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: op_Inequality(MemberInfo,MemberInfo)
  nameWithType: MemberInfo.op_Inequality(MemberInfo,MemberInfo)
  fullName: System.Reflection.MemberInfo.op_Inequality(MemberInfo,MemberInfo)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Indicates whether two <xref href="System.Reflection.MemberInfo"></xref> objects are not equal.
  syntax:
    content: public static bool op_Inequality (System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);
    parameters:
    - id: left
      type: System.Reflection.MemberInfo
      description: The <xref href="System.Reflection.MemberInfo"></xref> to compare to `right`.
    - id: right
      type: System.Reflection.MemberInfo
      description: The <xref href="System.Reflection.MemberInfo"></xref> to compare to `left`.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is not equal to <code>right</code>; otherwise `false`.'
  overload: System.Reflection.MemberInfo.op_Inequality*
  exceptions: []
  version:
  - netframework-40
- uid: System.Reflection.MemberInfo.ReflectedType
  id: ReflectedType
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: ReflectedType
  nameWithType: MemberInfo.ReflectedType
  fullName: System.Reflection.MemberInfo.ReflectedType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the class object that was used to obtain this instance of `MemberInfo`.
  remarks: "The `ReflectedType` property retrieves the <xref:System.Type> object that was used to obtain this instance of `MemberInfo`. This may differ from the value of the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property if this <xref:System.Reflection.MemberInfo> object represents a member that is inherited from a base class.  \n  \n If the `MemberInfo` object is a global member (that is, if it was obtained from the <xref:System.Reflection.Module.GetMethods%2A?displayProperty=fullName> method, which returns global methods on a module), the returned <xref:System.Reflection.MemberInfo.DeclaringType%2A> will be `null`."
  example:
  - "The following code example shows how the ReflectedType changes when the member <xref:System.Object.ToString%2A?displayProperty=fullName> is viewed from a <xref:System.Reflection.MemberInfo> obtained from type <xref:System.Object> and from a <xref:System.Reflection.MemberInfo> obtained from the <xref:System.Reflection.MemberInfo> class itself, which inherits <xref:System.Object> but does not override <xref:System.Object.ToString%2A?displayProperty=fullName>.  \n  \n [!code-cpp[Classic MemberInfo.ReflectedType Example#1](~/add/codesnippet/cpp/p-system.reflection.memb_3_1.cpp)]\n [!code-cs[Classic MemberInfo.ReflectedType Example#1](~/add/codesnippet/csharp/p-system.reflection.memb_3_1.cs)]\n [!code-vb[Classic MemberInfo.ReflectedType Example#1](~/add/codesnippet/visualbasic/p-system.reflection.memb_3_1.vb)]"
  syntax:
    content: public abstract Type ReflectedType { get; }
    return:
      type: System.Type
      description: The `Type` object through which this `MemberInfo` object was obtained.
  overload: System.Reflection.MemberInfo.ReflectedType*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: MemberInfo.System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _MemberInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: Passed-in array of names to be mapped.
    - id: cNames
      type: System.UInt32
      description: Count of the names to be mapped.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: Caller-allocated array which receives the IDs corresponding to the names.
  overload: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: The method is called late-bound using the COM `IDispatch` interface.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
  id: System#Runtime#InteropServices#_MemberInfo#GetType
  isEii: true
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: System.Runtime.InteropServices._MemberInfo.GetType()
  nameWithType: MemberInfo.System.Runtime.InteropServices._MemberInfo.GetType()
  fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a <xref href="System.Type"></xref> object representing the <xref href="System.Reflection.MemberInfo"></xref> class.
  syntax:
    content: Type _MemberInfo.GetType ();
    parameters: []
    return:
      type: System.Type
      description: A <xref href="System.Type"></xref> object representing the <xref href="System.Reflection.MemberInfo"></xref> class.
  overload: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: System.Runtime.InteropServices._MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _MemberInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: Receives a pointer to the requested type information object.
  overload: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: The method is called late-bound using the COM `IDispatch` interface.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(UInt32)
  nameWithType: MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _MemberInfo.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: Points to a location that receives the number of type information interfaces provided by the object.
  overload: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: The method is called late-bound using the COM `IDispatch` interface.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  name: System.Runtime.InteropServices._MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: MemberInfo.System.Runtime.InteropServices._MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _MemberInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: Identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: Pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: Pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  overload: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: The method is called late-bound using the COM `IDispatch` interface.
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.TypeLoadException
  parent: System
  isExternal: false
  name: TypeLoadException
  nameWithType: TypeLoadException
  fullName: System.TypeLoadException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotImplementedException
  parent: System
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.Reflection.MemberInfo.#ctor
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: MemberInfo()
  nameWithType: MemberInfo.MemberInfo()
  fullName: System.Reflection.MemberInfo.MemberInfo()
- uid: System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  nameWithType: MemberInfo.DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Equals(Object)
  nameWithType: MemberInfo.Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetCustomAttributes(Boolean)
  nameWithType: MemberInfo.GetCustomAttributes(Boolean)
  fullName: System.Reflection.MemberInfo.GetCustomAttributes(Boolean)
- uid: System.Object[]
  parent: System
  isExternal: false
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetCustomAttributes(Type,Boolean)
  nameWithType: MemberInfo.GetCustomAttributes(Type,Boolean)
  fullName: System.Reflection.MemberInfo.GetCustomAttributes(Type,Boolean)
- uid: System.Reflection.MemberInfo.GetCustomAttributesData
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetCustomAttributesData()
  nameWithType: MemberInfo.GetCustomAttributesData()
  fullName: System.Reflection.MemberInfo.GetCustomAttributesData()
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<CustomAttributeData>
  nameWithType: IList<CustomAttributeData>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeData>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Reflection.CustomAttributeData>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    nameWithType: CustomAttributeData
    fullName: CustomAttributeData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MemberInfo.GetHashCode
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: MemberInfo.GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: IsDefined(Type,Boolean)
  nameWithType: MemberInfo.IsDefined(Type,Boolean)
  fullName: System.Reflection.MemberInfo.IsDefined(Type,Boolean)
- uid: System.Reflection.MemberInfo.MemberType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: MemberType
  nameWithType: MemberInfo.MemberType
  fullName: System.Reflection.MemberInfo.MemberType
- uid: System.Reflection.MemberTypes
  parent: System.Reflection
  isExternal: false
  name: MemberTypes
  nameWithType: MemberTypes
  fullName: System.Reflection.MemberTypes
- uid: System.Reflection.MemberInfo.MetadataToken
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: MetadataToken
  nameWithType: MemberInfo.MetadataToken
  fullName: System.Reflection.MemberInfo.MetadataToken
- uid: System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  nameWithType: MemberInfo.Module
  fullName: System.Reflection.MemberInfo.Module
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  nameWithType: MemberInfo.Name
  fullName: System.Reflection.MemberInfo.Name
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: op_Equality(MemberInfo,MemberInfo)
  nameWithType: MemberInfo.op_Equality(MemberInfo,MemberInfo)
  fullName: System.Reflection.MemberInfo.op_Equality(MemberInfo,MemberInfo)
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: op_Inequality(MemberInfo,MemberInfo)
  nameWithType: MemberInfo.op_Inequality(MemberInfo,MemberInfo)
  fullName: System.Reflection.MemberInfo.op_Inequality(MemberInfo,MemberInfo)
- uid: System.Reflection.MemberInfo.ReflectedType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: ReflectedType
  nameWithType: MemberInfo.ReflectedType
  fullName: System.Reflection.MemberInfo.ReflectedType
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: MemberInfo.System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: System.Runtime.InteropServices._MemberInfo.GetType()
  nameWithType: MemberInfo.System.Runtime.InteropServices._MemberInfo.GetType()
  fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetType()
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: System.Runtime.InteropServices._MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfo(UInt32,UInt32,IntPtr)
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(UInt32)
  nameWithType: MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(UInt32)
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: System.Runtime.InteropServices._MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: MemberInfo.System.Runtime.InteropServices._MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Reflection.MemberInfo.#ctor*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo.MemberInfo
- uid: System.Reflection.MemberInfo.DeclaringType*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  nameWithType: MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.Equals*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Equals
  nameWithType: MemberInfo.Equals
- uid: System.Reflection.MemberInfo.GetCustomAttributes*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetCustomAttributes
  nameWithType: MemberInfo.GetCustomAttributes
- uid: System.Reflection.MemberInfo.GetCustomAttributesData*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetCustomAttributesData
  nameWithType: MemberInfo.GetCustomAttributesData
- uid: System.Reflection.MemberInfo.GetHashCode*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetHashCode
  nameWithType: MemberInfo.GetHashCode
- uid: System.Reflection.MemberInfo.IsDefined*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: IsDefined
  nameWithType: MemberInfo.IsDefined
- uid: System.Reflection.MemberInfo.MemberType*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: MemberType
  nameWithType: MemberInfo.MemberType
- uid: System.Reflection.MemberInfo.MetadataToken*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: MetadataToken
  nameWithType: MemberInfo.MetadataToken
- uid: System.Reflection.MemberInfo.Module*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  nameWithType: MemberInfo.Module
- uid: System.Reflection.MemberInfo.Name*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  nameWithType: MemberInfo.Name
- uid: System.Reflection.MemberInfo.op_Equality*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: op_Equality
  nameWithType: MemberInfo.op_Equality
- uid: System.Reflection.MemberInfo.op_Inequality*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: op_Inequality
  nameWithType: MemberInfo.op_Inequality
- uid: System.Reflection.MemberInfo.ReflectedType*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: ReflectedType
  nameWithType: MemberInfo.ReflectedType
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: System.Runtime.InteropServices._MemberInfo.GetIDsOfNames
  nameWithType: MemberInfo.System.Runtime.InteropServices._MemberInfo.GetIDsOfNames
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: System.Runtime.InteropServices._MemberInfo.GetType
  nameWithType: MemberInfo.System.Runtime.InteropServices._MemberInfo.GetType
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: System.Runtime.InteropServices._MemberInfo.GetTypeInfo
  nameWithType: MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfo
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount
  nameWithType: MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke*
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: System.Runtime.InteropServices._MemberInfo.Invoke
  nameWithType: MemberInfo.System.Runtime.InteropServices._MemberInfo.Invoke
