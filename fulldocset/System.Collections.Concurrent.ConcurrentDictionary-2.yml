### YamlMime:ManagedReference
items:
- uid: System.Collections.Concurrent.ConcurrentDictionary`2
  id: ConcurrentDictionary`2
  children:
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.Clear
  - System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Count
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty
  - System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Keys
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Values
  langs:
  - csharp
  name: ConcurrentDictionary<TKey,TValue>
  nameWithType: ConcurrentDictionary<TKey,TValue>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>
  type: Class
  summary: Represents a thread-safe collection of key/value pairs that can be accessed by multiple threads concurrently.
  remarks: "For very large ConcurrentDictionary(TKey, objects, you can increase the maximum array size to 2 gigabytes (GB) on a 64-bit system by setting the  configuration element to `true` in the run-time environment.  \n  \n> [!NOTE]\n>  ConcurrentDictionary(TKey, implements the <xref:System.Collections.Generic.IReadOnlyCollection%601> and <xref:System.Collections.Generic.IReadOnlyDictionary%602> interfaces starting with the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)]; in previous versions of the .NET Framework, the ConcurrentDictionary(TKey, class did not implement these interfaces.  \n  \n Like the <xref:System.Collections.Generic.Dictionary%602?displayProperty=fullName> class, ConcurrentDictionary(TKey, implements the <xref:System.Collections.Generic.IDictionary%602> interface. In addition, ConcurrentDictionary(TKey, provides several methods for adding or updating key/value pairs in the dictionary, as described in the following table.  \n  \n|To do this|Use this method|Usage notes|  \n|----------------|---------------------|-----------------|  \n|Add a new key to the dictionary, if it doesn’t already exist in the dictionary|<xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryAdd%2A>|This method adds the specified key/value pair, if the key doesn’t currently exist in the dictionary. The method returns `true` or `false` depending on whether the new pair was added.|  \n|Update the value for an existing key in the dictionary, if that key has a specific value|<xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryUpdate%2A>|This method checks whether the key has a specified value, and if it does, updates the key with a new value. It's similar to the <xref:System.Threading.Interlocked.CompareExchange%2A> method, except that it's used for dictionary elements.|  \n|Store a key/value pair in the dictionary unconditionally, and overwrite the value of a key that already exists|The indexer’s setter: `dictionary[key] = newValue`||  \n|Add a key/value pair to the dictionary, or if the key already exists, update the value for the key based on the key’s existing value|<xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2CSystem.Func%7B%600%2C%601%7D%2CSystem.Func%7B%600%2C%601%2C%601%7D%29><br /><br /> —or—<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2C%601%2CSystem.Func%7B%600%2C%601%2C%601%7D%29>|<xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2CSystem.Func%7B%600%2C%601%7D%2CSystem.Func%7B%600%2C%601%2C%601%7D%29> accepts the key and two delegates. It uses the first delegate if the key doesn’t exist in the dictionary; it accepts the key and returns the value that should be added for the key. It uses the second delegate if the key does exist; it accepts the key and its current value, and it returns the new value that should be set for the key.<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%28%600%2C%601%2CSystem.Func%7B%600%2C%601%2C%601%7D%29> accepts the key, a value to add, and the update delegate. This is the same as the previous overload, except that it doesn't use a delegate to add a key.|  \n|Get the value for a key in the dictionary, adding the value to the dictionary and returning it if the key doesn’t exist|<xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2C%601%29><br /><br /> —or—<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2CSystem.Func%7B%600%2C%601%7D%29>|These overloads provide lazy initialization for a key/value pair in the dictionary, adding the value only if it’s not there.<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2C%601%29> takes the value to be added if the key doesn’t exist.<br /><br /> <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%28%600%2CSystem.Func%7B%600%2C%601%7D%29> takes a delegate that will generate the value if the key doesn’t exist.|  \n  \n All these operations are atomic and are thread-safe with regards to all other operations on the ConcurrentDictionary(TKey, class. The only exceptions are the methods that accept a delegate, that is, <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A> and <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetOrAdd%2A>. For modifications and write operations to the dictionary, ConcurrentDictionary(TKey, uses fine-grained locking to ensure thread safety. (Read operations on the dictionary are performed in a lock-free manner.) However, delegates for these methods are called outside the locks to avoid the problems that can arise from executing unknown code under a lock. Therefore, the code executed by these delegates is not subject to the atomicity of the operation."
  example:
  - "The following example shows how to construct a ConcurrentDictionary(TKey, object.  \n  \n [!code-vb[System.Collections.Concurrent.ConcurrentDictionary#1](~/add/codesnippet/visualbasic/t-system.collections.con_3_1.vb)]\n [!code-cs[System.Collections.Concurrent.ConcurrentDictionary#1](~/add/codesnippet/csharp/t-system.collections.con_3_1.cs)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_DictionaryDebugView`2))]

      [System.Runtime.InteropServices.ComVisible(false)]

      public class ConcurrentDictionary<TKey,TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IDictionary<TKey,TValue>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>, System.Collections.IDictionary
    typeParameters:
    - id: TKey
      description: The type of the keys in the dictionary.
    - id: TValue
      description: The type of the values in the dictionary.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  - System.Collections.Generic.IDictionary<TKey,TValue>
  - System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  - System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  - System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>
  - System.Collections.IDictionary
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ConcurrentDictionary<TKey,TValue>()
  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.
  remarks: The default concurrency level is the default concurrency multiplier (DEFAULT_CONCURRENCY_MULTIPLIER) times the number of CPUs. The higher the default concurrency multiplier is, the more concurrent write operations can take place without interference and blocking. Higher multiplier values also cause operations that require all locks (for example, table resizing, `ToArray` and `Count`) to become more expensive. The default concurrency multiplier is 4. The default capacity (DEFAULT_CAPACITY), which represents the initial number of buckets, is a trade-off between the size of a very small dictionary and the number of resizes when constructing a large dictionary. Also, the capacity should not be divisible by a small prime number. The default capacity is 31.
  syntax:
    content: public ConcurrentDictionary ();
    parameters: []
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> class that contains elements copied from the specified <xref href="stem.Collections.Generic.IEnumerable%601"></xref>, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.
  syntax:
    content: public ConcurrentDictionary (System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}
      description: The <xref href="stem.Collections.Generic.IEnumerable%601"></xref> whose elements are copied to the new <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>collection</code> or any of its keys is  `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>collection</code> contains one or more duplicate keys.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ConcurrentDictionary<TKey,TValue>(IEqualityComparer<TKey>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEqualityComparer<TKey>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEqualityComparer<TKey>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> class that is empty, has the default concurrency level and capacity, and uses the specified <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref>.
  syntax:
    content: public ConcurrentDictionary (System.Collections.Generic.IEqualityComparer<TKey> comparer);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: The equality comparison implementation to use when comparing keys.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>comparer</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> class that contains elements copied from the specified <xref href="System.Collections.IEnumerable"></xref> has the default concurrency level, has the default initial capacity, and uses the specified  <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref>.
  syntax:
    content: public ConcurrentDictionary (System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>> collection, System.Collections.Generic.IEqualityComparer<TKey> comparer);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}
      description: The <xref href="stem.Collections.Generic.IEnumerable%601"></xref> whose elements are copied to the new <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: The <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> implementation to use when comparing keys.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>collection</code> or <code>comparer</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ConcurrentDictionary<TKey,TValue>(Int32,Int32)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32,Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> class that is empty, has the specified concurrency level and capacity, and uses the default comparer for the key type.
  syntax:
    content: public ConcurrentDictionary (int concurrencyLevel, int capacity);
    parameters:
    - id: concurrencyLevel
      type: System.Int32
      description: The estimated number of threads that will update the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> concurrently.
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> can contain.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>concurrencyLevel</code> is less than 1.  \n  \n -or-  \n  \n <code>capacity</code> is less than 0."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ConcurrentDictionary<TKey,TValue>(Int32,IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32,IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32,IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> class that contains elements copied from the specified <xref href="System.Collections.IEnumerable"></xref>, and uses the specified <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref>.
  syntax:
    content: public ConcurrentDictionary (int concurrencyLevel, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>> collection, System.Collections.Generic.IEqualityComparer<TKey> comparer);
    parameters:
    - id: concurrencyLevel
      type: System.Int32
      description: The estimated number of threads that will update the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> concurrently.
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}
      description: The <xref href="stem.Collections.Generic.IEnumerable%601"></xref> whose elements are copied to the new <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: The <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> implementation to use when comparing keys.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>collection</code> or <code>comparer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>concurrencyLevel</code> is less than 1.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>collection</code> contains one or more duplicate keys.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ConcurrentDictionary<TKey,TValue>(Int32,Int32,IEqualityComparer<TKey>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32,Int32,IEqualityComparer<TKey>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32,Int32,IEqualityComparer<TKey>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> class that is empty, has the specified concurrency level, has the specified initial capacity, and uses the specified <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref>.
  syntax:
    content: public ConcurrentDictionary (int concurrencyLevel, int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer);
    parameters:
    - id: concurrencyLevel
      type: System.Int32
      description: The estimated number of threads that will update the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> concurrently.
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> can contain.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{TKey}
      description: The <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> implementation to use when comparing keys.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>comparer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>concurrencyLevel</code> or <code>capacity</code> is less than 1.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  id: AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Uses the specified functions to add a key/value pair to the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> if the key does not already exist, or to update a key/value pair in the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> if the key already exists.
  remarks: If you call AddOrUpdate simultaneously on different threads, `addValueFactory` may be called multiple times, but its key/value pair might not be added to the dictionary for every call.
  syntax:
    content: public TValue AddOrUpdate (TKey key, Func<TKey,TValue> addValueFactory, Func<TKey,TValue,TValue> updateValueFactory);
    parameters:
    - id: key
      type: TKey
      description: The key to be added or whose value should be updated
    - id: addValueFactory
      type: System.Func{TKey,TValue}
      description: The function used to generate a value for an absent key
    - id: updateValueFactory
      type: System.Func{TKey,TValue,TValue}
      description: The function used to generate a new value for an existing key based on the key's existing value
    return:
      type: TValue
      description: The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code>, <code>addValueFactory</code>, or <code>updateValueFactory</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The dictionary already contains the maximum number of elements (<xref href="System.Int32.MaxValue"></xref>).
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  id: AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Adds a key/value pair to the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> if the key does not already exist, or updates a key/value pair in the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> by using the specified function if the key already exists.
  remarks: ''
  example:
  - "The following code example shows how to initialize an <xref:System.Collections.Concurrent.ConcurrentDictionary%602> and how to use the AddOrUpdate method to add an additional item to the collection, and update the existing items.  \n  \n [!code-vb[System.Collections.ConcurrentColAddUpdate#1](~/add/codesnippet/visualbasic/899de909-47a6-4383-b675-_1.vb)]\n [!code-cs[System.Collections.ConcurrentColAddUpdate#1](~/add/codesnippet/csharp/899de909-47a6-4383-b675-_1.cs)]"
  syntax:
    content: public TValue AddOrUpdate (TKey key, TValue addValue, Func<TKey,TValue,TValue> updateValueFactory);
    parameters:
    - id: key
      type: TKey
      description: The key to be added or whose value should be updated
    - id: addValue
      type: TValue
      description: The value to be added for an absent key
    - id: updateValueFactory
      type: System.Func{TKey,TValue,TValue}
      description: The function used to generate a new value for an existing key based on the key's existing value
    return:
      type: TValue
      description: The new value for the key. This will be either be addValue (if the key was absent) or the result of updateValueFactory (if the key was present).
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> or <code>updateValueFactory</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The dictionary already contains the maximum number of elements (<xref href="System.Int32.MaxValue"></xref>).
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear
  id: Clear
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: Clear()
  nameWithType: ConcurrentDictionary<TKey,TValue>.Clear()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Removes all keys and values from the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.Clear*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ContainsKey(TKey)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ContainsKey(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ContainsKey(TKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Determines whether the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> contains the specified key.
  syntax:
    content: public bool ContainsKey (TKey key);
    parameters:
    - id: key
      type: TKey
      description: The key to locate in the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> contains an element with the specified key; otherwise, `false`.'
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count
  id: Count
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: Count
  nameWithType: ConcurrentDictionary<TKey,TValue>.Count
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets the number of key/value pairs contained in the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
  remarks: This property has snapshot semantics and represents the number of items in the <xref:System.Collections.Concurrent.ConcurrentDictionary%602?displayProperty=fullName> at the moment when the property was accessed.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of key/value pairs contained in the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.Count*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The dictionary already contains the maximum number of elements (<xref href="System.Int32.MaxValue"></xref>).
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ConcurrentDictionary<TKey,TValue>.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Returns an enumerator that iterates through the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
  remarks: The enumerator returned from the dictionary is safe to use concurrently with reads and writes to the dictionary, however it does not represent a moment-in-time snapshot of the dictionary. The contents exposed through the enumerator may contain modifications made to the dictionary after GetEnumerator was called.
  syntax:
    content: public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{TKey,TValue}}
      description: An enumerator for the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
  id: GetOrAdd(`0,System.Func{`0,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: GetOrAdd(TKey,Func<TKey,TValue>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,Func<TKey,TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,Func<TKey,TValue>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Adds a key/value pair to the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> by using the specified function, if the key does not already exist.
  remarks: If you call GetOrAdd simultaneously on different threads, `addValueFactory` may be called multiple times, but its key/value pair might not be added to the dictionary for every call.
  syntax:
    content: public TValue GetOrAdd (TKey key, Func<TKey,TValue> valueFactory);
    parameters:
    - id: key
      type: TKey
      description: The key of the element to add.
    - id: valueFactory
      type: System.Func{TKey,TValue}
      description: The function used to generate a value for the key
    return:
      type: TValue
      description: The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value for the key as returned by valueFactory if the key was not in the dictionary.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> or <code>valueFactory</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The dictionary already contains the maximum number of elements (<xref href="System.Int32.MaxValue"></xref>).
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
  id: GetOrAdd(`0,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: GetOrAdd(TKey,TValue)
  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Adds a key/value pair to the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> if the key does not already exist.
  syntax:
    content: public TValue GetOrAdd (TKey key, TValue value);
    parameters:
    - id: key
      type: TKey
      description: The key of the element to add.
    - id: value
      type: TValue
      description: the value to be added, if the key does not already exist
    return:
      type: TValue
      description: The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The dictionary already contains the maximum number of elements (<xref href="System.Int32.MaxValue"></xref>).
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty
  id: IsEmpty
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: IsEmpty
  nameWithType: ConcurrentDictionary<TKey,TValue>.IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IsEmpty
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets a value that indicates whether the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> is empty.
  syntax:
    content: public bool IsEmpty { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> is empty; otherwise, `false`.'
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: Item(TKey)
  nameWithType: ConcurrentDictionary<TKey,TValue>.Item(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Item(TKey)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets or sets the value associated with the specified key.
  syntax:
    content: public TValue this[TKey key] { get; set; }
    parameters:
    - id: key
      type: TKey
      description: The key of the value to get or set.
    return:
      type: TValue
      description: The value of the key/value pair at the specified index.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is  `null`.
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: The property is retrieved and <code>key</code> does not exist in the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys
  id: Keys
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: Keys
  nameWithType: ConcurrentDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets a collection containing the keys in the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  syntax:
    content: public System.Collections.Generic.ICollection<TKey> Keys { get; }
    return:
      type: System.Collections.Generic.ICollection{TKey}
      description: A collection of keys in the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.Keys*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: void ICollection<KeyValuePair<TKey,TValue>>.Add (System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair);
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair`2
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Add*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: bool ICollection<KeyValuePair<TKey,TValue>>.Contains (System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair);
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair`2
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Contains*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[],Int32)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[],Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: void ICollection<KeyValuePair<TKey,TValue>>.CopyTo (System.Collections.Generic.KeyValuePair<TKey,TValue>[] array, int index);
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{TKey,TValue}[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#CopyTo*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: bool ICollection<KeyValuePair<TKey,TValue>>.Remove (System.Collections.Generic.KeyValuePair<TKey,TValue> keyValuePair);
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair`2
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Remove*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  id: System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: IDictionary<TKey,TValue>.Add(TKey,TValue)
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Add(TKey,TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Add(TKey,TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: void IDictionary<TKey,TValue>.Add (TKey key, TValue value);
    parameters:
    - id: key
      type: TKey
      description: To be added.
    - id: value
      type: TValue
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary<TKey,TValue>#Add*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  id: System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: IDictionary<TKey,TValue>.Remove(TKey)
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Remove(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Remove(TKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: bool IDictionary<TKey,TValue>.Remove (TKey key);
    parameters:
    - id: key
      type: TKey
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary<TKey,TValue>#Remove*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: IReadOnlyDictionary<TKey,TValue>.Keys
  nameWithType: ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: System.Collections.Generic.IEnumerable<TKey> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys { get; }
    return:
      type: System.Collections.Generic.IEnumerable{TKey}
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary<TKey,TValue>#Keys*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: IReadOnlyDictionary<TKey,TValue>.Values
  nameWithType: ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  syntax:
    content: System.Collections.Generic.IEnumerable<TValue> System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values { get; }
    return:
      type: System.Collections.Generic.IEnumerable{TValue}
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary<TKey,TValue>#Values*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Copies the elements of the <xref href="System.Collections.ICollection"></xref> to an array, starting at the specified array index.
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array that is the destination of the elements copied from the <xref href="System.Collections.ICollection"></xref>. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than 0.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code> is equal to or greater than the length of the <code>array</code>.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets a value indicating whether access to the <xref href="System.Collections.ICollection"></xref> is synchronized with the SyncRoot.
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: '`true` if access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe); otherwise, `false`. For <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> this property always returns **false**.'
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>. This property is not supported.
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: Always returns null.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This property is not supported.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  id: System#Collections#IDictionary#Add(System.Object,System.Object)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: IDictionary.Add(Object,Object)
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Add(Object,Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Adds the specified key and value to the dictionary.
  syntax:
    content: void IDictionary.Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: The object to use as the key.
    - id: value
      type: System.Object
      description: The object to use as the value.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>key</code> is of a type that is not assignable to the key type  of the <xref href=\"stem.Collections.Generic.Dictionary%602\"></xref>.  \n  \n -or-  \n  \n <code>value</code> is of a type that is not assignable to the type of values in the <xref href=\"stem.Collections.Generic.Dictionary%602\"></xref>.  \n  \n -or-  \n  \n A value with the same key already exists in the <xref href=\"stem.Collections.Generic.Dictionary%602\"></xref>."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The dictionary already contains the maximum number of elements (<xref href="System.Int32.MaxValue"></xref>).
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
  id: System#Collections#IDictionary#Contains(System.Object)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: IDictionary.Contains(Object)
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Contains(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets whether the <xref href="stem.Collections.Generic.IDictionary%602"></xref> contains an element with the specified key.
  syntax:
    content: bool IDictionary.Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: The key to locate in the <xref href="stem.Collections.Generic.IDictionary%602"></xref>.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.IDictionary%602"></xref> contains an element with the specified key; otherwise, `false`.'
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
  id: System#Collections#IDictionary#GetEnumerator
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: IDictionary.GetEnumerator()
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Provides a <xref href="System.Collections.IDictionaryEnumerator"></xref> for the <xref href="stem.Collections.Generic.IDictionary%602"></xref>.
  syntax:
    content: System.Collections.IDictionaryEnumerator IDictionary.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: A <xref href="System.Collections.IDictionaryEnumerator"></xref> for the <xref href="stem.Collections.Generic.IDictionary%602"></xref>.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: IDictionary.IsFixedSize
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.IsFixedSize
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets a value indicating whether the <xref href="stem.Collections.Generic.IDictionary%602"></xref> has a fixed size.
  syntax:
    content: bool System.Collections.IDictionary.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.IDictionary%602"></xref> has a fixed size; otherwise, `false`. For <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>, this property always returns `false`.'
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly
  id: System#Collections#IDictionary#IsReadOnly
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: IDictionary.IsReadOnly
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.IsReadOnly
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets a value indicating whether the <xref href="stem.Collections.Generic.IDictionary%602"></xref> is read-only.
  syntax:
    content: bool System.Collections.IDictionary.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.IDictionary%602"></xref> is read-only; otherwise, `false`. For <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>, this property always returns `false`.'
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
  id: System#Collections#IDictionary#Item(System.Object)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: IDictionary.Item(Object)
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Item(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets or sets the value associated with the specified key.
  syntax:
    content: object System.Collections.IDictionary.Item[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: The key of the value to get or set.
    return:
      type: System.Object
      description: The value associated with the specified key, or  `null` if <code>key</code> is not in the dictionary or <code>key</code> is of a type that is not assignable to the key type of the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is  `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: A value is being assigned, and <code>key</code> is of a type that is not assignable to the key type or the value type of the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys
  id: System#Collections#IDictionary#Keys
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: IDictionary.Keys
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets an <xref href="System.Collections.ICollection"></xref> that contains the keys of the  <xref href="stem.Collections.Generic.IDictionary%602"></xref>.
  syntax:
    content: System.Collections.ICollection System.Collections.IDictionary.Keys { get; }
    return:
      type: System.Collections.ICollection
      description: An interface that contains the keys of the <xref href="stem.Collections.Generic.IDictionary%602"></xref>.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
  id: System#Collections#IDictionary#Remove(System.Object)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: IDictionary.Remove(Object)
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Remove(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Removes the element with the specified key from the <xref href="System.Collections.IDictionary"></xref>.
  syntax:
    content: void IDictionary.Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: The key of the element to remove.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values
  id: System#Collections#IDictionary#Values
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: IDictionary.Values
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets an <xref href="System.Collections.ICollection"></xref> that contains the values in the <xref href="System.Collections.IDictionary"></xref>.
  syntax:
    content: System.Collections.ICollection System.Collections.IDictionary.Values { get; }
    return:
      type: System.Collections.ICollection
      description: An interface that contains the values in the <xref href="System.Collections.IDictionary"></xref>.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: ConcurrentDictionary<TKey,TValue>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Returns an enumerator that iterates through the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
  remarks: The enumerator returned from the dictionary is safe to use concurrently with reads and writes to the dictionary, however it does not represent a moment-in-time snapshot of the dictionary. The contents exposed through the enumerator may contain modifications made to the dictionary after <xref:System.Collections.Concurrent.ConcurrentDictionary%602.GetEnumerator%2A> was called.
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An enumerator for the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: ToArray()
  nameWithType: ConcurrentDictionary<TKey,TValue>.ToArray()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Copies the key and value pairs stored in the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> to a new array.
  syntax:
    content: public System.Collections.Generic.KeyValuePair<TKey,TValue>[] ToArray ();
    parameters: []
    return:
      type: System.Collections.Generic.KeyValuePair{TKey,TValue}[]
      description: A new array containing a snapshot of key and value pairs copied from the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
  id: TryAdd(`0,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: TryAdd(TKey,TValue)
  nameWithType: ConcurrentDictionary<TKey,TValue>.TryAdd(TKey,TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryAdd(TKey,TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Attempts to add the specified key and value to the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
  remarks: This method returns `false` if the key already exists. Use the <xref:System.Collections.Concurrent.ConcurrentDictionary%602.TryUpdate%2A> or <xref:System.Collections.Concurrent.ConcurrentDictionary%602.AddOrUpdate%2A> method to update the value in case a key already exists.
  example:
  - "The following example shows how to call the TryAddmethod:  \n  \n [!code-vb[System.Collections.Concurrent.ConcurrentDictionary#2](~/add/codesnippet/visualbasic/m-system.collections.con_0_1.vb)]\n [!code-cs[System.Collections.Concurrent.ConcurrentDictionary#2](~/add/codesnippet/csharp/m-system.collections.con_0_1.cs)]"
  syntax:
    content: public bool TryAdd (TKey key, TValue value);
    parameters:
    - id: key
      type: TKey
      description: The key of the element to add.
    - id: value
      type: TValue
      description: The value of the element to add. The value can be  `null` for reference types.
    return:
      type: System.Boolean
      description: '`true` if the key/value pair was added to the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> successfully; `false` if the key already exists.'
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is  `null`.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The dictionary already contains the maximum number of elements (<xref href="System.Int32.MaxValue"></xref>).
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: TryGetValue(TKey,TValue)
  nameWithType: ConcurrentDictionary<TKey,TValue>.TryGetValue(TKey,TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryGetValue(TKey,TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Attempts to get the value associated with the specified key from the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
  syntax:
    content: public bool TryGetValue (TKey key, out TValue value);
    parameters:
    - id: key
      type: TKey
      description: The key of the value to get.
    - id: value
      type: TValue
      description: When this method returns, contains the object from the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref> that has the specified key, or the default value of the type if the operation failed.
    return:
      type: System.Boolean
      description: '`true` if the key was found in the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>; otherwise, `false`.'
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is  `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
  id: TryRemove(`0,`1@)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: TryRemove(TKey,TValue)
  nameWithType: ConcurrentDictionary<TKey,TValue>.TryRemove(TKey,TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryRemove(TKey,TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Attempts to remove and return the value that has the specified key from the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>.
  remarks: ''
  example:
  - "The following example shows how to call the TryRemove method:  \n  \n [!code-vb[System.Collections.Concurrent.ConcurrentDictionary#2](~/add/codesnippet/visualbasic/m-system.collections.con_1_1.vb)]\n [!code-cs[System.Collections.Concurrent.ConcurrentDictionary#2](~/add/codesnippet/csharp/m-system.collections.con_1_1.cs)]"
  syntax:
    content: public bool TryRemove (TKey key, out TValue value);
    parameters:
    - id: key
      type: TKey
      description: The key of the element to remove and return.
    - id: value
      type: TValue
      description: When this method returns, contains the object removed from the <xref href="stem.Collections.Concurrent.ConcurrentDictionary%602"></xref>, or the default value of  the `TValue` type if <code>key</code> does not exist.
    return:
      type: System.Boolean
      description: '`true` if the object was removed successfully; otherwise, `false`.'
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is  `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
  id: TryUpdate(`0,`1,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: TryUpdate(TKey,TValue,TValue)
  nameWithType: ConcurrentDictionary<TKey,TValue>.TryUpdate(TKey,TValue,TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryUpdate(TKey,TValue,TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Compares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.
  remarks: ''
  example:
  - "The following example shows how to call the TryUpdate method:  \n  \n [!code-vb[System.Collections.Concurrent.ConcurrentDictionary#2](~/add/codesnippet/visualbasic/m-system.collections.con_2_1.vb)]\n [!code-cs[System.Collections.Concurrent.ConcurrentDictionary#2](~/add/codesnippet/csharp/m-system.collections.con_2_1.cs)]"
  syntax:
    content: public bool TryUpdate (TKey key, TValue newValue, TValue comparisonValue);
    parameters:
    - id: key
      type: TKey
      description: The key whose value is compared with <code>comparisonValue</code> and possibly replaced.
    - id: newValue
      type: TValue
      description: The value that replaces the value of the element that has the specified <code>key</code> if the comparison results in equality.
    - id: comparisonValue
      type: TValue
      description: The value that is compared to the value of the element that has the specified <code>key</code>.
    return:
      type: System.Boolean
      description: '`true` if the value with <code>key</code> was equal to <code>comparisonValue</code> and was replaced with <code>newValue</code>; otherwise, `false`.'
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>key</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values
  id: Values
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  name: Values
  nameWithType: ConcurrentDictionary<TKey,TValue>.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets a collection that contains the values in the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  syntax:
    content: public System.Collections.Generic.ICollection<TValue> Values { get; }
    return:
      type: System.Collections.Generic.ICollection{TValue}
      description: A collection that contains the values in the <xref href="stem.Collections.Generic.Dictionary%602"></xref>.
  overload: System.Collections.Concurrent.ConcurrentDictionary`2.Values*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\ConcurrentDictionary`2.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/ConcurrentDictionary`2.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OverflowException
  parent: System
  isExternal: false
  name: OverflowException
  nameWithType: OverflowException
  fullName: System.OverflowException
- uid: System.Collections.Generic.KeyNotFoundException
  parent: System.Collections.Generic
  isExternal: false
  name: KeyNotFoundException
  nameWithType: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ConcurrentDictionary<TKey,TValue>()
  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>()
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>)
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{TKey,TValue}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<KeyValuePair<TKey,TValue>>
  nameWithType: IEnumerable<KeyValuePair<TKey,TValue>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<TKey,TValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ConcurrentDictionary<TKey,TValue>(IEqualityComparer<TKey>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEqualityComparer<TKey>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEqualityComparer<TKey>)
- uid: System.Collections.Generic.IEqualityComparer{TKey}
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: IEqualityComparer<TKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ConcurrentDictionary<TKey,TValue>(Int32,Int32)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32,Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ConcurrentDictionary<TKey,TValue>(Int32,IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32,IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32,IEnumerable<KeyValuePair<TKey,TValue>>,IEqualityComparer<TKey>)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ConcurrentDictionary<TKey,TValue>(Int32,Int32,IEqualityComparer<TKey>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32,Int32,IEqualityComparer<TKey>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>(Int32,Int32,IEqualityComparer<TKey>)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,Func<TKey,TValue>,Func<TKey,TValue,TValue>)
- uid: TValue
  isExternal: true
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  isExternal: true
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Func{TKey,TValue}
  parent: System
  isExternal: false
  name: Func<TKey,TValue>
  nameWithType: Func<TKey,TValue>
  fullName: System.Func<TKey,TValue>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<TKey,TValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Func{TKey,TValue,TValue}
  parent: System
  isExternal: false
  name: Func<TKey,TValue,TValue>
  nameWithType: Func<TKey,TValue,TValue>
  fullName: System.Func<TKey,TValue,TValue>
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<TKey,TValue,TValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.AddOrUpdate(TKey,TValue,Func<TKey,TValue,TValue>)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: Clear()
  nameWithType: ConcurrentDictionary<TKey,TValue>.Clear()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Clear()
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ContainsKey(TKey)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ContainsKey(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ContainsKey(TKey)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: Count
  nameWithType: ConcurrentDictionary<TKey,TValue>.Count
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Count
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: GetEnumerator()
  nameWithType: ConcurrentDictionary<TKey,TValue>.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{TKey,TValue}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<KeyValuePair<TKey,TValue>>
  nameWithType: IEnumerator<KeyValuePair<TKey,TValue>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<TKey,TValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: GetOrAdd(TKey,Func<TKey,TValue>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,Func<TKey,TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,Func<TKey,TValue>)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: GetOrAdd(TKey,TValue)
  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.GetOrAdd(TKey,TValue)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IsEmpty
  nameWithType: ConcurrentDictionary<TKey,TValue>.IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IsEmpty
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: Item(TKey)
  nameWithType: ConcurrentDictionary<TKey,TValue>.Item(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Item(TKey)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: Keys
  nameWithType: ConcurrentDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.ICollection{TKey}
  parent: System.Collections.Generic
  isExternal: false
  name: ICollection<TKey>
  nameWithType: ICollection<TKey>
  fullName: System.Collections.Generic.ICollection<TKey>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<TKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Add(KeyValuePair<TKey,TValue>)
- uid: System.Collections.Generic.KeyValuePair`2
  parent: System.Collections.Generic
  isExternal: false
  name: KeyValuePair<TKey,TValue>
  nameWithType: KeyValuePair<TKey,TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Contains(KeyValuePair<TKey,TValue>)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[],Int32)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[],Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair<TKey,TValue>[],Int32)
- uid: System.Collections.Generic.KeyValuePair{TKey,TValue}[]
  parent: System.Collections.Generic
  isExternal: false
  name: KeyValuePair<TKey,TValue>[]
  nameWithType: KeyValuePair<TKey,TValue>[]
  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>[]
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<TKey,TValue>[]
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.IsReadOnly
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection<KeyValuePair<TKey,TValue>>.Remove(KeyValuePair<TKey,TValue>)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IDictionary<TKey,TValue>.Add(TKey,TValue)
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Add(TKey,TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Add(TKey,TValue)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IDictionary<TKey,TValue>.Remove(TKey)
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Remove(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary<TKey,TValue>.Remove(TKey)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IReadOnlyDictionary<TKey,TValue>.Keys
  nameWithType: ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.IEnumerable{TKey}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TKey>
  nameWithType: IEnumerable<TKey>
  fullName: System.Collections.Generic.IEnumerable<TKey>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IReadOnlyDictionary<TKey,TValue>.Values
  nameWithType: ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IReadOnlyDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.IEnumerable{TValue}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TValue>
  nameWithType: IEnumerable<TValue>
  fullName: System.Collections.Generic.IEnumerable<TValue>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection.IsSynchronized
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: ConcurrentDictionary<TKey,TValue>.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ICollection.SyncRoot
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IDictionary.Add(Object,Object)
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Add(Object,Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.Add(Object,Object)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IDictionary.Contains(Object)
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Contains(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.Contains(Object)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IDictionary.GetEnumerator()
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IDictionary.IsFixedSize
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.IsFixedSize
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.IsFixedSize
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IDictionary.IsReadOnly
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.IsReadOnly
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.IsReadOnly
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IDictionary.Item(Object)
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Item(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.Item(Object)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IDictionary.Keys
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IDictionary.Remove(Object)
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Remove(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.Remove(Object)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IDictionary.Values
  nameWithType: ConcurrentDictionary<TKey,TValue>.IDictionary.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IDictionary.Values
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: ConcurrentDictionary<TKey,TValue>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ToArray()
  nameWithType: ConcurrentDictionary<TKey,TValue>.ToArray()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.ToArray()
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: TryAdd(TKey,TValue)
  nameWithType: ConcurrentDictionary<TKey,TValue>.TryAdd(TKey,TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryAdd(TKey,TValue)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: TryGetValue(TKey,TValue)
  nameWithType: ConcurrentDictionary<TKey,TValue>.TryGetValue(TKey,TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryGetValue(TKey,TValue)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: TryRemove(TKey,TValue)
  nameWithType: ConcurrentDictionary<TKey,TValue>.TryRemove(TKey,TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryRemove(TKey,TValue)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: TryUpdate(TKey,TValue,TValue)
  nameWithType: ConcurrentDictionary<TKey,TValue>.TryUpdate(TKey,TValue,TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.TryUpdate(TKey,TValue,TValue)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: Values
  nameWithType: ConcurrentDictionary<TKey,TValue>.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.ICollection{TValue}
  parent: System.Collections.Generic
  isExternal: false
  name: ICollection<TValue>
  nameWithType: ICollection<TValue>
  fullName: System.Collections.Generic.ICollection<TValue>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<TValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ConcurrentDictionary<TKey,TValue>
  nameWithType: ConcurrentDictionary<TKey,TValue>.ConcurrentDictionary<TKey,TValue>
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: AddOrUpdate
  nameWithType: ConcurrentDictionary<TKey,TValue>.AddOrUpdate
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: Clear
  nameWithType: ConcurrentDictionary<TKey,TValue>.Clear
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ContainsKey
  nameWithType: ConcurrentDictionary<TKey,TValue>.ContainsKey
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: Count
  nameWithType: ConcurrentDictionary<TKey,TValue>.Count
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: GetEnumerator
  nameWithType: ConcurrentDictionary<TKey,TValue>.GetEnumerator
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: GetOrAdd
  nameWithType: ConcurrentDictionary<TKey,TValue>.GetOrAdd
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: IsEmpty
  nameWithType: ConcurrentDictionary<TKey,TValue>.IsEmpty
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: Item
  nameWithType: ConcurrentDictionary<TKey,TValue>.Item
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: Keys
  nameWithType: ConcurrentDictionary<TKey,TValue>.Keys
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Add*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Contains*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#CopyTo*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#IsReadOnly*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection<System#Collections#Generic#KeyValuePair<TKey,TValue>>#Remove*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary<TKey,TValue>#Add*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.Generic.IDictionary<TKey,TValue>.Add
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IDictionary<TKey,TValue>.Add
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary<TKey,TValue>#Remove*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.Generic.IDictionary<TKey,TValue>.Remove
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IDictionary<TKey,TValue>.Remove
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary<TKey,TValue>#Keys*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary<TKey,TValue>#Values*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.IDictionary.Add
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Add
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.IDictionary.Contains
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Contains
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.IDictionary.GetEnumerator
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.GetEnumerator
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.IDictionary.Item
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Item
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.IDictionary.Keys
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Keys
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.IDictionary.Remove
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Remove
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.IDictionary.Values
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IDictionary.Values
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ConcurrentDictionary<TKey,TValue>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: ToArray
  nameWithType: ConcurrentDictionary<TKey,TValue>.ToArray
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: TryAdd
  nameWithType: ConcurrentDictionary<TKey,TValue>.TryAdd
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: TryGetValue
  nameWithType: ConcurrentDictionary<TKey,TValue>.TryGetValue
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: TryRemove
  nameWithType: ConcurrentDictionary<TKey,TValue>.TryRemove
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: TryUpdate
  nameWithType: ConcurrentDictionary<TKey,TValue>.TryUpdate
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values*
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: false
  name: Values
  nameWithType: ConcurrentDictionary<TKey,TValue>.Values
