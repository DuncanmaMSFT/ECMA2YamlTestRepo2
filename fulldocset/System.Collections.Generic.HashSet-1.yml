### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.HashSet`1
  id: HashSet`1
  children:
  - System.Collections.Generic.HashSet`1.#ctor
  - System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.HashSet`1.Add(`0)
  - System.Collections.Generic.HashSet`1.Clear
  - System.Collections.Generic.HashSet`1.Comparer
  - System.Collections.Generic.HashSet`1.Contains(`0)
  - System.Collections.Generic.HashSet`1.CopyTo(`0[])
  - System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  - System.Collections.Generic.HashSet`1.Count
  - System.Collections.Generic.HashSet`1.CreateSetComparer
  - System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.GetEnumerator
  - System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)
  - System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.Remove(`0)
  - System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
  - System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.HashSet`1.TrimExcess
  - System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  langs:
  - csharp
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  type: Class
  summary: "Represents a set of values.  \n  \n To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System.Core/System/Collections/Generic/HashSet.cs#2d265edc718b158b)."
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#System.Core/System/Collections/Generic/HashSet.cs#2d265edc718b158b). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The HashSet(T) class provides high-performance set operations. A set is a collection that contains no duplicate elements, and whose elements are in no particular order.  \n  \n> [!NOTE]\n>  HashSet(T) implements the <xref:System.Collections.Generic.IReadOnlyCollection%601> interface starting with the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)]; in previous versions of the .NET Framework, the HashSet(T) class did not implement this interface.  \n  \n The capacity of a HashSet(T) object is the number of elements that the object can hold. A HashSet(T) object's capacity automatically increases as elements are added to the object.  \n  \n The HashSet(T) class is based on the model of mathematical sets and provides high-performance set operations similar to accessing the keys of the <xref:System.Collections.Generic.Dictionary%602> or <xref:System.Collections.Hashtable> collections. In simple terms, the HashSet(T) class can be thought of as a <xref:System.Collections.Generic.Dictionary%602> collection without values.  \n  \n A HashSet(T) collection is not sorted and cannot contain duplicate elements. If order or element duplication is more important than performance for your application, consider using the <xref:System.Collections.Generic.List%601> class together with the <xref:System.Collections.Generic.List%601.Sort%2A> method.  \n  \n HashSet(T) provides many mathematical set operations, such as set addition (unions) and set subtraction. The following table lists the provided HashSet(T) operations and their mathematical equivalents.  \n  \n|HashSet(Of T) operation|Mathematical equivalent|  \n|-------------------------------|-----------------------------|  \n|<xref:System.Collections.Generic.HashSet%601.UnionWith%2A>|Union or set addition|  \n|<xref:System.Collections.Generic.HashSet%601.IntersectWith%2A>|Intersection|  \n|<xref:System.Collections.Generic.HashSet%601.ExceptWith%2A>|Set subtraction|  \n|<xref:System.Collections.Generic.HashSet%601.SymmetricExceptWith%2A>|Symmetric difference|  \n  \n In addition to the listed set operations, the HashSet(T) class also provides methods for determining set equality, overlap of sets, and whether a set is a subset or superset of another set.  \n  \n For very large HashSet(T) objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.  \n  \n Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], the HashSet(T) class implements the <xref:System.Collections.Generic.ISet%601> interface.  \n  \n## HashSet and LINQ Set Operations  \n LINQ provides access to the `Distinct`, `Union`, `Intersect` and `Except` set operations on any data source that implements the <xref:System.Collections.IEnumerable> or <xref:System.Linq.IQueryable> interfaces.  HashSet(T) provides a larger and more robust collection of set operations. For example, HashSet(T) provides comparisons such as <xref:System.Collections.Generic.HashSet%601.IsSubsetOf%2A> and <xref:System.Collections.Generic.HashSet%601.IsSupersetOf%2A>.  \n  \n The primary difference between LINQ set operations and HashSet(T) operations is that LINQ set operations always return a new <xref:System.Collections.Generic.IEnumerable%601> collection, whereas the HashSet(T) equivalent methods modify the current collection.  \n  \n Typically, if you must create a new set or if your application needs access only to the provided set operations, using LINQ set operations on any <xref:System.Collections.Generic.IEnumerable%601> collection or array will be sufficient. However, if your application requires access to additional set operations, or if it is not desirable or necessary to create a new collection, use the HashSet(T) class.  \n  \n The following table shows the HashSet(T) operations and their equivalent LINQ set operations.  \n  \n|HashSet(Of T) operation|LINQ equivalent|  \n|-------------------------------|---------------------|  \n|<xref:System.Collections.Generic.HashSet%601.UnionWith%2A>|<xref:System.Linq.Enumerable.Union%2A>|  \n|<xref:System.Collections.Generic.HashSet%601.IntersectWith%2A>|<xref:System.Linq.Enumerable.Intersect%2A>|  \n|<xref:System.Collections.Generic.HashSet%601.ExceptWith%2A>|<xref:System.Linq.Enumerable.Except%2A>|  \n|Not provided.|<xref:System.Linq.Enumerable.Distinct%2A>|  \n|<xref:System.Collections.Generic.HashSet%601.SymmetricExceptWith%2A>|Not provided.|  \n|<xref:System.Collections.Generic.HashSet%601.Overlaps%2A>|Not provided.|  \n|<xref:System.Collections.Generic.HashSet%601.IsSubsetOf%2A>|Not provided.|  \n|<xref:System.Collections.Generic.HashSet%601.IsProperSubsetOf%2A>|Not provided.|  \n|<xref:System.Collections.Generic.HashSet%601.IsSupersetOf%2A>|Not provided.|  \n|<xref:System.Collections.Generic.HashSet%601.IsProperSupersetOf%2A>|Not provided.|  \n|<xref:System.Collections.Generic.HashSet%601.SetEquals%2A>|Not provided.|"
  example:
  - "The following example demonstrates how to merge two disparate sets. This example creates two HashSet(T) objects, and populates them with even and odd numbers, respectively. A third HashSet(T) object is created from the set that contains the even numbers. The example then calls the <xref:System.Collections.Generic.HashSet%601.UnionWith%2A> method, which adds the odd number set to the third set.  \n  \n [!code-cs[System.Collections.Generic.HashSet_UnionWith#01](~/add/codesnippet/csharp/t-system.collections.gen_17_1.cs)]\n [!code-vb[System.Collections.Generic.HashSet_UnionWith#01](~/add/codesnippet/visualbasic/t-system.collections.gen_17_1.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.HashSetDebugView`1))]

      public class HashSet<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.ISet<T>, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
    typeParameters:
    - id: T
      description: The type of elements in the hash set.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.IReadOnlyCollection<T>
  - System.Collections.Generic.ISet<T>
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: HashSet<T>()
  nameWithType: HashSet<T>.HashSet<T>()
  fullName: System.Collections.Generic.HashSet<T>.HashSet<T>()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.HashSet%601"></xref> class that is empty and uses the default equality comparer for the set type.
  remarks: "The capacity of a <xref:System.Collections.Generic.HashSet%601> object is the number of elements that the object can hold. A <xref:System.Collections.Generic.HashSet%601> object's capacity automatically increases as elements are added to the object.  \n  \n This constructor is an O(1) operation."
  example:
  - "The following example demonstrates how to create and populate two <xref:System.Collections.Generic.HashSet%601> objects. This example is part of a larger example provided for the <xref:System.Collections.Generic.HashSet%601.UnionWith%2A> method.  \n  \n [!code-cs[System.Collections.Generic.HashSet_UnionWith#03](~/add/codesnippet/csharp/m-system.collections.gen_44_1.cs)]"
  syntax:
    content: public HashSet ();
    parameters: []
  overload: System.Collections.Generic.HashSet`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: HashSet<T>(IEnumerable<T>)
  nameWithType: HashSet<T>.HashSet<T>(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.HashSet<T>(IEnumerable<T>)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.HashSet%601"></xref> class that uses the default equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.
  remarks: "The capacity of a <xref:System.Collections.Generic.HashSet%601> object is the number of elements that the object can hold. A <xref:System.Collections.Generic.HashSet%601> object's capacity automatically increases as elements are added to the object.  \n  \n If `collection` contains duplicates, the set will contain one of each unique element. No exception will be thrown. Therefore, the size of the resulting set is not identical to the size of `collection`.  \n  \n This constructor is an O(`n`) operation, where `n` is the number of elements in the `collection` parameter."
  example:
  - "The following example shows how to create a <xref:System.Collections.Generic.HashSet%601> collection from an existing set. In this example, two sets are created with even and odd integers, respectively. A third <xref:System.Collections.Generic.HashSet%601> object is then created from the even integer set.  \n  \n [!code-cs[System.Collections.Generic.HashSet_UnionWith#02](~/add/codesnippet/csharp/c730f4e9-06cf-49cd-af8d-_1.cs)]\n [!code-vb[System.Collections.Generic.HashSet_UnionWith#02](~/add/codesnippet/visualbasic/c730f4e9-06cf-49cd-af8d-_1.vb)]"
  syntax:
    content: public HashSet (System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: The collection whose elements are copied to the new set.
  overload: System.Collections.Generic.HashSet`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>collection</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: HashSet<T>(IEqualityComparer<T>)
  nameWithType: HashSet<T>.HashSet<T>(IEqualityComparer<T>)
  fullName: System.Collections.Generic.HashSet<T>.HashSet<T>(IEqualityComparer<T>)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.HashSet%601"></xref> class that is empty and uses the specified equality comparer for the set type.
  remarks: "The capacity of a <xref:System.Collections.Generic.HashSet%601> object is the number of elements that the object can hold. A <xref:System.Collections.Generic.HashSet%601> object's capacity automatically increases as elements are added to the object.  \n  \n This constructor is an O(1) operation."
  syntax:
    content: public HashSet (System.Collections.Generic.IEqualityComparer<T> comparer);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: The <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> implementation to use when comparing values in the set, or `null` to use the default <xref href="stem.Collections.Generic.EqualityComparer%601"></xref> implementation for the set type.
  overload: System.Collections.Generic.HashSet`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: HashSet<T>(IEnumerable<T>,IEqualityComparer<T>)
  nameWithType: HashSet<T>.HashSet<T>(IEnumerable<T>,IEqualityComparer<T>)
  fullName: System.Collections.Generic.HashSet<T>.HashSet<T>(IEnumerable<T>,IEqualityComparer<T>)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.HashSet%601"></xref> class that uses the specified equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.
  remarks: "The capacity of a <xref:System.Collections.Generic.HashSet%601> object is the number of elements that the object can hold. A <xref:System.Collections.Generic.HashSet%601> object's capacity automatically increases as elements are added to the object.  \n  \n If `collection` contains duplicates, the set will contain one of each unique element. No exception will be thrown. Therefore, the size of the resulting set is not identical to the size of `collection`.  \n  \n This constructor is an O(`n`) operation, where `n` is the number of elements in the `collection` parameter."
  example:
  - "The following example uses a supplied <xref:System.Collections.Generic.IEqualityComparer%601> to allow case-insensitive comparisons on the elements of a  <xref:System.Collections.Generic.HashSet%601> collection of vehicle types.  \n  \n [!code-cs[System.Collections.Generic.HashSet_ExceptWith#03](~/add/codesnippet/csharp/baf26f20-51aa-4868-8aef-_1.cs)]\n [!code-cpp[System.Collections.Generic.HashSet_ExceptWith#03](~/add/codesnippet/cpp/baf26f20-51aa-4868-8aef-_1.cpp)]\n [!code-vb[System.Collections.Generic.HashSet_ExceptWith#03](~/add/codesnippet/visualbasic/baf26f20-51aa-4868-8aef-_1.vb)]"
  syntax:
    content: public HashSet (System.Collections.Generic.IEnumerable<T> collection, System.Collections.Generic.IEqualityComparer<T> comparer);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: The collection whose elements are copied to the new set.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: The <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> implementation to use when comparing values in the set, or `null` to use the default <xref href="stem.Collections.Generic.EqualityComparer%601"></xref> implementation for the set type.
  overload: System.Collections.Generic.HashSet`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>collection</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: HashSet<T>(SerializationInfo,StreamingContext)
  nameWithType: HashSet<T>.HashSet<T>(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.HashSet<T>.HashSet<T>(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.HashSet%601"></xref> class with serialized data.
  remarks: This constructor is called during deserialization to reconstitute an object that is transmitted over a stream. For more information, see [XML and SOAP Serialization](../Topic/XML%20and%20SOAP%20Serialization.md).
  syntax:
    content: protected HashSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: A <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object that contains the information required to serialize the <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: A <xref href="System.Runtime.Serialization.StreamingContext"></xref> structure that contains the source and destination of the serialized stream associated with the <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
  overload: System.Collections.Generic.HashSet`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: Add(T)
  nameWithType: HashSet<T>.Add(T)
  fullName: System.Collections.Generic.HashSet<T>.Add(T)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Adds the specified element to a set.
  remarks: "If <xref:System.Collections.Generic.HashSet%601.Count%2A> already equals the capacity of the <xref:System.Collections.Generic.HashSet%601> object, the capacity is automatically adjusted to accommodate the new item.  \n  \n If <xref:System.Collections.Generic.HashSet%601.Count%2A> is less than the capacity of the internal array, this method is an O(1) operation. If the <xref:System.Collections.Generic.HashSet%601> object must be resized, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.HashSet%601.Count%2A>."
  example:
  - "The following example demonstrates how to create and populate two <xref:System.Collections.Generic.HashSet%601> objects. This example is part of a larger example provided for the <xref:System.Collections.Generic.HashSet%601.UnionWith%2A> method.  \n  \n [!code-cs[System.Collections.Generic.HashSet_UnionWith#03](~/add/codesnippet/csharp/m-system.collections.gen_61_1.cs)]"
  syntax:
    content: public bool Add (T item);
    parameters:
    - id: item
      type: T
      description: The element to add to the set.
    return:
      type: System.Boolean
      description: '`true` if the element is added to the <xref href="stem.Collections.Generic.HashSet%601"></xref> object; `false` if the element is already present.'
  overload: System.Collections.Generic.HashSet`1.Add*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.Clear
  id: Clear
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: Clear()
  nameWithType: HashSet<T>.Clear()
  fullName: System.Collections.Generic.HashSet<T>.Clear()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Removes all elements from a <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
  remarks: "<xref:System.Collections.Generic.HashSet%601.Count%2A> is set to zero and references to other objects from elements of the collection are also released. The capacity remains unchanged until a call to <xref:System.Collections.Generic.HashSet%601.TrimExcess%2A> is made.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.HashSet%601.Count%2A>."
  example:
  - "The following example creates and populates a <xref:System.Collections.Generic.HashSet%601> collection, then clears it and releases the memory referenced by the collection.  \n  \n [!code-cs[System.Collections.Generic.HashSet_Clear#02](~/add/codesnippet/csharp/m-system.collections.gen_81_1.cs)]\n [!code-vb[System.Collections.Generic.HashSet_Clear#02](~/add/codesnippet/visualbasic/m-system.collections.gen_81_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Generic.HashSet`1.Clear*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.Comparer
  id: Comparer
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: Comparer
  nameWithType: HashSet<T>.Comparer
  fullName: System.Collections.Generic.HashSet<T>.Comparer
  type: Property
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Gets the <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> object that is used to determine equality for the values in the set.
  remarks: Retrieving the value of this property is an O(1) operation.
  syntax:
    content: public System.Collections.Generic.IEqualityComparer<T> Comparer { get; }
    return:
      type: System.Collections.Generic.IEqualityComparer`1
      description: The <xref href="stem.Collections.Generic.IEqualityComparer%601"></xref> object that is used to determine equality for the values in the set.
  overload: System.Collections.Generic.HashSet`1.Comparer*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: HashSet<T>.Contains(T)
  fullName: System.Collections.Generic.HashSet<T>.Contains(T)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Determines whether a <xref href="stem.Collections.Generic.HashSet%601"></xref> object contains the specified element.
  remarks: This method is an O(1) operation.
  example:
  - "The following example demonstrates how to remove values from a <xref:System.Collections.Generic.HashSet%601> collection using the <xref:System.Collections.Generic.HashSet%601.Remove%2A> method. In this example, the Contains method verifies that the set contains a value before removing it.  \n  \n [!code-cs[System.Collections.Generic.HashSet_RemoveWhere#02](~/add/codesnippet/csharp/m-system.collections.gen_1_1.cs)]\n [!code-vb[System.Collections.Generic.HashSet_RemoveWhere#02](~/add/codesnippet/visualbasic/m-system.collections.gen_1_1.vb)]"
  syntax:
    content: public bool Contains (T item);
    parameters:
    - id: item
      type: T
      description: The element to locate in the <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.HashSet%601"></xref> object contains the specified element; otherwise, `false`.'
  overload: System.Collections.Generic.HashSet`1.Contains*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: CopyTo(T[])
  nameWithType: HashSet<T>.CopyTo(T[])
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Copies the elements of a <xref href="stem.Collections.Generic.HashSet%601"></xref> object to an array.
  remarks: This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.HashSet%601.Count%2A>.
  syntax:
    content: public void CopyTo (T[] array);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional array that is the destination of the elements copied from the <xref href="stem.Collections.Generic.HashSet%601"></xref> object. The array must have zero-based indexing.
  overload: System.Collections.Generic.HashSet`1.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: HashSet<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Copies the elements of a <xref href="stem.Collections.Generic.HashSet%601"></xref> object to an array, starting at the specified array index.
  remarks: This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.HashSet%601.Count%2A>.
  syntax:
    content: public void CopyTo (T[] array, int arrayIndex);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional array that is the destination of the elements copied from the <xref href="stem.Collections.Generic.HashSet%601"></xref> object. The array must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Generic.HashSet`1.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>arrayIndex</code> is less than 0.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>arrayIndex</code> is greater than the length of the destination <code>array</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  id: CopyTo(`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: CopyTo(T[],Int32,Int32)
  nameWithType: HashSet<T>.CopyTo(T[],Int32,Int32)
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[],Int32,Int32)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Copies the specified number of elements of a <xref href="stem.Collections.Generic.HashSet%601"></xref> object to an array, starting at the specified array index.
  remarks: This method is an O(`n`) operation, where `n` is `count`.
  syntax:
    content: public void CopyTo (T[] array, int arrayIndex, int count);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional array that is the destination of the elements copied from the <xref href="stem.Collections.Generic.HashSet%601"></xref> object. The array must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
    - id: count
      type: System.Int32
      description: The number of elements to copy to <code>array</code>.
  overload: System.Collections.Generic.HashSet`1.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code> is less than 0.  \n  \n -or-  \n  \n <code>count</code> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>arrayIndex</code> is greater than the length of the destination <code>array</code>.  \n  \n -or-  \n  \n <code>count</code> is greater than the available space from the <code>index</code> to the end of the destination <code>array</code>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.Count
  id: Count
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: Count
  nameWithType: HashSet<T>.Count
  fullName: System.Collections.Generic.HashSet<T>.Count
  type: Property
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Gets the number of elements that are contained in a set.
  remarks: "The capacity of a <xref:System.Collections.Generic.HashSet%601> object is the number of elements that the object can hold. A <xref:System.Collections.Generic.HashSet%601> object's capacity automatically increases as elements are added to the object.  \n  \n The capacity is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is set to the first prime number that is greater than double the previous capacity.  \n  \n Retrieving the value of this property is an O(1) operation."
  example:
  - "The following example demonstrates how to create, populate, and manipulate two <xref:System.Collections.Generic.HashSet%601> objects. In this example, both the contents of the set and Count display to the console.  \n  \n [!code-cs[System.Collections.Generic.HashSet_UnionWith#01](~/add/codesnippet/csharp/p-system.collections.gen_25_1.cs)]\n [!code-vb[System.Collections.Generic.HashSet_UnionWith#01](~/add/codesnippet/visualbasic/p-system.collections.gen_25_1.vb)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of elements that are contained in the set.
  overload: System.Collections.Generic.HashSet`1.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.CreateSetComparer
  id: CreateSetComparer
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: CreateSetComparer()
  nameWithType: HashSet<T>.CreateSetComparer()
  fullName: System.Collections.Generic.HashSet<T>.CreateSetComparer()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Returns an <xref href="System.Collections.IEqualityComparer"></xref> object that can be used for equality testing of a <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
  remarks: "The <xref:System.Collections.IEqualityComparer> object checks for equality at only one level; however, you can chain together comparers at additional levels to perform deeper equality testing.  \n  \n Calling this method is an O(1) operation."
  syntax:
    content: public static System.Collections.Generic.IEqualityComparer<System.Collections.Generic.HashSet<T>> CreateSetComparer ();
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer{System.Collections.Generic.HashSet{T}}
      description: An <xref href="System.Collections.IEqualityComparer"></xref> object that can be used for deep equality testing of the <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
  overload: System.Collections.Generic.HashSet`1.CreateSetComparer*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: ExceptWith(IEnumerable<T>)
  nameWithType: HashSet<T>.ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.ExceptWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Removes all elements in the specified collection from the current <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
  remarks: "The ExceptWith method is the equivalent of mathematical set subtraction.  \n  \n This method is an O(`n`) operation, where `n` is the number of elements in the `other` parameter."
  example:
  - "The following example creates two <xref:System.Collections.Generic.HashSet%601> collections with overlapping sets of data. The lower range of values is then removed from the larger set using the ExceptWith method.  \n  \n [!code-cpp[System.Collections.Generic.HashSet_ExceptWith#02](~/add/codesnippet/cpp/cf8abae0-df9e-4157-a1e5-_1.cpp)]\n [!code-cs[System.Collections.Generic.HashSet_ExceptWith#02](~/add/codesnippet/csharp/cf8abae0-df9e-4157-a1e5-_1.cs)]\n [!code-vb[System.Collections.Generic.HashSet_ExceptWith#02](~/add/codesnippet/visualbasic/cf8abae0-df9e-4157-a1e5-_1.vb)]"
  syntax:
    content: public void ExceptWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection of items to remove from the <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
  overload: System.Collections.Generic.HashSet`1.ExceptWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: HashSet<T>.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.GetEnumerator()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through a <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of enumerators. Therefore, using `foreach` is recommended instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A>.  \n  \n The <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A> property returns the same object until <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> is called. <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator object instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: public System.Collections.Generic.HashSet<T>.Enumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.HashSet`1.Enumerator
      description: A <xref href="stem.Collections.Generic.HashSet%601.Enumerator"></xref> object for the <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
  overload: System.Collections.Generic.HashSet`1.GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: HashSet<T>.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.HashSet<T>.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Implements the <xref href="System.Runtime.Serialization.ISerializable"></xref> interface and returns the data needed to serialize a <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
  remarks: Calling this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.HashSet%601.Count%2A>.
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: A <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object that contains the information required to serialize the <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: A <xref href="System.Runtime.Serialization.StreamingContext"></xref> structure that contains the source and destination of the serialized stream associated with the <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
  overload: System.Collections.Generic.HashSet`1.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>info</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  id: IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: IntersectWith(IEnumerable<T>)
  nameWithType: HashSet<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IntersectWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Modifies the current <xref href="stem.Collections.Generic.HashSet%601"></xref> object to contain only elements that are present in that object and in the specified collection.
  remarks: If the collection represented by the `other` parameter is a <xref:System.Collections.Generic.HashSet%601> collection with the same equality comparer as the current <xref:System.Collections.Generic.HashSet%601> object, this method is an O(`n`) operation. Otherwise, this method is an O(`n` + `m`) operation, where `n` is <xref:System.Collections.Generic.HashSet%601.Count%2A> and `m` is the number of elements in `other`.
  syntax:
    content: public void IntersectWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
  overload: System.Collections.Generic.HashSet`1.IntersectWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsProperSubsetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Determines whether a <xref href="stem.Collections.Generic.HashSet%601"></xref> object is a proper subset of the specified collection.
  remarks: "An empty set is a proper subset of any other collection. Therefore, this method returns `true` if the collection represented by the current <xref:System.Collections.Generic.HashSet%601> object is empty unless the `other` parameter is also an empty set.  \n  \n This method always returns `false` if <xref:System.Collections.Generic.HashSet%601.Count%2A> is greater than or equal to the number of elements in `other`.  \n  \n If the collection represented by `other` is a <xref:System.Collections.Generic.HashSet%601> collection with the same equality comparer as the current <xref:System.Collections.Generic.HashSet%601> object, then this method is an O(`n`) operation. Otherwise, this method is an O(`n` + `m`) operation, where `n` is <xref:System.Collections.Generic.HashSet%601.Count%2A> and `m` is the number of elements in `other`."
  example:
  - "The following example creates two disparate <xref:System.Collections.Generic.HashSet%601> objects and compares them to each other. In this example, `lowNumbers` is both a subset and a proper subset of `allNumbers` until `allNumbers` is modified, using the <xref:System.Collections.Generic.HashSet%601.IntersectWith%2A> method, to contain only values that are present in both sets. Once `allNumbers` and `lowNumbers` are identical, `lowNumbers` is still a subset of `allNumbers` but is no longer a proper subset.  \n  \n [!code-vb[System.Collections.Generic.HashSet_boolMethods#02](~/add/codesnippet/visualbasic/4576766b-56c9-40ea-bd72-_1.vb)]\n [!code-cs[System.Collections.Generic.HashSet_boolMethods#02](~/add/codesnippet/csharp/4576766b-56c9-40ea-bd72-_1.cs)]"
  syntax:
    content: public bool IsProperSubsetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.HashSet%601"></xref> object is a proper subset of <code>other</code>; otherwise, `false`.'
  overload: System.Collections.Generic.HashSet`1.IsProperSubsetOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsProperSupersetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Determines whether a <xref href="stem.Collections.Generic.HashSet%601"></xref> object is a proper superset of the specified collection.
  remarks: "An empty set is a proper superset of any other collection. Therefore, this method returns `true` if the collection represented by the `other` parameter is empty unless the current <xref:System.Collections.Generic.HashSet%601> collection is also empty.  \n  \n This method always returns `false` if <xref:System.Collections.Generic.HashSet%601.Count%2A> is less than or equal to the number of elements in `other`.  \n  \n If the collection represented by `other` is a <xref:System.Collections.Generic.HashSet%601> collection with the same equality comparer as the current <xref:System.Collections.Generic.HashSet%601> object, this method is an O(`n`) operation. Otherwise, this method is an O(`n` + `m`) operation, where `n` is the number of elements in `other` and `m` is <xref:System.Collections.Generic.HashSet%601.Count%2A>."
  example:
  - "The following example creates two disparate <xref:System.Collections.Generic.HashSet%601> objects and compares them to each other. In this example, `allNumbers` is both a superset and a proper superset of `lowNumbers` until `allNumbers` is modified, using the <xref:System.Collections.Generic.HashSet%601.IntersectWith%2A> method, to contain only values that are present in both sets. Once `allNumbers` and `lowNumbers` are identical, `allNumbers` is still a superset of `lowNumbers` but is no longer a proper superset.  \n  \n [!code-vb[System.Collections.Generic.HashSet_boolMethods#02](~/add/codesnippet/visualbasic/ae58ff4b-62a0-4dff-bcd6-_1.vb)]\n [!code-cs[System.Collections.Generic.HashSet_boolMethods#02](~/add/codesnippet/csharp/ae58ff4b-62a0-4dff-bcd6-_1.cs)]"
  syntax:
    content: public bool IsProperSupersetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.HashSet%601"></xref> object is a proper superset of <code>other</code>; otherwise, `false`.'
  overload: System.Collections.Generic.HashSet`1.IsProperSupersetOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsSubsetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Determines whether a <xref href="stem.Collections.Generic.HashSet%601"></xref> object is a subset of the specified collection.
  remarks: "An empty set is a subset of any other collection, including an empty set; therefore, this method returns `true` if the collection represented by the current <xref:System.Collections.Generic.HashSet%601> object is empty, even if the `other` parameter is an empty set.  \n  \n This method always returns `false` if <xref:System.Collections.Generic.HashSet%601.Count%2A> is greater than the number of elements in `other`.  \n  \n If the collection represented by `other` is a <xref:System.Collections.Generic.HashSet%601> collection with the same equality comparer as the current <xref:System.Collections.Generic.HashSet%601> object, this method is an O(`n`) operation. Otherwise, this method is an O(`n` + `m`) operation, where `n` is <xref:System.Collections.Generic.HashSet%601.Count%2A> and `m` is the number of elements in `other`."
  example:
  - "The following example creates two disparate <xref:System.Collections.Generic.HashSet%601> objects and compares them to each other. In this example, `lowNumbers` is both a subset and a proper subset of `allNumbers` until `allNumbers` is modified, using the <xref:System.Collections.Generic.HashSet%601.IntersectWith%2A> method, to contain only values that are present in both sets. Once `allNumbers` and `lowNumbers` are identical, `lowNumbers` is still a subset of `allNumbers` but is no longer a proper subset.  \n  \n [!code-vb[System.Collections.Generic.HashSet_boolMethods#02](~/add/codesnippet/visualbasic/2657cfa6-3cfb-4911-a9ca-_1.vb)]\n [!code-cs[System.Collections.Generic.HashSet_boolMethods#02](~/add/codesnippet/csharp/2657cfa6-3cfb-4911-a9ca-_1.cs)]"
  syntax:
    content: public bool IsSubsetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.HashSet%601"></xref> object is a subset of <code>other</code>; otherwise, `false`.'
  overload: System.Collections.Generic.HashSet`1.IsSubsetOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsSupersetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Determines whether a <xref href="stem.Collections.Generic.HashSet%601"></xref> object is a superset of the specified collection.
  remarks: "All collections, including the empty set, are supersets of the empty set. Therefore, this method returns `true` if the collection represented by the `other` parameter is empty, even if the current <xref:System.Collections.Generic.HashSet%601> object is empty.  \n  \n This method always returns `false` if <xref:System.Collections.Generic.HashSet%601.Count%2A> is less than the number of elements in `other`.  \n  \n If the collection represented by `other` is a <xref:System.Collections.Generic.HashSet%601> collection with the same equality comparer as the current <xref:System.Collections.Generic.HashSet%601> object, this method is an O(`n`) operation. Otherwise, this method is an O(`n` + `m`) operation, where `n` is the number of elements in `other` and `m` is <xref:System.Collections.Generic.HashSet%601.Count%2A>."
  example:
  - "The following example creates two disparate <xref:System.Collections.Generic.HashSet%601> objects and compares them to each other. In this example, `allNumbers` is both a superset and a proper superset of `lowNumbers` until `allNumbers` is modified, using the <xref:System.Collections.Generic.HashSet%601.IntersectWith%2A> method, to contain only values that are present in both sets. Once `allNumbers` and `lowNumbers` are identical, `allNumbers` is still a superset of `lowNumbers` but is no longer a proper superset.  \n  \n [!code-vb[System.Collections.Generic.HashSet_boolMethods#02](~/add/codesnippet/visualbasic/d22ac687-b634-4b64-b32f-_1.vb)]\n [!code-cs[System.Collections.Generic.HashSet_boolMethods#02](~/add/codesnippet/csharp/d22ac687-b634-4b64-b32f-_1.cs)]"
  syntax:
    content: public bool IsSupersetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.HashSet%601"></xref> object is a superset of <code>other</code>; otherwise, `false`.'
  overload: System.Collections.Generic.HashSet`1.IsSupersetOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)
  id: OnDeserialization(System.Object)
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: OnDeserialization(Object)
  nameWithType: HashSet<T>.OnDeserialization(Object)
  fullName: System.Collections.Generic.HashSet<T>.OnDeserialization(Object)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Implements the <xref href="System.Runtime.Serialization.ISerializable"></xref> interface and raises the deserialization event when the deserialization is complete.
  remarks: Calling this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.HashSet%601.Count%2A>.
  syntax:
    content: public virtual void OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: The source of the deserialization event.
  overload: System.Collections.Generic.HashSet`1.OnDeserialization*
  exceptions:
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: The <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object associated with the current <xref href="stem.Collections.Generic.HashSet%601"></xref> object is invalid.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  id: Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: Overlaps(IEnumerable<T>)
  nameWithType: HashSet<T>.Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.Overlaps(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Determines whether the current <xref href="stem.Collections.Generic.HashSet%601"></xref> object and a specified collection share common elements.
  remarks: This method is an O(`n`) operation, where `n` is the number of elements in `other`.
  example:
  - "The following example creates two disparate <xref:System.Collections.Generic.HashSet%601> objects and compares them to each another. In this example, `allNumbers` and `lowNumbers` are shown to share common elements using the Overlaps method.  \n  \n [!code-vb[System.Collections.Generic.HashSet_boolMethods#02](~/add/codesnippet/visualbasic/fcad776c-2148-4ce6-8f6c-_1.vb)]\n [!code-cs[System.Collections.Generic.HashSet_boolMethods#02](~/add/codesnippet/csharp/fcad776c-2148-4ce6-8f6c-_1.cs)]"
  syntax:
    content: public bool Overlaps (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.HashSet%601"></xref> object and <code>other</code> share at least one common element; otherwise, `false`.'
  overload: System.Collections.Generic.HashSet`1.Overlaps*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: Remove(T)
  nameWithType: HashSet<T>.Remove(T)
  fullName: System.Collections.Generic.HashSet<T>.Remove(T)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Removes the specified element from a <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
  remarks: "If the <xref:System.Collections.Generic.HashSet%601> object does not contain the specified element, the object remains unchanged. No exception is thrown.  \n  \n This method is an O(1) operation."
  example:
  - "The following example demonstrates how to remove values from a <xref:System.Collections.Generic.HashSet%601> collection using the Remove method. In this example, zero is arbitrarily removed from the <xref:System.Collections.Generic.HashSet%601> collection.  \n  \n [!code-cs[System.Collections.Generic.HashSet_RemoveWhere#02](~/add/codesnippet/csharp/m-system.collections.gen_83_1.cs)]\n [!code-vb[System.Collections.Generic.HashSet_RemoveWhere#02](~/add/codesnippet/visualbasic/m-system.collections.gen_83_1.vb)]"
  syntax:
    content: public bool Remove (T item);
    parameters:
    - id: item
      type: T
      description: The element to remove.
    return:
      type: System.Boolean
      description: '`true` if the element is successfully found and removed; otherwise, `false`.  This method returns `false` if <code>item</code> is not found in the <xref href="stem.Collections.Generic.HashSet%601"></xref> object.'
  overload: System.Collections.Generic.HashSet`1.Remove*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
  id: RemoveWhere(System.Predicate{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: RemoveWhere(Predicate<T>)
  nameWithType: HashSet<T>.RemoveWhere(Predicate<T>)
  fullName: System.Collections.Generic.HashSet<T>.RemoveWhere(Predicate<T>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Removes all elements that match the conditions defined by the specified predicate from a <xref href="stem.Collections.Generic.HashSet%601"></xref> collection.
  remarks: Calling this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.HashSet%601.Count%2A>.
  example:
  - "The following example demonstrates how to remove values from a <xref:System.Collections.Generic.HashSet%601> collection using the <xref:System.Collections.Generic.HashSet%601.Remove%2A> method. In this example, all odd integers are removed from the <xref:System.Collections.Generic.HashSet%601> collection as specified by the `match` delegate.  \n  \n [!code-cs[System.Collections.Generic.HashSet_RemoveWhere#02](~/add/codesnippet/csharp/m-system.collections.gen_49_1.cs)]\n [!code-vb[System.Collections.Generic.HashSet_RemoveWhere#02](~/add/codesnippet/visualbasic/m-system.collections.gen_49_1.vb)]"
  syntax:
    content: public int RemoveWhere (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: The <xref href="stem.Predicate%601"></xref> delegate that defines the conditions of the elements to remove.
    return:
      type: System.Int32
      description: The number of elements that were removed from the <xref href="stem.Collections.Generic.HashSet%601"></xref> collection.
  overload: System.Collections.Generic.HashSet`1.RemoveWhere*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>match</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  id: SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: SetEquals(IEnumerable<T>)
  nameWithType: HashSet<T>.SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.SetEquals(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Determines whether a <xref href="stem.Collections.Generic.HashSet%601"></xref> object and the specified collection contain the same elements.
  remarks: "The SetEquals method ignores duplicate entries and the order of elements in the `other` parameter.  \n  \n If the collection represented by `other` is a <xref:System.Collections.Generic.HashSet%601> collection with the same equality comparer as the current <xref:System.Collections.Generic.HashSet%601> object, this method is an O(`n`) operation. Otherwise, this method is an O(`n` + `m`) operation, where `n` is the number of elements in `other` and `m` is <xref:System.Collections.Generic.HashSet%601.Count%2A>."
  example:
  - "The following example creates two disparate <xref:System.Collections.Generic.HashSet%601> objects and compares them to each another. Initially, the two sets are not equal, which is demonstrated by using the SetEquals method. The `allNumbers`<xref:System.Collections.Generic.HashSet%601> object is then modified, after which the sets are equal.  \n  \n [!code-vb[System.Collections.Generic.HashSet_boolMethods#02](~/add/codesnippet/visualbasic/178a0187-e092-45c1-9632-_1.vb)]\n [!code-cs[System.Collections.Generic.HashSet_boolMethods#02](~/add/codesnippet/csharp/178a0187-e092-45c1-9632-_1.cs)]"
  syntax:
    content: public bool SetEquals (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.HashSet%601"></xref> object is equal to <code>other</code>; otherwise, false.'
  overload: System.Collections.Generic.HashSet`1.SetEquals*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: HashSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.SymmetricExceptWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Modifies the current <xref href="stem.Collections.Generic.HashSet%601"></xref> object to contain only elements that are present either in that object or in the specified collection, but not both.
  remarks: If the `other` parameter is a <xref:System.Collections.Generic.HashSet%601> collection with the same equality comparer as the current <xref:System.Collections.Generic.HashSet%601> object, this method is an O(`n`) operation. Otherwise, this method is an O(`n` + `m`) operation, where `n` is the number of elements in `other` and `m` is <xref:System.Collections.Generic.HashSet%601.Count%2A>.
  example:
  - "The following example creates two <xref:System.Collections.Generic.HashSet%601> collections with overlapping sets of data. The set that contains the lower values is then modified, using the SymmetricExceptWith method, to contain only the values that are not present in both sets.  \n  \n [!code-vb[System.Collections.Generic.HashSet_SymmetricExceptWith#02](~/add/codesnippet/visualbasic/1f894d18-7027-451d-9d40-_1.vb)]\n [!code-cs[System.Collections.Generic.HashSet_SymmetricExceptWith#02](~/add/codesnippet/csharp/1f894d18-7027-451d-9d40-_1.cs)]"
  syntax:
    content: public void SymmetricExceptWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
  overload: System.Collections.Generic.HashSet`1.SymmetricExceptWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: ICollection<T>.Add(T)
  nameWithType: HashSet<T>.ICollection<T>.Add(T)
  fullName: System.Collections.Generic.HashSet<T>.ICollection<T>.Add(T)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Adds an item to an <xref href="stem.Collections.Generic.ICollection%601"></xref> object.
  remarks: If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation. If the capacity must be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.List%601.Count%2A>.
  syntax:
    content: void ICollection<T>.Add (T item);
    parameters:
    - id: item
      type: T
      description: The object to add to the <xref href="stem.Collections.Generic.ICollection%601"></xref> object.
  overload: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection<T>#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="stem.Collections.Generic.ICollection%601"></xref> is read-only.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: ICollection<T>.IsReadOnly
  nameWithType: HashSet<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.HashSet<T>.ICollection<T>.IsReadOnly
  type: Property
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether a collection is read-only.
  remarks: Retrieving the value of this property is an O(1) operation.
  syntax:
    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the collection is read-only; otherwise, `false`.'
  overload: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: HashSet<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.IEnumerable<T>.GetEnumerator()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through a collection.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  \n  \n The <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator object instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: An <xref href="stem.Collections.Generic.IEnumerator%601"></xref> object that can be used to iterate through the collection.
  overload: System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: HashSet<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through a collection.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n The <xref:System.Collections.IEnumerator.Current%2A> property returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator"></xref> object that can be used to iterate through the collection.
  overload: System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: TrimExcess()
  nameWithType: HashSet<T>.TrimExcess()
  fullName: System.Collections.Generic.HashSet<T>.TrimExcess()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Sets the capacity of a <xref href="stem.Collections.Generic.HashSet%601"></xref> object to the actual number of elements it contains, rounded up to a nearby, implementation-specific value.
  remarks: "You can use the TrimExcess method to minimize a <xref:System.Collections.Generic.HashSet%601> object's memory overhead once it is known that no new elements will be added. To completely clear a <xref:System.Collections.Generic.HashSet%601> object and release all memory referenced by it, call this method after calling the <xref:System.Collections.Generic.HashSet%601.Clear%2A> method.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.HashSet%601.Count%2A>."
  example:
  - "The following example creates and populates a <xref:System.Collections.Generic.HashSet%601> collection, and then clears the collection and releases the memory referenced by it.  \n  \n [!code-cs[System.Collections.Generic.HashSet_Clear#02](~/add/codesnippet/csharp/m-system.collections.gen_62_1.cs)]\n [!code-vb[System.Collections.Generic.HashSet_Clear#02](~/add/codesnippet/visualbasic/m-system.collections.gen_62_1.vb)]"
  syntax:
    content: public void TrimExcess ();
    parameters: []
  overload: System.Collections.Generic.HashSet`1.TrimExcess*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  id: UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  name: UnionWith(IEnumerable<T>)
  nameWithType: HashSet<T>.UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.UnionWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Collections.Generic
  summary: Modifies the current <xref href="stem.Collections.Generic.HashSet%601"></xref> object to contain all elements that are present in itself, the specified collection, or both.
  remarks: This method is an O(`n`) operation, where `n` is the number of elements in the `other` parameter.
  example:
  - "The following example demonstrates how to merge two disparate sets. This example creates two <xref:System.Collections.Generic.HashSet%601> objects, and populates them with even and odd numbers, respectively. A third <xref:System.Collections.Generic.HashSet%601> object is created from the set that contains the even numbers. The example then calls the UnionWith method, which adds the odd number set to the third set.  \n  \n [!code-cs[System.Collections.Generic.HashSet_UnionWith#01](~/add/codesnippet/csharp/97d9d530-0cf9-483a-9e81-_1.cs)]\n [!code-vb[System.Collections.Generic.HashSet_UnionWith#01](~/add/codesnippet/visualbasic/97d9d530-0cf9-483a-9e81-_1.vb)]"
  syntax:
    content: public void UnionWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current <xref href="stem.Collections.Generic.HashSet%601"></xref> object.
  overload: System.Collections.Generic.HashSet`1.UnionWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\HashSet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/HashSet`1.xml
  version:
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Runtime.Serialization.SerializationException
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationException
  nameWithType: SerializationException
  fullName: System.Runtime.Serialization.SerializationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Collections.Generic.HashSet`1.#ctor
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: HashSet<T>()
  nameWithType: HashSet<T>.HashSet<T>()
  fullName: System.Collections.Generic.HashSet<T>.HashSet<T>()
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: HashSet<T>(IEnumerable<T>)
  nameWithType: HashSet<T>.HashSet<T>(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.HashSet<T>(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: HashSet<T>(IEqualityComparer<T>)
  nameWithType: HashSet<T>.HashSet<T>(IEqualityComparer<T>)
  fullName: System.Collections.Generic.HashSet<T>.HashSet<T>(IEqualityComparer<T>)
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: HashSet<T>(IEnumerable<T>,IEqualityComparer<T>)
  nameWithType: HashSet<T>.HashSet<T>(IEnumerable<T>,IEqualityComparer<T>)
  fullName: System.Collections.Generic.HashSet<T>.HashSet<T>(IEnumerable<T>,IEqualityComparer<T>)
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: HashSet<T>(SerializationInfo,StreamingContext)
  nameWithType: HashSet<T>.HashSet<T>(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.HashSet<T>.HashSet<T>(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Collections.Generic.HashSet`1.Add(`0)
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: Add(T)
  nameWithType: HashSet<T>.Add(T)
  fullName: System.Collections.Generic.HashSet<T>.Add(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.HashSet`1.Clear
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: Clear()
  nameWithType: HashSet<T>.Clear()
  fullName: System.Collections.Generic.HashSet<T>.Clear()
- uid: System.Collections.Generic.HashSet`1.Comparer
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: Comparer
  nameWithType: HashSet<T>.Comparer
  fullName: System.Collections.Generic.HashSet<T>.Comparer
- uid: System.Collections.Generic.HashSet`1.Contains(`0)
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: Contains(T)
  nameWithType: HashSet<T>.Contains(T)
  fullName: System.Collections.Generic.HashSet<T>.Contains(T)
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[])
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: CopyTo(T[])
  nameWithType: HashSet<T>.CopyTo(T[])
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[])
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: HashSet<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[],Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: CopyTo(T[],Int32,Int32)
  nameWithType: HashSet<T>.CopyTo(T[],Int32,Int32)
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[],Int32,Int32)
- uid: System.Collections.Generic.HashSet`1.Count
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: Count
  nameWithType: HashSet<T>.Count
  fullName: System.Collections.Generic.HashSet<T>.Count
- uid: System.Collections.Generic.HashSet`1.CreateSetComparer
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: CreateSetComparer()
  nameWithType: HashSet<T>.CreateSetComparer()
  fullName: System.Collections.Generic.HashSet<T>.CreateSetComparer()
- uid: System.Collections.Generic.IEqualityComparer{System.Collections.Generic.HashSet{T}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<HashSet<T>>
  nameWithType: IEqualityComparer<HashSet<T>>
  fullName: System.Collections.Generic.IEqualityComparer<System.Collections.Generic.HashSet<T>>
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: IEqualityComparer<System.Collections.Generic.HashSet<T>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: ExceptWith(IEnumerable<T>)
  nameWithType: HashSet<T>.ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.ExceptWith(IEnumerable<T>)
- uid: System.Collections.Generic.HashSet`1.GetEnumerator
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: HashSet<T>.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.GetEnumerator()
- uid: System.Collections.Generic.HashSet`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: HashSet<T>+Enumerator
  nameWithType: HashSet<T>+Enumerator
  fullName: System.Collections.Generic.HashSet<T>+Enumerator
- uid: System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: HashSet<T>.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Generic.HashSet<T>.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: IntersectWith(IEnumerable<T>)
  nameWithType: HashSet<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IntersectWith(IEnumerable<T>)
- uid: System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsProperSubsetOf(IEnumerable<T>)
- uid: System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsProperSupersetOf(IEnumerable<T>)
- uid: System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsSubsetOf(IEnumerable<T>)
- uid: System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: HashSet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsSupersetOf(IEnumerable<T>)
- uid: System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: OnDeserialization(Object)
  nameWithType: HashSet<T>.OnDeserialization(Object)
  fullName: System.Collections.Generic.HashSet<T>.OnDeserialization(Object)
- uid: System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: Overlaps(IEnumerable<T>)
  nameWithType: HashSet<T>.Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.Overlaps(IEnumerable<T>)
- uid: System.Collections.Generic.HashSet`1.Remove(`0)
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: Remove(T)
  nameWithType: HashSet<T>.Remove(T)
  fullName: System.Collections.Generic.HashSet<T>.Remove(T)
- uid: System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: RemoveWhere(Predicate<T>)
  nameWithType: HashSet<T>.RemoveWhere(Predicate<T>)
  fullName: System.Collections.Generic.HashSet<T>.RemoveWhere(Predicate<T>)
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: SetEquals(IEnumerable<T>)
  nameWithType: HashSet<T>.SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.SetEquals(IEnumerable<T>)
- uid: System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: HashSet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.SymmetricExceptWith(IEnumerable<T>)
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: ICollection<T>.Add(T)
  nameWithType: HashSet<T>.ICollection<T>.Add(T)
  fullName: System.Collections.Generic.HashSet<T>.ICollection<T>.Add(T)
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: ICollection<T>.IsReadOnly
  nameWithType: HashSet<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.HashSet<T>.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: HashSet<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.IEnumerable<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: HashSet<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.HashSet`1.TrimExcess
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: TrimExcess()
  nameWithType: HashSet<T>.TrimExcess()
  fullName: System.Collections.Generic.HashSet<T>.TrimExcess()
- uid: System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: UnionWith(IEnumerable<T>)
  nameWithType: HashSet<T>.UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.UnionWith(IEnumerable<T>)
- uid: System.Collections.Generic.HashSet`1.#ctor*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: HashSet<T>
  nameWithType: HashSet<T>.HashSet<T>
- uid: System.Collections.Generic.HashSet`1.Add*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: Add
  nameWithType: HashSet<T>.Add
- uid: System.Collections.Generic.HashSet`1.Clear*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: Clear
  nameWithType: HashSet<T>.Clear
- uid: System.Collections.Generic.HashSet`1.Comparer*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: Comparer
  nameWithType: HashSet<T>.Comparer
- uid: System.Collections.Generic.HashSet`1.Contains*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: Contains
  nameWithType: HashSet<T>.Contains
- uid: System.Collections.Generic.HashSet`1.CopyTo*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: CopyTo
  nameWithType: HashSet<T>.CopyTo
- uid: System.Collections.Generic.HashSet`1.Count*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: Count
  nameWithType: HashSet<T>.Count
- uid: System.Collections.Generic.HashSet`1.CreateSetComparer*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: CreateSetComparer
  nameWithType: HashSet<T>.CreateSetComparer
- uid: System.Collections.Generic.HashSet`1.ExceptWith*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: ExceptWith
  nameWithType: HashSet<T>.ExceptWith
- uid: System.Collections.Generic.HashSet`1.GetEnumerator*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: GetEnumerator
  nameWithType: HashSet<T>.GetEnumerator
- uid: System.Collections.Generic.HashSet`1.GetObjectData*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: GetObjectData
  nameWithType: HashSet<T>.GetObjectData
- uid: System.Collections.Generic.HashSet`1.IntersectWith*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: IntersectWith
  nameWithType: HashSet<T>.IntersectWith
- uid: System.Collections.Generic.HashSet`1.IsProperSubsetOf*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: IsProperSubsetOf
  nameWithType: HashSet<T>.IsProperSubsetOf
- uid: System.Collections.Generic.HashSet`1.IsProperSupersetOf*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: IsProperSupersetOf
  nameWithType: HashSet<T>.IsProperSupersetOf
- uid: System.Collections.Generic.HashSet`1.IsSubsetOf*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: IsSubsetOf
  nameWithType: HashSet<T>.IsSubsetOf
- uid: System.Collections.Generic.HashSet`1.IsSupersetOf*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: IsSupersetOf
  nameWithType: HashSet<T>.IsSupersetOf
- uid: System.Collections.Generic.HashSet`1.OnDeserialization*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: OnDeserialization
  nameWithType: HashSet<T>.OnDeserialization
- uid: System.Collections.Generic.HashSet`1.Overlaps*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: Overlaps
  nameWithType: HashSet<T>.Overlaps
- uid: System.Collections.Generic.HashSet`1.Remove*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: Remove
  nameWithType: HashSet<T>.Remove
- uid: System.Collections.Generic.HashSet`1.RemoveWhere*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: RemoveWhere
  nameWithType: HashSet<T>.RemoveWhere
- uid: System.Collections.Generic.HashSet`1.SetEquals*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: SetEquals
  nameWithType: HashSet<T>.SetEquals
- uid: System.Collections.Generic.HashSet`1.SymmetricExceptWith*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: SymmetricExceptWith
  nameWithType: HashSet<T>.SymmetricExceptWith
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection<T>#Add*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Add
  nameWithType: HashSet<T>.System.Collections.Generic.ICollection<T>.Add
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType: HashSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType: HashSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: HashSet<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Generic.HashSet`1.TrimExcess*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: TrimExcess
  nameWithType: HashSet<T>.TrimExcess
- uid: System.Collections.Generic.HashSet`1.UnionWith*
  parent: System.Collections.Generic.HashSet`1
  isExternal: false
  name: UnionWith
  nameWithType: HashSet<T>.UnionWith
