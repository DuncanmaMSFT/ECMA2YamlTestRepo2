### YamlMime:ManagedReference
items:
- uid: System.Tuple`5
  id: Tuple`5
  children:
  - System.Tuple`5.#ctor(`0,`1,`2,`3,`4)
  - System.Tuple`5.Equals(System.Object)
  - System.Tuple`5.GetHashCode
  - System.Tuple`5.Item1
  - System.Tuple`5.Item2
  - System.Tuple`5.Item3
  - System.Tuple`5.Item4
  - System.Tuple`5.Item5
  - System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  - System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  - System.Tuple`5.System#IComparable#CompareTo(System.Object)
  - System.Tuple`5.ToString
  langs:
  - csharp
  name: Tuple<T1,T2,T3,T4,T5>
  nameWithType: Tuple<T1,T2,T3,T4,T5>
  fullName: System.Tuple<T1,T2,T3,T4,T5>
  type: Class
  summary: Represents a 5-tuple, or quintuple.
  remarks: "A tuple is a data structure that has a specific number and sequence of values. The Tuple(T1, class represents a 5-tuple, or quintuple, which is a tuple that has five components.  \n  \n You can instantiate a Tuple(T1, object by calling either the <xref:System.Tuple%605.%23ctor%2A> constructor or the static <xref:System.Tuple.Create%60%605%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%29?displayProperty=fullName> method. You can retrieve the value of the tuple's components by using the read-only <xref:System.Tuple%605.Item1%2A>, <xref:System.Tuple%605.Item2%2A>, <xref:System.Tuple%605.Item3%2A>, <xref:System.Tuple%605.Item4%2A>, and <xref:System.Tuple%605.Item5%2A> instance properties.  \n  \n Tuples are commonly used in four different ways:  \n  \n-   To represent a single set of data. For example, a tuple can represent a database record, and its components can represent individual fields of the record.  \n  \n-   To provide easy access to, and manipulation of, a data set. The following example defines an array of Tuple(T1, objects that contain the names of running backs in American football, the number of games in which they played, and the number of carries, total yards gained, and touchdowns scored during those games. The array is passed to the `ComputeStatistics` method, which calculates each running back's number of carries per game, average yards per game, average yards per carry, and average number of touchdowns per attempt.  \n  \n     [!code-vb[System.Tuple`5.Class#1](~/add/codesnippet/visualbasic/t-system.tuple`5_1.vb)]\n     [!code-cs[System.Tuple`5.Class#1](~/add/codesnippet/csharp/t-system.tuple`5_1.cs)]  \n  \n-   To return multiple values from a method without the use of `out` parameters (in C#) or `ByRef` parameters (in Visual Basic). For example, the previous example returns its computed statistics, along with the name of the player, in an array of Tuple(T1, objects.  \n  \n-   To pass multiple values to a method through a single parameter. For example, the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> method has a single parameter that lets you supply one value to the method that the thread executes at startup. If you supply a Tuple(T1, object as the method argument, you can supply the threadâ€™s startup routine with five items of data."
  syntax:
    content: 'public class Tuple<T1,T2,T3,T4,T5> : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable'
    typeParameters:
    - id: T1
      description: The type of the tuple's first component.
    - id: T2
      description: The type of the tuple's second component.
    - id: T3
      description: The type of the tuple's third component.
    - id: T4
      description: The type of the tuple's fourth component.
    - id: T5
      description: The type of the tuple's fifth component.
  inheritance:
  - System.Object
  implements:
  - System.Collections.IStructuralComparable
  - System.Collections.IStructuralEquatable
  - System.IComparable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`5.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`5.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`5.#ctor(`0,`1,`2,`3,`4)
  id: '#ctor(`0,`1,`2,`3,`4)'
  parent: System.Tuple`5
  langs:
  - csharp
  name: Tuple<T1,T2,T3,T4,T5>(T1,T2,T3,T4,T5)
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Tuple<T1,T2,T3,T4,T5>(T1,T2,T3,T4,T5)
  fullName: System.Tuple<T1,T2,T3,T4,T5>.Tuple<T1,T2,T3,T4,T5>(T1,T2,T3,T4,T5)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: Initializes a new instance of the <xref href="stem.Tuple%605"></xref> class.
  remarks: "You can also use the static <xref:System.Tuple.Create%60%605%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%29?displayProperty=fullName> method to instantiate a 5-tuple object without having to explicitly specify the types of its components. The following example uses the <xref:System.Tuple.Create%60%605%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%29?displayProperty=fullName> method to instantiate a 5-tuple whose first component is of type <xref:System.String> and its remaining four components are of type <xref:System.Int32>.  \n  \n [!code-cs[System.Tuple.Create#9](~/add/codesnippet/csharp/m-system.tuple`5.sharpct_1.cs)]\n [!code-vb[System.Tuple.Create#9](~/add/codesnippet/visualbasic/m-system.tuple`5.sharpct_1.vb)]  \n  \n This is equivalent to the following call to the Tuple(T1, class constructor.  \n  \n [!code-cs[System.Tuple.Create#10](~/add/codesnippet/csharp/m-system.tuple`5.sharpct_2.cs)]\n [!code-vb[System.Tuple.Create#10](~/add/codesnippet/visualbasic/m-system.tuple`5.sharpct_2.vb)]"
  syntax:
    content: public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5);
    parameters:
    - id: item1
      type: T1
      description: The value of the tuple's first component.
    - id: item2
      type: T2
      description: The value of the tuple's second component.
    - id: item3
      type: T3
      description: The value of the tuple's third component.
    - id: item4
      type: T4
      description: The value of the tuple's fourth component
    - id: item5
      type: T5
      description: The value of the tuple's fifth component.
  overload: System.Tuple`5.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`5.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`5.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`5.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Tuple`5
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Equals(Object)
  fullName: System.Tuple<T1,T2,T3,T4,T5>.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether the current <xref href="stem.Tuple%605"></xref> object is equal to a specified object.
  remarks: "The `obj` parameter is considered to be equal to the current instance under the following conditions:  \n  \n-   It is a <xref:System.Tuple%605> object.  \n  \n-   Its five components are of the same types as the current instance.  \n  \n-   Its five components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component."
  example:
  - "The following example defines an array of 5-tuple objects that contain data about the temperatures of patients in two test groups. The first component of the array provides the number of the test group, and the second through fifth components provide the temperatures of a patient at hourly intervals. The Equals method is called to compare every <xref:System.Tuple%605> object with every other <xref:System.Tuple%605> object. The output illustrates that the Equals method returns `true` only when all five components of the <xref:System.Tuple%605> objects have equal values.  \n  \n [!code-vb[System.Tuple`5.Equals#1](~/add/codesnippet/visualbasic/m-system.tuple`5.equals-_1.vb)]\n [!code-cs[System.Tuple`5.Equals#1](~/add/codesnippet/csharp/m-system.tuple`5.equals-_1.cs)]"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with this instance.
    return:
      type: System.Boolean
      description: '`true` if the current instance is equal to the specified object; otherwise, `false`.'
  overload: System.Tuple`5.Equals*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`5.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`5.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`5.GetHashCode
  id: GetHashCode
  parent: System.Tuple`5
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Tuple<T1,T2,T3,T4,T5>.GetHashCode()
  fullName: System.Tuple<T1,T2,T3,T4,T5>.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns the hash code for the current <xref href="stem.Tuple%605"></xref> object.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Tuple`5.GetHashCode*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`5.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`5.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`5.Item1
  id: Item1
  parent: System.Tuple`5
  langs:
  - csharp
  name: Item1
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Item1
  fullName: System.Tuple<T1,T2,T3,T4,T5>.Item1
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value of the current <xref href="stem.Tuple%605"></xref> object's first component.
  remarks: "You can dynamically determine the type of the Item1 component in one of two ways:  \n  \n-   By calling the `GetType` method on the value that is returned by the Item1 property.  \n  \n-   By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%605> object, and retrieving the first element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method."
  example:
  - "The following example defines an array of <xref:System.Tuple%605> objects whose components contain the name of a state in the United States, its population in 1990 and 2000, its population change in this 10-year period, and the percentage change in its population. It then iterates through the array and displays the value of each component in a tuple.  \n  \n [!code-cs[System.Tuple`5.Item1#1](~/add/codesnippet/csharp/p-system.tuple`5.item1_1.cs)]\n [!code-vb[System.Tuple`5.Item1#1](~/add/codesnippet/visualbasic/p-system.tuple`5.item1_1.vb)]"
  syntax:
    content: public T1 Item1 { get; }
    return:
      type: T1
      description: The value of the current <xref href="stem.Tuple%605"></xref> object's first component.
  overload: System.Tuple`5.Item1*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`5.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`5.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`5.Item2
  id: Item2
  parent: System.Tuple`5
  langs:
  - csharp
  name: Item2
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Item2
  fullName: System.Tuple<T1,T2,T3,T4,T5>.Item2
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value of the current <xref href="stem.Tuple%605"></xref> object's second component.
  remarks: "You can dynamically determine the type of the <xref:System.Tuple%604.Item2%2A> component in one of two ways:  \n  \n-   By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%604.Item2%2A> property.  \n  \n-   By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%604> object, and retrieving the second element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method."
  example:
  - "The following example defines an array of <xref:System.Tuple%605> objects whose components contain the name of a state in the United States, its population in 1990 and 2000, its population change in this 10-year period, and the percentage change in its population. It then iterates through the array and displays the value of each component in a tuple.  \n  \n [!code-cs[System.Tuple`5.Item1#1](~/add/codesnippet/csharp/p-system.tuple`5.item2_1.cs)]\n [!code-vb[System.Tuple`5.Item1#1](~/add/codesnippet/visualbasic/p-system.tuple`5.item2_1.vb)]"
  syntax:
    content: public T2 Item2 { get; }
    return:
      type: T2
      description: The value of the current <xref href="stem.Tuple%605"></xref> object's second component.
  overload: System.Tuple`5.Item2*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`5.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`5.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`5.Item3
  id: Item3
  parent: System.Tuple`5
  langs:
  - csharp
  name: Item3
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Item3
  fullName: System.Tuple<T1,T2,T3,T4,T5>.Item3
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value of the current <xref href="stem.Tuple%605"></xref> object's third component.
  remarks: "You can dynamically determine the type of the <xref:System.Tuple%604.Item2%2A> component in one of two ways:  \n  \n-   By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%604.Item2%2A> property.  \n  \n-   By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%604> object, and retrieving the second element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method."
  example:
  - "The following example defines an array of <xref:System.Tuple%605> objects whose components contain the name of a state in the United States, its population in 1990 and 2000, its population change in this 10-year period, and the percentage change in its population. It then iterates through the array and displays the value of each component in a tuple.  \n  \n [!code-cs[System.Tuple`5.Item1#1](~/add/codesnippet/csharp/p-system.tuple`5.item3_1.cs)]\n [!code-vb[System.Tuple`5.Item1#1](~/add/codesnippet/visualbasic/p-system.tuple`5.item3_1.vb)]"
  syntax:
    content: public T3 Item3 { get; }
    return:
      type: T3
      description: The value of the current <xref href="stem.Tuple%605"></xref> object's third component.
  overload: System.Tuple`5.Item3*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`5.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`5.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`5.Item4
  id: Item4
  parent: System.Tuple`5
  langs:
  - csharp
  name: Item4
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Item4
  fullName: System.Tuple<T1,T2,T3,T4,T5>.Item4
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value of the current <xref href="stem.Tuple%605"></xref> object's fourth component.
  remarks: "You can dynamically determine the type of the <xref:System.Tuple%604.Item2%2A> component in one of two ways:  \n  \n-   By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%604.Item2%2A> property.  \n  \n-   By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%604> object, and retrieving the second element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method."
  example:
  - "The following example defines an array of <xref:System.Tuple%605> objects whose components contain the name of a state in the United States, its population in 1990 and 2000, its population change in this 10-year period, and the percentage change in its population. It then iterates through the array and displays the value of each component in a tuple.  \n  \n [!code-cs[System.Tuple`5.Item1#1](~/add/codesnippet/csharp/p-system.tuple`5.item4_1.cs)]\n [!code-vb[System.Tuple`5.Item1#1](~/add/codesnippet/visualbasic/p-system.tuple`5.item4_1.vb)]"
  syntax:
    content: public T4 Item4 { get; }
    return:
      type: T4
      description: The value of the current <xref href="stem.Tuple%605"></xref> object's fourth component.
  overload: System.Tuple`5.Item4*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`5.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`5.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`5.Item5
  id: Item5
  parent: System.Tuple`5
  langs:
  - csharp
  name: Item5
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Item5
  fullName: System.Tuple<T1,T2,T3,T4,T5>.Item5
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the value of the current <xref href="stem.Tuple%605"></xref> object's fifth component.
  remarks: "You can dynamically determine the type of the <xref:System.Tuple%604.Item2%2A> component in one of two ways:  \n  \n-   By calling the `GetType` method on the value that is returned by the <xref:System.Tuple%604.Item2%2A> property.  \n  \n-   By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%604> object, and retrieving the second element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method."
  example:
  - "The following example defines an array of <xref:System.Tuple%605> objects whose components contain the name of a state in the United Dates, its population in 1990 and 2000, its population change in this 10-year period, and the percentage change in its population. It then iterates through the array and displays the value of each component in a tuple.  \n  \n [!code-cs[System.Tuple`5.Item1#1](~/add/codesnippet/csharp/p-system.tuple`5.item5_1.cs)]\n [!code-vb[System.Tuple`5.Item1#1](~/add/codesnippet/visualbasic/p-system.tuple`5.item5_1.vb)]"
  syntax:
    content: public T5 Item5 { get; }
    return:
      type: T5
      description: The value of the current <xref href="stem.Tuple%605"></xref> object's fifth component.
  overload: System.Tuple`5.Item5*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`5.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`5.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  isEii: true
  parent: System.Tuple`5
  langs:
  - csharp
  name: IStructuralComparable.CompareTo(Object,IComparer)
  nameWithType: Tuple<T1,T2,T3,T4,T5>.IStructuralComparable.CompareTo(Object,IComparer)
  fullName: System.Tuple<T1,T2,T3,T4,T5>.IStructuralComparable.CompareTo(Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares the current <xref href="stem.Tuple%605"></xref> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Tuple%605> instance is cast to an <xref:System.Collections.IStructuralComparable> interface.  \n  \n Although this method can be called directly, it is most commonly called by collection-sorting methods that include <xref:System.Collections.IComparer> parameters to order the members of a collection. For example, it is called by the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=fullName> method and the <xref:System.Collections.SortedList.Add%2A> method of a <xref:System.Collections.SortedList> object that is instantiated by using the <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=fullName> constructor.  \n  \n> [!CAUTION]\n>  The IStructuralComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <xref:System.Tuple%605.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> method."
  example:
  - "The following example creates an array of <xref:System.Tuple%605> objects that contain career statistical data for running backs in American professional football. The 5-tuple's components consist of the player's name, the number of games in which he played, the number of carries or attempts, the total number of yards gained, and the number of touchdowns scored. The example displays the components of each tuple in the array in unsorted order, sorts the array, and then calls <xref:System.Tuple%605.ToString%2A> to display each tuple in sorted order. To sort the array, the example defines a generic `YardsGained` class that implements the <xref:System.Collections.IComparer> interface and sorts the <xref:System.Tuple%605> objects in descending order by the value of their fourth component (yards gained) rather than by their first component. Note that the example does not directly call the IStructuralComparable.CompareTo method. This method is called implicitly by the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=fullName> method for each element in the array.  \n  \n [!code-cs[System.Tuple`5.CompareTo#2](~/add/codesnippet/csharp/a1938c1e-2182-4de6-9a91-_1.cs)]\n [!code-vb[System.Tuple`5.CompareTo#2](~/add/codesnippet/visualbasic/a1938c1e-2182-4de6-9a91-_1.vb)]"
  syntax:
    content: int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);
    parameters:
    - id: other
      type: System.Object
      description: An object to compare with the current instance.
    - id: comparer
      type: System.Collections.IComparer
      description: An object that provides custom rules for comparison.
    return:
      type: System.Int32
      description: "A signed integer that indicates the relative position of this instance and <code>other</code> in the sort order, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> A negative integer  \n  \n </td><td> This instance precedes <code>other</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> This instance and <code>other</code> have the same position in the sort order.  \n  \n </td></tr><tr><td> A positive integer  \n  \n </td><td> This instance follows <code>other</code>.  \n  \n </td></tr></tbody></table>"
  overload: System.Tuple`5.System#Collections#IStructuralComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>other</code> is not a <xref href="stem.Tuple%605"></xref> object.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`5.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`5.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Tuple`5
  langs:
  - csharp
  name: IStructuralEquatable.Equals(Object,IEqualityComparer)
  nameWithType: Tuple<T1,T2,T3,T4,T5>.IStructuralEquatable.Equals(Object,IEqualityComparer)
  fullName: System.Tuple<T1,T2,T3,T4,T5>.IStructuralEquatable.Equals(Object,IEqualityComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a value that indicates whether the current <xref href="stem.Tuple%605"></xref> object is equal to a specified object based on a specified comparison method.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Tuple%605> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.  \n  \n The <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> implementation is called only if `other` is not `null`, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <xref:System.Tuple%605> object whose components are of the same types as the current instance. The IStructuralEquatable.Equals method first passes the <xref:System.Tuple%605.Item1%2A> values of the <xref:System.Tuple%605> objects to be compared to the <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> implementation. If this method call returns `true`, the method is called again and passed the <xref:System.Tuple%605.Item2%2A> values of the two <xref:System.Tuple%605> objects. This continues until the method call returns `false` when it compares a specific pair of `Item` values, or the two <xref:System.Tuple%605.Item5%2A> values are passed to the method."
  example:
  - "The following example defines a `DoubleComparer` class that implements the <xref:System.Collections.IEqualityComparer> interface. The example instantiates two <xref:System.Tuple%605> objects by using a random number generator to populate their second through fifth components, casts the first instance to an <xref:System.Collections.IStructuralEquatable> interface, and then uses a `DoubleComparer` object to test the two <xref:System.Tuple%605> objects for approximate equality.  \n  \n [!code-cs[System.Tuple`5.Equals#2](~/add/codesnippet/csharp/860d95ae-8a3f-4549-acdf-_1.cs)]\n [!code-vb[System.Tuple`5.Equals#2](~/add/codesnippet/visualbasic/860d95ae-8a3f-4549-acdf-_1.vb)]"
  syntax:
    content: bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);
    parameters:
    - id: other
      type: System.Object
      description: The object to compare with this instance.
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: An object that defines the method to use to evaluate whether the two objects are equal.
    return:
      type: System.Boolean
      description: '`true` if the current instance is equal to the specified object; otherwise, `false`.'
  overload: System.Tuple`5.System#Collections#IStructuralEquatable#Equals*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`5.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`5.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Tuple`5
  langs:
  - csharp
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType: Tuple<T1,T2,T3,T4,T5>.IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Tuple<T1,T2,T3,T4,T5>.IStructuralEquatable.GetHashCode(IEqualityComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Calculates the hash code for the current <xref href="stem.Tuple%605"></xref> object by using a specified computation method.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Tuple%605> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.  \n  \n The method simply wraps a call to the `comparer` object's <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=fullName> implementation.  \n  \n The algorithm used to compute the hash code should return the same hash code for two <xref:System.Tuple%605> objects that are considered to be equal."
  syntax:
    content: int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: An object whose <xref href="stem.Collections.IEqualityComparer.GetHashCode%2A"></xref> method calculates the hash code of the current <xref href="stem.Tuple%605"></xref> object.
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`5.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`5.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`5.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.Tuple`5
  langs:
  - csharp
  name: IComparable.CompareTo(Object)
  nameWithType: Tuple<T1,T2,T3,T4,T5>.IComparable.CompareTo(Object)
  fullName: System.Tuple<T1,T2,T3,T4,T5>.IComparable.CompareTo(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Compares the current <xref href="stem.Tuple%605"></xref> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.
  remarks: "This member is an explicit interface member implementation. It can be used only when the <xref:System.Tuple%605> instance is cast to an <xref:System.IComparable> interface.  \n  \n This method provides the <xref:System.IComparable.CompareTo%2A?displayProperty=fullName> implementation for the <xref:System.Tuple%605> class. Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> and <xref:System.Collections.SortedList.Add%2A?displayProperty=fullName>, to order the members of a collection.  \n  \n> [!CAUTION]\n>  The IComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <xref:System.Tuple%605.Equals%28System.Object%29?displayProperty=fullName> method.  \n  \n The IComparable.CompareTo method uses the default object  comparer to compare each component."
  example:
  - "The following example creates an array of <xref:System.Tuple%605> objects that contain career statistics for running backs in American professional football. The five components consist of the player's name, the number of games in which he played, the number of carries or attempts, the total number of yards gained, and the number of touchdowns scored. The example displays the components of each tuple in the array in unsorted order, sorts the array, and then calls <xref:System.Tuple%605.ToString%2A> to display each tuple in sorted order. The output shows that the array has been sorted by name, which is the first component. Note that the example does not directly call the IComparable.CompareTo method. This method is called implicitly by the <xref:System.Array.Sort%28System.Array%29> method for each element in the array.  \n  \n [!code-cs[System.Tuple`5.CompareTo#1](~/add/codesnippet/csharp/m-system.tuple`5.systems_1.cs)]\n [!code-vb[System.Tuple`5.CompareTo#1](~/add/codesnippet/visualbasic/m-system.tuple`5.systems_1.vb)]"
  syntax:
    content: int IComparable.CompareTo (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with the current instance.
    return:
      type: System.Int32
      description: "A signed integer that indicates the relative position of this instance and <code>obj</code> in the sort order, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> A negative integer  \n  \n </td><td> This instance precedes <code>obj</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> This instance and <code>obj</code> have the same position in the sort order.  \n  \n </td></tr><tr><td> A positive integer  \n  \n </td><td> This instance follows <code>obj</code>.  \n  \n </td></tr></tbody></table>"
  overload: System.Tuple`5.System#IComparable#CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>obj</code> is not a <xref href="stem.Tuple%605"></xref> object.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`5.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`5.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Tuple`5.ToString
  id: ToString
  parent: System.Tuple`5
  langs:
  - csharp
  name: ToString()
  nameWithType: Tuple<T1,T2,T3,T4,T5>.ToString()
  fullName: System.Tuple<T1,T2,T3,T4,T5>.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a string that represents the value of this <xref href="stem.Tuple%605"></xref> instance.
  remarks: The string returned by this method takes the form (*Item1*, *Item2*, *Item3*, *Item4*, `Item5`), where *Item1*, *Item2*, *Item3*, *Item4*, and `Item5` represent the values of the <xref:System.Tuple%605.Item1%2A>, <xref:System.Tuple%605.Item2%2A>, <xref:System.Tuple%605.Item3%2A>, <xref:System.Tuple%605.Item4%2A>, and <xref:System.Tuple%605.Item5%2A> properties, respectively. If any of the property values is `null`, it is represented as <xref:System.String.Empty?displayProperty=fullName>.
  example:
  - "The following example illustrates the ToString method. It displays an array of 5-tuple objects that contain the name of a state in the United States, its population in 1990 and 2000, its population change in this 10-year period, and the annual rate of population change.  \n  \n [!code-cs[System.Tuple`5.ToString#1](~/add/codesnippet/csharp/m-system.tuple`5.tostring_1.cs)]\n [!code-vb[System.Tuple`5.ToString#1](~/add/codesnippet/visualbasic/m-system.tuple`5.tostring_1.vb)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The string representation of this <xref href="stem.Tuple%605"></xref> object.
  overload: System.Tuple`5.ToString*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System\Tuple`5.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System/Tuple`5.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Tuple`5.#ctor(`0,`1,`2,`3,`4)
  parent: System.Tuple`5
  isExternal: false
  name: Tuple<T1,T2,T3,T4,T5>(T1,T2,T3,T4,T5)
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Tuple<T1,T2,T3,T4,T5>(T1,T2,T3,T4,T5)
  fullName: System.Tuple<T1,T2,T3,T4,T5>.Tuple<T1,T2,T3,T4,T5>(T1,T2,T3,T4,T5)
- uid: T1
  isExternal: true
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  isExternal: true
  name: T2
  nameWithType: T2
  fullName: T2
- uid: T3
  isExternal: true
  name: T3
  nameWithType: T3
  fullName: T3
- uid: T4
  isExternal: true
  name: T4
  nameWithType: T4
  fullName: T4
- uid: T5
  isExternal: true
  name: T5
  nameWithType: T5
  fullName: T5
- uid: System.Tuple`5.Equals(System.Object)
  parent: System.Tuple`5
  isExternal: false
  name: Equals(Object)
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Equals(Object)
  fullName: System.Tuple<T1,T2,T3,T4,T5>.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Tuple`5.GetHashCode
  parent: System.Tuple`5
  isExternal: false
  name: GetHashCode()
  nameWithType: Tuple<T1,T2,T3,T4,T5>.GetHashCode()
  fullName: System.Tuple<T1,T2,T3,T4,T5>.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Tuple`5.Item1
  parent: System.Tuple`5
  isExternal: false
  name: Item1
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Item1
  fullName: System.Tuple<T1,T2,T3,T4,T5>.Item1
- uid: System.Tuple`5.Item2
  parent: System.Tuple`5
  isExternal: false
  name: Item2
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Item2
  fullName: System.Tuple<T1,T2,T3,T4,T5>.Item2
- uid: System.Tuple`5.Item3
  parent: System.Tuple`5
  isExternal: false
  name: Item3
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Item3
  fullName: System.Tuple<T1,T2,T3,T4,T5>.Item3
- uid: System.Tuple`5.Item4
  parent: System.Tuple`5
  isExternal: false
  name: Item4
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Item4
  fullName: System.Tuple<T1,T2,T3,T4,T5>.Item4
- uid: System.Tuple`5.Item5
  parent: System.Tuple`5
  isExternal: false
  name: Item5
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Item5
  fullName: System.Tuple<T1,T2,T3,T4,T5>.Item5
- uid: System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Tuple`5
  isExternal: false
  name: IStructuralComparable.CompareTo(Object,IComparer)
  nameWithType: Tuple<T1,T2,T3,T4,T5>.IStructuralComparable.CompareTo(Object,IComparer)
  fullName: System.Tuple<T1,T2,T3,T4,T5>.IStructuralComparable.CompareTo(Object,IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Tuple`5
  isExternal: false
  name: IStructuralEquatable.Equals(Object,IEqualityComparer)
  nameWithType: Tuple<T1,T2,T3,T4,T5>.IStructuralEquatable.Equals(Object,IEqualityComparer)
  fullName: System.Tuple<T1,T2,T3,T4,T5>.IStructuralEquatable.Equals(Object,IEqualityComparer)
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Tuple`5
  isExternal: false
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType: Tuple<T1,T2,T3,T4,T5>.IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Tuple<T1,T2,T3,T4,T5>.IStructuralEquatable.GetHashCode(IEqualityComparer)
- uid: System.Tuple`5.System#IComparable#CompareTo(System.Object)
  parent: System.Tuple`5
  isExternal: false
  name: IComparable.CompareTo(Object)
  nameWithType: Tuple<T1,T2,T3,T4,T5>.IComparable.CompareTo(Object)
  fullName: System.Tuple<T1,T2,T3,T4,T5>.IComparable.CompareTo(Object)
- uid: System.Tuple`5.ToString
  parent: System.Tuple`5
  isExternal: false
  name: ToString()
  nameWithType: Tuple<T1,T2,T3,T4,T5>.ToString()
  fullName: System.Tuple<T1,T2,T3,T4,T5>.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Tuple`5.#ctor*
  parent: System.Tuple`5
  isExternal: false
  name: Tuple<T1,T2,T3,T4,T5>
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Tuple<T1,T2,T3,T4,T5>
- uid: System.Tuple`5.Equals*
  parent: System.Tuple`5
  isExternal: false
  name: Equals
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Equals
- uid: System.Tuple`5.GetHashCode*
  parent: System.Tuple`5
  isExternal: false
  name: GetHashCode
  nameWithType: Tuple<T1,T2,T3,T4,T5>.GetHashCode
- uid: System.Tuple`5.Item1*
  parent: System.Tuple`5
  isExternal: false
  name: Item1
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Item1
- uid: System.Tuple`5.Item2*
  parent: System.Tuple`5
  isExternal: false
  name: Item2
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Item2
- uid: System.Tuple`5.Item3*
  parent: System.Tuple`5
  isExternal: false
  name: Item3
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Item3
- uid: System.Tuple`5.Item4*
  parent: System.Tuple`5
  isExternal: false
  name: Item4
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Item4
- uid: System.Tuple`5.Item5*
  parent: System.Tuple`5
  isExternal: false
  name: Item5
  nameWithType: Tuple<T1,T2,T3,T4,T5>.Item5
- uid: System.Tuple`5.System#Collections#IStructuralComparable#CompareTo*
  parent: System.Tuple`5
  isExternal: false
  name: System.Collections.IStructuralComparable.CompareTo
  nameWithType: Tuple<T1,T2,T3,T4,T5>.System.Collections.IStructuralComparable.CompareTo
- uid: System.Tuple`5.System#Collections#IStructuralEquatable#Equals*
  parent: System.Tuple`5
  isExternal: false
  name: System.Collections.IStructuralEquatable.Equals
  nameWithType: Tuple<T1,T2,T3,T4,T5>.System.Collections.IStructuralEquatable.Equals
- uid: System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode*
  parent: System.Tuple`5
  isExternal: false
  name: System.Collections.IStructuralEquatable.GetHashCode
  nameWithType: Tuple<T1,T2,T3,T4,T5>.System.Collections.IStructuralEquatable.GetHashCode
- uid: System.Tuple`5.System#IComparable#CompareTo*
  parent: System.Tuple`5
  isExternal: false
  name: System.IComparable.CompareTo
  nameWithType: Tuple<T1,T2,T3,T4,T5>.System.IComparable.CompareTo
- uid: System.Tuple`5.ToString*
  parent: System.Tuple`5
  isExternal: false
  name: ToString
  nameWithType: Tuple<T1,T2,T3,T4,T5>.ToString
