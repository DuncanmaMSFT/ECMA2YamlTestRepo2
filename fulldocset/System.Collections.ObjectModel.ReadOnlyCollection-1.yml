### YamlMime:ManagedReference
items:
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  id: ReadOnlyCollection`1
  children:
  - System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})
  - System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.Count
  - System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator
  - System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.Items
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  langs:
  - csharp
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  type: Class
  summary: Provides the base class for a generic read-only collection.
  remarks: An instance of the ReadOnlyCollection(T) generic class is always read-only.  A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  See <xref:System.Collections.ObjectModel.Collection%601> for a modifiable version of this class.
  example:
  - "The following code example demonstrates several members of the ReadOnlyCollection(T) class. The code example creates a <xref:System.Collections.Generic.List%601> of strings and adds four dinosaur names to it. The code example then wraps the list in a ReadOnlyCollection(T).  \n  \n After demonstrating the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Count%2A>, <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Contains%2A>, <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Item%2A>, and <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.System%23Collections%23IList%23IndexOf%2A> members, the code example shows that the ReadOnlyCollection(T) is just a wrapper for the original <xref:System.Collections.Generic.List%601> by adding a new item to the <xref:System.Collections.Generic.List%601> and displaying the contents of the ReadOnlyCollection(T).  \n  \n Finally, the code example creates an array larger than the collection and uses the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.CopyTo%2A> method to insert the elements of the collection into the middle of the array.  \n  \n [!code-cs[generic.ReadOnlyCollection#1](~/add/codesnippet/csharp/t-system.collections.obj_0_1.cs)]\n [!code-cpp[generic.ReadOnlyCollection#1](~/add/codesnippet/cpp/t-system.collections.obj_0_1.cpp)]\n [!code-vb[generic.ReadOnlyCollection#1](~/add/codesnippet/visualbasic/t-system.collections.obj_0_1.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))]

      [System.Runtime.InteropServices.ComVisible(false)]

      public class ReadOnlyCollection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.IList
    typeParameters:
    - id: T
      description: The type of elements in the collection.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.IList<T>
  - System.Collections.Generic.IReadOnlyCollection<T>
  - System.Collections.Generic.IReadOnlyList<T>
  - System.Collections.IList
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})
  id: '#ctor(System.Collections.Generic.IList{`0})'
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: ReadOnlyCollection<T>(IList<T>)
  nameWithType: ReadOnlyCollection<T>.ReadOnlyCollection<T>(IList<T>)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ReadOnlyCollection<T>(IList<T>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Initializes a new instance of the <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref> class that is a read-only wrapper around the specified list.
  remarks: "To prevent any modifications to `list`, expose `list` only through this wrapper.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n This constructor is an O(1) operation."
  example:
  - "The following code example demonstrates this constructor and several members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> class.  \n  \n The code example creates a <xref:System.Collections.Generic.List%601> of strings and adds four dinosaur names to it. The code example then wraps the list in a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> by passing it to the constructor.  \n  \n After demonstrating the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Count%2A>, <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Contains%2A>, <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Item%2A>, and <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.System%23Collections%23IList%23IndexOf%2A> members, the code example shows that the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> is just a wrapper for the original <xref:System.Collections.Generic.List%601> by adding a new item to the <xref:System.Collections.Generic.List%601> and displaying the contents of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  \n  \n Finally, the code example creates an array larger than the collection and uses the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.CopyTo%2A> method to insert the elements of the collection into the middle of the array.  \n  \n [!code-cs[generic.ReadOnlyCollection#1](~/add/codesnippet/csharp/43083d29-13e0-4c4e-a6e9-_1.cs)]\n [!code-cpp[generic.ReadOnlyCollection#1](~/add/codesnippet/cpp/43083d29-13e0-4c4e-a6e9-_1.cpp)]\n [!code-vb[generic.ReadOnlyCollection#1](~/add/codesnippet/visualbasic/43083d29-13e0-4c4e-a6e9-_1.vb)]"
  syntax:
    content: public ReadOnlyCollection (System.Collections.Generic.IList<T> list);
    parameters:
    - id: list
      type: System.Collections.Generic.IList`1
      description: The list to wrap.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>list</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: ReadOnlyCollection<T>.Contains(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Contains(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Determines whether an element is in the <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref>.
  remarks: "This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>.  \n  \n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Count%2A>."
  example:
  - "The following code example demonstrates several members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> class. The code example creates a <xref:System.Collections.Generic.List%601> of strings and adds four dinosaur names to it. The code example then wraps the list in a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  \n  \n After demonstrating the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Count%2A>, Contains, <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Item%2A>, and <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.System%23Collections%23IList%23IndexOf%2A> members, the code example shows that the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> is just a wrapper for the original <xref:System.Collections.Generic.List%601> by adding a new item to the <xref:System.Collections.Generic.List%601> and displaying the contents of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  \n  \n Finally, the code example creates an array larger than the collection and uses the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.CopyTo%2A> method to insert the elements of the collection into the middle of the array.  \n  \n [!code-cs[generic.ReadOnlyCollection#1](~/add/codesnippet/csharp/m-system.collections.obj_0_1.cs)]\n [!code-cpp[generic.ReadOnlyCollection#1](~/add/codesnippet/cpp/m-system.collections.obj_0_1.cpp)]\n [!code-vb[generic.ReadOnlyCollection#1](~/add/codesnippet/visualbasic/m-system.collections.obj_0_1.vb)]"
  syntax:
    content: public bool Contains (T value);
    parameters:
    - id: value
      type: T
      description: The object to locate in the <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref>. The value can be `null` for reference types.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is found in the <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref>; otherwise, `false`.'
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.Contains*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: ReadOnlyCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Copies the entire <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref> to a compatible one-dimensional <xref href="System.Array"></xref>, starting at the specified index of the target array.
  remarks: "This method uses <xref:System.Array.Copy%2A?displayProperty=fullName> to copy the elements.  \n  \n The elements are copied to the <xref:System.Array> in the same order that the enumerator iterates through the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Count%2A>."
  example:
  - "The following code example demonstrates several members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> class. The code example creates a <xref:System.Collections.Generic.List%601> of strings and adds four dinosaur names to it. The code example then wraps the list in a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  \n  \n After demonstrating the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Count%2A>, <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Contains%2A>, <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Item%2A>, and <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.System%23Collections%23IList%23IndexOf%2A> members, the code example shows that the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> is just a wrapper for the original <xref:System.Collections.Generic.List%601> by adding a new item to the <xref:System.Collections.Generic.List%601> and displaying the contents of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  \n  \n Finally, the code example creates an array larger than the collection and uses the CopyTo method to insert the elements of the collection into the middle of the array.  \n  \n [!code-cs[generic.ReadOnlyCollection#1](~/add/codesnippet/csharp/m-system.collections.obj_22_1.cs)]\n [!code-cpp[generic.ReadOnlyCollection#1](~/add/codesnippet/cpp/m-system.collections.obj_22_1.cpp)]\n [!code-vb[generic.ReadOnlyCollection#1](~/add/codesnippet/visualbasic/m-system.collections.obj_22_1.vb)]"
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Count
  id: Count
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: Count
  nameWithType: ReadOnlyCollection<T>.Count
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets the number of elements contained in the <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref> instance.
  remarks: Retrieving the value of this property is an O(1) operation.
  example:
  - "The following code example demonstrates several members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> class. The code example creates a <xref:System.Collections.Generic.List%601> of strings and adds four dinosaur names to it. The code example then wraps the list in a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  \n  \n After demonstrating the Count, <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Contains%2A>, <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Item%2A>, and <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.System%23Collections%23IList%23IndexOf%2A> members, the code example shows that the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> is just a wrapper for the original <xref:System.Collections.Generic.List%601> by adding a new item to the <xref:System.Collections.Generic.List%601> and displaying the contents of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  \n  \n Finally, the code example creates an array larger than the collection and uses the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.CopyTo%2A> method to insert the elements of the collection into the middle of the array.  \n  \n [!code-cs[generic.ReadOnlyCollection#1](~/add/codesnippet/csharp/p-system.collections.obj_2_1.cs)]\n [!code-cpp[generic.ReadOnlyCollection#1](~/add/codesnippet/cpp/p-system.collections.obj_2_1.cpp)]\n [!code-vb[generic.ReadOnlyCollection#1](~/add/codesnippet/visualbasic/p-system.collections.obj_2_1.vb)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of elements contained in the <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref> instance.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ReadOnlyCollection<T>.GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Returns an enumerator that iterates through the <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref>.
  remarks: "The `foreach` statement of the C# language (`for each` in Visual C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  \n  \n <xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example uses the enumerator to display the contents of a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> that wraps a <xref:System.Collections.Generic.List%601>. The enumerator is concealed by the `foreach` statement (`For Each` in Visual Basic, `for each` in C++).  \n  \n [!code-cs[generic.ReadOnlyCollection#1](~/add/codesnippet/csharp/m-system.collections.obj_12_1.cs)]\n [!code-cpp[generic.ReadOnlyCollection#1](~/add/codesnippet/cpp/m-system.collections.obj_12_1.cpp)]\n [!code-vb[generic.ReadOnlyCollection#1](~/add/codesnippet/visualbasic/m-system.collections.obj_12_1.vb)]"
  syntax:
    content: public System.Collections.Generic.IEnumerator<T> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: An <xref href="stem.Collections.Generic.IEnumerator%601"></xref> for the <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref>.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: IndexOf(T)
  nameWithType: ReadOnlyCollection<T>.IndexOf(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IndexOf(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the entire <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref>.
  remarks: "The <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> is searched forward starting at the first element and ending at the last element.  \n  \n This method determines equality using the default comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>.  \n  \n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Count%2A>."
  syntax:
    content: public int IndexOf (T value);
    parameters:
    - id: value
      type: T
      description: The object to locate in the <xref href="stem.Collections.Generic.List%601"></xref>. The value can be `null` for reference types.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of <code>item</code> within the entire <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref>, if found; otherwise, -1.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ReadOnlyCollection<T>.Item(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets the element at the specified index.
  remarks: "This property provides the ability to access a specific element in the collection by using the following C# syntax: `myCollection[index]` (`myCollection(index)` in Visual Basic).  \n  \n The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(1) operation."
  example:
  - "The following code example demonstrates several members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> class. The code example creates a <xref:System.Collections.Generic.List%601> of strings and adds four dinosaur names to it. The code example then wraps the list in a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  \n  \n After demonstrating the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Count%2A>, <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Contains%2A>, Item, and <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.System%23Collections%23IList%23IndexOf%2A> members, the code example shows that the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> is just a wrapper for the original <xref:System.Collections.Generic.List%601> by adding a new item to the <xref:System.Collections.Generic.List%601> and displaying the contents of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  \n  \n Finally, the code example creates an array larger than the collection and uses the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.CopyTo%2A> method to insert the elements of the collection into the middle of the array.  \n  \n [!code-cs[generic.ReadOnlyCollection#1](~/add/codesnippet/csharp/p-system.collections.obj_0_1.cs)]\n [!code-cpp[generic.ReadOnlyCollection#1](~/add/codesnippet/cpp/p-system.collections.obj_0_1.cpp)]\n [!code-vb[generic.ReadOnlyCollection#1](~/add/codesnippet/visualbasic/p-system.collections.obj_0_1.vb)]"
  syntax:
    content: public T this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get.
    return:
      type: T
      description: The element at the specified index.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is equal to or greater than <xref href=\"stem.Collections.ObjectModel.ReadOnlyCollection%601.Count%2A\"></xref>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Items
  id: Items
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: Items
  nameWithType: ReadOnlyCollection<T>.Items
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Items
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Returns the <xref href="stem.Collections.Generic.IList%601"></xref> that the <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref> wraps.
  remarks: Retrieving the value of this property is an O(1) operation.
  example:
  - "The following code example demonstrates several members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> class. The code example creates a <xref:System.Collections.Generic.List%601> of strings and adds four dinosaur names to it. The code example then wraps the list in a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  \n  \n After demonstrating the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Count%2A>, <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Contains%2A>, <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Item%2A>, and <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.System%23Collections%23IList%23IndexOf%2A> members, the code example shows that the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> is just a wrapper for the original <xref:System.Collections.Generic.List%601> by adding a new item to the <xref:System.Collections.Generic.List%601> and displaying the contents of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>.  \n  \n Finally, the code example creates an array larger than the collection and uses the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.CopyTo%2A> method to insert the elements of the collection into the middle of the array.  \n  \n [!code-cs[generic.ReadOnlyCollection#1](~/add/codesnippet/csharp/p-system.collections.obj_1_1.cs)]\n [!code-cpp[generic.ReadOnlyCollection#1](~/add/codesnippet/cpp/p-system.collections.obj_1_1.cpp)]\n [!code-vb[generic.ReadOnlyCollection#1](~/add/codesnippet/visualbasic/p-system.collections.obj_1_1.vb)]"
  syntax:
    content: protected System.Collections.Generic.IList<T> Items { get; }
    return:
      type: System.Collections.Generic.IList`1
      description: The <xref href="stem.Collections.Generic.IList%601"></xref> that the <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref> wraps.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.Items*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: ICollection<T>.Add(T)
  nameWithType: ReadOnlyCollection<T>.ICollection<T>.Add(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ICollection<T>.Add(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Adds an item to the <xref href="stem.Collections.Generic.ICollection%601"></xref>.  This implementation always throws <xref href="System.NotSupportedException"></xref>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.
  syntax:
    content: void ICollection<T>.Add (T value);
    parameters:
    - id: value
      type: T
      description: The object to add to the <xref href="stem.Collections.Generic.ICollection%601"></xref>.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Always thrown.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  id: System#Collections#Generic#ICollection{T}#Clear
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: ICollection<T>.Clear()
  nameWithType: ReadOnlyCollection<T>.ICollection<T>.Clear()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ICollection<T>.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Removes all items from the <xref href="stem.Collections.Generic.ICollection%601"></xref>.  This implementation always throws <xref href="System.NotSupportedException"></xref>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.
  syntax:
    content: void ICollection<T>.Clear ();
    parameters: []
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Always thrown.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: ICollection<T>.IsReadOnly
  nameWithType: ReadOnlyCollection<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ICollection<T>.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets a value indicating whether the <xref href="stem.Collections.Generic.ICollection%601"></xref> is read-only.
  remarks: "A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.IDisposable> interface."
  syntax:
    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="stem.Collections.Generic.ICollection%601"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref>, this property always returns `true`.'
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  id: System#Collections#Generic#ICollection{T}#Remove(`0)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: ICollection<T>.Remove(T)
  nameWithType: ReadOnlyCollection<T>.ICollection<T>.Remove(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ICollection<T>.Remove(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Removes the first occurrence of a specific object from the <xref href="stem.Collections.Generic.ICollection%601"></xref>.  This implementation always throws <xref href="System.NotSupportedException"></xref>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.Collections.Generic.ICollection%601> interface.
  syntax:
    content: bool ICollection<T>.Remove (T value);
    parameters:
    - id: value
      type: T
      description: The object to remove from the <xref href="stem.Collections.Generic.ICollection%601"></xref>.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> was successfully removed from the <xref href="stem.Collections.Generic.ICollection%601"></xref>; otherwise, `false`.'
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Always thrown.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: IList<T>.Insert(Int32,T)
  nameWithType: ReadOnlyCollection<T>.IList<T>.Insert(Int32,T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList<T>.Insert(Int32,T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Inserts an item to the <xref href="stem.Collections.Generic.IList%601"></xref> at the specified index.  This implementation always throws <xref href="System.NotSupportedException"></xref>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.
  syntax:
    content: void IList<T>.Insert (int index, T value);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <code>value</code> should be inserted.
    - id: value
      type: T
      description: The object to insert into the <xref href="stem.Collections.Generic.IList%601"></xref>.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList<T>#Insert*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Always thrown.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  id: System#Collections#Generic#IList{T}#Item(System.Int32)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: IList<T>.Item(Int32)
  nameWithType: ReadOnlyCollection<T>.IList<T>.Item(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList<T>.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets the element at the specified index. An <xref href="System.NotSupportedException"></xref> occurs if you try to set the item at the specified index.
  remarks: Because the collection is read-only, you can only get this item at the specified index. An exception will occur if you try to set the item. This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.
  syntax:
    content: T System.Collections.Generic.IList<T>.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get.
    return:
      type: T
      description: The element at the specified index.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList<T>#Item*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Always thrown if the property is set.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: IList<T>.RemoveAt(Int32)
  nameWithType: ReadOnlyCollection<T>.IList<T>.RemoveAt(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList<T>.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Removes the <xref href="stem.Collections.Generic.IList%601"></xref> item at the specified index.  This implementation always throws <xref href="System.NotSupportedException"></xref>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.Collections.Generic.IList%601> interface.
  syntax:
    content: void IList<T>.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to remove.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList<T>#RemoveAt*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Always thrown.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: ReadOnlyCollection<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Copies the elements of the <xref href="System.Collections.ICollection"></xref> to an <xref href="System.Array"></xref>, starting at a particular <xref href="System.Array"></xref> index.
  remarks: "> [!NOTE]\n>  If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Count%2A>.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.Collections.ICollection> interface."
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="System.Collections.ICollection"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.  \n  \n -or-  \n  \n <code>array</code> does not have zero-based indexing.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.  \n  \n -or-  \n  \n The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: ReadOnlyCollection<T>.ICollection.IsSynchronized
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets a value indicating whether access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe).
  remarks: "Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.IDisposable> interface."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: '`true` if access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe); otherwise, `false`.  In the default implementation of <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref>, this property always returns `false`.'
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: ReadOnlyCollection<T>.ICollection.SyncRoot
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>.
  remarks: "Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, Visual C++, and Visual Basic.  \n  \n```c#  \nICollection ic = ...;  \nlock (ic.SyncRoot) {  \n   // Access the collection.  \n}  \n```  \n  \n```vb#  \nDim ic As ICollection = ...  \nSyncLock ic.SyncRoot  \n   ' Access the collection.  \nEnd SyncLock  \n```  \n  \n```cpp#  \nICollection^ ic = ...;  \ntry {  \n   Monitor::Enter(ic->SyncRoot);  \n   // Access the collection.  \n}  \nfinally {  \n   Monitor::Exit(ic->SyncRoot);  \n}  \n```  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.IDisposable> interface."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>.  In the default implementation of <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref>, this property always returns the current instance.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: ReadOnlyCollection<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Returns an enumerator that iterates through a collection.
  remarks: "The `foreach` statement of the C# language (`for each` in Visual C++, `For Each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n This method is an O(1) operation.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.Collections.IEnumerable> interface."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator"></xref> that can be used to iterate through the collection.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: IList.Add(Object)
  nameWithType: ReadOnlyCollection<T>.IList.Add(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Adds an item to the <xref href="System.Collections.IList"></xref>.  This implementation always throws <xref href="System.NotSupportedException"></xref>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object"></xref> to add to the <xref href="System.Collections.IList"></xref>.
    return:
      type: System.Int32
      description: The position into which the new element was inserted.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Always thrown.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: IList.Clear()
  nameWithType: ReadOnlyCollection<T>.IList.Clear()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Removes all items from the <xref href="System.Collections.IList"></xref>.  This implementation always throws <xref href="System.NotSupportedException"></xref>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: void IList.Clear ();
    parameters: []
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Always thrown.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: IList.Contains(Object)
  nameWithType: ReadOnlyCollection<T>.IList.Contains(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Determines whether the <xref href="System.Collections.IList"></xref> contains a specific value.
  remarks: "This method determines equality using the default comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>.  \n  \n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Count%2A>.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.Collections.IList> interface."
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object"></xref> to locate in the <xref href="System.Collections.IList"></xref>.
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Object"></xref> is found in the <xref href="System.Collections.IList"></xref>; otherwise, `false`.'
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>value</code> is not of the type specified for the generic type parameter <code>T</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: IList.IndexOf(Object)
  nameWithType: ReadOnlyCollection<T>.IList.IndexOf(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Determines the index of a specific item in the <xref href="System.Collections.IList"></xref>.
  remarks: "This method determines equality using the default comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>.  \n  \n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.ReadOnlyCollection%601.Count%2A>.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.Collections.IList> interface."
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object"></xref> to locate in the <xref href="System.Collections.IList"></xref>.
    return:
      type: System.Int32
      description: The index of <code>value</code> if found in the list; otherwise, -1.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>value</code> is not of the type specified for the generic type parameter <code>T</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: IList.Insert(Int32,Object)
  nameWithType: ReadOnlyCollection<T>.IList.Insert(Int32,Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Inserts an item to the <xref href="System.Collections.IList"></xref> at the specified index.  This implementation always throws <xref href="System.NotSupportedException"></xref>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <code>value</code> should be inserted.
    - id: value
      type: System.Object
      description: The <xref href="System.Object"></xref> to insert into the <xref href="System.Collections.IList"></xref>.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Always thrown.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: IList.IsFixedSize
  nameWithType: ReadOnlyCollection<T>.IList.IsFixedSize
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets a value indicating whether the <xref href="System.Collections.IList"></xref> has a fixed size.
  remarks: "A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  \n  \n A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.IDisposable> interface."
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Collections.IList"></xref> has a fixed size; otherwise, `false`.  In the default implementation of <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref>, this property always returns `true`.'
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: IList.IsReadOnly
  nameWithType: ReadOnlyCollection<T>.IList.IsReadOnly
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets a value indicating whether the <xref href="System.Collections.IList"></xref> is read-only.
  remarks: "A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  \n  \n A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.IDisposable> interface."
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Collections.IList"></xref> is read-only; otherwise, `false`.  In the default implementation of <xref href="stem.Collections.ObjectModel.ReadOnlyCollection%601"></xref>, this property always returns `true`.'
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: IList.Item(Int32)
  nameWithType: ReadOnlyCollection<T>.IList.Item(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Gets the element at the specified index. A <xref href="System.NotSupportedException"></xref> occurs if you try to set the item at the specified index.
  remarks: "This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.  \n  \n The C# language uses the [this](../Topic/this%20\\(C%23%20Reference\\).md) keyword to define the indexers instead of implementing the IList.Item property. Visual Basic implements IList.Item as a default property, which provides the same indexing functionality.  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.IDisposable> interface."
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get.
    return:
      type: System.Object
      description: The element at the specified index.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is not a valid index in the <xref href="System.Collections.IList"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Always thrown if the property is set.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: IList.Remove(Object)
  nameWithType: ReadOnlyCollection<T>.IList.Remove(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Removes the first occurrence of a specific object from the <xref href="System.Collections.IList"></xref>.  This implementation always throws <xref href="System.NotSupportedException"></xref>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object"></xref> to remove from the <xref href="System.Collections.IList"></xref>.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Always thrown.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  name: IList.RemoveAt(Int32)
  nameWithType: ReadOnlyCollection<T>.IList.RemoveAt(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.ObjectModel
  summary: Removes the <xref href="System.Collections.IList"></xref> item at the specified index.  This implementation always throws <xref href="System.NotSupportedException"></xref>.
  remarks: This member is an explicit interface member implementation. It can be used only when the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> instance is cast to an <xref:System.Collections.IList> interface.
  syntax:
    content: void IList.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to remove.
  overload: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Always thrown.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.ObjectModel\ReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.ObjectModel/ReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: ReadOnlyCollection<T>(IList<T>)
  nameWithType: ReadOnlyCollection<T>.ReadOnlyCollection<T>(IList<T>)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ReadOnlyCollection<T>(IList<T>)
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: Contains(T)
  nameWithType: ReadOnlyCollection<T>.Contains(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Contains(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: ReadOnlyCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.CopyTo(T[],Int32)
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Count
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: Count
  nameWithType: ReadOnlyCollection<T>.Count
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Count
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: ReadOnlyCollection<T>.GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IndexOf(T)
  nameWithType: ReadOnlyCollection<T>.IndexOf(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IndexOf(T)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: Item(Int32)
  nameWithType: ReadOnlyCollection<T>.Item(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Item(Int32)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Items
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: Items
  nameWithType: ReadOnlyCollection<T>.Items
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Items
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: ICollection<T>.Add(T)
  nameWithType: ReadOnlyCollection<T>.ICollection<T>.Add(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ICollection<T>.Add(T)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: ICollection<T>.Clear()
  nameWithType: ReadOnlyCollection<T>.ICollection<T>.Clear()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ICollection<T>.Clear()
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: ICollection<T>.IsReadOnly
  nameWithType: ReadOnlyCollection<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ICollection<T>.IsReadOnly
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: ICollection<T>.Remove(T)
  nameWithType: ReadOnlyCollection<T>.ICollection<T>.Remove(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ICollection<T>.Remove(T)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IList<T>.Insert(Int32,T)
  nameWithType: ReadOnlyCollection<T>.IList<T>.Insert(Int32,T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList<T>.Insert(Int32,T)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IList<T>.Item(Int32)
  nameWithType: ReadOnlyCollection<T>.IList<T>.Item(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList<T>.Item(Int32)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IList<T>.RemoveAt(Int32)
  nameWithType: ReadOnlyCollection<T>.IList<T>.RemoveAt(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList<T>.RemoveAt(Int32)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: ReadOnlyCollection<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: ReadOnlyCollection<T>.ICollection.IsSynchronized
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ICollection.IsSynchronized
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: ReadOnlyCollection<T>.ICollection.SyncRoot
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ICollection.SyncRoot
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: ReadOnlyCollection<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IList.Add(Object)
  nameWithType: ReadOnlyCollection<T>.IList.Add(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.Add(Object)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IList.Clear()
  nameWithType: ReadOnlyCollection<T>.IList.Clear()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.Clear()
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IList.Contains(Object)
  nameWithType: ReadOnlyCollection<T>.IList.Contains(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.Contains(Object)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IList.IndexOf(Object)
  nameWithType: ReadOnlyCollection<T>.IList.IndexOf(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.IndexOf(Object)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IList.Insert(Int32,Object)
  nameWithType: ReadOnlyCollection<T>.IList.Insert(Int32,Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.Insert(Int32,Object)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IList.IsFixedSize
  nameWithType: ReadOnlyCollection<T>.IList.IsFixedSize
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.IsFixedSize
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IList.IsReadOnly
  nameWithType: ReadOnlyCollection<T>.IList.IsReadOnly
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.IsReadOnly
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IList.Item(Int32)
  nameWithType: ReadOnlyCollection<T>.IList.Item(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.Item(Int32)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IList.Remove(Object)
  nameWithType: ReadOnlyCollection<T>.IList.Remove(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.Remove(Object)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IList.RemoveAt(Int32)
  nameWithType: ReadOnlyCollection<T>.IList.RemoveAt(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IList.RemoveAt(Int32)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>.ReadOnlyCollection<T>
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Contains*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: Contains
  nameWithType: ReadOnlyCollection<T>.Contains
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: CopyTo
  nameWithType: ReadOnlyCollection<T>.CopyTo
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Count*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: Count
  nameWithType: ReadOnlyCollection<T>.Count
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: GetEnumerator
  nameWithType: ReadOnlyCollection<T>.GetEnumerator
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: IndexOf
  nameWithType: ReadOnlyCollection<T>.IndexOf
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Item*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: Item
  nameWithType: ReadOnlyCollection<T>.Item
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Items*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: Items
  nameWithType: ReadOnlyCollection<T>.Items
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Add*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Add
  nameWithType: ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Add
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Clear*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Clear
  nameWithType: ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Clear
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType: ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Remove*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Remove
  nameWithType: ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Remove
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList<T>#Insert*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.Insert
  nameWithType: ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Insert
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList<T>#Item*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.Item
  nameWithType: ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Item
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList<T>#RemoveAt*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.RemoveAt
  nameWithType: ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.RemoveAt
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: ReadOnlyCollection<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: ReadOnlyCollection<T>.System.Collections.IList.Add
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Clear
  nameWithType: ReadOnlyCollection<T>.System.Collections.IList.Clear
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: ReadOnlyCollection<T>.System.Collections.IList.Contains
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: ReadOnlyCollection<T>.System.Collections.IList.IndexOf
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: ReadOnlyCollection<T>.System.Collections.IList.Insert
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: ReadOnlyCollection<T>.System.Collections.IList.IsFixedSize
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: ReadOnlyCollection<T>.System.Collections.IList.IsReadOnly
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: ReadOnlyCollection<T>.System.Collections.IList.Item
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: ReadOnlyCollection<T>.System.Collections.IList.Remove
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt*
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.RemoveAt
  nameWithType: ReadOnlyCollection<T>.System.Collections.IList.RemoveAt
