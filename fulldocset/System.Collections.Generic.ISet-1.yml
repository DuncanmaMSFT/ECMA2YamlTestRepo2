### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.ISet`1
  id: ISet`1
  children:
  - System.Collections.Generic.ISet`1.Add(`0)
  - System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  langs:
  - csharp
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  type: Interface
  syntax:
    content: 'public interface ISet<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>'
    typeParameters:
    - id: T
      description: To be added.
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  version:
  - netframework-4.0
- uid: System.Collections.Generic.ISet`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: Add(T)
  nameWithType: ISet<T>.Add(T)
  fullName: System.Collections.Generic.ISet<T>.Add(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool Add (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.ISet`1.Add*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: ExceptWith(IEnumerable<T>)
  nameWithType: ISet<T>.ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.ExceptWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void ExceptWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Generic.ISet`1.ExceptWith*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  id: IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: IntersectWith(IEnumerable<T>)
  nameWithType: ISet<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IntersectWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void IntersectWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Generic.ISet`1.IntersectWith*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsProperSubsetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool IsProperSubsetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.ISet`1.IsProperSubsetOf*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsProperSupersetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool IsProperSupersetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.ISet`1.IsProperSupersetOf*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsSubsetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool IsSubsetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.ISet`1.IsSubsetOf*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsSupersetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool IsSupersetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.ISet`1.IsSupersetOf*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  id: Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: Overlaps(IEnumerable<T>)
  nameWithType: ISet<T>.Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.Overlaps(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool Overlaps (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.ISet`1.Overlaps*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  id: SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: SetEquals(IEnumerable<T>)
  nameWithType: ISet<T>.SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.SetEquals(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool SetEquals (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.ISet`1.SetEquals*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: ISet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.SymmetricExceptWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void SymmetricExceptWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Generic.ISet`1.SymmetricExceptWith*
  exceptions: []
  version:
  - netframework-4.0
- uid: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  id: UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: UnionWith(IEnumerable<T>)
  nameWithType: ISet<T>.UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.UnionWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void UnionWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Generic.ISet`1.UnionWith*
  exceptions: []
  version:
  - netframework-4.0
references:
- uid: System.Collections.Generic.ISet`1.Add(`0)
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: Add(T)
  nameWithType: ISet<T>.Add(T)
  fullName: System.Collections.Generic.ISet<T>.Add(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: ExceptWith(IEnumerable<T>)
  nameWithType: ISet<T>.ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.ExceptWith(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IntersectWith(IEnumerable<T>)
  nameWithType: ISet<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IntersectWith(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsProperSubsetOf(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsProperSupersetOf(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsSubsetOf(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsSupersetOf(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: Overlaps(IEnumerable<T>)
  nameWithType: ISet<T>.Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.Overlaps(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: SetEquals(IEnumerable<T>)
  nameWithType: ISet<T>.SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.SetEquals(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: ISet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.SymmetricExceptWith(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: UnionWith(IEnumerable<T>)
  nameWithType: ISet<T>.UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.UnionWith(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.Add*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: Add
  nameWithType: ISet<T>.Add
- uid: System.Collections.Generic.ISet`1.ExceptWith*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: ExceptWith
  nameWithType: ISet<T>.ExceptWith
- uid: System.Collections.Generic.ISet`1.IntersectWith*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IntersectWith
  nameWithType: ISet<T>.IntersectWith
- uid: System.Collections.Generic.ISet`1.IsProperSubsetOf*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsProperSubsetOf
  nameWithType: ISet<T>.IsProperSubsetOf
- uid: System.Collections.Generic.ISet`1.IsProperSupersetOf*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsProperSupersetOf
  nameWithType: ISet<T>.IsProperSupersetOf
- uid: System.Collections.Generic.ISet`1.IsSubsetOf*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsSubsetOf
  nameWithType: ISet<T>.IsSubsetOf
- uid: System.Collections.Generic.ISet`1.IsSupersetOf*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsSupersetOf
  nameWithType: ISet<T>.IsSupersetOf
- uid: System.Collections.Generic.ISet`1.Overlaps*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: Overlaps
  nameWithType: ISet<T>.Overlaps
- uid: System.Collections.Generic.ISet`1.SetEquals*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: SetEquals
  nameWithType: ISet<T>.SetEquals
- uid: System.Collections.Generic.ISet`1.SymmetricExceptWith*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: SymmetricExceptWith
  nameWithType: ISet<T>.SymmetricExceptWith
- uid: System.Collections.Generic.ISet`1.UnionWith*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: UnionWith
  nameWithType: ISet<T>.UnionWith
