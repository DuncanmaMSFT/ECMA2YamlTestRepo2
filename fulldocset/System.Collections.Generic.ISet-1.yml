### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.ISet`1
  id: ISet`1
  children:
  - System.Collections.Generic.ISet`1.Add(`0)
  - System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  langs:
  - csharp
  name: ISet<T>
  nameWithType: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  type: Interface
  summary: Provides the base interface for the abstraction of sets.
  remarks: This interface provides methods for implementing sets, which are collections that have unique elements and specific operations. The <xref:System.Collections.Generic.HashSet%601> and <xref:System.Collections.Generic.SortedSet%601> collections implement this interface.
  syntax:
    content: 'public interface ISet<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>'
    typeParameters:
    - id: T
      description: The type of elements in the set.
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ISet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ISet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ISet`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: Add(T)
  nameWithType: ISet<T>.Add(T)
  fullName: System.Collections.Generic.ISet<T>.Add(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Adds an element to the current set and returns a value to indicate if the element was successfully added.
  syntax:
    content: public bool Add (T item);
    parameters:
    - id: item
      type: T
      description: The element to add to the set.
    return:
      type: System.Boolean
      description: '`true` if the element is added to the set; `false` if the element is already in the set.'
  overload: System.Collections.Generic.ISet`1.Add*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ISet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ISet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: ExceptWith(IEnumerable<T>)
  nameWithType: ISet<T>.ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.ExceptWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Removes all elements in the specified collection from the current set.
  remarks: This method is an O(`n`) operation, where `n` is the number of elements in the `other` parameter.
  syntax:
    content: public void ExceptWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection of items to remove from the set.
  overload: System.Collections.Generic.ISet`1.ExceptWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ISet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ISet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  id: IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: IntersectWith(IEnumerable<T>)
  nameWithType: ISet<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IntersectWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Modifies the current set so that it contains only elements that are also in a specified collection.
  remarks: This method ignores any duplicate elements in `other`.
  syntax:
    content: public void IntersectWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current set.
  overload: System.Collections.Generic.ISet`1.IntersectWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ISet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ISet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsProperSubsetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Determines whether the current set is a proper (strict) subset of a specified collection.
  remarks: "If the current set is a proper subset of `other`, `other` must have at least one element that the current set does not have.  \n  \n An empty set is a proper subset of any other collection. Therefore, this method returns `true` if the current set is empty, unless the `other` parameter is also an empty set.  \n  \n This method always returns `false` if the current set has more or the same number of elements than `other`."
  syntax:
    content: public bool IsProperSubsetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: '`true` if the current set is a proper subset of <code>other</code>; otherwise, `false`.'
  overload: System.Collections.Generic.ISet`1.IsProperSubsetOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ISet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ISet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsProperSupersetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Determines whether the current set is a proper (strict) superset of a specified collection.
  remarks: "If the current set is a proper superset of `other`, the current set must have at least one element that `other` does not have.  \n  \n An empty set is a proper superset of any other collection. Therefore, this method returns `true` if the collection represented by the `other` parameter is empty, unless the current set is also empty.  \n  \n This method always returns `false` if the number of elements in the current set is less than or equal to the number of elements in `other`."
  syntax:
    content: public bool IsProperSupersetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: '`true` if the current set is a proper superset of <code>other</code>; otherwise, `false`.'
  overload: System.Collections.Generic.ISet`1.IsProperSupersetOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ISet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ISet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsSubsetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Determines whether a set is a subset of a specified collection.
  remarks: "If `other` contains the same elements as the current set, the current set is still considered a subset of other.  \n  \n This method always returns `false` if the current set has elements that are not in `other`."
  syntax:
    content: public bool IsSubsetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: '`true` if the current set is a subset of <code>other</code>; otherwise, `false`.'
  overload: System.Collections.Generic.ISet`1.IsSubsetOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ISet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ISet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsSupersetOf(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Determines whether the current set is a superset of a specified collection.
  remarks: "If `other` contains the same elements as the current set, the current set is still considered a superset of `other`.  \n  \n This method always returns `false` if the current set has fewer elements than `other`."
  syntax:
    content: public bool IsSupersetOf (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: '`true` if the current set is a superset of <code>other</code>; otherwise, `false`.'
  overload: System.Collections.Generic.ISet`1.IsSupersetOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ISet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ISet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  id: Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: Overlaps(IEnumerable<T>)
  nameWithType: ISet<T>.Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.Overlaps(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Determines whether the current set overlaps with the specified collection.
  remarks: Any duplicate elements in `other` are ignored.
  syntax:
    content: public bool Overlaps (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: '`true` if the current set and <code>other</code> share at least one common element; otherwise, `false`.'
  overload: System.Collections.Generic.ISet`1.Overlaps*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ISet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ISet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  id: SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: SetEquals(IEnumerable<T>)
  nameWithType: ISet<T>.SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.SetEquals(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Determines whether the current set and the specified collection contain the same elements.
  remarks: This method ignores the order of elements and any duplicate elements in `other`.
  syntax:
    content: public bool SetEquals (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current set.
    return:
      type: System.Boolean
      description: '`true` if the current set is equal to <code>other</code>; otherwise, false.'
  overload: System.Collections.Generic.ISet`1.SetEquals*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ISet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ISet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: ISet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.SymmetricExceptWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.
  remarks: Any duplicate elements in `other` are ignored.
  syntax:
    content: public void SymmetricExceptWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current set.
  overload: System.Collections.Generic.ISet`1.SymmetricExceptWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ISet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ISet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  id: UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  langs:
  - csharp
  name: UnionWith(IEnumerable<T>)
  nameWithType: ISet<T>.UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.UnionWith(IEnumerable<T>)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Modifies the current set so that it contains all elements that are present in the current set, in the specified collection, or in both.
  remarks: Any duplicate elements in `other` are ignored.
  syntax:
    content: public void UnionWith (System.Collections.Generic.IEnumerable<T> other);
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable`1
      description: The collection to compare to the current set.
  overload: System.Collections.Generic.ISet`1.UnionWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>other</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\ISet`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/ISet`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Collections.Generic.ISet`1.Add(`0)
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: Add(T)
  nameWithType: ISet<T>.Add(T)
  fullName: System.Collections.Generic.ISet<T>.Add(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: ExceptWith(IEnumerable<T>)
  nameWithType: ISet<T>.ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.ExceptWith(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IntersectWith(IEnumerable<T>)
  nameWithType: ISet<T>.IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IntersectWith(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsProperSubsetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsProperSubsetOf(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsProperSupersetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsProperSupersetOf(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsSubsetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsSubsetOf(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsSupersetOf(IEnumerable<T>)
  nameWithType: ISet<T>.IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.IsSupersetOf(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: Overlaps(IEnumerable<T>)
  nameWithType: ISet<T>.Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.Overlaps(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: SetEquals(IEnumerable<T>)
  nameWithType: ISet<T>.SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.SetEquals(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: SymmetricExceptWith(IEnumerable<T>)
  nameWithType: ISet<T>.SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.SymmetricExceptWith(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: UnionWith(IEnumerable<T>)
  nameWithType: ISet<T>.UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.ISet<T>.UnionWith(IEnumerable<T>)
- uid: System.Collections.Generic.ISet`1.Add*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: Add
  nameWithType: ISet<T>.Add
- uid: System.Collections.Generic.ISet`1.ExceptWith*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: ExceptWith
  nameWithType: ISet<T>.ExceptWith
- uid: System.Collections.Generic.ISet`1.IntersectWith*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IntersectWith
  nameWithType: ISet<T>.IntersectWith
- uid: System.Collections.Generic.ISet`1.IsProperSubsetOf*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsProperSubsetOf
  nameWithType: ISet<T>.IsProperSubsetOf
- uid: System.Collections.Generic.ISet`1.IsProperSupersetOf*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsProperSupersetOf
  nameWithType: ISet<T>.IsProperSupersetOf
- uid: System.Collections.Generic.ISet`1.IsSubsetOf*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsSubsetOf
  nameWithType: ISet<T>.IsSubsetOf
- uid: System.Collections.Generic.ISet`1.IsSupersetOf*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: IsSupersetOf
  nameWithType: ISet<T>.IsSupersetOf
- uid: System.Collections.Generic.ISet`1.Overlaps*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: Overlaps
  nameWithType: ISet<T>.Overlaps
- uid: System.Collections.Generic.ISet`1.SetEquals*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: SetEquals
  nameWithType: ISet<T>.SetEquals
- uid: System.Collections.Generic.ISet`1.SymmetricExceptWith*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: SymmetricExceptWith
  nameWithType: ISet<T>.SymmetricExceptWith
- uid: System.Collections.Generic.ISet`1.UnionWith*
  parent: System.Collections.Generic.ISet`1
  isExternal: false
  name: UnionWith
  nameWithType: ISet<T>.UnionWith
