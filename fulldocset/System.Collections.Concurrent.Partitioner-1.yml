### YamlMime:ManagedReference
items:
- uid: System.Collections.Concurrent.Partitioner`1
  id: Partitioner`1
  children:
  - System.Collections.Concurrent.Partitioner`1.#ctor
  - System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  - System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  - System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  langs:
  - csharp
  name: Partitioner<TSource>
  nameWithType: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  type: Class
  summary: Represents a particular manner of splitting a data source into multiple partitions.
  remarks: For more information, see [Custom Partitioners for PLINQ and TPL](../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md).
  example:
  - "The following example shows how to implement a partitioner that returns a single element at a time:  \n  \n [!code-cs[System.Collections.Concurrent.Partitioner#1](~/add/codesnippet/csharp/t-system.collections.con_7_1.cs)]\n [!code-vb[System.Collections.Concurrent.Partitioner#1](~/add/codesnippet/visualbasic/t-system.collections.con_7_1.vb)]"
  syntax:
    content: public abstract class Partitioner<TSource>
    typeParameters:
    - id: TSource
      description: Type of the elements in the collection.
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\Partitioner`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/Partitioner`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.Partitioner`1.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  name: Partitioner<TSource>()
  nameWithType: Partitioner<TSource>.Partitioner<TSource>()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.Partitioner<TSource>()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Creates a new partitioner instance.
  syntax:
    content: protected Partitioner ();
    parameters: []
  overload: System.Collections.Concurrent.Partitioner`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\Partitioner`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/Partitioner`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  id: GetDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  name: GetDynamicPartitions()
  nameWithType: Partitioner<TSource>.GetDynamicPartitions()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Creates an object that can partition the underlying collection into a variable number of partitions.
  remarks: "The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName>interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.  \n  \n The GetDynamicPartitions method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true. For more information, see [Custom Partitioners for PLINQ and TPL](../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md)."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<TSource> GetDynamicPartitions ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An object that can create partitions over the underlying data source.
  overload: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Dynamic partitioning is not supported by the base class. You must implement it in a derived class.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\Partitioner`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/Partitioner`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  id: GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  name: GetPartitions(Int32)
  nameWithType: Partitioner<TSource>.GetPartitions(Int32)
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Partitions the underlying collection into the given number of partitions.
  remarks: A class that implements this method is expected to return exactly the number of partitions that are specified in `partitionCount`. If a partition contains no elements, then return an empty enumerator rather than null (Nothing in Visual Basic). For more information, see [Custom Partitioners for PLINQ and TPL](../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md).
  syntax:
    content: public abstract System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>> GetPartitions (int partitionCount);
    parameters:
    - id: partitionCount
      type: System.Int32
      description: The number of partitions to create.
    return:
      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}
      description: A list containing <code>partitionCount</code> enumerators.
  overload: System.Collections.Concurrent.Partitioner`1.GetPartitions*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\Partitioner`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/Partitioner`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  id: SupportsDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  name: SupportsDynamicPartitions
  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions
  fullName: System.Collections.Concurrent.Partitioner<TSource>.SupportsDynamicPartitions
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: Gets whether additional partitions can be created dynamically.
  remarks: If a derived class does not override and implement <xref:System.Collections.Concurrent.Partitioner%601.GetDynamicPartitions%2A>, SupportsDynamicPartitions should return false. The value of SupportsDynamicPartitions should not vary over the lifetime of this instance. For more information, see [Custom Partitioners for PLINQ and TPL](../Topic/Custom%20Partitioners%20for%20PLINQ%20and%20TPL.md).
  syntax:
    content: public virtual bool SupportsDynamicPartitions { get; }
    return:
      type: System.Boolean
      description: true if the <xref href="stem.Collections.Concurrent.Partitioner%601"></xref> can create partitions dynamically as they are requested; false if the <xref href="stem.Collections.Concurrent.Partitioner%601"></xref> can only allocate partitions statically.
  overload: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Concurrent\Partitioner`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Concurrent/Partitioner`1.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Collections.Concurrent.Partitioner`1.#ctor
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: Partitioner<TSource>()
  nameWithType: Partitioner<TSource>.Partitioner<TSource>()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.Partitioner<TSource>()
- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: GetDynamicPartitions()
  nameWithType: Partitioner<TSource>.GetDynamicPartitions()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions()
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TSource>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: GetPartitions(Int32)
  nameWithType: Partitioner<TSource>.GetPartitions(Int32)
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions(Int32)
- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<IEnumerator<TSource>>
  nameWithType: IList<IEnumerator<TSource>>
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Collections.Generic.IEnumerator<TSource>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<TSource>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: SupportsDynamicPartitions
  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions
  fullName: System.Collections.Concurrent.Partitioner<TSource>.SupportsDynamicPartitions
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.Partitioner`1.#ctor*
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: Partitioner<TSource>
  nameWithType: Partitioner<TSource>.Partitioner<TSource>
- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions*
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: GetDynamicPartitions
  nameWithType: Partitioner<TSource>.GetDynamicPartitions
- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions*
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: GetPartitions
  nameWithType: Partitioner<TSource>.GetPartitions
- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: SupportsDynamicPartitions
  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions
