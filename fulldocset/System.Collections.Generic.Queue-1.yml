### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.Queue`1
  id: Queue`1
  children:
  - System.Collections.Generic.Queue`1.#ctor
  - System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.Queue`1.#ctor(System.Int32)
  - System.Collections.Generic.Queue`1.Clear
  - System.Collections.Generic.Queue`1.Contains(`0)
  - System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.Queue`1.Count
  - System.Collections.Generic.Queue`1.Dequeue
  - System.Collections.Generic.Queue`1.Enqueue(`0)
  - System.Collections.Generic.Queue`1.GetEnumerator
  - System.Collections.Generic.Queue`1.Peek
  - System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.Queue`1.ToArray
  - System.Collections.Generic.Queue`1.TrimExcess
  langs:
  - csharp
  name: Queue<T>
  nameWithType: Queue<T>
  fullName: System.Collections.Generic.Queue<T>
  type: Class
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_QueueDebugView`1))]

      [System.Runtime.InteropServices.ComVisible(false)]

      public class Queue<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.ICollection
    typeParameters:
    - id: T
      description: To be added.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.ICollection
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Queue()
  nameWithType: Queue<T>.Queue()
  fullName: System.Collections.Generic.Queue<T>.Queue()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public Queue ();
    parameters: []
  overload: System.Collections.Generic.Queue`1.#ctor*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Queue(IEnumerable<T>)
  nameWithType: Queue<T>.Queue(IEnumerable<T>)
  fullName: System.Collections.Generic.Queue<T>.Queue(IEnumerable<T>)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public Queue (System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Generic.Queue`1.#ctor*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Queue(Int32)
  nameWithType: Queue<T>.Queue(Int32)
  fullName: System.Collections.Generic.Queue<T>.Queue(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public Queue (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.Queue`1.#ctor*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.Clear
  id: Clear
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Clear()
  nameWithType: Queue<T>.Clear()
  fullName: System.Collections.Generic.Queue<T>.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Generic.Queue`1.Clear*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: Queue<T>.Contains(T)
  fullName: System.Collections.Generic.Queue<T>.Contains(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public bool Contains (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.Queue`1.Contains*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: Queue<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.Queue<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void CopyTo (T[] array, int arrayIndex);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: arrayIndex
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.Queue`1.CopyTo*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.Count
  id: Count
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Count
  nameWithType: Queue<T>.Count
  fullName: System.Collections.Generic.Queue<T>.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.Queue`1.Count*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.Dequeue
  id: Dequeue
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Dequeue()
  nameWithType: Queue<T>.Dequeue()
  fullName: System.Collections.Generic.Queue<T>.Dequeue()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public T Dequeue ();
    parameters: []
    return:
      type: T
      description: To be added.
  overload: System.Collections.Generic.Queue`1.Dequeue*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.Enqueue(`0)
  id: Enqueue(`0)
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Enqueue(T)
  nameWithType: Queue<T>.Enqueue(T)
  fullName: System.Collections.Generic.Queue<T>.Enqueue(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void Enqueue (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
  overload: System.Collections.Generic.Queue`1.Enqueue*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Queue<T>.GetEnumerator()
  fullName: System.Collections.Generic.Queue<T>.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public System.Collections.Generic.Queue<T>.Enumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.Queue`1.Enumerator
      description: To be added.
  overload: System.Collections.Generic.Queue`1.GetEnumerator*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.Peek
  id: Peek
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Peek()
  nameWithType: Queue<T>.Peek()
  fullName: System.Collections.Generic.Queue<T>.Peek()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public T Peek ();
    parameters: []
    return:
      type: T
      description: To be added.
  overload: System.Collections.Generic.Queue`1.Peek*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: System.Collections.Generic.IEnumerable()
  nameWithType: Queue<T>.System.Collections.Generic.IEnumerable()
  fullName: System.Collections.Generic.Queue<T>.System.Collections.Generic.IEnumerable()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: To be added.
  overload: System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: Queue<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.Queue<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: Queue<T>.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Generic.Queue<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: Queue<T>.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Generic.Queue<T>.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: To be added.
  overload: System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Queue<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.Queue<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: To be added.
  overload: System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.ToArray
  id: ToArray
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: ToArray()
  nameWithType: Queue<T>.ToArray()
  fullName: System.Collections.Generic.Queue<T>.ToArray()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public T[] ToArray ();
    parameters: []
    return:
      type: T[]
      description: To be added.
  overload: System.Collections.Generic.Queue`1.ToArray*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Collections.Generic.Queue`1.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: TrimExcess()
  nameWithType: Queue<T>.TrimExcess()
  fullName: System.Collections.Generic.Queue<T>.TrimExcess()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  syntax:
    content: public void TrimExcess ();
    parameters: []
  overload: System.Collections.Generic.Queue`1.TrimExcess*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Collections.Generic.Queue`1.#ctor
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Queue()
  nameWithType: Queue<T>.Queue()
  fullName: System.Collections.Generic.Queue<T>.Queue()
- uid: System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Queue(IEnumerable<T>)
  nameWithType: Queue<T>.Queue(IEnumerable<T>)
  fullName: System.Collections.Generic.Queue<T>.Queue(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.Queue`1.#ctor(System.Int32)
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Queue(Int32)
  nameWithType: Queue<T>.Queue(Int32)
  fullName: System.Collections.Generic.Queue<T>.Queue(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.Queue`1.Clear
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Clear()
  nameWithType: Queue<T>.Clear()
  fullName: System.Collections.Generic.Queue<T>.Clear()
- uid: System.Collections.Generic.Queue`1.Contains(`0)
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Contains(T)
  nameWithType: Queue<T>.Contains(T)
  fullName: System.Collections.Generic.Queue<T>.Contains(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: Queue<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.Queue<T>.CopyTo(T[],Int32)
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Generic.Queue`1.Count
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Count
  nameWithType: Queue<T>.Count
  fullName: System.Collections.Generic.Queue<T>.Count
- uid: System.Collections.Generic.Queue`1.Dequeue
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Dequeue()
  nameWithType: Queue<T>.Dequeue()
  fullName: System.Collections.Generic.Queue<T>.Dequeue()
- uid: System.Collections.Generic.Queue`1.Enqueue(`0)
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Enqueue(T)
  nameWithType: Queue<T>.Enqueue(T)
  fullName: System.Collections.Generic.Queue<T>.Enqueue(T)
- uid: System.Collections.Generic.Queue`1.GetEnumerator
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: Queue<T>.GetEnumerator()
  fullName: System.Collections.Generic.Queue<T>.GetEnumerator()
- uid: System.Collections.Generic.Queue`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: Queue<T>+Enumerator
  nameWithType: Queue<T>+Enumerator
  fullName: System.Collections.Generic.Queue<T>+Enumerator
- uid: System.Collections.Generic.Queue`1.Peek
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Peek()
  nameWithType: Queue<T>.Peek()
  fullName: System.Collections.Generic.Queue<T>.Peek()
- uid: System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable()
  nameWithType: Queue<T>.System.Collections.Generic.IEnumerable()
  fullName: System.Collections.Generic.Queue<T>.System.Collections.Generic.IEnumerable()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: Queue<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.Queue<T>.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: Queue<T>.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Generic.Queue<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: Queue<T>.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Generic.Queue<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Queue<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.Queue<T>.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.Queue`1.ToArray
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: ToArray()
  nameWithType: Queue<T>.ToArray()
  fullName: System.Collections.Generic.Queue<T>.ToArray()
- uid: System.Collections.Generic.Queue`1.TrimExcess
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: TrimExcess()
  nameWithType: Queue<T>.TrimExcess()
  fullName: System.Collections.Generic.Queue<T>.TrimExcess()
- uid: System.Collections.Generic.Queue`1.#ctor*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Queue<T>
  nameWithType: Queue<T>.Queue<T>
- uid: System.Collections.Generic.Queue`1.Clear*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Clear
  nameWithType: Queue<T>.Clear
- uid: System.Collections.Generic.Queue`1.Contains*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Contains
  nameWithType: Queue<T>.Contains
- uid: System.Collections.Generic.Queue`1.CopyTo*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: CopyTo
  nameWithType: Queue<T>.CopyTo
- uid: System.Collections.Generic.Queue`1.Count*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Count
  nameWithType: Queue<T>.Count
- uid: System.Collections.Generic.Queue`1.Dequeue*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Dequeue
  nameWithType: Queue<T>.Dequeue
- uid: System.Collections.Generic.Queue`1.Enqueue*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Enqueue
  nameWithType: Queue<T>.Enqueue
- uid: System.Collections.Generic.Queue`1.GetEnumerator*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: GetEnumerator
  nameWithType: Queue<T>.GetEnumerator
- uid: System.Collections.Generic.Queue`1.Peek*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Peek
  nameWithType: Queue<T>.Peek
- uid: System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType: Queue<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: Queue<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: Queue<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: Queue<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Queue<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Generic.Queue`1.ToArray*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: ToArray
  nameWithType: Queue<T>.ToArray
- uid: System.Collections.Generic.Queue`1.TrimExcess*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: TrimExcess
  nameWithType: Queue<T>.TrimExcess
