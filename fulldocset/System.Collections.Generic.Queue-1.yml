### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.Queue`1
  id: Queue`1
  children:
  - System.Collections.Generic.Queue`1.#ctor
  - System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.Queue`1.#ctor(System.Int32)
  - System.Collections.Generic.Queue`1.Clear
  - System.Collections.Generic.Queue`1.Contains(`0)
  - System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.Queue`1.Count
  - System.Collections.Generic.Queue`1.Dequeue
  - System.Collections.Generic.Queue`1.Enqueue(`0)
  - System.Collections.Generic.Queue`1.GetEnumerator
  - System.Collections.Generic.Queue`1.Peek
  - System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.Queue`1.ToArray
  - System.Collections.Generic.Queue`1.TrimExcess
  langs:
  - csharp
  name: Queue<T>
  nameWithType: Queue<T>
  fullName: System.Collections.Generic.Queue<T>
  type: Class
  summary: Represents a first-in, first-out collection of objects.
  remarks: "This class implements a generic queue as a circular array. Objects stored in a Queue(T) are inserted at one end and removed from the other. Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value. Use Queue(T) if you need to access the information in the same order that it is stored in the collection. Use <xref:System.Collections.Generic.Stack%601> if you need to access the information in reverse order. Use <xref:System.Collections.Concurrent.ConcurrentQueue%601> or <xref:System.Collections.Concurrent.ConcurrentStack%601> if you need to access the collection from multiple threads concurrently.  \n  \n Three main operations can be performed on a Queue(T) and its elements:  \n  \n-   <xref:System.Collections.Generic.Queue%601.Enqueue%2A> adds an element to the end of the Queue(T).  \n  \n-   <xref:System.Collections.Generic.Queue%601.Dequeue%2A> removes the oldest element from the start of the Queue(T).  \n  \n-   <xref:System.Collections.Generic.Queue%601.Peek%2A> peek returns the oldest element that is at the start of the Queue(T) but does not remove it from the Queue(T).  \n  \n The capacity of a Queue(T) is the number of elements the Queue(T) can hold. As elements are added to a Queue(T), the capacity is automatically increased as required by reallocating the internal array. The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.  \n  \n Queue(T) accepts `null` as a valid value for reference types and allows duplicate elements."
  example:
  - "The following code example demonstrates several methods of the Queue(T) generic class. The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string. The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.  \n  \n The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue. The elements of the copy are displayed.  \n  \n An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array. The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  \n  \n The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.  \n  \n [!code-vb[Generic.Queue#1](~/add/codesnippet/visualbasic/t-system.collections.gen_15_1.vb)]\n [!code-cs[Generic.Queue#1](~/add/codesnippet/csharp/t-system.collections.gen_15_1.cs)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_QueueDebugView`1))]

      [System.Runtime.InteropServices.ComVisible(false)]

      public class Queue<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.ICollection
    typeParameters:
    - id: T
      description: Specifies the type of elements in the queue.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.IReadOnlyCollection<T>
  - System.Collections.ICollection
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Queue<T>()
  nameWithType: Queue<T>.Queue<T>()
  fullName: System.Collections.Generic.Queue<T>.Queue<T>()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.Queue%601"></xref> class that is empty and has the default initial capacity.
  remarks: "The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold. As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.  \n  \n The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.  \n  \n This constructor is an O(1) operation."
  example:
  - "The following code example demonstrates this constructor and several other methods of the <xref:System.Collections.Generic.Queue%601> generic class. The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string. The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.  \n  \n The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue. The elements of the copy are displayed.  \n  \n An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array. The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  \n  \n The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.  \n  \n [!code-vb[Generic.Queue#1](~/add/codesnippet/visualbasic/m-system.collections.gen_21_1.vb)]\n [!code-cs[Generic.Queue#1](~/add/codesnippet/csharp/m-system.collections.gen_21_1.cs)]"
  syntax:
    content: public Queue ();
    parameters: []
  overload: System.Collections.Generic.Queue`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Queue<T>(IEnumerable<T>)
  nameWithType: Queue<T>.Queue<T>(IEnumerable<T>)
  fullName: System.Collections.Generic.Queue<T>.Queue<T>(IEnumerable<T>)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.Queue%601"></xref> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
  remarks: "The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold. As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.  \n  \n The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.  \n  \n The elements are copied onto the <xref:System.Collections.Generic.Queue%601> in the same order they are read by the <xref:System.Collections.Generic.IEnumerator%601> of the collection.  \n  \n This constructor is an O(`n`) operation, where `n` is the number of elements in `collection`."
  example:
  - "The following code example demonstrates this constructor and several other methods of the <xref:System.Collections.Generic.Queue%601> generic class. The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string. The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.  \n  \n The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the Queue(T) constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue. The elements of the copy are displayed.  \n  \n An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array. The Queue(T) constructor is used again to create a second copy of the queue containing three null elements at the beginning.  \n  \n The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.  \n  \n [!code-vb[Generic.Queue#1](~/add/codesnippet/visualbasic/3d14d3ab-1462-4bf6-a1d0-_1.vb)]\n [!code-cs[Generic.Queue#1](~/add/codesnippet/csharp/3d14d3ab-1462-4bf6-a1d0-_1.cs)]"
  syntax:
    content: public Queue (System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: The collection whose elements are copied to the new <xref href="stem.Collections.Generic.Queue%601"></xref>.
  overload: System.Collections.Generic.Queue`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>collection</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Queue<T>(Int32)
  nameWithType: Queue<T>.Queue<T>(Int32)
  fullName: System.Collections.Generic.Queue<T>.Queue<T>(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.Queue%601"></xref> class that is empty and has the specified initial capacity.
  remarks: "The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can hold. As elements are added to a <xref:System.Collections.Generic.Queue%601>, the capacity is automatically increased as required by reallocating the internal array.  \n  \n If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Queue%601>.  \n  \n The capacity can be decreased by calling <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>.  \n  \n This constructor is an O(`n`) operation, where `n` is `capacity`."
  syntax:
    content: public Queue (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the <xref href="stem.Collections.Generic.Queue%601"></xref> can contain.
  overload: System.Collections.Generic.Queue`1.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>capacity</code> is less than zero.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.Clear
  id: Clear
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Clear()
  nameWithType: Queue<T>.Clear()
  fullName: System.Collections.Generic.Queue<T>.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Removes all objects from the <xref href="stem.Collections.Generic.Queue%601"></xref>.
  remarks: "<xref:System.Collections.Generic.Queue%601.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.  \n  \n The capacity remains unchanged. To reset the capacity of the <xref:System.Collections.Generic.Queue%601>, call <xref:System.Collections.Generic.Queue%601.TrimExcess%2A>. Trimming an empty <xref:System.Collections.Generic.Queue%601> sets the capacity of the <xref:System.Collections.Generic.Queue%601> to the default capacity.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>."
  example:
  - "The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the Clear method.  \n  \n The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string. The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.  \n  \n The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue. The elements of the copy are displayed.  \n  \n An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array. The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  \n  \n The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string \"four\" is in the first copy of the queue, after which the Clear method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.  \n  \n [!code-vb[Generic.Queue#1](~/add/codesnippet/visualbasic/m-system.collections.gen_69_1.vb)]\n [!code-cs[Generic.Queue#1](~/add/codesnippet/csharp/m-system.collections.gen_69_1.cs)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Generic.Queue`1.Clear*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: Queue<T>.Contains(T)
  fullName: System.Collections.Generic.Queue<T>.Contains(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Determines whether an element is in the <xref href="stem.Collections.Generic.Queue%601"></xref>.
  remarks: "This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `T`, the type of values in the queue.  \n  \n This method performs a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>."
  example:
  - "The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the Contains method.  \n  \n The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string. The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.  \n  \n The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue. The elements of the copy are displayed.  \n  \n An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array. The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  \n  \n The Contains method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.  \n  \n [!code-vb[Generic.Queue#1](~/add/codesnippet/visualbasic/m-system.collections.gen_80_1.vb)]\n [!code-cs[Generic.Queue#1](~/add/codesnippet/csharp/m-system.collections.gen_80_1.cs)]"
  syntax:
    content: public bool Contains (T item);
    parameters:
    - id: item
      type: T
      description: The object to locate in the <xref href="stem.Collections.Generic.Queue%601"></xref>. The value can be `null` for reference types.
    return:
      type: System.Boolean
      description: '`true` if <code>item</code> is found in the <xref href="stem.Collections.Generic.Queue%601"></xref>; otherwise, `false`.'
  overload: System.Collections.Generic.Queue`1.Contains*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: Queue<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.Queue<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Copies the <xref href="stem.Collections.Generic.Queue%601"></xref> elements to an existing one-dimensional <xref href="System.Array"></xref>, starting at the specified array index.
  remarks: "The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.Queue%601>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>."
  syntax:
    content: public void CopyTo (T[] array, int arrayIndex);
    parameters:
    - id: array
      type: T[]
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="stem.Collections.Generic.Queue%601"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Generic.Queue`1.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>arrayIndex</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source <xref href="stem.Collections.Generic.Queue%601"></xref> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.Count
  id: Count
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Count
  nameWithType: Queue<T>.Count
  fullName: System.Collections.Generic.Queue<T>.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets the number of elements contained in the <xref href="stem.Collections.Generic.Queue%601"></xref>.
  remarks: "The capacity of a <xref:System.Collections.Generic.Queue%601> is the number of elements that the <xref:System.Collections.Generic.Queue%601> can store. Count is the number of elements that are actually in the <xref:System.Collections.Generic.Queue%601>.  \n  \n The capacity is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  \n  \n Retrieving the value of this property is an O(1) operation."
  example:
  - "The following code example demonstrates several properties and methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the Count property.  \n  \n The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string. The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.  \n  \n The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue. The elements of the copy are displayed.  \n  \n An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array. The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  \n  \n The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the Count property shows that the queue is empty.  \n  \n [!code-vb[Generic.Queue#1](~/add/codesnippet/visualbasic/p-system.collections.gen_20_1.vb)]\n [!code-cs[Generic.Queue#1](~/add/codesnippet/csharp/p-system.collections.gen_20_1.cs)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of elements contained in the <xref href="stem.Collections.Generic.Queue%601"></xref>.
  overload: System.Collections.Generic.Queue`1.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.Dequeue
  id: Dequeue
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Dequeue()
  nameWithType: Queue<T>.Dequeue()
  fullName: System.Collections.Generic.Queue<T>.Dequeue()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Removes and returns the object at the beginning of the <xref href="stem.Collections.Generic.Queue%601"></xref>.
  remarks: "This method is similar to the <xref:System.Collections.Generic.Queue%601.Peek%2A> method, but <xref:System.Collections.Generic.Queue%601.Peek%2A> does not modify the <xref:System.Collections.Generic.Queue%601>.  \n  \n If type `T` is a reference type, `null` can be added to the <xref:System.Collections.Generic.Queue%601> as a value.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the Dequeue method.  \n  \n The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The Dequeue method is used to dequeue the first string. The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the Dequeue method is used to dequeue it.  \n  \n The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue. The elements of the copy are displayed.  \n  \n An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array. The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  \n  \n The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.  \n  \n [!code-vb[Generic.Queue#1](~/add/codesnippet/visualbasic/m-system.collections.gen_28_1.vb)]\n [!code-cs[Generic.Queue#1](~/add/codesnippet/csharp/m-system.collections.gen_28_1.cs)]"
  syntax:
    content: public T Dequeue ();
    parameters: []
    return:
      type: T
      description: The object that is removed from the beginning of the <xref href="stem.Collections.Generic.Queue%601"></xref>.
  overload: System.Collections.Generic.Queue`1.Dequeue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="stem.Collections.Generic.Queue%601"></xref> is empty.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.Enqueue(`0)
  id: Enqueue(`0)
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Enqueue(T)
  nameWithType: Queue<T>.Enqueue(T)
  fullName: System.Collections.Generic.Queue<T>.Enqueue(T)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Adds an object to the end of the <xref href="stem.Collections.Generic.Queue%601"></xref>.
  remarks: "If <xref:System.Collections.Generic.Queue%601.Count%2A> already equals the capacity, the capacity of the <xref:System.Collections.Generic.Queue%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  \n  \n If <xref:System.Collections.Generic.Queue%601.Count%2A> is less than the capacity of the internal array, this method is an O(1) operation. If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>."
  example:
  - "The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the Enqueue method.  \n  \n The code example creates a queue of strings with default capacity and uses the Enqueue method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string. The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.  \n  \n The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue. The elements of the copy are displayed.  \n  \n An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array. The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  \n  \n The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.  \n  \n [!code-vb[Generic.Queue#1](~/add/codesnippet/visualbasic/m-system.collections.gen_30_1.vb)]\n [!code-cs[Generic.Queue#1](~/add/codesnippet/csharp/m-system.collections.gen_30_1.cs)]"
  syntax:
    content: public void Enqueue (T item);
    parameters:
    - id: item
      type: T
      description: The object to add to the <xref href="stem.Collections.Generic.Queue%601"></xref>. The value can be `null` for reference types.
  overload: System.Collections.Generic.Queue`1.Enqueue*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Queue<T>.GetEnumerator()
  fullName: System.Collections.Generic.Queue<T>.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the <xref href="stem.Collections.Generic.Queue%601"></xref>.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>.  \n  \n <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> is called. <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates that the <xref:System.Collections.Generic.Queue%601> generic class is enumerable. The `foreach` statement (`For Each` in Visual Basic, `for each` in C++) is used to enumerate the queue.  \n  \n The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string. The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.  \n  \n The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue. The elements of the copy are displayed.  \n  \n An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array. The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  \n  \n The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.  \n  \n [!code-vb[Generic.Queue#1](~/add/codesnippet/visualbasic/m-system.collections.gen_36_1.vb)]\n [!code-cs[Generic.Queue#1](~/add/codesnippet/csharp/m-system.collections.gen_36_1.cs)]"
  syntax:
    content: public System.Collections.Generic.Queue<T>.Enumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.Queue`1.Enumerator
      description: An <xref href="stem.Collections.Generic.Queue%601.Enumerator"></xref> for the <xref href="stem.Collections.Generic.Queue%601"></xref>.
  overload: System.Collections.Generic.Queue`1.GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.Peek
  id: Peek
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: Peek()
  nameWithType: Queue<T>.Peek()
  fullName: System.Collections.Generic.Queue<T>.Peek()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Returns the object at the beginning of the <xref href="stem.Collections.Generic.Queue%601"></xref> without removing it.
  remarks: "This method is similar to the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method, but Peek does not modify the <xref:System.Collections.Generic.Queue%601>.  \n  \n If type `T` is a reference type, `null` can be added to the <xref:System.Collections.Generic.Queue%601> as a value.  \n  \n This method is an O(1) operation."
  example:
  - "The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the Peek method.  \n  \n The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string. The Peek method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.  \n  \n The <xref:System.Collections.Generic.Queue%601.ToArray%2A> method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue. The elements of the copy are displayed.  \n  \n An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array. The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  \n  \n The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.  \n  \n [!code-vb[Generic.Queue#1](~/add/codesnippet/visualbasic/m-system.collections.gen_59_1.vb)]\n [!code-cs[Generic.Queue#1](~/add/codesnippet/csharp/m-system.collections.gen_59_1.cs)]"
  syntax:
    content: public T Peek ();
    parameters: []
    return:
      type: T
      description: The object at the beginning of the <xref href="stem.Collections.Generic.Queue%601"></xref>.
  overload: System.Collections.Generic.Queue`1.Peek*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="stem.Collections.Generic.Queue%601"></xref> is empty.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: Queue<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.Queue<T>.IEnumerable<T>.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through a collection.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.  \n  \n <xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: An <xref href="stem.Collections.Generic.IEnumerator%601"></xref> that can be used to iterate through the collection.
  overload: System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: Queue<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.Queue<T>.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Copies the elements of the <xref href="System.Collections.ICollection"></xref> to an <xref href="System.Array"></xref>, starting at a particular <xref href="System.Array"></xref> index.
  remarks: "> [!NOTE]\n>  If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>."
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array"></xref> that is the destination of the elements copied from <xref href="System.Collections.ICollection"></xref>. The <xref href="System.Array"></xref> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <code>array</code> at which copying begins.
  overload: System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>array</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code> is multidimensional.  \n  \n -or-  \n  \n <code>array</code> does not have zero-based indexing.  \n  \n -or-  \n  \n The number of elements in the source <xref href=\"System.Collections.ICollection\"></xref> is greater than the available space from <code>index</code> to the end of the destination <code>array</code>.  \n  \n -or-  \n  \n The type of the source <xref href=\"System.Collections.ICollection\"></xref> cannot be cast automatically to the type of the destination <code>array</code>."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: Queue<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.Queue<T>.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe).
  remarks: "Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection.  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: '`true` if access to the <xref href="System.Collections.ICollection"></xref> is synchronized (thread safe); otherwise, `false`.  In the default implementation of <xref href="stem.Collections.Generic.Queue%601"></xref>, this property always returns `false`.'
  overload: System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: Queue<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.Queue<T>.ICollection.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>.
  remarks: "Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n <xref:System.Collections.ICollection.SyncRoot%2A> returns an object, which can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock this object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.  \n  \n```c#  \nICollection ic = ...;  \nlock (ic.SyncRoot) {  \n   // Access the collection.  \n}  \n```  \n  \n```vb#  \nDim ic As IColletion = ...  \nSyncLock ic.SyncRoot  \n   ' Access the collection.  \nEnd SyncLock  \n```  \n  \n```cpp#  \nICollection^ ic = ...;  \ntry {  \n   Monitor::Enter(ic->SyncRoot);  \n   // Access the collection.  \n}  \nfinally {  \n   Monitor::Exit(ic->SyncRoot);  \n}  \n```  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the <xref href="System.Collections.ICollection"></xref>.  In the default implementation of <xref href="stem.Collections.Generic.Queue%601"></xref>, this property always returns the current instance.
  overload: System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: Queue<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.Queue<T>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through a collection.
  remarks: "The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.  At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  \n  \n Default implementations of collections in <xref:System.Collections.Generic?displayProperty=fullName> are not synchronized.  \n  \n This method is an O(1) operation."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator"></xref> that can be used to iterate through the collection.
  overload: System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.ToArray
  id: ToArray
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: ToArray()
  nameWithType: Queue<T>.ToArray()
  fullName: System.Collections.Generic.Queue<T>.ToArray()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Copies the <xref href="stem.Collections.Generic.Queue%601"></xref> elements to a new array.
  remarks: "The <xref:System.Collections.Generic.Queue%601> is not modified. The order of the elements in the new array is the same as the order of the elements from the beginning of the <xref:System.Collections.Generic.Queue%601> to its end.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>."
  example:
  - "The following code example demonstrates several methods of the <xref:System.Collections.Generic.Queue%601> generic class, including the ToArray method.  \n  \n The code example creates a queue of strings with default capacity and uses the <xref:System.Collections.Generic.Queue%601.Enqueue%2A> method to queue five strings. The elements of the queue are enumerated, which does not change the state of the queue. The <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue the first string. The <xref:System.Collections.Generic.Queue%601.Peek%2A> method is used to look at the next item in the queue, and then the <xref:System.Collections.Generic.Queue%601.Dequeue%2A> method is used to dequeue it.  \n  \n The ToArray method is used to create an array and copy the queue elements to it, then the array is passed to the <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor that takes <xref:System.Collections.Generic.IEnumerable%601>, creating a copy of the queue. The elements of the copy are displayed.  \n  \n An array twice the size of the queue is created, and the <xref:System.Collections.Generic.Queue%601.CopyTo%2A> method is used to copy the array elements beginning at the middle of the array. The <xref:System.Collections.Generic.Queue%601.%23ctor%2A> constructor is used again to create a second copy of the queue containing three null elements at the beginning.  \n  \n The <xref:System.Collections.Generic.Queue%601.Contains%2A> method is used to show that the string \"four\" is in the first copy of the queue, after which the <xref:System.Collections.Generic.Queue%601.Clear%2A> method clears the copy and the <xref:System.Collections.Generic.Queue%601.Count%2A> property shows that the queue is empty.  \n  \n [!code-vb[Generic.Queue#1](~/add/codesnippet/visualbasic/m-system.collections.gen_18_1.vb)]\n [!code-cs[Generic.Queue#1](~/add/codesnippet/csharp/m-system.collections.gen_18_1.cs)]"
  syntax:
    content: public T[] ToArray ();
    parameters: []
    return:
      type: T[]
      description: A new array containing elements copied from the <xref href="stem.Collections.Generic.Queue%601"></xref>.
  overload: System.Collections.Generic.Queue`1.ToArray*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.Queue`1.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.Queue`1
  langs:
  - csharp
  name: TrimExcess()
  nameWithType: Queue<T>.TrimExcess()
  fullName: System.Collections.Generic.Queue<T>.TrimExcess()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Generic
  summary: Sets the capacity to the actual number of elements in the <xref href="stem.Collections.Generic.Queue%601"></xref>, if that number is less than 90 percent of current capacity.
  remarks: "This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <xref:System.Collections.Generic.Queue%601> can be considerable, however, so the TrimExcess method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.  \n  \n This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Queue%601.Count%2A>.  \n  \n To reset a <xref:System.Collections.Generic.Queue%601> to its initial state, call the <xref:System.Collections.Generic.Queue%601.Clear%2A> method before calling TrimExcess method. Trimming an empty <xref:System.Collections.Generic.Queue%601> sets the capacity of the <xref:System.Collections.Generic.Queue%601> to the default capacity."
  syntax:
    content: public void TrimExcess ();
    parameters: []
  overload: System.Collections.Generic.Queue`1.TrimExcess*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\Queue`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/Queue`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Collections.Generic.Queue`1.#ctor
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Queue<T>()
  nameWithType: Queue<T>.Queue<T>()
  fullName: System.Collections.Generic.Queue<T>.Queue<T>()
- uid: System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Queue<T>(IEnumerable<T>)
  nameWithType: Queue<T>.Queue<T>(IEnumerable<T>)
  fullName: System.Collections.Generic.Queue<T>.Queue<T>(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.Queue`1.#ctor(System.Int32)
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Queue<T>(Int32)
  nameWithType: Queue<T>.Queue<T>(Int32)
  fullName: System.Collections.Generic.Queue<T>.Queue<T>(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.Queue`1.Clear
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Clear()
  nameWithType: Queue<T>.Clear()
  fullName: System.Collections.Generic.Queue<T>.Clear()
- uid: System.Collections.Generic.Queue`1.Contains(`0)
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Contains(T)
  nameWithType: Queue<T>.Contains(T)
  fullName: System.Collections.Generic.Queue<T>.Contains(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: Queue<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.Queue<T>.CopyTo(T[],Int32)
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Generic.Queue`1.Count
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Count
  nameWithType: Queue<T>.Count
  fullName: System.Collections.Generic.Queue<T>.Count
- uid: System.Collections.Generic.Queue`1.Dequeue
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Dequeue()
  nameWithType: Queue<T>.Dequeue()
  fullName: System.Collections.Generic.Queue<T>.Dequeue()
- uid: System.Collections.Generic.Queue`1.Enqueue(`0)
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Enqueue(T)
  nameWithType: Queue<T>.Enqueue(T)
  fullName: System.Collections.Generic.Queue<T>.Enqueue(T)
- uid: System.Collections.Generic.Queue`1.GetEnumerator
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: Queue<T>.GetEnumerator()
  fullName: System.Collections.Generic.Queue<T>.GetEnumerator()
- uid: System.Collections.Generic.Queue`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: Queue<T>+Enumerator
  nameWithType: Queue<T>+Enumerator
  fullName: System.Collections.Generic.Queue<T>+Enumerator
- uid: System.Collections.Generic.Queue`1.Peek
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Peek()
  nameWithType: Queue<T>.Peek()
  fullName: System.Collections.Generic.Queue<T>.Peek()
- uid: System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: Queue<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.Queue<T>.IEnumerable<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: Queue<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.Queue<T>.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: Queue<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.Queue<T>.ICollection.IsSynchronized
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: Queue<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.Queue<T>.ICollection.SyncRoot
- uid: System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: Queue<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.Queue<T>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.Queue`1.ToArray
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: ToArray()
  nameWithType: Queue<T>.ToArray()
  fullName: System.Collections.Generic.Queue<T>.ToArray()
- uid: System.Collections.Generic.Queue`1.TrimExcess
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: TrimExcess()
  nameWithType: Queue<T>.TrimExcess()
  fullName: System.Collections.Generic.Queue<T>.TrimExcess()
- uid: System.Collections.Generic.Queue`1.#ctor*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Queue<T>
  nameWithType: Queue<T>.Queue<T>
- uid: System.Collections.Generic.Queue`1.Clear*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Clear
  nameWithType: Queue<T>.Clear
- uid: System.Collections.Generic.Queue`1.Contains*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Contains
  nameWithType: Queue<T>.Contains
- uid: System.Collections.Generic.Queue`1.CopyTo*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: CopyTo
  nameWithType: Queue<T>.CopyTo
- uid: System.Collections.Generic.Queue`1.Count*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Count
  nameWithType: Queue<T>.Count
- uid: System.Collections.Generic.Queue`1.Dequeue*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Dequeue
  nameWithType: Queue<T>.Dequeue
- uid: System.Collections.Generic.Queue`1.Enqueue*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Enqueue
  nameWithType: Queue<T>.Enqueue
- uid: System.Collections.Generic.Queue`1.GetEnumerator*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: GetEnumerator
  nameWithType: Queue<T>.GetEnumerator
- uid: System.Collections.Generic.Queue`1.Peek*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: Peek
  nameWithType: Queue<T>.Peek
- uid: System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType: Queue<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: Queue<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: Queue<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: Queue<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Queue<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Generic.Queue`1.ToArray*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: ToArray
  nameWithType: Queue<T>.ToArray
- uid: System.Collections.Generic.Queue`1.TrimExcess*
  parent: System.Collections.Generic.Queue`1
  isExternal: false
  name: TrimExcess
  nameWithType: Queue<T>.TrimExcess
