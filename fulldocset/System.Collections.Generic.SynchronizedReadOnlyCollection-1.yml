### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  id: SynchronizedReadOnlyCollection`1
  children:
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,`0[])
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  - System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  langs:
  - csharp
  name: SynchronizedReadOnlyCollection<T>
  nameWithType: SynchronizedReadOnlyCollection<T>
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>
  type: Class
  summary: Provides a thread-safe, read-only collection that contains objects of a type specified by the generic parameter as elements.
  remarks: The SynchronizedReadOnlyCollection(T) stores data in an <xref:System.Collections.Generic.IList%601> container and provides an object that can be set and used to synchronize access to the collection so that it is thread safe. The <xref:System.Collections.Generic.IList%601> container can be recovered using the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.Items%2A> property. The synchronized object can be recovered using the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.System.Collections.ICollection.SyncRoot%2A> property. It can only be set using one of the constructors that take the `syncRoot` parameter.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public class SynchronizedReadOnlyCollection<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.IList
    typeParameters:
    - id: T
      description: The type of object contained as items in the thread-safe, read-only collection.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.IList<T>
  - System.Collections.IList
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: SynchronizedReadOnlyCollection<T>()
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.SynchronizedReadOnlyCollection%601"></xref> class.
  syntax:
    content: public SynchronizedReadOnlyCollection ();
    parameters: []
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: SynchronizedReadOnlyCollection<T>(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.SynchronizedReadOnlyCollection%601"></xref> class with the object used to synchronize access to the thread-safe, read-only collection.
  remarks: If multiple instances of the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601> are created using the same `syncRoot`, then access is protected across all instances.
  syntax:
    content: public SynchronizedReadOnlyCollection (object syncRoot);
    parameters:
    - id: syncRoot
      type: System.Object
      description: The object used to synchronize access to the thread-safe, read-only collection.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>syncRoot</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: SynchronizedReadOnlyCollection<T>(Object,IEnumerable<T>)
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object,IEnumerable<T>)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object,IEnumerable<T>)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.SynchronizedReadOnlyCollection%601"></xref> class from a specified enumerable list of elements and with the object used to synchronize access to the thread-safe, read-only collection.
  syntax:
    content: public SynchronizedReadOnlyCollection (object syncRoot, System.Collections.Generic.IEnumerable<T> list);
    parameters:
    - id: syncRoot
      type: System.Object
      description: The object used to synchronize access to the thread-safe, read-only collection.
    - id: list
      type: System.Collections.Generic.IEnumerable`1
      description: The <xref href="stem.Collections.Generic.IEnumerable%601"></xref> collection of elements used to initialize the thread-safe, read-only collection.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>syncRoot</code> or <code>list</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,`0[])
  id: '#ctor(System.Object,`0[])'
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: SynchronizedReadOnlyCollection<T>(Object,T[])
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object,T[])
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object,T[])
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="stem.Collections.Generic.SynchronizedReadOnlyCollection%601"></xref> class from a specified array of elements and with the object used to synchronize access to the thread-safe, read-only collection.
  syntax:
    content: public SynchronizedReadOnlyCollection (object syncRoot, T[] list);
    parameters:
    - id: syncRoot
      type: System.Object
      description: The object used to synchronize access to the thread-safe, read-only collection.
    - id: list
      type: T[]
      description: The <xref href="System.Array"></xref> of type <code>T</code> elements used to initialize the thread-safe, read-only collection.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>syncRoot</code> or <code>list</code> is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.Contains(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Contains(T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Determines whether the collection contains an element with a specific value.
  syntax:
    content: public bool Contains (T value);
    parameters:
    - id: value
      type: T
      description: The object to locate in the collection.
    return:
      type: System.Boolean
      description: '`true` if the element <code>value</code> is found in the collection; otherwise `false`.'
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>value</code> is not an object of the type contained in the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Copies the elements of the collection to a specified array, starting at a particular index.
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: The <xref href="System.Array"></xref> that is the destination for the elements copied from the collection.
    - id: index
      type: System.Int32
      description: The zero-based index in the array at which copying begins.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count
  id: Count
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: Count
  nameWithType: SynchronizedReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Count
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets the number of elements contained in the thread-safe, read-only collection.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: The number of elements contained in the thread-safe, read-only collection.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.GetEnumerator()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the synchronized, read-only collection.
  syntax:
    content: public System.Collections.Generic.IEnumerator<T> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: An <xref href="stem.Collections.Generic.IEnumerator%601"></xref> for objects of the type stored in the collection.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IndexOf(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IndexOf(T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Returns the index of the first occurrence of a value in the collection.
  syntax:
    content: public int IndexOf (T value);
    parameters:
    - id: value
      type: T
      description: The element whose index is being retrieved.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of the <code>value</code> in the collection.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.Item(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Item(Int32)
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets an element from the thread-safe, read-only collection with a specified index.
  syntax:
    content: public T this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to be retrieved from the collection.
    return:
      type: T
      description: The object in the collection that has the specified <code>index</code>.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items
  id: Items
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: Items
  nameWithType: SynchronizedReadOnlyCollection<T>.Items
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Items
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets the list of elements contained in the thread-safe, read-only collection.
  syntax:
    content: protected System.Collections.Generic.IList<T> Items { get; }
    return:
      type: System.Collections.Generic.IList`1
      description: The <xref href="stem.Collections.Generic.IList%601"></xref> of elements that are contained in the thread-safe, read-only collection.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: ICollection<T>.Add(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Add(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.ICollection<T>.Add(T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Throws a <xref href="System.NotSupportedException"></xref> if called.
  remarks: Items cannot be added to a read-only collection.
  syntax:
    content: void ICollection<T>.Add (T value);
    parameters:
    - id: value
      type: T
      description: The element to be added to the collection.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Items cannot be set in a read-only collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  id: System#Collections#Generic#ICollection{T}#Clear
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: ICollection<T>.Clear()
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Clear()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.ICollection<T>.Clear()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Throws a <xref href="System.NotSupportedException"></xref> if called.
  remarks: Items cannot be cleared from a read-only collection.
  syntax:
    content: void ICollection<T>.Clear ();
    parameters: []
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Items cannot be cleared from a read-only collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: ICollection<T>.IsReadOnly
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.ICollection<T>.IsReadOnly
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: This property always returns `true` because the collection is read-only.
  syntax:
    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Returns <xref href=\"System.Boolean\"></xref>.  \n  \n This property always returns `true` because the collection is read-only."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  id: System#Collections#Generic#ICollection{T}#Remove(`0)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: ICollection<T>.Remove(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.ICollection<T>.Remove(T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Returns `false` and throws a <xref href="System.NotSupportedException"></xref> if called.
  syntax:
    content: bool ICollection<T>.Remove (T value);
    parameters:
    - id: value
      type: T
      description: The value to be removed from the collection.
    return:
      type: System.Boolean
      description: "`False`.  \n  \n The method returns `false` to indicate that the item was not removed from the read-only collection."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Items cannot be removed from a read-only collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IList<T>.Insert(Int32,T)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.Insert(Int32,T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList<T>.Insert(Int32,T)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Throws a <xref href="System.NotSupportedException"></xref> if called.
  syntax:
    content: void IList<T>.Insert (int index, T value);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <code>value</code> is to be inserted.
    - id: value
      type: T
      description: The object to insert into the collection.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#Insert*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Items cannot be inserted into a read-only collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  id: System#Collections#Generic#IList{T}#Item(System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IList<T>.Item(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.Item(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList<T>.Item(Int32)
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Returns the object in the collection that has the specified <code>index</code>.
  syntax:
    content: T System.Collections.Generic.IList<T>.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to be retrieved from the collection.
    return:
      type: T
      description: "Returns <xref href=\"System.Boolean\"></xref>.  \n  \n Returns the object in the collection that has the specified <code>index</code>."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#Item*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IList<T>.RemoveAt(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList<T>.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Throws a <xref href="System.NotSupportedException"></xref> if called.
  syntax:
    content: void IList<T>.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to be retrieved from the collection.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#RemoveAt*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Items cannot be removed from a read-only collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Copies the elements of the collection to a specified array, starting at a particular index.
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The <xref href="System.Array"></xref> that is the destination for the elements copied from the collection.
    - id: index
      type: System.Int32
      description: The zero-based index in the array at which copying begins.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: ICollection.IsSynchronized
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: This property always returns `true` because the collection is thread safe.
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Returns <xref href=\"System.Boolean\"></xref>.  \n  \n This property always returns `true` because the collection is thread safe."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: ICollection.SyncRoot
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets the object used to synchronize access to the thread-safe, read-only collection.
  remarks: The value of this `syncRoot` object can be set when creating the thread-safe collection using the <xref:System.Collections.Generic.SynchronizedReadOnlyCollection%601.%23ctor%28System.Object%29> constructor.
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Returns <xref href=\"System.Object\"></xref>.  \n  \n The object used to synchronize access to the thread-safe, read-only collection."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: SynchronizedReadOnlyCollection<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the synchronized, read-only collection.
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: Returns <xref href="System.Collections.IEnumerator"></xref>.  An enumerator that iterates through the synchronized, read-only collection.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IList.Add(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Add(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.Add(Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Adds an element to the collection.
  remarks: Items cannot be added to a read-only collection.
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: The element to be added to the collection.
    return:
      type: System.Int32
      description: Returns <xref href="System.Int32"></xref>. The position into which the new element was inserted.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Items cannot be set in a read-only collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IList.Clear()
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Clear()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.Clear()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Items cannot be cleared from a read-only collection.
  remarks: Items cannot be cleared from a read-only collection.
  syntax:
    content: void IList.Clear ();
    parameters: []
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Items cannot be cleared from a read-only collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IList.Contains(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Contains(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.Contains(Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Checks whether the specified object exists in the collection.
  remarks: Returns `true` if the element `value` is found in the collection; otherwise `false`.
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object to locate in the collection.
    return:
      type: System.Boolean
      description: "Returns <xref href=\"System.Boolean\"></xref>.  \n  \n True if the object is located in the collection; otherwise false."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>value</code> is not an object of the type contained in the collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IList.IndexOf(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.IndexOf(Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets the index of the specified item.
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: The element whose index is being retrieved.
    return:
      type: System.Int32
      description: "Returns <xref href=\"System.Int32\"></xref>.  \n  \n The zero-based index of the first occurrence of the <code>value</code> in the collection."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IList.Insert(Int32,Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Insert(Int32,Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Items cannot be inserted into a read-only collection.
  remarks: Throws a <xref:System.NotSupportedException> if called.
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <code>value</code> is to be inserted.
    - id: value
      type: System.Object
      description: The object to insert into the collection.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Items cannot be inserted into a read-only collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IList.IsFixedSize
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IsFixedSize
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.IsFixedSize
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: This property returns `true` because the read-only collection is always fixed in size.
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "Returns <xref href=\"System.Boolean\"></xref>.  \n  \n This property returns `true` because the read-only collection is always fixed in size."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IList.IsReadOnly
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IsReadOnly
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.IsReadOnly
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: This property always returns `true` because the collection is read-only.
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Returns <xref href=\"System.Boolean\"></xref>.  \n  \n This property always returns `true` because the collection is read-only."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IList.Item(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Item(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.Item(Int32)
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Gets the item at a specified zero-based index.
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to be retrieved from the collection.
    return:
      type: System.Object
      description: "Returns <xref href=\"System.Object\"></xref>.  \n  \n Gets the item at a specified zero-based index."
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Items cannot be set in a read-only collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IList.Remove(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Remove(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.Remove(Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Retrieves the specified element from the collection.
  remarks: Throws a <xref:System.NotSupportedException> if called.
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: The zero-based index of the element to be retrieved from the collection.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Items cannot be removed from a read-only collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  langs:
  - csharp
  name: IList.RemoveAt(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.RemoveAt(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.Collections.Generic
  summary: Items cannot be removed from a read-only collection.
  remarks: Throws a <xref:System.NotSupportedException> if called.
  syntax:
    content: void IList.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to be retrieved from the collection.
  overload: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Items cannot be removed from a read-only collection.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Collections.Generic\SynchronizedReadOnlyCollection`1.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Collections.Generic/SynchronizedReadOnlyCollection`1.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: SynchronizedReadOnlyCollection<T>()
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>()
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: SynchronizedReadOnlyCollection<T>(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: SynchronizedReadOnlyCollection<T>(Object,IEnumerable<T>)
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object,IEnumerable<T>)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object,IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,`0[])
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: SynchronizedReadOnlyCollection<T>(Object,T[])
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object,T[])
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>(Object,T[])
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Contains(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.Contains(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Contains(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.CopyTo(T[],Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Count
  nameWithType: SynchronizedReadOnlyCollection<T>.Count
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Count
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IndexOf(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IndexOf(T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Item(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.Item(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Item(Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Items
  nameWithType: SynchronizedReadOnlyCollection<T>.Items
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.Items
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: ICollection<T>.Add(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Add(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.ICollection<T>.Add(T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: ICollection<T>.Clear()
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Clear()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.ICollection<T>.Clear()
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: ICollection<T>.IsReadOnly
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: ICollection<T>.Remove(T)
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.ICollection<T>.Remove(T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IList<T>.Insert(Int32,T)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.Insert(Int32,T)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList<T>.Insert(Int32,T)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IList<T>.Item(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.Item(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList<T>.Item(Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IList<T>.RemoveAt(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList<T>.RemoveAt(Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: ICollection.CopyTo(Array,Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: ICollection.IsSynchronized
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.ICollection.IsSynchronized
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: ICollection.SyncRoot
  nameWithType: SynchronizedReadOnlyCollection<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.ICollection.SyncRoot
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: SynchronizedReadOnlyCollection<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IList.Add(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Add(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.Add(Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IList.Clear()
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Clear()
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.Clear()
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IList.Contains(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Contains(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.Contains(Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IList.IndexOf(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.IndexOf(Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IList.Insert(Int32,Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Insert(Int32,Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.Insert(Int32,Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IList.IsFixedSize
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IsFixedSize
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.IsFixedSize
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IList.IsReadOnly
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.IsReadOnly
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.IsReadOnly
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IList.Item(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Item(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.Item(Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IList.Remove(Object)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.Remove(Object)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.Remove(Object)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IList.RemoveAt(Int32)
  nameWithType: SynchronizedReadOnlyCollection<T>.IList.RemoveAt(Int32)
  fullName: System.Collections.Generic.SynchronizedReadOnlyCollection<T>.IList.RemoveAt(Int32)
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: SynchronizedReadOnlyCollection<T>
  nameWithType: SynchronizedReadOnlyCollection<T>.SynchronizedReadOnlyCollection<T>
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Contains
  nameWithType: SynchronizedReadOnlyCollection<T>.Contains
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: CopyTo
  nameWithType: SynchronizedReadOnlyCollection<T>.CopyTo
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Count
  nameWithType: SynchronizedReadOnlyCollection<T>.Count
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: GetEnumerator
  nameWithType: SynchronizedReadOnlyCollection<T>.GetEnumerator
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: IndexOf
  nameWithType: SynchronizedReadOnlyCollection<T>.IndexOf
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Item
  nameWithType: SynchronizedReadOnlyCollection<T>.Item
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: Items
  nameWithType: SynchronizedReadOnlyCollection<T>.Items
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Add*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Add
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Add
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Clear*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Clear
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Clear
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection<T>#Remove*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.Remove
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Remove
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#Insert*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.Insert
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Insert
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#Item*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.Item
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Item
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList<T>#RemoveAt*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.Generic.IList<T>.RemoveAt
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.Generic.IList<T>.RemoveAt
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Add
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Clear
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Clear
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Contains
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IndexOf
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Insert
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Item
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.Remove
- uid: System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt*
  parent: System.Collections.Generic.SynchronizedReadOnlyCollection`1
  isExternal: false
  name: System.Collections.IList.RemoveAt
  nameWithType: SynchronizedReadOnlyCollection<T>.System.Collections.IList.RemoveAt
