### YamlMime:ManagedReference
items:
- uid: System.Net.HttpWebRequest
  id: HttpWebRequest
  children:
  - System.Net.HttpWebRequest.#ctor
  - System.Net.HttpWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.HttpWebRequest.Abort
  - System.Net.HttpWebRequest.Accept
  - System.Net.HttpWebRequest.AddRange(System.Int32)
  - System.Net.HttpWebRequest.AddRange(System.Int64)
  - System.Net.HttpWebRequest.AddRange(System.Int32,System.Int32)
  - System.Net.HttpWebRequest.AddRange(System.Int64,System.Int64)
  - System.Net.HttpWebRequest.AddRange(System.String,System.Int32)
  - System.Net.HttpWebRequest.AddRange(System.String,System.Int64)
  - System.Net.HttpWebRequest.AddRange(System.String,System.Int32,System.Int32)
  - System.Net.HttpWebRequest.AddRange(System.String,System.Int64,System.Int64)
  - System.Net.HttpWebRequest.Address
  - System.Net.HttpWebRequest.AllowAutoRedirect
  - System.Net.HttpWebRequest.AllowReadStreamBuffering
  - System.Net.HttpWebRequest.AllowWriteStreamBuffering
  - System.Net.HttpWebRequest.AutomaticDecompression
  - System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
  - System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
  - System.Net.HttpWebRequest.ClientCertificates
  - System.Net.HttpWebRequest.Connection
  - System.Net.HttpWebRequest.ConnectionGroupName
  - System.Net.HttpWebRequest.ContentLength
  - System.Net.HttpWebRequest.ContentType
  - System.Net.HttpWebRequest.ContinueDelegate
  - System.Net.HttpWebRequest.ContinueTimeout
  - System.Net.HttpWebRequest.CookieContainer
  - System.Net.HttpWebRequest.Credentials
  - System.Net.HttpWebRequest.Date
  - System.Net.HttpWebRequest.DefaultCachePolicy
  - System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength
  - System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength
  - System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)
  - System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult,System.Net.TransportContext@)
  - System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)
  - System.Net.HttpWebRequest.Expect
  - System.Net.HttpWebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.HttpWebRequest.GetRequestStream
  - System.Net.HttpWebRequest.GetRequestStream(System.Net.TransportContext@)
  - System.Net.HttpWebRequest.GetResponse
  - System.Net.HttpWebRequest.HaveResponse
  - System.Net.HttpWebRequest.Headers
  - System.Net.HttpWebRequest.Host
  - System.Net.HttpWebRequest.IfModifiedSince
  - System.Net.HttpWebRequest.KeepAlive
  - System.Net.HttpWebRequest.MaximumAutomaticRedirections
  - System.Net.HttpWebRequest.MaximumResponseHeadersLength
  - System.Net.HttpWebRequest.MediaType
  - System.Net.HttpWebRequest.Method
  - System.Net.HttpWebRequest.Pipelined
  - System.Net.HttpWebRequest.PreAuthenticate
  - System.Net.HttpWebRequest.ProtocolVersion
  - System.Net.HttpWebRequest.Proxy
  - System.Net.HttpWebRequest.ReadWriteTimeout
  - System.Net.HttpWebRequest.Referer
  - System.Net.HttpWebRequest.RequestUri
  - System.Net.HttpWebRequest.SendChunked
  - System.Net.HttpWebRequest.ServerCertificateValidationCallback
  - System.Net.HttpWebRequest.ServicePoint
  - System.Net.HttpWebRequest.SupportsCookieContainer
  - System.Net.HttpWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Net.HttpWebRequest.Timeout
  - System.Net.HttpWebRequest.TransferEncoding
  - System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing
  - System.Net.HttpWebRequest.UseDefaultCredentials
  - System.Net.HttpWebRequest.UserAgent
  langs:
  - csharp
  name: HttpWebRequest
  nameWithType: HttpWebRequest
  fullName: System.Net.HttpWebRequest
  type: Class
  summary: Provides an HTTP-specific implementation of the <xref href="System.Net.WebRequest"></xref> class.
  remarks: "The HttpWebRequest class provides support for the properties and methods defined in <xref:System.Net.WebRequest> and for additional properties and methods that enable the user to interact directly with servers using HTTP.  \n  \n Do not use the <xref:System.Net.HttpWebRequest.%23ctor%2A> constructor. Use the <xref:System.Net.WebRequest.Create%2A?displayProperty=fullName> method to initialize new HttpWebRequest objects. If the scheme for the Uniform Resource Identifier (URI) is `http://` or `https://`, <xref:System.Net.WebRequest.Create%2A> returns an HttpWebRequest object.  \n  \n The <xref:System.Net.HttpWebRequest.GetResponse%2A> method makes a synchronous request to the resource specified in the <xref:System.Net.HttpWebRequest.RequestUri%2A> property and returns an <xref:System.Net.HttpWebResponse> that contains the response object. The response data can be received by using the stream returned by <xref:System.Net.HttpWebResponse.GetResponseStream%2A>. If the response object or the response stream is closed, remaining data will be forfeited. The remaining data will be drained and the socket will be re-used for subsequent requests when closing the response object or stream if the following conditions hold: it's a keep-alive or pipelined request, only a small amount of data needs to be received, or the remaining data is received in a small time interval. If none of the mentioned conditions hold or the drain time is exceeded, the socket will be closed. For keep-alive or pipelined connections, we strongly recommend that the application reads the streams until EOF. This ensures that the socket will be re-used for subsequent requests resulting in better performance and less resources used.  \n  \n When you want to send data to the resource, the <xref:System.Net.HttpWebRequest.GetRequestStream%2A> method returns a <xref:System.IO.Stream> object to use to send data. The <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> and <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> methods provide asynchronous access to the send data stream.  \n  \n For client authentication with HttpWebRequest, the client certificate must be installed in the My certificate store of the current user.  \n  \n The HttpWebRequest class throws a <xref:System.Net.WebException> when errors occur while accessing a resource. The <xref:System.Net.WebException.Status%2A?displayProperty=fullName> property contains a <xref:System.Net.WebExceptionStatus> value that indicates the source of the error. When <xref:System.Net.WebException.Status%2A?displayProperty=fullName> is <xref:System.Net.WebExceptionStatus?displayProperty=fullName>, the <xref:System.Net.WebException.Response%2A> property contains the <xref:System.Net.HttpWebResponse> received from the resource.  \n  \n HttpWebRequest exposes common HTTP header values sent to the Internet resource as properties, set by methods, or set by the system; the following table contains a complete list. You can set other headers in the <xref:System.Net.HttpWebRequest.Headers%2A> property as name/value pairs. Note that servers and caches may change or add headers during the request.  \n  \n The following table lists the HTTP headers that are set either by properties or methods or the system.  \n  \n|Header|Set by|  \n|------------|------------|  \n|Accept|Set by the <xref:System.Net.HttpWebRequest.Accept%2A> property.|  \n|Connection|Set by the <xref:System.Net.HttpWebRequest.Connection%2A> property, <xref:System.Net.HttpWebRequest.KeepAlive%2A> property.|  \n|Content-Length|Set by the <xref:System.Net.HttpWebRequest.ContentLength%2A> property.|  \n|Content-Type|Set by the <xref:System.Net.HttpWebRequest.ContentType%2A> property.|  \n|Expect|Set by the <xref:System.Net.HttpWebRequest.Expect%2A> property.|  \n|Date|Set by the system to current date.|  \n|Host|Set by the system to current host information.|  \n|If-Modified-Since|Set by the <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> property.|  \n|Range|Set by the <xref:System.Net.HttpWebRequest.AddRange%2A> method.|  \n|Referer|Set by the <xref:System.Net.HttpWebRequest.Referer%2A> property.|  \n|Transfer-Encoding|Set by the <xref:System.Net.HttpWebRequest.TransferEncoding%2A> property (the <xref:System.Net.HttpWebRequest.SendChunked%2A> property must be `true`).|  \n|User-Agent|Set by the <xref:System.Net.HttpWebRequest.UserAgent%2A> property.|  \n  \n> [!NOTE]\n>  HttpWebRequest is registered automatically. You do not need to call the <xref:System.Net.WebRequest.RegisterPrefix%2A> method to register HttpWebRequest before using URIs beginning with `http://` or `https://`.  \n  \n The local computer or application config file may specify that a default proxy be used. If the <xref:System.Net.HttpWebRequest.Proxy%2A> property is specified, then the proxy settings from the <xref:System.Net.HttpWebRequest.Proxy%2A> property override the local computer or application config file and the HttpWebRequest instance will use the proxy settings specified. If no proxy is specified in a config file and the <xref:System.Net.HttpWebRequest.Proxy%2A> property is unspecified, the HttpWebRequest class uses the proxy settings inherited from Internet Explorer on the local computer. If there are no proxy settings in Internet Explorer, the request is sent directly to the server.  \n  \n The HttpWebRequest class parses a proxy bypass list with wildcard characters inherited from Internet Explorer differently than the bypass list is parsed directly by Internet Explorer. For example, the HttpWebRequest class will parse a bypass list of \"nt*\" from Internet Explorer as a regular expression of \"nt.$\". This differs from the native behavior of Internet Explorer. So a URL of \"`http://intxxxxx`\" would bypass the proxy using the HttpWebRequest class, but would not bypass the proxy using Internet Explorer.  \n  \n> [!NOTE]\n>  The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of <xref:System.Net.HttpWebRequest.ClientCertificates%2A> (if there is one), or tries to reuse an anonymous sessions if <xref:System.Net.HttpWebRequest.ClientCertificates%2A> is empty.  \n  \n> [!NOTE]\n>  For security reasons, cookies are disabled by default. If you want to use cookies, use the <xref:System.Net.HttpWebRequest.CookieContainer%2A> property to enable cookies.  \n  \n The .NET Framework 4.6 includes a new security feature that blocks insecure cipher and hashing algorithms for connections. Applications using TLS/SSL through APIs such as HttpClient, HttpWebRequest, FTPClient, SmtpClient, SslStream, etc. and targeting .NET Framework 4.6 get the more-secure behavior by default.  \n  \n Developers may want to opt out of this behavior in order to maintain interoperability with their existing SSL3 services OR TLS w/ RC4 services. [This article](https://support.microsoft.com/kb/3069494) explains how to modify your code so that the new behavior is disabled."
  example:
  - "The following code example creates an HttpWebRequest for the URI http://www.contoso.com/.  \n  \n [!code-cpp[Classic HttpWebRequest Example#1](~/add/codesnippet/cpp/t-system.net.httpwebrequ_1.cpp)]\n [!code-vb[Classic HttpWebRequest Example#1](~/add/codesnippet/visualbasic/t-system.net.httpwebrequ_1.vb)]\n [!code-cs[Classic HttpWebRequest Example#1](~/add/codesnippet/csharp/t-system.net.httpwebrequ_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.CompilerServices.FriendAccessAllowed]

      public class HttpWebRequest : System.Net.WebRequest, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Net.WebRequest
  implements:
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Net.WebRequest.AuthenticationLevel
  - System.Net.WebRequest.CachePolicy
  - System.Net.WebRequest.Create(System.String)
  - System.Net.WebRequest.Create(System.Uri)
  - System.Net.WebRequest.CreateDefault(System.Uri)
  - System.Net.WebRequest.CreateHttp(System.String)
  - System.Net.WebRequest.CreateHttp(System.Uri)
  - System.Net.WebRequest.CreatorInstance
  - System.Net.WebRequest.DefaultWebProxy
  - System.Net.WebRequest.GetRequestStreamAsync
  - System.Net.WebRequest.GetResponseAsync
  - System.Net.WebRequest.GetSystemWebProxy
  - System.Net.WebRequest.ImpersonationLevel
  - System.Net.WebRequest.RegisterPortableWebRequestCreator(System.Net.IWebRequestCreate)
  - System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.#ctor
  id: '#ctor'
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: HttpWebRequest()
  nameWithType: HttpWebRequest.HttpWebRequest()
  fullName: System.Net.HttpWebRequest.HttpWebRequest()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: Initializes a new instance of the <xref href="System.Net.HttpWebRequest"></xref> class.
  syntax:
    content: public HttpWebRequest ();
    parameters: []
  overload: System.Net.HttpWebRequest.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: HttpWebRequest(SerializationInfo,StreamingContext)
  nameWithType: HttpWebRequest.HttpWebRequest(SerializationInfo,StreamingContext)
  fullName: System.Net.HttpWebRequest.HttpWebRequest(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: Initializes a new instance of the <xref href="System.Net.HttpWebRequest"></xref> class from the specified instances of the <xref href="System.Runtime.Serialization.SerializationInfo"></xref> and <xref href="System.Runtime.Serialization.StreamingContext"></xref> classes.
  remarks: An application must run in full trust mode when using serialization.
  syntax:
    content: protected HttpWebRequest (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
    parameters:
    - id: serializationInfo
      type: System.Runtime.Serialization.SerializationInfo
      description: A <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object that contains the information required to serialize the new <xref href="System.Net.HttpWebRequest"></xref> object.
    - id: streamingContext
      type: System.Runtime.Serialization.StreamingContext
      description: A <xref href="System.Runtime.Serialization.StreamingContext"></xref> object that contains the source and destination of the serialized stream associated with the new <xref href="System.Net.HttpWebRequest"></xref> object.
  overload: System.Net.HttpWebRequest.#ctor*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.Abort
  id: Abort
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: Abort()
  nameWithType: HttpWebRequest.Abort()
  fullName: System.Net.HttpWebRequest.Abort()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Cancels a request to an Internet resource.
  remarks: "The Abort method cancels a request to a resource. After a request is canceled, calling the <xref:System.Net.HttpWebRequest.GetResponse%2A>, <xref:System.Net.HttpWebRequest.BeginGetResponse%2A>, <xref:System.Net.HttpWebRequest.EndGetResponse%2A>, <xref:System.Net.HttpWebRequest.GetRequestStream%2A>, <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>, or <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> method causes a <xref:System.Net.WebException> with the <xref:System.Net.WebException.Status%2A> property set to <xref:System.Net.WebExceptionStatus>.  \n  \n The Abort method will synchronously execute the callback specified to the <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> or <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> methods if the Abort method is called while either of these operations are outstanding. This can lead to potential deadlock issues.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "In the case of asynchronous requests, it is the responsibility of the client application to implement its own time-out mechanism. The following code example shows how to do this.  \n  \n [!code-cpp[System.Net.HttpWebRequest.BeginGetResponse#1](~/add/codesnippet/cpp/m-system.net.httpwebrequ_1_1.cpp)]\n [!code-cs[System.Net.HttpWebRequest.BeginGetResponse#1](~/add/codesnippet/csharp/m-system.net.httpwebrequ_1_1.cs)]\n [!code-vb[System.Net.HttpWebRequest.BeginGetResponse#1](~/add/codesnippet/visualbasic/m-system.net.httpwebrequ_1_1.vb)]"
  syntax:
    content: public override void Abort ();
    parameters: []
  overload: System.Net.HttpWebRequest.Abort*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.Accept
  id: Accept
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: Accept
  nameWithType: HttpWebRequest.Accept
  fullName: System.Net.HttpWebRequest.Accept
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the value of the `Accept` HTTP header.
  remarks: "To clear the `Accept` HTTP header, set the Accept property to `null`.  \n  \n> [!NOTE]\n>  The value for this property is stored in <xref:System.Net.WebHeaderCollection>. If WebHeaderCollection is set, the property value is lost."
  example:
  - "The following code example sets the Accept property.  \n  \n [!code-cs[HttpWebRequest_Accept#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_21_1.cs)]\n [!code-cpp[HttpWebRequest_Accept#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_21_1.cpp)]\n [!code-vb[HttpWebRequest_Accept#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_21_1.vb)]"
  syntax:
    content: public string Accept { get; set; }
    return:
      type: System.String
      description: The value of the `Accept` HTTP header. The default value is `null`.
  overload: System.Net.HttpWebRequest.Accept*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.AddRange(System.Int32)
  id: AddRange(System.Int32)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: AddRange(Int32)
  nameWithType: HttpWebRequest.AddRange(Int32)
  fullName: System.Net.HttpWebRequest.AddRange(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Adds a byte range header to a request for a specific range from the beginning or end of the requested data.
  remarks: "The AddRange method adds a byte range header to the request.  \n  \n If `range` is positive, the `range` parameter specifies the starting point of the range. The server should start sending data from the `range` parameter specified to the end of the data in the HTTP entity.  \n  \n If `range` is negative, the `range` parameter specifies the ending point of the range. The server should start sending data from the start of the data in the HTTP entity to the `range` parameter specified.  \n  \n Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  \n  \n The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  \n  \n An example of a Range header in an HTTP protocol request that requests the server send the first 100 bytes (from the start to byte position 99) would be the following:  \n  \n `Range: bytes=0-99\\r\\n\\r\\n`  \n  \n For this example, the `range` parameter would be -99.  \n  \n A HTTP server indicates support for Range headers with the Accept-Ranges header. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  \n  \n `Accept-Ranges: bytes\\r\\n\\r\\n`  \n  \n If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  \n  \n `Accept-Ranges: none\\r\\n\\r\\n`  \n  \n When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <xref:System.Net.HttpWebResponse> class. Headers associated with each range are returned in the response."
  example:
  - "The following code example adds a range header to the request.  \n  \n [!code-cpp[System.Net.HttpWebRequest.AddRange#1](~/add/codesnippet/cpp/m-system.net.httpwebrequ_3_1.cpp)]\n [!code-cs[System.Net.HttpWebRequest.AddRange#1](~/add/codesnippet/csharp/m-system.net.httpwebrequ_3_1.cs)]\n [!code-vb[System.Net.HttpWebRequest.AddRange#1](~/add/codesnippet/visualbasic/m-system.net.httpwebrequ_3_1.vb)]"
  syntax:
    content: public void AddRange (int range);
    parameters:
    - id: range
      type: System.Int32
      description: The starting or ending point of the range.
  overload: System.Net.HttpWebRequest.AddRange*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>rangeSpecifier</code> is invalid.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The range header could not be added.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.AddRange(System.Int64)
  id: AddRange(System.Int64)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: AddRange(Int64)
  nameWithType: HttpWebRequest.AddRange(Int64)
  fullName: System.Net.HttpWebRequest.AddRange(Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Adds a byte range header to a request for a specific range from the beginning or end of the requested data.
  remarks: "The AddRange method adds a byte range header to the request.  \n  \n If `range` is positive, the `range` parameter specifies the starting point of the range. The server should start sending data from the `range` parameter specified to the end of the data in the HTTP entity.  \n  \n If `range` is negative, the `range` parameter specifies the ending point of the range. The server should start sending data from the start of the data in the HTTP entity to the `range` parameter specified.  \n  \n Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  \n  \n The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  \n  \n An example of a Range header in an HTTP protocol request that requests the server send the first 100 bytes (from the start to byte position 99) would be the following:  \n  \n `Range: bytes=0-99\\r\\n\\r\\n`  \n  \n For this example, the `range` parameter would be -99.  \n  \n A HTTP server indicates support for Range headers with the Accept-Ranges header. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  \n  \n `Accept-Ranges: bytes\\r\\n\\r\\n`  \n  \n If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  \n  \n `Accept-Ranges: none\\r\\n\\r\\n`  \n  \n When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <xref:System.Net.HttpWebResponse> class. Headers associated with each range are returned in the response."
  syntax:
    content: public void AddRange (long range);
    parameters:
    - id: range
      type: System.Int64
      description: The starting or ending point of the range.
  overload: System.Net.HttpWebRequest.AddRange*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>rangeSpecifier</code> is invalid.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The range header could not be added.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.AddRange(System.Int32,System.Int32)
  id: AddRange(System.Int32,System.Int32)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: AddRange(Int32,Int32)
  nameWithType: HttpWebRequest.AddRange(Int32,Int32)
  fullName: System.Net.HttpWebRequest.AddRange(Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Adds a byte range header to the request for a specified range.
  remarks: "The AddRange method adds a byte range header to the request.  \n  \n Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  \n  \n The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  \n  \n An example of a Range header in an HTTP protocol request that requests the first 100 bytes would be would be the following:  \n  \n `Range: bytes=0-99\\r\\n\\r\\n`  \n  \n For this example, the `from` parameter would be specified as 0 and the `to` parameter would be specified as 99. The range specifier is automatically set as \"bytes\" by this method.  \n  \n A HTTP server indicates support for Range headers with the Accept-Ranges header. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  \n  \n `Accept-Ranges: bytes\\r\\n\\r\\n`  \n  \n If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  \n  \n `Accept-Ranges: none\\r\\n\\r\\n`  \n  \n When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <xref:System.Net.HttpWebResponse> class. Headers associated with each range are returned in the response."
  example:
  - "The following code example adds a range header to the request.  \n  \n [!code-cpp[System.Net.HttpWebRequest.AddRange2#1](~/add/codesnippet/cpp/m-system.net.httpwebrequ_2_1.cpp)]\n [!code-vb[System.Net.HttpWebRequest.AddRange2#1](~/add/codesnippet/visualbasic/m-system.net.httpwebrequ_2_1.vb)]\n [!code-cs[System.Net.HttpWebRequest.AddRange2#1](~/add/codesnippet/csharp/m-system.net.httpwebrequ_2_1.cs)]"
  syntax:
    content: public void AddRange (int from, int to);
    parameters:
    - id: from
      type: System.Int32
      description: The position at which to start sending data.
    - id: to
      type: System.Int32
      description: The position at which to stop sending data.
  overload: System.Net.HttpWebRequest.AddRange*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>rangeSpecifier</code> is invalid.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>from</code> is greater than <code>to</code>  \n  \n -or-  \n  \n <code>from</code> or <code>to</code> is less than 0."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The range header could not be added.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.AddRange(System.Int64,System.Int64)
  id: AddRange(System.Int64,System.Int64)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: AddRange(Int64,Int64)
  nameWithType: HttpWebRequest.AddRange(Int64,Int64)
  fullName: System.Net.HttpWebRequest.AddRange(Int64,Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Adds a byte range header to the request for a specified range.
  remarks: "The AddRange method adds a byte range header to the request.  \n  \n Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  \n  \n The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  \n  \n An example of a Range header in an HTTP protocol request that requests the first 100 bytes would be would be the following:  \n  \n `Range: bytes=0-99\\r\\n\\r\\n`  \n  \n For this example, the `from` parameter would be specified as 0 and the `to` parameter would be specified as 99. The range specifier is automatically set as \"bytes\" by this method.  \n  \n A HTTP server indicates support for Range headers with the Accept-Ranges header. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  \n  \n `Accept-Ranges: bytes\\r\\n\\r\\n`  \n  \n If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  \n  \n `Accept-Ranges: none\\r\\n\\r\\n`  \n  \n When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <xref:System.Net.HttpWebResponse> class. Headers associated with each range are returned in the response."
  syntax:
    content: public void AddRange (long from, long to);
    parameters:
    - id: from
      type: System.Int64
      description: The position at which to start sending data.
    - id: to
      type: System.Int64
      description: The position at which to stop sending data.
  overload: System.Net.HttpWebRequest.AddRange*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>rangeSpecifier</code> is invalid.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>from</code> is greater than <code>to</code>  \n  \n -or-  \n  \n <code>from</code> or <code>to</code> is less than 0."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The range header could not be added.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.AddRange(System.String,System.Int32)
  id: AddRange(System.String,System.Int32)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: AddRange(String,Int32)
  nameWithType: HttpWebRequest.AddRange(String,Int32)
  fullName: System.Net.HttpWebRequest.AddRange(String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Adds a Range header to a request for a specific range from the beginning or end of the requested data.
  remarks: "The AddRange method adds a Range header to the request.  \n  \n If `range` is positive, the `range` parameter specifies the starting point of the range. The server should start sending data from the `range` parameter specified to the end of the data in the HTTP entity.  \n  \n If `range` is negative, the `range` parameter specifies the ending point of the range. The server should start sending data from the start of the data in the HTTP entity to the `range` parameter specified.  \n  \n Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  \n  \n The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  \n  \n The `rangeSpecifier` parameter would normally be specified as a \"bytes\", since this is the only range specifier recognized by most HTTP servers. Setting the `rangeSpecifier` parameter to some other string allows support for custom range specifiers other than bytes (the byte-range specifier defined in RFC 2616 by the IETF).  \n  \n An example of a Range header in an HTTP protocol request that requests the first 100 bytes would be would be the following:  \n  \n `Range: bytes=-99\\r\\n\\r\\n`  \n  \n For this example, the `rangeSpecifier` parameter would be specified as \"bytes\" and the `range` parameter would be -99.  \n  \n A HTTP server indicates support for Range headers with the Accept-Ranges header in the response. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  \n  \n `Accept-Ranges: bytes\\r\\n\\r\\n`  \n  \n If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  \n  \n `Accept-Ranges: none\\r\\n\\r\\n`  \n  \n When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <xref:System.Net.HttpWebResponse> class. Headers associated with each range are returned in the response."
  syntax:
    content: public void AddRange (string rangeSpecifier, int range);
    parameters:
    - id: rangeSpecifier
      type: System.String
      description: The description of the range.
    - id: range
      type: System.Int32
      description: The starting or ending point of the range.
  overload: System.Net.HttpWebRequest.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>rangeSpecifier</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>rangeSpecifier</code> is invalid.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The range header could not be added.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.AddRange(System.String,System.Int64)
  id: AddRange(System.String,System.Int64)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: AddRange(String,Int64)
  nameWithType: HttpWebRequest.AddRange(String,Int64)
  fullName: System.Net.HttpWebRequest.AddRange(String,Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Adds a Range header to a request for a specific range from the beginning or end of the requested data.
  remarks: "The AddRange method adds a Range header to the request.  \n  \n If `range` is positive, the `range` parameter specifies the starting point of the range. The server should start sending data from the `range` parameter specified to the end of the data in the HTTP entity.  \n  \n If `range` is negative, the `range` parameter specifies the ending point of the range. The server should start sending data from the start of the data in the HTTP entity to the `range` parameter specified.  \n  \n Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  \n  \n The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  \n  \n The `rangeSpecifier` parameter would normally be specified as a \"bytes\", since this is the only range specifier recognized by most HTTP servers. Setting the `rangeSpecifier` parameter to some other string allows support for custom range specifiers other than bytes (the byte-range specifier defined in RFC 2616 by the IETF).  \n  \n An example of a Range header in an HTTP protocol request that requests the first 100 bytes would be would be the following:  \n  \n `Range: bytes=-99\\r\\n\\r\\n`  \n  \n For this example, the `rangeSpecifier` parameter would be specified as \"bytes\" and the `range` parameter would be -99.  \n  \n A HTTP server indicates support for Range headers with the Accept-Ranges header in the response. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  \n  \n `Accept-Ranges: bytes\\r\\n\\r\\n`  \n  \n If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  \n  \n `Accept-Ranges: none\\r\\n\\r\\n`  \n  \n When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <xref:System.Net.HttpWebResponse> class. Headers associated with each range are returned in the response."
  syntax:
    content: public void AddRange (string rangeSpecifier, long range);
    parameters:
    - id: rangeSpecifier
      type: System.String
      description: The description of the range.
    - id: range
      type: System.Int64
      description: The starting or ending point of the range.
  overload: System.Net.HttpWebRequest.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>rangeSpecifier</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>rangeSpecifier</code> is invalid.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The range header could not be added.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.AddRange(System.String,System.Int32,System.Int32)
  id: AddRange(System.String,System.Int32,System.Int32)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: AddRange(String,Int32,Int32)
  nameWithType: HttpWebRequest.AddRange(String,Int32,Int32)
  fullName: System.Net.HttpWebRequest.AddRange(String,Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Adds a range header to a request for a specified range.
  remarks: "The AddRange method adds a Range header to the request.  \n  \n Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  \n  \n The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  \n  \n The `rangeSpecifier` parameter would normally be specified as a \"bytes\", since this is the only range specifier recognized by most HTTP servers. Setting the `rangeSpecifier` parameter to some other string allows support for custom range specifiers other than bytes (the byte-range specifier defined in RFC 2616 by the IETF).  \n  \n An example of a Range header in an HTTP protocol request that requests the first 100 bytes would be would be the following:  \n  \n `Range: bytes=0-99\\r\\n\\r\\n`  \n  \n For this example, the `rangeSpecifier` parameter would be specified as a \"bytes\", the `from` parameter would be 0, and the `to` parameter would be 99.  \n  \n A HTTP server indicates support for Range headers with the Accept-Ranges header in the response. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  \n  \n `Accept-Ranges: bytes\\r\\n\\r\\n`  \n  \n The string specified in the Accept-Ranges header is the range-specifier that would be by specified in the `rangeSpecifier` parameter for this method.  \n  \n If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  \n  \n `Accept-Ranges: none\\r\\n\\r\\n`  \n  \n When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <xref:System.Net.HttpWebResponse> class. Headers associated with each range are returned in the response."
  syntax:
    content: public void AddRange (string rangeSpecifier, int from, int to);
    parameters:
    - id: rangeSpecifier
      type: System.String
      description: The description of the range.
    - id: from
      type: System.Int32
      description: The position at which to start sending data.
    - id: to
      type: System.Int32
      description: The position at which to stop sending data.
  overload: System.Net.HttpWebRequest.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>rangeSpecifier</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>from</code> is greater than <code>to</code>  \n  \n -or-  \n  \n <code>from</code> or <code>to</code> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>rangeSpecifier</code> is invalid.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The range header could not be added.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.AddRange(System.String,System.Int64,System.Int64)
  id: AddRange(System.String,System.Int64,System.Int64)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: AddRange(String,Int64,Int64)
  nameWithType: HttpWebRequest.AddRange(String,Int64,Int64)
  fullName: System.Net.HttpWebRequest.AddRange(String,Int64,Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Adds a range header to a request for a specified range.
  remarks: "The AddRange method adds a Range header to the request.  \n  \n Since all HTTP entities are represented in HTTP messages as sequences of bytes, the concept of a byte range is meaningful for any HTTP entity. However, not all clients and servers need to support byte-range operations.  \n  \n The Range header on a request allows a client to request that it only wants to receive some part of the specified range of bytes in an HTTP entity. Servers are not required to support Range header requests.  \n  \n The `rangeSpecifier` parameter would normally be specified as a \"bytes\", since this is the only range specifier recognized by most HTTP servers. Setting the `rangeSpecifier` parameter to some other string allows support for custom range specifiers other than bytes (the byte-range specifier defined in RFC 2616 by the IETF).  \n  \n An example of a Range header in an HTTP protocol request that requests the first 100 bytes would be would be the following:  \n  \n `Range: bytes=0-99\\r\\n\\r\\n`  \n  \n For this example, the `rangeSpecifier` parameter would be specified as a \"bytes\", the `from` parameter would be 0, and the `to` parameter would be 99.  \n  \n A HTTP server indicates support for Range headers with the Accept-Ranges header in the response. An example of the Accept-Ranges header from a server that supports byte-ranges would be as follows:  \n  \n `Accept-Ranges: bytes\\r\\n\\r\\n`  \n  \n The string specified in the Accept-Ranges header is the range-specifier that would be by specified in the `rangeSpecifier` parameter for this method.  \n  \n If an Accept-Ranges header is not received in the header of the response from the server, then the server does not support Range headers. An example of the Accept-Ranges header from a server that does not support ranges, but recognizes the Accept-Ranges header, would be as follows:  \n  \n `Accept-Ranges: none\\r\\n\\r\\n`  \n  \n When receiving the response from a range request, only the HTTP headers associated with the entire request are parsed and made available via properties on the <xref:System.Net.HttpWebResponse> class. Headers associated with each range are returned in the response."
  syntax:
    content: public void AddRange (string rangeSpecifier, long from, long to);
    parameters:
    - id: rangeSpecifier
      type: System.String
      description: The description of the range.
    - id: from
      type: System.Int64
      description: The position at which to start sending data.
    - id: to
      type: System.Int64
      description: The position at which to stop sending data.
  overload: System.Net.HttpWebRequest.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>rangeSpecifier</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>from</code> is greater than <code>to</code>  \n  \n -or-  \n  \n <code>from</code> or <code>to</code> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>rangeSpecifier</code> is invalid.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The range header could not be added.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.Address
  id: Address
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: Address
  nameWithType: HttpWebRequest.Address
  fullName: System.Net.HttpWebRequest.Address
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets the Uniform Resource Identifier (URI) of the Internet resource that actually responds to the request.
  remarks: "The Address property is set to the URI after any redirections that happen during the request are complete.  \n  \n The URI of the original request is kept in the <xref:System.Net.HttpWebRequest.RequestUri%2A> property."
  example:
  - "The following code example checks to see if the <xref:System.Net.HttpWebRequest> object `req` was redirected to another location to fulfill the request, and sets the value of the `hasChanged` variable to `true` if the request was redirected; otherwise `hasChanged` is set to `false`.  \n  \n [!code-vb[Classic HttpWebRequest.RequestUri Example#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_8_1.vb)]\n [!code-cs[Classic HttpWebRequest.RequestUri Example#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_8_1.cs)]\n [!code-cpp[Classic HttpWebRequest.RequestUri Example#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_8_1.cpp)]"
  syntax:
    content: public Uri Address { get; }
    return:
      type: System.Uri
      description: A <xref href="System.Uri"></xref> that identifies the Internet resource that actually responds to the request. The default is the URI used by the <xref href="stem.Net.WebRequest.Create%2A"></xref> method to initialize the request.
  overload: System.Net.HttpWebRequest.Address*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.AllowAutoRedirect
  id: AllowAutoRedirect
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: AllowAutoRedirect
  nameWithType: HttpWebRequest.AllowAutoRedirect
  fullName: System.Net.HttpWebRequest.AllowAutoRedirect
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets a value that indicates whether the request should follow redirection responses.
  remarks: "Set AllowAutoRedirect to `true` if you want the request to automatically follow HTTP redirection headers to the new location of the resource. The maximum number of redirections to follow is set by the <xref:System.Net.HttpWebRequest.MaximumAutomaticRedirections%2A> property.  \n  \n If AllowAutoRedirect is set to `false`, all responses with an HTTP status code from 300 to 399 is returned to the application.  \n  \n The Authorization header is cleared on auto-redirects and <xref:System.Net.HttpWebRequest> automatically tries to re-authenticate to the redirected location. In practice, this means that an application can't put custom authentication information into the Authorization header if it is possible to encounter redirection. Instead, the application must implement and register a custom authentication module. The <xref:System.Net.AuthenticationManager?displayProperty=fullName> and related class are used to implement a custom authentication module. The <xref:System.Net.AuthenticationManager.Register%2A?displayProperty=fullName> method registers a custom authentication module."
  example:
  - "The following code example uses the AllowAutoRedirect property to allow the request to follow redirection responses.  \n  \n [!code-cs[HttpWebRequest_AllowAutoRedirect#2](~/add/codesnippet/csharp/p-system.net.httpwebrequ_23_1.cs)]\n [!code-cpp[HttpWebRequest_AllowAutoRedirect#2](~/add/codesnippet/cpp/p-system.net.httpwebrequ_23_1.cpp)]\n [!code-vb[HttpWebRequest_AllowAutoRedirect#2](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_23_1.vb)]"
  syntax:
    content: public virtual bool AllowAutoRedirect { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the request should automatically follow redirection responses from the Internet resource; otherwise, `false`. The default value is `true`.'
  overload: System.Net.HttpWebRequest.AllowAutoRedirect*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.AllowReadStreamBuffering
  id: AllowReadStreamBuffering
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: AllowReadStreamBuffering
  nameWithType: HttpWebRequest.AllowReadStreamBuffering
  fullName: System.Net.HttpWebRequest.AllowReadStreamBuffering
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets a value that indicates whether to buffer the received from the Internet resource.
  syntax:
    content: public virtual bool AllowReadStreamBuffering { get; set; }
    return:
      type: System.Boolean
      description: "`true` to buffer the received from the Internet resource; otherwise, `false`.  \n  \n `true` to enable buffering of the data received from the Internet resource; `false` to disable buffering. The default is `false`."
  overload: System.Net.HttpWebRequest.AllowReadStreamBuffering*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.AllowWriteStreamBuffering
  id: AllowWriteStreamBuffering
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: AllowWriteStreamBuffering
  nameWithType: HttpWebRequest.AllowWriteStreamBuffering
  fullName: System.Net.HttpWebRequest.AllowWriteStreamBuffering
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets a value that indicates whether to buffer the data sent to the Internet resource.
  remarks: When AllowWriteStreamBuffering is `true`, the data is buffered in memory so it is ready to be resent in the event of redirections or authentication requests.
  example:
  - "The following code example uses the AllowWriteStreamBuffering property to disable data buffering.  \n  \n [!code-cpp[HttpWebRequest_AllowWriteStreamBuffering#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_17_1.cpp)]\n [!code-vb[HttpWebRequest_AllowWriteStreamBuffering#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_17_1.vb)]\n [!code-cs[HttpWebRequest_AllowWriteStreamBuffering#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_17_1.cs)]"
  syntax:
    content: public virtual bool AllowWriteStreamBuffering { get; set; }
    return:
      type: System.Boolean
      description: '`true` to enable buffering of the data sent to the Internet resource; `false` to disable buffering. The default is `true`.'
  overload: System.Net.HttpWebRequest.AllowWriteStreamBuffering*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.AutomaticDecompression
  id: AutomaticDecompression
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: AutomaticDecompression
  nameWithType: HttpWebRequest.AutomaticDecompression
  fullName: System.Net.HttpWebRequest.AutomaticDecompression
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the type of decompression that is used.
  syntax:
    content: public System.Net.DecompressionMethods AutomaticDecompression { get; set; }
    return:
      type: System.Net.DecompressionMethods
      description: A T:System.Net.DecompressionMethods object that indicates the type of decompression that is used.
  overload: System.Net.HttpWebRequest.AutomaticDecompression*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The object's current state does not allow this property to be set.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
  id: BeginGetRequestStream(System.AsyncCallback,System.Object)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: BeginGetRequestStream(AsyncCallback,Object)
  nameWithType: HttpWebRequest.BeginGetRequestStream(AsyncCallback,Object)
  fullName: System.Net.HttpWebRequest.BeginGetRequestStream(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Begins an asynchronous request for a <xref href="System.IO.Stream"></xref> object to use to write data.
  remarks: "The BeginGetRequestStream method starts an asynchronous request for a stream used to send data for the <xref:System.Net.HttpWebRequest>. The asynchronous callback method uses the <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> method to return the actual stream.  \n  \n The BeginGetRequestStream method requires some synchronous setup tasks to complete (DNS resolution, proxy detection, and TCP socket connection, for example) before this method becomes asynchronous. As a result, this method should never be called on a user interface (UI) thread because it might take considerable time (up to several minutes depending on network settings) to complete the initial synchronous setup tasks before an exception for an error is thrown or the method succeeds.  \n  \n To learn more about the thread pool, see [The Managed Thread Pool](../Topic/The%20Managed%20Thread%20Pool.md).  \n  \n> [!NOTE]\n>  Your application cannot mix synchronous and asynchronous methods for a particular request. If you call the BeginGetRequestStream method, you must use the <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> method to retrieve the response.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example uses the BeginGetRequestStream method to make an asynchronous request for a stream instance.  \n  \n [!code-cpp[HttpWebRequest_BeginGetRequestStream#2](~/add/codesnippet/cpp/ab839b6c-128c-4f97-995f-_1.cpp)]\n [!code-vb[HttpWebRequest_BeginGetRequestStream#2](~/add/codesnippet/visualbasic/ab839b6c-128c-4f97-995f-_1.vb)]\n [!code-cs[HttpWebRequest_BeginGetRequestStream#2](~/add/codesnippet/csharp/ab839b6c-128c-4f97-995f-_1.cs)]"
  syntax:
    content: public override IAsyncResult BeginGetRequestStream (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate.
    - id: state
      type: System.Object
      description: The state object for this request.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous request.
  overload: System.Net.HttpWebRequest.BeginGetRequestStream*
  exceptions:
  - type: System.Net.ProtocolViolationException
    commentId: T:System.Net.ProtocolViolationException
    description: "The <xref href=\"stem.Net.HttpWebRequest.Method%2A\"></xref> property is GET or HEAD.  \n  \n -or-  \n  \n <xref href=\"stem.Net.HttpWebRequest.KeepAlive%2A\"></xref> is `true`, <xref href=\"stem.Net.HttpWebRequest.AllowWriteStreamBuffering%2A\"></xref> is `false`, <xref href=\"stem.Net.HttpWebRequest.ContentLength%2A\"></xref> is -1, <xref href=\"stem.Net.HttpWebRequest.SendChunked%2A\"></xref> is `false`, and <xref href=\"stem.Net.HttpWebRequest.Method%2A\"></xref> is POST or PUT."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The stream is being used by a previous call to BeginGetRequestStream  \n  \n -or-  \n  \n <xref href=\"stem.Net.HttpWebRequest.TransferEncoding%2A\"></xref> is set to a value and <xref href=\"stem.Net.HttpWebRequest.SendChunked%2A\"></xref> is `false`.  \n  \n -or-  \n  \n The thread pool is running out of threads."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The request cache validator indicated that the response for this request can be served from the cache; however, requests that write data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: <xref href="stem.Net.HttpWebRequest.Abort%2A"></xref> was previously called.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: In a .NET Compact Framework application, a request stream with zero content length was not obtained and closed correctly. For more information about handling zero content length requests, see [Network Programming in the .NET Compact Framework](https://msdn.microsoft.com/subscriptions/downloads/1afx2b0f\(v=vs.80\).aspx).
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
  id: BeginGetResponse(System.AsyncCallback,System.Object)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: BeginGetResponse(AsyncCallback,Object)
  nameWithType: HttpWebRequest.BeginGetResponse(AsyncCallback,Object)
  fullName: System.Net.HttpWebRequest.BeginGetResponse(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Begins an asynchronous request to an Internet resource.
  remarks: "The BeginGetResponse method starts an asynchronous request for a response from the Internet resource. The asynchronous callback method uses the <xref:System.Net.HttpWebRequest.EndGetResponse%2A> method to return the actual <xref:System.Net.WebResponse>.  \n  \n A <xref:System.Net.ProtocolViolationException> is thrown in several cases when the properties set on the <xref:System.Net.HttpWebRequest> class are conflicting. This exception occurs if an application sets the <xref:System.Net.HttpWebRequest.ContentLength%2A> property and the <xref:System.Net.HttpWebRequest.SendChunked%2A> property to `true`, and then sends an HTTP GET request. This exception occurs if an application tries to send chunked to a server that only supports HTTP 1.0 protocol, where this is not supported. This exception occurs if an application tries to send data without setting the <xref:System.Net.HttpWebRequest.ContentLength%2A> property or the <xref:System.Net.HttpWebRequest.SendChunked%2A> is `false` when buffering is disabled and on a keepalive connection (the <xref:System.Net.HttpWebRequest.KeepAlive%2A> property is `true`)`.`  \n  \n If a <xref:System.Net.WebException> is thrown, use the <xref:System.Net.WebException.Response%2A> and <xref:System.Net.WebException.Status%2A> properties of the exception to determine the response from the server.  \n  \n The BeginGetResponse method requires some synchronous setup tasks to complete (DNS resolution, proxy detection, and TCP socket connection, for example) before this method becomes asynchronous. As a result, this method should never be called on a user interface (UI) thread because it might take considerable time (up to several minutes depending on network settings) to complete the initial synchronous setup tasks before an exception for an error is thrown or the method succeeds.  \n  \n To learn more about the thread pool, see [The Managed Thread Pool](../Topic/The%20Managed%20Thread%20Pool.md).  \n  \n> [!NOTE]\n>  Your application cannot mix synchronous and asynchronous methods for a particular request. If you call the <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> method, you must use the BeginGetResponse method to retrieve the response.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example uses the BeginGetResponse method to make an asynchronous request for an Internet resource.  \n  \n> [!NOTE]\n>  In the case of asynchronous requests, it is the responsibility of the client application to implement its own time-out mechanism. The following code example shows how to do it.  \n  \n [!code-cpp[System.Net.HttpWebRequest.BeginGetResponse#1](~/add/codesnippet/cpp/m-system.net.httpwebrequ_0_1.cpp)]\n [!code-cs[System.Net.HttpWebRequest.BeginGetResponse#1](~/add/codesnippet/csharp/m-system.net.httpwebrequ_0_1.cs)]\n [!code-vb[System.Net.HttpWebRequest.BeginGetResponse#1](~/add/codesnippet/visualbasic/m-system.net.httpwebrequ_0_1.vb)]"
  syntax:
    content: public override IAsyncResult BeginGetResponse (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: The <xref href="System.AsyncCallback"></xref> delegate
    - id: state
      type: System.Object
      description: The state object for this request.
    return:
      type: System.IAsyncResult
      description: An <xref href="System.IAsyncResult"></xref> that references the asynchronous request for a response.
  overload: System.Net.HttpWebRequest.BeginGetResponse*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The stream is already in use by a previous call to BeginGetResponse  \n  \n -or-  \n  \n <xref href=\"stem.Net.HttpWebRequest.TransferEncoding%2A\"></xref> is set to a value and <xref href=\"stem.Net.HttpWebRequest.SendChunked%2A\"></xref> is `false`.  \n  \n -or-  \n  \n The thread pool is running out of threads."
  - type: System.Net.ProtocolViolationException
    commentId: T:System.Net.ProtocolViolationException
    description: "<xref href=\"stem.Net.HttpWebRequest.Method%2A\"></xref> is GET or HEAD, and either <xref href=\"stem.Net.HttpWebRequest.ContentLength%2A\"></xref> is greater than zero or <xref href=\"stem.Net.HttpWebRequest.SendChunked%2A\"></xref> is `true`.  \n  \n -or-  \n  \n <xref href=\"stem.Net.HttpWebRequest.KeepAlive%2A\"></xref> is `true`, <xref href=\"stem.Net.HttpWebRequest.AllowWriteStreamBuffering%2A\"></xref> is `false`, and either <xref href=\"stem.Net.HttpWebRequest.ContentLength%2A\"></xref> is -1, <xref href=\"stem.Net.HttpWebRequest.SendChunked%2A\"></xref> is `false` and <xref href=\"stem.Net.HttpWebRequest.Method%2A\"></xref> is POST or PUT.  \n  \n -or-  \n  \n The <xref href=\"System.Net.HttpWebRequest\"></xref> has an entity body but the BeginGetResponse method is called without calling the <xref href=\"stem.Net.HttpWebRequest.BeginGetRequestStream%2A\"></xref> method.  \n  \n -or-  \n  \n The <xref href=\"stem.Net.HttpWebRequest.ContentLength%2A\"></xref> is greater than zero, but the application does not write all of the promised data."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: <xref href="stem.Net.HttpWebRequest.Abort%2A"></xref> was previously called.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.ClientCertificates
  id: ClientCertificates
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: ClientCertificates
  nameWithType: HttpWebRequest.ClientCertificates
  fullName: System.Net.HttpWebRequest.ClientCertificates
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the collection of security certificates that are associated with this request.
  remarks: "An application can add a certificate to a collection, but might not have access rights to it. To use a certificate contained in the collection, the application must have the same access rights as the entity that issued the certificate.  \n  \n> [!NOTE]\n>  The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of ClientCertificates (if there is one), or tries to reuse an anonymous sessions if ClientCertificates is empty.  \n  \n> [!NOTE]\n>  For performance reasons, you shouldn't add a client certificate to a <xref:System.Net.HttpWebRequest> unless you know the server will ask for it.  \n>   \n>  For a code example illustrating how to enumerate the certificates in the client certificate store, see the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection> class."
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; set; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: The <xref href="System.Security.Cryptography.X509Certificates.X509CertificateCollection"></xref> that contains the security certificates associated with this request.
  overload: System.Net.HttpWebRequest.ClientCertificates*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The value specified for a set operation is `null`.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.Connection
  id: Connection
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: Connection
  nameWithType: HttpWebRequest.Connection
  fullName: System.Net.HttpWebRequest.Connection
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the value of the `Connection` HTTP header.
  remarks: "The request sends the Connection property to the Internet resource as the `Connection` HTTP header. If the value of the <xref:System.Net.HttpWebRequest.KeepAlive%2A> property is `true`, the value \"Keep-alive\" is appended to the end of the `Connection` header.  \n  \n To clear the `Connection` HTTP header, set the Connection property to `null`.  \n  \n Changing the Connection property after the request has been started by calling the <xref:System.Net.HttpWebRequest.GetRequestStream%2A>, <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>, <xref:System.Net.HttpWebRequest.GetResponse%2A>, or <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> method throws an <xref:System.InvalidOperationException>.  \n  \n> [!NOTE]\n>  The value for this property is stored in <xref:System.Net.WebHeaderCollection>. If WebHeaderCollection is set, the property value is lost."
  example:
  - "The following code example uses the Connection property to set the value of the Connection HTTP Header.  \n  \n [!code-cpp[HttpWebRequest_Connection#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_15_1.cpp)]\n [!code-cs[HttpWebRequest_Connection#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_15_1.cs)]\n [!code-vb[HttpWebRequest_Connection#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_15_1.vb)]"
  syntax:
    content: public string Connection { get; set; }
    return:
      type: System.String
      description: The value of the `Connection` HTTP header. The default value is `null`.
  overload: System.Net.HttpWebRequest.Connection*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The value of Connection is set to Keep-alive or Close.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.ConnectionGroupName
  id: ConnectionGroupName
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: ConnectionGroupName
  nameWithType: HttpWebRequest.ConnectionGroupName
  fullName: System.Net.HttpWebRequest.ConnectionGroupName
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the name of the connection group for the request.
  remarks: The ConnectionGroupName property enables you to associate a request with a connection group. This is useful when your application makes requests to one server for different users, such as a Web site that retrieves customer information from a database server.
  example:
  - "The following code example show how to use user information to form a connection group, assuming that the variables `username`, `password`, and `domain` are set by the application before this code is called.  \n  \n [!code-cpp[Classic HttpWebRequest.ConnectionGroupName Example#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_26_1.cpp)]\n [!code-cs[Classic HttpWebRequest.ConnectionGroupName Example#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_26_1.cs)]\n [!code-vb[Classic HttpWebRequest.ConnectionGroupName Example#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_26_1.vb)]"
  syntax:
    content: public override string ConnectionGroupName { get; set; }
    return:
      type: System.String
      description: The name of the connection group for this request. The default value is `null`.
  overload: System.Net.HttpWebRequest.ConnectionGroupName*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.ContentLength
  id: ContentLength
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: ContentLength
  nameWithType: HttpWebRequest.ContentLength
  fullName: System.Net.HttpWebRequest.ContentLength
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the `Content-length` HTTP header.
  remarks: "The ContentLength property contains the value to send as the `Content-length` HTTP header with the request.  \n  \n Any value other than -1 in the ContentLength property indicates that the request uploads data and that only methods that upload data are allowed to be set in the <xref:System.Net.HttpWebRequest.Method%2A> property.  \n  \n After the ContentLength property is set to a value, that number of bytes must be written to the request stream that is returned by calling the <xref:System.Net.HttpWebRequest.GetRequestStream%2A> method or both the <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> and the <xref:System.Net.HttpWebRequest.EndGetRequestStream%2A> methods.  \n  \n> [!NOTE]\n>  The value for this property is stored in <xref:System.Net.WebHeaderCollection>. If WebHeaderCollection is set, the property value is lost."
  example:
  - "The following code example sets the ContentLength property to the length of the string being posted.  \n  \n [!code-cs[HttpWebRequest_ContentLength#4](~/add/codesnippet/csharp/p-system.net.httpwebrequ_22_1.cs)]\n [!code-cpp[HttpWebRequest_ContentLength#4](~/add/codesnippet/cpp/p-system.net.httpwebrequ_22_1.cpp)]\n [!code-vb[HttpWebRequest_ContentLength#4](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_22_1.vb)]"
  syntax:
    content: public override long ContentLength { get; set; }
    return:
      type: System.Int64
      description: The number of bytes of data to send to the Internet resource. The default is -1, which indicates the property has not been set and that there is no request data to send.
  overload: System.Net.HttpWebRequest.ContentLength*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The request has been started by calling the <xref href="stem.Net.HttpWebRequest.GetRequestStream%2A"></xref>, <xref href="stem.Net.HttpWebRequest.BeginGetRequestStream%2A"></xref>, <xref href="stem.Net.HttpWebRequest.GetResponse%2A"></xref>, or <xref href="stem.Net.HttpWebRequest.BeginGetResponse%2A"></xref> method.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The new ContentLength value is less than 0.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.ContentType
  id: ContentType
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: ContentType
  nameWithType: HttpWebRequest.ContentType
  fullName: System.Net.HttpWebRequest.ContentType
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the value of the `Content-type` HTTP header.
  remarks: "The ContentType property contains the media type of the request. Values assigned to the ContentType property replace any existing contents when the request sends the `Content-type` HTTP header.  \n  \n To clear the `Content-type` HTTP header, set the ContentType property to `null`.  \n  \n> [!NOTE]\n>  The value for this property is stored in <xref:System.Net.WebHeaderCollection> . If <xref:System.Net.WebHeaderCollection> is set, the property value is lost."
  example:
  - "The following code example sets the ContentType property.  \n  \n [!code-cs[HttpWebRequest_ContentLength#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_6_1.cs)]\n [!code-cpp[HttpWebRequest_ContentLength#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_6_1.cpp)]\n [!code-vb[HttpWebRequest_ContentLength#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_6_1.vb)]"
  syntax:
    content: public override string ContentType { get; set; }
    return:
      type: System.String
      description: The value of the `Content-type` HTTP header. The default value is `null`.
  overload: System.Net.HttpWebRequest.ContentType*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.ContinueDelegate
  id: ContinueDelegate
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: ContinueDelegate
  nameWithType: HttpWebRequest.ContinueDelegate
  fullName: System.Net.HttpWebRequest.ContinueDelegate
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the delegate method called when an HTTP 100-continue response is received from the Internet resource.
  remarks: "The ContinueDelegate property specifies the callback method to call when the client receives a 100-Continue response.  \n  \n When the ContinueDelegate property is set, the client calls the delegate whenever protocol responses of type <xref:System.Net.HttpStatusCode?displayProperty=fullName> (100) are received. This is useful if you want the client to display the status of the data being received from the Internet resource."
  syntax:
    content: public System.Net.HttpContinueDelegate ContinueDelegate { get; set; }
    return:
      type: System.Net.HttpContinueDelegate
      description: A delegate that implements the callback method that executes when an HTTP Continue response is returned from the Internet resource. The default value is `null`.
  overload: System.Net.HttpWebRequest.ContinueDelegate*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.ContinueTimeout
  id: ContinueTimeout
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: ContinueTimeout
  nameWithType: HttpWebRequest.ContinueTimeout
  fullName: System.Net.HttpWebRequest.ContinueTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets a timeout, in milliseconds, to wait until the 100-Continue is received from the server.
  remarks: If the 100-Continue response is received before the timeout expires, the entity body can be sent.
  syntax:
    content: public int ContinueTimeout { get; set; }
    return:
      type: System.Int32
      description: The timeout, in milliseconds, to wait until the 100-Continue is received.
  overload: System.Net.HttpWebRequest.ContinueTimeout*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.CookieContainer
  id: CookieContainer
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: CookieContainer
  nameWithType: HttpWebRequest.CookieContainer
  fullName: System.Net.HttpWebRequest.CookieContainer
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the cookies associated with the request.
  remarks: "The CookieContainer property provides an instance of the <xref:System.Net.CookieContainer> class that contains the cookies associated with this request.  \n  \n CookieContainer is `null` by default. You must assign a <xref:System.Net.CookieContainer> object to the property to have cookies returned in the <xref:System.Net.HttpWebResponse.Cookies%2A> property of the <xref:System.Net.HttpWebResponse> returned by the <xref:System.Net.HttpWebRequest.GetResponse%2A> method.  \n  \n> [!NOTE]\n>  For security reasons, cookies are disabled by default. If you want to use cookies, use the CookieContainer property to enable cookies."
  example:
  - "The following code example sends a request to a URL and displays the cookies returned in the response.  \n  \n [!code-cs[NCLCookies#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_20_1.cs)]\n [!code-cpp[NCLCookies#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_20_1.cpp)]\n [!code-vb[NCLCookies#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_20_1.vb)]"
  syntax:
    content: public virtual System.Net.CookieContainer CookieContainer { get; set; }
    return:
      type: System.Net.CookieContainer
      description: A <xref href="System.Net.CookieContainer"></xref> that contains the cookies associated with this request.
  overload: System.Net.HttpWebRequest.CookieContainer*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.Credentials
  id: Credentials
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: Credentials
  nameWithType: HttpWebRequest.Credentials
  fullName: System.Net.HttpWebRequest.Credentials
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets authentication information for the request.
  remarks: "The Credentials property contains authentication information to identify the maker of the request. The Credentials property can be either a <xref:System.Net.NetworkCredential>, in which case the user, password, and domain information contained in the <xref:System.Net.NetworkCredential> object is used to authenticate the request, or it can be a <xref:System.Net.CredentialCache>, in which case the Uniform Resource Identifier (URI) of the request is used to determine the user, password, and domain information to use to authenticate the request.  \n  \n In most client scenarios, you should use the <xref:System.Net.CredentialCache.DefaultCredentials%2A> property, which contains the credentials of the currently logged on user. To do this, set the <xref:System.Net.WebClient.UseDefaultCredentials%2A> property to `true` instead of setting this property.  \n  \n If the <xref:System.Net.HttpWebRequest> class is being used in a middle-tier application, such as an ASP.NET application, the credentials in the <xref:System.Net.CredentialCache.DefaultCredentials%2A> property belong to the account running the ASP page (the server-side credentials). Typically, you would set this property to the credentials of the client on whose behalf the request is made.  \n  \n> [!NOTE]\n>  The NTLM authentication scheme cannot be used to impersonate another user. Kerberos must be specially configured to support impersonation.  \n  \n To restrict HttpWebRequest to one or more authentication methods, use the <xref:System.Net.CredentialCache> class and bind your credentials to one or more authentication schemes  \n  \n Supported authentication schemes include Digest, Negotiate, Kerberos, NTLM, and Basic."
  example:
  - "The following code example sets the credentials for a request.  \n  \n [!code-cpp[NCLResponse1#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_7_1.cpp)]\n [!code-cs[NCLResponse1#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_7_1.cs)]\n [!code-vb[NCLResponse1#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_7_1.vb)]"
  syntax:
    content: public override System.Net.ICredentials Credentials { get; set; }
    return:
      type: System.Net.ICredentials
      description: An <xref href="System.Net.ICredentials"></xref> that contains the authentication credentials associated with the request. The default is `null`.
  overload: System.Net.HttpWebRequest.Credentials*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.Date
  id: Date
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: Date
  nameWithType: HttpWebRequest.Date
  fullName: System.Net.HttpWebRequest.Date
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Get or set the `Date` HTTP header value to use in an HTTP request.
  remarks: "If the Date header is `null`, then the return value will be set to <xref:System.DateTime?displayProperty=fullName>.  \n  \n The Date property is a standard <xref:System.DateTime?displayProperty=fullName> object and can contain a <xref:System.DateTimeKind?displayProperty=fullName> field of <xref:System.DateTimeKind?displayProperty=fullName>, <xref:System.DateTimeKind?displayProperty=fullName>, or <xref:System.DateTimeKind?displayProperty=fullName>. Any kind of time can be set when using the Date property. If <xref:System.DateTimeKind?displayProperty=fullName> is set or retrieved, the Date property is assumed to be <xref:System.DateTimeKind?displayProperty=fullName> (local time).  \n  \n The classes in the <xref:System.Net> namespace always write it out the Date property on the wire during transmission in standard form using GMT (Utc) format.  \n  \n If the Date property is set to <xref:System.DateTime.MinValue?displayProperty=fullName>, then the `Date` HTTP header is removed from the <xref:System.Net.HttpWebRequest.Headers%2A> property and the <xref:System.Net.WebHeaderCollection>.  \n  \n If the Date property is <xref:System.DateTime.MinValue?displayProperty=fullName>, this indicates that the `Date` HTTP header is not included in the <xref:System.Net.HttpWebRequest.Headers%2A> property and the <xref:System.Net.WebHeaderCollection>.  \n  \n> [!NOTE]\n>  The value for this property is stored in <xref:System.Net.WebHeaderCollection>. If WebHeaderCollection is set, the property value is lost.  \n  \n If the Date is set and an attempt is made to send a <xref:System.Net.HttpWebRequest> with no body, then a <xref:System.Net.ProtocolViolationException?displayProperty=fullName> will be thrown by the <xref:System.Net.HttpWebRequest.BeginGetResponse%2A>, <xref:System.Net.HttpWebRequest.GetResponse%2A>, and <xref:System.Net.HttpWebRequest.EndGetResponse%2A> methods."
  syntax:
    content: public DateTime Date { get; set; }
    return:
      type: System.DateTime
      description: The Date header value in the HTTP request.
  overload: System.Net.HttpWebRequest.Date*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.DefaultCachePolicy
  id: DefaultCachePolicy
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: DefaultCachePolicy
  nameWithType: HttpWebRequest.DefaultCachePolicy
  fullName: System.Net.HttpWebRequest.DefaultCachePolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the default cache policy for this request.
  remarks: "Setting this property registers the specified policy for the HTTP and HTTPS schemes. This policy is used for this request if:  \n  \n There is no <xref:System.Net.WebRequest.CachePolicy%2A?displayProperty=fullName> property specified for this request.  \n  \n \\- or -  \n  \n The machine and application configuration files do not specify a cache policy that is applicable to the Uniform Resource Identifier (URI) used to create this request.  \n  \n The cache policy determines whether the requested resource can be taken from a cache instead of sending the request to the resource host computer.  \n  \n A copy of a resource is only added to the cache if the response stream for the resource is retrieved and read to the end of the stream. So another request for the same resource could use a cached copy, depending on the cache policy level for this request."
  syntax:
    content: public static System.Net.Cache.RequestCachePolicy DefaultCachePolicy { get; set; }
    return:
      type: System.Net.Cache.RequestCachePolicy
      description: A <xref href="System.Net.Cache.HttpRequestCachePolicy"></xref> that specifies the cache policy in effect for this request when no other policy is applicable.
  overload: System.Net.HttpWebRequest.DefaultCachePolicy*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength
  id: DefaultMaximumErrorResponseLength
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: DefaultMaximumErrorResponseLength
  nameWithType: HttpWebRequest.DefaultMaximumErrorResponseLength
  fullName: System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the default maximum length of an HTTP error response.
  syntax:
    content: public static int DefaultMaximumErrorResponseLength { get; set; }
    return:
      type: System.Int32
      description: The default maximum length of an HTTP error response.
  overload: System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value is less than 0 and is not equal to -1.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength
  id: DefaultMaximumResponseHeadersLength
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: DefaultMaximumResponseHeadersLength
  nameWithType: HttpWebRequest.DefaultMaximumResponseHeadersLength
  fullName: System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the default for the <xref href="stem.Net.HttpWebRequest.MaximumResponseHeadersLength%2A"></xref> property.
  remarks: "The length of the response header received the response status line and any extra control characters that are received as part of HTTP protocol. A value of -1 means no limit is imposed on the response headers received; a value of 0 means that all requests fail.  \n  \n This value can also be changed in the configuration file. The impact of this property can be overridden by setting the <xref:System.Net.HttpWebRequest.MaximumResponseHeadersLength%2A> property on an instance of the <xref:System.Net.HttpWebRequest> class."
  syntax:
    content: public static int DefaultMaximumResponseHeadersLength { get; set; }
    return:
      type: System.Int32
      description: The length, in kilobytes (1024 bytes), of the default maximum for response headers received. The default configuration file sets this value to 64 kilobytes.
  overload: System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value is not equal to -1 and is less than zero.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)
  id: EndGetRequestStream(System.IAsyncResult)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: EndGetRequestStream(IAsyncResult)
  nameWithType: HttpWebRequest.EndGetRequestStream(IAsyncResult)
  fullName: System.Net.HttpWebRequest.EndGetRequestStream(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Ends an asynchronous request for a <xref href="System.IO.Stream"></xref> object to use to write data.
  remarks: "The EndGetRequestStream method completes an asynchronous request for a stream that was started by the <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> method. After the <xref:System.IO.Stream> object has been returned, you can send data with the <xref:System.Net.HttpWebRequest> by using the <xref:System.IO.Stream.Write%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  You must set the value of the <xref:System.Net.HttpWebRequest.ContentLength%2A> property before writing data to the stream.  \n  \n> [!CAUTION]\n>  You must call the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method to close the stream and release the connection for reuse. Failure to close the stream causes your application to run out of connections.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example uses the EndGetRequestStream method to end an asynchronous request for a stream instance.  \n  \n [!code-cpp[HttpWebRequest_BeginGetRequestStream#2](~/add/codesnippet/cpp/m-system.net.httpwebrequ_5_1.cpp)]\n [!code-vb[HttpWebRequest_BeginGetRequestStream#2](~/add/codesnippet/visualbasic/m-system.net.httpwebrequ_5_1.vb)]\n [!code-cs[HttpWebRequest_BeginGetRequestStream#2](~/add/codesnippet/csharp/m-system.net.httpwebrequ_5_1.cs)]"
  syntax:
    content: public override System.IO.Stream EndGetRequestStream (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The pending request for a stream.
    return:
      type: System.IO.Stream
      description: A <xref href="System.IO.Stream"></xref> to use to write request data.
  overload: System.Net.HttpWebRequest.EndGetRequestStream*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is `null`.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: The request did not complete, and no stream is available.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not returned by the current instance from a call to <xref href="stem.Net.HttpWebRequest.BeginGetRequestStream%2A"></xref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: This method was called previously using <code>asyncResult</code>.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<xref href=\"stem.Net.HttpWebRequest.Abort%2A\"></xref> was previously called.  \n  \n -or-  \n  \n An error occurred while processing the request."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult,System.Net.TransportContext@)
  id: EndGetRequestStream(System.IAsyncResult,System.Net.TransportContext@)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: EndGetRequestStream(IAsyncResult,TransportContext)
  nameWithType: HttpWebRequest.EndGetRequestStream(IAsyncResult,TransportContext)
  fullName: System.Net.HttpWebRequest.EndGetRequestStream(IAsyncResult,TransportContext)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Ends an asynchronous request for a <xref href="System.IO.Stream"></xref> object to use to write data and outputs the <xref href="System.Net.TransportContext"></xref> associated with the stream.
  remarks: "The EndGetRequestStream method completes an asynchronous request for a stream that was started by the <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> method and outputs the <xref:System.Net.TransportContext> associated with the stream. After the <xref:System.IO.Stream> object has been returned, you can send data with the <xref:System.Net.HttpWebRequest> by using the <xref:System.IO.Stream.Write%2A?displayProperty=fullName> method.  \n  \n Some applications that use integrated Windows authentication with extended protection may need to be able to query the transport layer used by <xref:System.Net.HttpWebRequest> in order to retrieve the channel binding token (CBT) from the underlying TLS channel. The <xref:System.Net.HttpWebRequest.GetRequestStream%2A> method provides access to this information for HTTP methods which have a request body (`POST` and `PUT` requests). This is only needed if the application is implementing its own authentication and needs access to the CBT.  \n  \n> [!NOTE]\n>  If an application needs to set the value of the <xref:System.Net.HttpWebRequest.ContentLength%2A> property, then this must be done before retrieving the stream and writing data to it.  \n  \n> [!CAUTION]\n>  You must call the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method to close the stream and release the connection for reuse. Failure to close the stream causes your application to run out of connections.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public System.IO.Stream EndGetRequestStream (IAsyncResult asyncResult, out System.Net.TransportContext context);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The pending request for a stream.
    - id: context
      type: System.Net.TransportContext
      description: The <xref href="System.Net.TransportContext"></xref> for the <xref href="System.IO.Stream"></xref>.
    return:
      type: System.IO.Stream
      description: A <xref href="System.IO.Stream"></xref> to use to write request data.
  overload: System.Net.HttpWebRequest.EndGetRequestStream*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not returned by the current instance from a call to <xref href="stem.Net.HttpWebRequest.BeginGetRequestStream%2A"></xref>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: This method was called previously using <code>asyncResult</code>.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: The request did not complete, and no stream is available.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<xref href=\"stem.Net.HttpWebRequest.Abort%2A\"></xref> was previously called.  \n  \n -or-  \n  \n An error occurred while processing the request."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)
  id: EndGetResponse(System.IAsyncResult)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: EndGetResponse(IAsyncResult)
  nameWithType: HttpWebRequest.EndGetResponse(IAsyncResult)
  fullName: System.Net.HttpWebRequest.EndGetResponse(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Ends an asynchronous request to an Internet resource.
  remarks: "The EndGetResponse method completes an asynchronous request for an Internet resource that was started by calling the <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> method.  \n  \n> [!CAUTION]\n>  You must call the <xref:System.Net.HttpWebResponse.Close%2A> method to close the stream and release the connection. Failure to do so may cause your application to run out of connections.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example uses the EndGetResponse method to end an asynchronous request for an Internet resource.  \n  \n [!code-cs[HttpWebRequest_BeginGetResponse#2](~/add/codesnippet/csharp/m-system.net.httpwebrequ_7_1.cs)]\n [!code-vb[HttpWebRequest_BeginGetResponse#2](~/add/codesnippet/visualbasic/m-system.net.httpwebrequ_7_1.vb)]\n [!code-cpp[HttpWebRequest_BeginGetResponse#2](~/add/codesnippet/cpp/m-system.net.httpwebrequ_7_1.cpp)]"
  syntax:
    content: public override System.Net.WebResponse EndGetResponse (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The pending request for a response.
    return:
      type: System.Net.WebResponse
      description: A <xref href="System.Net.WebResponse"></xref> that contains the response from the Internet resource.
  overload: System.Net.HttpWebRequest.EndGetResponse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>asyncResult</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "This method was called previously using <code>asyncResult.</code>  \n  \n -or-  \n  \n The <xref href=\"stem.Net.HttpWebRequest.ContentLength%2A\"></xref> property is greater than 0 but the data has not been written to the request stream."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<xref href=\"stem.Net.HttpWebRequest.Abort%2A\"></xref> was previously called.  \n  \n -or-  \n  \n An error occurred while processing the request."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>asyncResult</code> was not returned by the current instance from a call to <xref href="stem.Net.HttpWebRequest.BeginGetResponse%2A"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.Expect
  id: Expect
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: Expect
  nameWithType: HttpWebRequest.Expect
  fullName: System.Net.HttpWebRequest.Expect
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the value of the `Expect` HTTP header.
  syntax:
    content: public string Expect { get; set; }
    return:
      type: System.String
      description: "The contents of the `Expect` HTTP header. The default value is `null`.  \n  \n <div class=\"alert NOTE\">  \n The value for this property is stored in <xref href=\"System.Net.WebHeaderCollection\"></xref>. If WebHeaderCollection is set, the property value is lost.  \n  \n</div>"
  overload: System.Net.HttpWebRequest.Expect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: '`Expect` is set to a string that contains "100-continue" as a substring.'
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: HttpWebRequest.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.HttpWebRequest.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Populates a <xref href="System.Runtime.Serialization.SerializationInfo"></xref> with the data required to serialize the target object.
  remarks: Any objects included in the <xref:System.Runtime.Serialization.SerializationInfo> are automatically tracked and serialized by the formatter.
  syntax:
    content: protected override void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
    parameters:
    - id: serializationInfo
      type: System.Runtime.Serialization.SerializationInfo
      description: The <xref href="System.Runtime.Serialization.SerializationInfo"></xref> to populate with data.
    - id: streamingContext
      type: System.Runtime.Serialization.StreamingContext
      description: A <xref href="System.Runtime.Serialization.StreamingContext"></xref> that specifies the destination for this serialization.
  overload: System.Net.HttpWebRequest.GetObjectData*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.GetRequestStream
  id: GetRequestStream
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: GetRequestStream()
  nameWithType: HttpWebRequest.GetRequestStream()
  fullName: System.Net.HttpWebRequest.GetRequestStream()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Gets a <xref href="System.IO.Stream"></xref> object to use to write request data.
  remarks: "The GetRequestStream method returns a stream to use to send data for the <xref:System.Net.HttpWebRequest>. After the <xref:System.IO.Stream> object has been returned, you can send data with the <xref:System.Net.HttpWebRequest> by using the <xref:System.IO.Stream.Write%2A?displayProperty=fullName> method.  \n  \n If an application needs to set the value of the <xref:System.Net.HttpWebRequest.ContentLength%2A> property, then this must be done before retrieving the stream.  \n  \n You must call the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method to close the stream and release the connection for reuse. Failure to close the stream causes your application to run out of connections.  \n  \n> [!NOTE]\n>  Your application cannot mix synchronous and asynchronous methods for a particular request. If you call the GetRequestStream method, you must use the <xref:System.Net.HttpWebRequest.GetResponse%2A> method to retrieve the response.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  example:
  - "The following code example uses the GetRequestStream method to return a stream instance.  \n  \n [!code-cs[HttpWebRequest_ContentLength#4](~/add/codesnippet/csharp/m-system.net.httpwebrequ_4_1.cs)]\n [!code-cpp[HttpWebRequest_ContentLength#4](~/add/codesnippet/cpp/m-system.net.httpwebrequ_4_1.cpp)]\n [!code-vb[HttpWebRequest_ContentLength#4](~/add/codesnippet/visualbasic/m-system.net.httpwebrequ_4_1.vb)]"
  syntax:
    content: public override System.IO.Stream GetRequestStream ();
    parameters: []
    return:
      type: System.IO.Stream
      description: A <xref href="System.IO.Stream"></xref> to use to write request data.
  overload: System.Net.HttpWebRequest.GetRequestStream*
  exceptions:
  - type: System.Net.ProtocolViolationException
    commentId: T:System.Net.ProtocolViolationException
    description: "The <xref href=\"stem.Net.HttpWebRequest.Method%2A\"></xref> property is GET or HEAD.  \n  \n -or-  \n  \n <xref href=\"stem.Net.HttpWebRequest.KeepAlive%2A\"></xref> is `true`, <xref href=\"stem.Net.HttpWebRequest.AllowWriteStreamBuffering%2A\"></xref> is `false`, <xref href=\"stem.Net.HttpWebRequest.ContentLength%2A\"></xref> is -1, <xref href=\"stem.Net.HttpWebRequest.SendChunked%2A\"></xref> is `false`, and <xref href=\"stem.Net.HttpWebRequest.Method%2A\"></xref> is POST or PUT."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The GetRequestStream method is called more than once.  \n  \n -or-  \n  \n <xref href=\"stem.Net.HttpWebRequest.TransferEncoding%2A\"></xref> is set to a value and <xref href=\"stem.Net.HttpWebRequest.SendChunked%2A\"></xref> is `false`."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The request cache validator indicated that the response for this request can be served from the cache; however, requests that write data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<xref href=\"stem.Net.HttpWebRequest.Abort%2A\"></xref> was previously called.  \n  \n -or-  \n  \n The time-out period for the request expired.  \n  \n -or-  \n  \n An error occurred while processing the request."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: In a .NET Compact Framework application, a request stream with zero content length was not obtained and closed correctly. For more information about handling zero content length requests, see [Network Programming in the .NET Compact Framework](https://msdn.microsoft.com/subscriptions/downloads/1afx2b0f\(v=vs.80\).aspx).
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.GetRequestStream(System.Net.TransportContext@)
  id: GetRequestStream(System.Net.TransportContext@)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: GetRequestStream(TransportContext)
  nameWithType: HttpWebRequest.GetRequestStream(TransportContext)
  fullName: System.Net.HttpWebRequest.GetRequestStream(TransportContext)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Gets a <xref href="System.IO.Stream"></xref> object to use to write request data and outputs the <xref href="System.Net.TransportContext"></xref> associated with the stream.
  remarks: "The GetRequestStream method returns a stream to use to send data for the <xref:System.Net.HttpWebRequest> and outputs the <xref:System.Net.TransportContext> associated with the stream. After the <xref:System.IO.Stream> object has been returned, you can send data with the <xref:System.Net.HttpWebRequest> by using the <xref:System.IO.Stream.Write%2A?displayProperty=fullName> method.  \n  \n Some applications that use integrated Windows authentication with extended protection may need to be able to query the transport layer used by <xref:System.Net.HttpWebRequest> in order to retrieve the channel binding token (CBT) from the underlying TLS channel. The GetRequestStream method provides access to this information for HTTP methods which have a request body (`POST` and `PUT` requests). This is only needed if the application is implementing its own authentication and needs access to the CBT.  \n  \n If an application needs to set the value of the <xref:System.Net.HttpWebRequest.ContentLength%2A> property, then this must be done before retrieving the stream.  \n  \n You must call the <xref:System.IO.Stream.Close%2A?displayProperty=fullName> method to close the stream and release the connection for reuse. Failure to close the stream causes your application to run out of connections.  \n  \n> [!NOTE]\n>  Your application cannot mix synchronous and asynchronous methods for a particular request. If you call the <xref:System.Net.HttpWebRequest.GetRequestStream%2A> method, you must use the <xref:System.Net.HttpWebRequest.GetResponse%2A> method to retrieve the response.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md)."
  syntax:
    content: public System.IO.Stream GetRequestStream (out System.Net.TransportContext context);
    parameters:
    - id: context
      type: System.Net.TransportContext
      description: The <xref href="System.Net.TransportContext"></xref> for the <xref href="System.IO.Stream"></xref>.
    return:
      type: System.IO.Stream
      description: A <xref href="System.IO.Stream"></xref> to use to write request data.
  overload: System.Net.HttpWebRequest.GetRequestStream*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: The <xref href="stem.Net.HttpWebRequest.GetRequestStream%2A"></xref> method was unable to obtain the <xref href="System.IO.Stream"></xref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"stem.Net.HttpWebRequest.GetRequestStream%2A\"></xref> method is called more than once.  \n  \n -or-  \n  \n <xref href=\"stem.Net.HttpWebRequest.TransferEncoding%2A\"></xref> is set to a value and <xref href=\"stem.Net.HttpWebRequest.SendChunked%2A\"></xref> is `false`."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The request cache validator indicated that the response for this request can be served from the cache; however, requests that write data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented.
  - type: System.Net.ProtocolViolationException
    commentId: T:System.Net.ProtocolViolationException
    description: "The <xref href=\"stem.Net.HttpWebRequest.Method%2A\"></xref> property is GET or HEAD.  \n  \n -or-  \n  \n <xref href=\"stem.Net.HttpWebRequest.KeepAlive%2A\"></xref> is `true`, <xref href=\"stem.Net.HttpWebRequest.AllowWriteStreamBuffering%2A\"></xref> is `false`, <xref href=\"stem.Net.HttpWebRequest.ContentLength%2A\"></xref> is -1, <xref href=\"stem.Net.HttpWebRequest.SendChunked%2A\"></xref> is `false`, and <xref href=\"stem.Net.HttpWebRequest.Method%2A\"></xref> is POST or PUT."
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<xref href=\"stem.Net.HttpWebRequest.Abort%2A\"></xref> was previously called.  \n  \n -or-  \n  \n The time-out period for the request expired.  \n  \n -or-  \n  \n An error occurred while processing the request."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.GetResponse
  id: GetResponse
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: GetResponse()
  nameWithType: HttpWebRequest.GetResponse()
  fullName: System.Net.HttpWebRequest.GetResponse()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Returns a response from an Internet resource.
  remarks: "The GetResponse method returns a <xref:System.Net.WebResponse> object that contains the response from the Internet resource. The actual instance returned is an <xref:System.Net.HttpWebResponse>, and can be typecast to that class to access HTTP-specific properties.  \n  \n A <xref:System.Net.ProtocolViolationException> is thrown in several cases when the properties set on the <xref:System.Net.HttpWebRequest> class are conflicting. This exception occurs if an application sets the <xref:System.Net.HttpWebRequest.ContentLength%2A> property and the <xref:System.Net.HttpWebRequest.SendChunked%2A> property to `true`, and then sends an HTTP GET request. This exception occurs if an application tries to send chunked to a server that only supports HTTP 1.0 protocol, where this is not supported. This exception occurs if an application tries to send data without setting the <xref:System.Net.HttpWebRequest.ContentLength%2A> property or the <xref:System.Net.HttpWebRequest.SendChunked%2A> is `false` when buffering is disabled and on a keepalive connection (the <xref:System.Net.HttpWebRequest.KeepAlive%2A> property is `true`)`.`  \n  \n> [!CAUTION]\n>  You must call the <xref:System.Net.HttpWebResponse.Close%2A> method to close the stream and release the connection. Failure to do so may cause your application to run out of connections.  \n  \n When using the POST method, you must get the request stream, write the data to be posted, and close the stream. This method blocks waiting for content to post; if there is no time-out set and you do not provide content, the calling thread blocks indefinitely.  \n  \n> [!NOTE]\n>  Multiple calls to GetResponse return the same response object; the request is not reissued.  \n  \n> [!NOTE]\n>  Your application cannot mix synchronous and asynchronous methods for a particular request. If you call the <xref:System.Net.HttpWebRequest.GetRequestStream%2A> method, you must use the GetResponse method to retrieve the response.  \n  \n> [!NOTE]\n>  If a <xref:System.Net.WebException> is thrown, use the <xref:System.Net.WebException.Response%2A> and <xref:System.Net.WebException.Status%2A> properties of the exception to determine the response from the server.  \n  \n> [!NOTE]\n>  This member outputs trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](../Topic/Network%20Tracing%20in%20the%20.NET%20Framework.md).  \n  \n> [!NOTE]\n>  For security reasons, cookies are disabled by default. If you wish to use cookies, use the <xref:System.Net.HttpWebRequest.CookieContainer%2A> property to enable cookies."
  example:
  - "The following code example gets the response for a request.  \n  \n [!code-cpp[NCLResponse1#1](~/add/codesnippet/cpp/m-system.net.httpwebrequ_6_1.cpp)]\n [!code-cs[NCLResponse1#1](~/add/codesnippet/csharp/m-system.net.httpwebrequ_6_1.cs)]\n [!code-vb[NCLResponse1#1](~/add/codesnippet/visualbasic/m-system.net.httpwebrequ_6_1.vb)]"
  syntax:
    content: public override System.Net.WebResponse GetResponse ();
    parameters: []
    return:
      type: System.Net.WebResponse
      description: A <xref href="System.Net.WebResponse"></xref> that contains the response from the Internet resource.
  overload: System.Net.HttpWebRequest.GetResponse*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The stream is already in use by a previous call to <xref href=\"stem.Net.HttpWebRequest.BeginGetResponse%2A\"></xref>.  \n  \n -or-  \n  \n <xref href=\"stem.Net.HttpWebRequest.TransferEncoding%2A\"></xref> is set to a value and <xref href=\"stem.Net.HttpWebRequest.SendChunked%2A\"></xref> is `false`."
  - type: System.Net.ProtocolViolationException
    commentId: T:System.Net.ProtocolViolationException
    description: "<xref href=\"stem.Net.HttpWebRequest.Method%2A\"></xref> is GET or HEAD, and either <xref href=\"stem.Net.HttpWebRequest.ContentLength%2A\"></xref> is greater or equal to zero or <xref href=\"stem.Net.HttpWebRequest.SendChunked%2A\"></xref> is `true`.  \n  \n -or-  \n  \n <xref href=\"stem.Net.HttpWebRequest.KeepAlive%2A\"></xref> is `true`, <xref href=\"stem.Net.HttpWebRequest.AllowWriteStreamBuffering%2A\"></xref> is `false`, <xref href=\"stem.Net.HttpWebRequest.ContentLength%2A\"></xref> is -1, <xref href=\"stem.Net.HttpWebRequest.SendChunked%2A\"></xref> is `false`, and <xref href=\"stem.Net.HttpWebRequest.Method%2A\"></xref> is POST or PUT.  \n  \n -or-  \n  \n The <xref href=\"System.Net.HttpWebRequest\"></xref> has an entity body but the GetResponse method is called without calling the <xref href=\"stem.Net.HttpWebRequest.GetRequestStream%2A\"></xref> method.  \n  \n -or-  \n  \n The <xref href=\"stem.Net.HttpWebRequest.ContentLength%2A\"></xref> is greater than zero, but the application does not write all of the promised data."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The request cache validator indicated that the response for this request can be served from the cache; however, this request includes data to be sent to the server. Requests that send data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented.
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<xref href=\"stem.Net.HttpWebRequest.Abort%2A\"></xref> was previously called.  \n  \n -or-  \n  \n The time-out period for the request expired.  \n  \n -or-  \n  \n An error occurred while processing the request."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.HaveResponse
  id: HaveResponse
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: HaveResponse
  nameWithType: HttpWebRequest.HaveResponse
  fullName: System.Net.HttpWebRequest.HaveResponse
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets a value that indicates whether a response has been received from an Internet resource.
  remarks: ''
  example:
  - "The following code example checks the HaveResponse property to determine if a response has been received from an Internet resource.  \n  \n [!code-cs[Httpwebrequest_HaveResponse#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_11_1.cs)]\n [!code-cpp[Httpwebrequest_HaveResponse#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_11_1.cpp)]\n [!code-vb[Httpwebrequest_HaveResponse#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_11_1.vb)]"
  syntax:
    content: public virtual bool HaveResponse { get; }
    return:
      type: System.Boolean
      description: '`true` if a response has been received; otherwise, `false`.'
  overload: System.Net.HttpWebRequest.HaveResponse*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.Headers
  id: Headers
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: Headers
  nameWithType: HttpWebRequest.Headers
  fullName: System.Net.HttpWebRequest.Headers
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Specifies a collection of the name/value pairs that make up the HTTP headers.
  remarks: "The Headers collection contains the protocol headers associated with the request. The following table lists the HTTP headers that are not stored in the Headers collection but are either set by the system or set by properties or methods.  \n  \n|Header|Set by|  \n|------------|------------|  \n|Accept|Set by the <xref:System.Net.HttpWebRequest.Accept%2A> property.|  \n|Connection|Set by the <xref:System.Net.HttpWebRequest.Connection%2A> property and <xref:System.Net.HttpWebRequest.KeepAlive%2A> property.|  \n|Content-Length|Set by the <xref:System.Net.HttpWebRequest.ContentLength%2A> property.|  \n|Content-Type|Set by the <xref:System.Net.HttpWebRequest.ContentType%2A> property.|  \n|Expect|Set by the <xref:System.Net.HttpWebRequest.Expect%2A> property.|  \n|Date|Set by the <xref:System.Net.HttpWebRequest.Date%2A> property.|  \n|Host|Set by the <xref:System.Net.HttpWebRequest.Host%2A> property.|  \n|If-Modified-Since|Set by the <xref:System.Net.HttpWebRequest.IfModifiedSince%2A> property.|  \n|Range|Set by the <xref:System.Net.HttpWebRequest.AddRange%2A> method.|  \n|Referer|Set by the <xref:System.Net.HttpWebRequest.Referer%2A> property.|  \n|Transfer-Encoding|Set by the <xref:System.Net.HttpWebRequest.TransferEncoding%2A> property (the <xref:System.Net.HttpWebRequest.SendChunked%2A> property must be true).|  \n|User-Agent|Set by the <xref:System.Net.HttpWebRequest.UserAgent%2A> property.|  \n  \n The <xref:System.Net.WebHeaderCollection.Add%2A> method throws an <xref:System.ArgumentException> if you try to set one of these protected headers.  \n  \n Changing the Headers property after the request has been started by calling <xref:System.Net.HttpWebRequest.GetRequestStream%2A>, <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>, <xref:System.Net.HttpWebRequest.GetResponse%2A>, or <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> method throws an <xref:System.InvalidOperationException>.  \n  \n You should not assume that the header values will remain unchanged, because Web servers and caches may change or add headers to a Web request."
  example:
  - "The following code example uses the Headers property to print the HTTP header name/value pairs to the console.  \n  \n [!code-cpp[HttpWebRequest_Headers#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_18_1.cpp)]\n [!code-vb[HttpWebRequest_Headers#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_18_1.vb)]\n [!code-cs[HttpWebRequest_Headers#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_18_1.cs)]"
  syntax:
    content: public override System.Net.WebHeaderCollection Headers { get; set; }
    return:
      type: System.Net.WebHeaderCollection
      description: A <xref href="System.Net.WebHeaderCollection"></xref> that contains the name/value pairs that make up the headers for the HTTP request.
  overload: System.Net.HttpWebRequest.Headers*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The request has been started by calling the <xref href="stem.Net.HttpWebRequest.GetRequestStream%2A"></xref>, <xref href="stem.Net.HttpWebRequest.BeginGetRequestStream%2A"></xref>, <xref href="stem.Net.HttpWebRequest.GetResponse%2A"></xref>, or <xref href="stem.Net.HttpWebRequest.BeginGetResponse%2A"></xref> method.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.Host
  id: Host
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: Host
  nameWithType: HttpWebRequest.Host
  fullName: System.Net.HttpWebRequest.Host
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Get or set the Host header value to use in an HTTP request independent from the request URI.
  remarks: "The Host property can be used to set the Host header value to use in an HTTP request independent from the request URI. The Host property can consist of a hostname and an optional port number. A Host header without port information implies the default port for the service requested (port 80 for an HTTP URL, for example).  \n  \n The format for specifying a host and port must follow the rules in section 14.23 of RFC2616 published by the IETF. An example complying with these requirements that specifies a port of 8080 would be the following value for the Host property:  \n  \n `www.contoso.com:8080`  \n  \n Using the Host property to explicitly specify a custom Host header value also affects areas caching, cookies, and authentication. When an application provides credentials for a specific URI prefix, the applications needs to make sure to use the URI containing the value of the Host header, not the target server in the URI. The key used when caching resources, uses the Host header value rather than the request URI. Cookies are stored in a <xref:System.Net.CookieContainer> and logically grouped by the server domain name. If the application specifies a Host header, then this value will be used as domain.  \n  \n If the Host property is not set, then the Host header value to use in an HTTP request is based on the request URI."
  syntax:
    content: public string Host { get; set; }
    return:
      type: System.String
      description: The Host header value in the HTTP request.
  overload: System.Net.HttpWebRequest.Host*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The Host header cannot be set to `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The Host header cannot be set to an invalid value.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The Host header cannot be set after the <xref href="System.Net.HttpWebRequest"></xref> has already started to be sent.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.IfModifiedSince
  id: IfModifiedSince
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: IfModifiedSince
  nameWithType: HttpWebRequest.IfModifiedSince
  fullName: System.Net.HttpWebRequest.IfModifiedSince
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the value of the `If-Modified-Since` HTTP header.
  remarks: "The IfModifiedSince property is a standard <xref:System.DateTime?displayProperty=fullName> object and can contain a <xref:System.DateTimeKind?displayProperty=fullName> field of <xref:System.DateTimeKind?displayProperty=fullName>, <xref:System.DateTimeKind?displayProperty=fullName>, or <xref:System.DateTimeKind?displayProperty=fullName>. Any kind of time can be set when using the IfModifiedSince property. If <xref:System.DateTimeKind?displayProperty=fullName> is set or retrieved, the IfModifiedSince property is assumed to be <xref:System.DateTimeKind?displayProperty=fullName> (local time).  \n  \n The classes in the <xref:System.Net> namespace always write it out the IfModifiedSince property on the wire during transmission in standard form using GMT (Utc) format.  \n  \n If the IfModifiedSince property is set to <xref:System.DateTime.MinValue?displayProperty=fullName>, then the `If-Modified-Since` HTTP header is removed from the <xref:System.Net.HttpWebRequest.Headers%2A> property and the <xref:System.Net.WebHeaderCollection>.  \n  \n If the IfModifiedSince property is <xref:System.DateTime.MinValue?displayProperty=fullName>, this indicates that the `If-Modified-Since` HTTP header is not included in the <xref:System.Net.HttpWebRequest.Headers%2A> property and the <xref:System.Net.WebHeaderCollection>.  \n  \n> [!NOTE]\n>  The value for this property is stored in <xref:System.Net.WebHeaderCollection>. If WebHeaderCollection is set, the property value is lost."
  example:
  - "The following code example checks the IfModifiedSince property.  \n  \n [!code-cpp[HttpWebRequest_IfModifiedSince#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_25_1.cpp)]\n [!code-cs[HttpWebRequest_IfModifiedSince#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_25_1.cs)]\n [!code-vb[HttpWebRequest_IfModifiedSince#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_25_1.vb)]"
  syntax:
    content: public DateTime IfModifiedSince { get; set; }
    return:
      type: System.DateTime
      description: A <xref href="System.DateTime"></xref> that contains the contents of the `If-Modified-Since` HTTP header. The default value is the current date and time.
  overload: System.Net.HttpWebRequest.IfModifiedSince*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.KeepAlive
  id: KeepAlive
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: KeepAlive
  nameWithType: HttpWebRequest.KeepAlive
  fullName: System.Net.HttpWebRequest.KeepAlive
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets a value that indicates whether to make a persistent connection to the Internet resource.
  remarks: "Set this property to `true` to send a `Connection` HTTP header with the value Keep-alive. An application uses KeepAlive to indicate a preference for persistent connections. When the KeepAlive property is `true`, the application makes persistent connections to the servers that support them.  \n  \n> [!NOTE]\n>  When using HTTP/1.1, Keep-Alive is on by default. Setting KeepAlive to `false` may result in sending a `Connection: Close` header to the server."
  example:
  - "The following code example sets the KeepAlive property to `false` to avoid establishing a persistent connection with the Internet resource.  \n  \n [!code-cpp[HttpWebRequest_Connection#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_24_1.cpp)]\n [!code-cs[HttpWebRequest_Connection#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_24_1.cs)]\n [!code-vb[HttpWebRequest_Connection#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_24_1.vb)]"
  syntax:
    content: public bool KeepAlive { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the request to the Internet resource should contain a `Connection` HTTP header with the value Keep-alive; otherwise, `false`. The default is `true`.'
  overload: System.Net.HttpWebRequest.KeepAlive*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.MaximumAutomaticRedirections
  id: MaximumAutomaticRedirections
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: MaximumAutomaticRedirections
  nameWithType: HttpWebRequest.MaximumAutomaticRedirections
  fullName: System.Net.HttpWebRequest.MaximumAutomaticRedirections
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the maximum number of redirects that the request follows.
  remarks: The MaximumAutomaticRedirections property sets the maximum number of redirections for the request to follow if the <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> property is `true`.
  example:
  - "The following code example sets the value of this property.  \n  \n [!code-cpp[NCLResponse1#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_3_1.cpp)]\n [!code-cs[NCLResponse1#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_3_1.cs)]\n [!code-vb[NCLResponse1#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_3_1.vb)]"
  syntax:
    content: public int MaximumAutomaticRedirections { get; set; }
    return:
      type: System.Int32
      description: The maximum number of redirection responses that the request follows. The default value is 50.
  overload: System.Net.HttpWebRequest.MaximumAutomaticRedirections*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The value is set to 0 or less.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.MaximumResponseHeadersLength
  id: MaximumResponseHeadersLength
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: MaximumResponseHeadersLength
  nameWithType: HttpWebRequest.MaximumResponseHeadersLength
  fullName: System.Net.HttpWebRequest.MaximumResponseHeadersLength
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the maximum allowed length of the response headers.
  remarks: "The length of the response header includes the response status line and any extra control characters that are received as part of HTTP protocol. A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests fail.  \n  \n If the MaximumResponseHeadersLength property is not explicitly set, it defaults to the value of the <xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A> property.  \n  \n If the length of the response header received exceeds the value of the MaximumResponseHeadersLength property, the <xref:System.Net.HttpWebRequest.EndGetResponse%2A> or <xref:System.Net.HttpWebRequest.GetResponse%2A> methods will throw a <xref:System.Net.WebException> with the <xref:System.Net.WebException.Status%2A> property set to <xref:System.Net.WebExceptionStatus>."
  example:
  - "The following code example sets the value of this property.  \n  \n [!code-cpp[NCLResponse1#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_19_1.cpp)]\n [!code-cs[NCLResponse1#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_19_1.cs)]\n [!code-vb[NCLResponse1#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_19_1.vb)]"
  syntax:
    content: public int MaximumResponseHeadersLength { get; set; }
    return:
      type: System.Int32
      description: The length, in kilobytes (1024 bytes), of the response headers.
  overload: System.Net.HttpWebRequest.MaximumResponseHeadersLength*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The property is set after the request has already been submitted.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value is less than 0 and is not equal to -1.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.MediaType
  id: MediaType
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: MediaType
  nameWithType: HttpWebRequest.MediaType
  fullName: System.Net.HttpWebRequest.MediaType
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the media type of the request.
  remarks: The value of the MediaType property affects the <xref:System.Net.HttpWebResponse.CharacterSet%2A> property. When you set the MediaType in the request, the corresponding media type is chosen from the list of character sets returned in the response `Content-type` HTTP header.
  syntax:
    content: public string MediaType { get; set; }
    return:
      type: System.String
      description: The media type of the request. The default value is `null`.
  overload: System.Net.HttpWebRequest.MediaType*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.Method
  id: Method
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: Method
  nameWithType: HttpWebRequest.Method
  fullName: System.Net.HttpWebRequest.Method
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the method for the request.
  remarks: "The Method property can be set to any of the HTTP 1.1 protocol verbs: GET, HEAD, POST, PUT, DELETE, TRACE, or OPTIONS.  \n  \n If the <xref:System.Net.HttpWebRequest.ContentLength%2A> property is set to any value other than -1, the Method property must be set to a protocol property that uploads data."
  example:
  - "The following code example sets the Method property to POST.  \n  \n [!code-cs[HttpWebRequest_ContentLength#4](~/add/codesnippet/csharp/p-system.net.httpwebrequ_13_1.cs)]\n [!code-cpp[HttpWebRequest_ContentLength#4](~/add/codesnippet/cpp/p-system.net.httpwebrequ_13_1.cpp)]\n [!code-vb[HttpWebRequest_ContentLength#4](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_13_1.vb)]"
  syntax:
    content: public override string Method { get; set; }
    return:
      type: System.String
      description: The request method to use to contact the Internet resource. The default value is GET.
  overload: System.Net.HttpWebRequest.Method*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "No method is supplied.  \n  \n -or-  \n  \n The method string contains invalid characters."
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.Pipelined
  id: Pipelined
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: Pipelined
  nameWithType: HttpWebRequest.Pipelined
  fullName: System.Net.HttpWebRequest.Pipelined
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets a value that indicates whether to pipeline the request to the Internet resource.
  remarks: "An application uses the Pipelined property to indicate a preference for pipelined connections. When Pipelined is `true`, an application makes pipelined connections to the servers that support them.  \n  \n Pipelined connections are made only when the <xref:System.Net.HttpWebRequest.KeepAlive%2A> property is also `true`."
  example:
  - "The following code example prints the value of the Pipelined property to the console.  \n  \n [!code-cpp[HttpWebRequest_PipeLined#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_2_1.cpp)]\n [!code-cs[HttpWebRequest_PipeLined#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_2_1.cs)]\n [!code-vb[HttpWebRequest_PipeLined#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_2_1.vb)]"
  syntax:
    content: public bool Pipelined { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the request should be pipelined; otherwise, `false`. The default is `true`.'
  overload: System.Net.HttpWebRequest.Pipelined*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.PreAuthenticate
  id: PreAuthenticate
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: PreAuthenticate
  nameWithType: HttpWebRequest.PreAuthenticate
  fullName: System.Net.HttpWebRequest.PreAuthenticate
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets a value that indicates whether to send an Authorization header with the request.
  remarks: "After a client request to a specific <xref:System.Uri> is successfully authenticated, if PreAuthenticate is `true` and credentials are supplied, the Authorization header is sent with each request to any <xref:System.Uri> that matches the specific <xref:System.Uri> up to the last forward slash. So if the client request successfully authenticated to a specific <xref:System.Uri> that contains the following:  \n  \n `http://www.contoso.com/firstpath/`  \n  \n Then the Authorization header for preauthentication is sent with each request to any of the following <xref:System.Uri> instances:  \n  \n `http://www.contoso.com/firstpath/`  \n  \n `http://www.contoso.com/firstpath/default`  \n  \n `http://www.contoso.com/firstpath/default.html`  \n  \n `http://www.contoso.com/firstpath/sample.html`  \n  \n However, the Authorization header is not sent with requests to any of the following <xref:System.Uri> instances:  \n  \n `http://www.contoso.com/`  \n  \n `http://www.contoso.com/firstpath`  \n  \n `http://www.contoso.com/secondpath/`  \n  \n If the client request to a specific <xref:System.Uri> is not successfully authenticated, the request uses standard authentication procedures.  \n  \n With the exception of the first request, the <xref:System.Net.WebRequest.PreAuthenticate%2A> property indicates whether to send authentication information with subsequent requests to a <xref:System.Uri> that matches the specific <xref:System.Uri> up to the last forward slash without waiting to be challenged by the server.  \n  \n The following dialog between client and server illustrates the effect of this property. The dialog assumes that basic authentication is in use.  \n  \n PreAuthenticate is `false`:  \n  \n Client: GET someUrl  \n  \n Server: 401 WWW-Authenticate Basic  \n  \n Client: GET with Authorization headers  \n  \n Server: 200 OK  \n  \n Client: GET someUrl  \n  \n Server: 401 WWW-Authenticate Basic  \n  \n Client: GET with Authorization headers  \n  \n Server: 200 OK  \n  \n PreAuthenticate is `true`:  \n  \n Client: GET someUrl  \n  \n Server: 401 WWW-Authenticate Basic  \n  \n Client: GET with Authorization headers  \n  \n Server: 200 OK  \n  \n Client: GET someUrl with Authorization headers  \n  \n If the authentication scheme does not support preauthentication, the value of this property is ignored."
  syntax:
    content: public override bool PreAuthenticate { get; set; }
    return:
      type: System.Boolean
      description: '`true` to send an  HTTP Authorization header with requests after authentication has taken place; otherwise, `false`. The default is `false`.'
  overload: System.Net.HttpWebRequest.PreAuthenticate*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.ProtocolVersion
  id: ProtocolVersion
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: ProtocolVersion
  nameWithType: HttpWebRequest.ProtocolVersion
  fullName: System.Net.HttpWebRequest.ProtocolVersion
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the version of HTTP to use for the request.
  remarks: "The <xref:System.Net.HttpWebRequest> class supports only versions 1.0 and 1.1 of HTTP. Setting ProtocolVersion to a different version throws an exception.  \n  \n> [!NOTE]\n>  To set the HTTP version of the current request, use the <xref:System.Net.HttpVersion.Version10> and <xref:System.Net.HttpVersion.Version11> fields of the <xref:System.Net.HttpVersion> class."
  example:
  - "The following code example sets the ProtocolVersion Property.  \n  \n [!code-cpp[HttpWebRequest_ProtocolVersion#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_1_1.cpp)]\n [!code-cs[HttpWebRequest_ProtocolVersion#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_1_1.cs)]\n [!code-vb[HttpWebRequest_ProtocolVersion#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_1_1.vb)]"
  syntax:
    content: public Version ProtocolVersion { get; set; }
    return:
      type: System.Version
      description: The HTTP version to use for the request. The default is <xref href="System.Net.HttpVersion.Version11"></xref>.
  overload: System.Net.HttpWebRequest.ProtocolVersion*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The HTTP version is set to a value other than 1.0 or 1.1.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.Proxy
  id: Proxy
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: Proxy
  nameWithType: HttpWebRequest.Proxy
  fullName: System.Net.HttpWebRequest.Proxy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets proxy information for the request.
  remarks: "The Proxy property identifies the <xref:System.Net.WebProxy> object to use to process requests to Internet resources. To specify that no proxy should be used, set the Proxy property to the proxy instance returned by the <xref:System.Net.GlobalProxySelection.GetEmptyWebProxy%2A?displayProperty=fullName> method.  \n  \n The local computer or application config file may specify that a default proxy be used. If the Proxy property is specified, then the proxy settings from the Proxy property override the local computer or application config file and the <xref:System.Net.HttpWebRequest> instance will use the proxy settings specified. If no proxy is specified in a config file and the Proxy property is unspecified, the <xref:System.Net.HttpWebRequest> class uses the proxy settings inherited from Internet Explorer on the local computer. If there are no proxy settings in Internet Explorer, the request is sent directly to the server.  \n  \n The <xref:System.Net.HttpWebRequest> class parses a proxy bypass list with wildcard characters inherited from Internet Explorer the same as the bypass list is parsed directly by Internet Explorer. For example, the <xref:System.Net.HttpWebRequest> class will parse a bypass list of \"nt*\" from Internet Explorer as a regular expression of \"nt.\\*\". So a URL of \"`http://nt.com`\" would bypass the proxy using the <xref:System.Net.HttpWebRequest> class and using Internet Explorer.  \n  \n The <xref:System.Net.HttpWebRequest> class supports local proxy bypass. The class considers a destination to be local if any of the following conditions are met:  \n  \n-   The destination contains a flat name (no dots in the URL).  \n  \n-   The destination contains a loopback address (<xref:System.Net.IPAddress.Loopback> or <xref:System.Net.IPAddress.IPv6Loopback>) or the destination contains an <xref:System.Net.IPAddress> assigned to the local computer.  \n  \n-   The domain suffix of the destination matches the local computer's domain suffix (<xref:System.Net.NetworkInformation.IPGlobalProperties.DomainName%2A>).  \n  \n Changing the Proxy property after the request has been started by calling the <xref:System.Net.HttpWebRequest.GetRequestStream%2A>, <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>, <xref:System.Net.HttpWebRequest.GetResponse%2A>, or <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> method throws an <xref:System.InvalidOperationException>. For information on the proxy element see [\\&lt;defaultProxy\\&gt; Element (Network Settings)](../Topic/%3CdefaultProxy%3E%20Element%20\\(Network%20Settings\\).md)."
  example:
  - "The following code example uses the Proxy method to get the proxy information for the request.  \n  \n [!code-cs[Httpwebrequest_proxy#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_14_1.cs)]\n [!code-vb[Httpwebrequest_proxy#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_14_1.vb)]\n [!code-cpp[Httpwebrequest_proxy#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_14_1.cpp)]"
  syntax:
    content: public override System.Net.IWebProxy Proxy { get; set; }
    return:
      type: System.Net.IWebProxy
      description: The <xref href="System.Net.IWebProxy"></xref> object to use to proxy the request. The default value is set by calling the <xref href="stem.Net.GlobalProxySelection.Select%2A"></xref> property.
  overload: System.Net.HttpWebRequest.Proxy*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Proxy is set to `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The request has been started by calling <xref href="stem.Net.HttpWebRequest.GetRequestStream%2A"></xref>, <xref href="stem.Net.HttpWebRequest.BeginGetRequestStream%2A"></xref>, <xref href="stem.Net.HttpWebRequest.GetResponse%2A"></xref>, or <xref href="stem.Net.HttpWebRequest.BeginGetResponse%2A"></xref>.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have permission for the requested operation.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.ReadWriteTimeout
  id: ReadWriteTimeout
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: ReadWriteTimeout
  nameWithType: HttpWebRequest.ReadWriteTimeout
  fullName: System.Net.HttpWebRequest.ReadWriteTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets a time-out in milliseconds when writing to or reading from a stream.
  remarks: "The ReadWriteTimeout property is used when writing to the stream returned by the <xref:System.Net.HttpWebRequest.GetRequestStream%2A> method or reading from the stream returned by the <xref:System.Net.HttpWebResponse.GetResponseStream%2A> method.  \n  \n Specifically, the ReadWriteTimeout property controls the time-out for the <xref:System.IO.Stream.Read%2A> method, which is used to read the stream returned by the <xref:System.Net.HttpWebResponse.GetResponseStream%2A> method, and for the <xref:System.IO.Stream.Write%2A> method, which is used to write to the stream returned by the <xref:System.Net.HttpWebRequest.GetRequestStream%2A> method.  \n  \n To specify the amount of time to wait for the request to complete, use the <xref:System.Net.HttpWebRequest.Timeout%2A> property."
  example:
  - "The following code example shows how to set the ReadWriteTimeout property.  \n  \n [!code-cs[Classic HttpWebRequest Example#2](~/add/codesnippet/csharp/p-system.net.httpwebrequ_10_1.cs)]"
  syntax:
    content: public int ReadWriteTimeout { get; set; }
    return:
      type: System.Int32
      description: The number of milliseconds before the writing or reading times out. The default value is 300,000 milliseconds (5 minutes).
  overload: System.Net.HttpWebRequest.ReadWriteTimeout*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The request has already been sent.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value specified for a set operation is less than or equal to zero and is not equal to <xref href="System.Threading.Timeout.Infinite"></xref>
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.Referer
  id: Referer
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: Referer
  nameWithType: HttpWebRequest.Referer
  fullName: System.Net.HttpWebRequest.Referer
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the value of the `Referer` HTTP header.
  remarks: "If the <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> property is `true`, the Referer property is set automatically when the request is redirected to another site.  \n  \n To clear the `Referer` HTTP header, set the Referer property to `null`.  \n  \n> [!NOTE]\n>  The value for this property is stored in <xref:System.Net.WebHeaderCollection>. If WebHeaderCollection is set, the property value is lost."
  example:
  - "The following code example sets the Referer property.  \n  \n [!code-vb[HttpWebRequest_Referer#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_12_1.vb)]\n [!code-cpp[HttpWebRequest_Referer#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_12_1.cpp)]\n [!code-cs[HttpWebRequest_Referer#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_12_1.cs)]"
  syntax:
    content: public string Referer { get; set; }
    return:
      type: System.String
      description: The value of the `Referer` HTTP header. The default value is `null`.
  overload: System.Net.HttpWebRequest.Referer*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.RequestUri
  id: RequestUri
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: RequestUri
  nameWithType: HttpWebRequest.RequestUri
  fullName: System.Net.HttpWebRequest.RequestUri
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets the original Uniform Resource Identifier (URI) of the request.
  remarks: "The <xref:System.Uri> object passed to <xref:System.Net.HttpWebRequest> by the call to <xref:System.Net.WebRequest.Create%2A?displayProperty=fullName>.  \n  \n Following a redirection header does not change the RequestUri property. To get the actual URI that responded to the request, examine the <xref:System.Net.HttpWebRequest.Address%2A> property."
  example:
  - "The following code example checks to see if the <xref:System.Net.HttpWebRequest> object `req` was redirected to another location to fulfill the request, and sets the value of the `hasChanged` variable to `true` if the request was redirected; otherwise, `hasChanged` is set to `false`.  \n  \n [!code-vb[Classic HttpWebRequest.RequestUri Example#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_5_1.vb)]\n [!code-cs[Classic HttpWebRequest.RequestUri Example#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_5_1.cs)]\n [!code-cpp[Classic HttpWebRequest.RequestUri Example#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_5_1.cpp)]"
  syntax:
    content: public override Uri RequestUri { get; }
    return:
      type: System.Uri
      description: A <xref href="System.Uri"></xref> that contains the URI of the Internet resource passed to the <xref href="stem.Net.WebRequest.Create%2A"></xref> method.
  overload: System.Net.HttpWebRequest.RequestUri*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.SendChunked
  id: SendChunked
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: SendChunked
  nameWithType: HttpWebRequest.SendChunked
  fullName: System.Net.HttpWebRequest.SendChunked
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets a value that indicates whether to send data in segments to the Internet resource.
  remarks: "When SendChunked is `true`, the request sends data to the Internet resource in segments. The Internet resource must support receiving chunked data.  \n  \n Changing the SendChunked property after the request has been started by calling the <xref:System.Net.HttpWebRequest.GetRequestStream%2A>, <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A>, <xref:System.Net.HttpWebRequest.GetResponse%2A>, or <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> method throws an <xref:System.InvalidOperationException>."
  example:
  - "The following code example sets the SendChunked property to `true` so that data can be sent in segments to the Internet resource.  \n  \n [!code-vb[HttpWebRequest_SendChunked#2](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_16_1.vb)]\n [!code-cs[HttpWebRequest_SendChunked#2](~/add/codesnippet/csharp/p-system.net.httpwebrequ_16_1.cs)]\n [!code-cpp[HttpWebRequest_SendChunked#2](~/add/codesnippet/cpp/p-system.net.httpwebrequ_16_1.cpp)]"
  syntax:
    content: public bool SendChunked { get; set; }
    return:
      type: System.Boolean
      description: '`true` to send data to the Internet resource in segments; otherwise, `false`. The default value is `false`.'
  overload: System.Net.HttpWebRequest.SendChunked*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The request has been started by calling the <xref href="stem.Net.HttpWebRequest.GetRequestStream%2A"></xref>, <xref href="stem.Net.HttpWebRequest.BeginGetRequestStream%2A"></xref>, <xref href="stem.Net.HttpWebRequest.GetResponse%2A"></xref>, or <xref href="stem.Net.HttpWebRequest.BeginGetResponse%2A"></xref> method.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.ServerCertificateValidationCallback
  id: ServerCertificateValidationCallback
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: ServerCertificateValidationCallback
  nameWithType: HttpWebRequest.ServerCertificateValidationCallback
  fullName: System.Net.HttpWebRequest.ServerCertificateValidationCallback
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets a callback function to validate the server certificate.
  remarks: The default is that no callback function is set and the ServerCertificateValidationCallback property is `null`.
  syntax:
    content: public System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
    return:
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A callback function to validate the server certificate.  \n  \n A callback function to validate the server certificate."
  overload: System.Net.HttpWebRequest.ServerCertificateValidationCallback*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.ServicePoint
  id: ServicePoint
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: ServicePoint
  nameWithType: HttpWebRequest.ServicePoint
  fullName: System.Net.HttpWebRequest.ServicePoint
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets the service point to use for the request.
  remarks: The <xref:System.Net.ServicePoint.Address%2A?displayProperty=fullName> property may be different from <xref:System.Net.HttpWebRequest.Address%2A?displayProperty=fullName> if the request is redirected.
  example:
  - >-
    [!code-cpp[System.Net.ServicePoint#6](~/add/codesnippet/cpp/p-system.net.httpwebrequ_0_1.cpp)]
     [!code-vb[System.Net.ServicePoint#6](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_0_1.vb)]
     [!code-cs[System.Net.ServicePoint#6](~/add/codesnippet/csharp/p-system.net.httpwebrequ_0_1.cs)]
  syntax:
    content: public System.Net.ServicePoint ServicePoint { get; }
    return:
      type: System.Net.ServicePoint
      description: A <xref href="System.Net.ServicePoint"></xref> that represents the network connection to the Internet resource.
  overload: System.Net.HttpWebRequest.ServicePoint*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.SupportsCookieContainer
  id: SupportsCookieContainer
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: SupportsCookieContainer
  nameWithType: HttpWebRequest.SupportsCookieContainer
  fullName: System.Net.HttpWebRequest.SupportsCookieContainer
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets a value that indicates whether the request provides support for a <xref href="System.Net.CookieContainer"></xref>.
  syntax:
    content: public virtual bool SupportsCookieContainer { get; }
    return:
      type: System.Boolean
      description: "`true` if the request provides support for a <xref href=\"System.Net.CookieContainer\"></xref>; otherwise, `false`.  \n  \n `true` if a <xref href=\"System.Net.CookieContainer\"></xref> is supported; otherwise, `false`."
  overload: System.Net.HttpWebRequest.SupportsCookieContainer*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: HttpWebRequest.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.HttpWebRequest.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: Populates a <xref href="System.Runtime.Serialization.SerializationInfo"></xref> with the data needed to serialize the target object.
  remarks: Any objects included in the <xref:System.Runtime.Serialization.SerializationInfo> are automatically tracked and serialized by the formatter.
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);
    parameters:
    - id: serializationInfo
      type: System.Runtime.Serialization.SerializationInfo
      description: The <xref href="System.Runtime.Serialization.SerializationInfo"></xref> to populate with data.
    - id: streamingContext
      type: System.Runtime.Serialization.StreamingContext
      description: A <xref href="System.Runtime.Serialization.StreamingContext"></xref> that specifies the destination for this serialization.
  overload: System.Net.HttpWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.Timeout
  id: Timeout
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: Timeout
  nameWithType: HttpWebRequest.Timeout
  fullName: System.Net.HttpWebRequest.Timeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the time-out value in milliseconds for the <xref href="stem.Net.HttpWebRequest.GetResponse%2A"></xref> and <xref href="stem.Net.HttpWebRequest.GetRequestStream%2A"></xref> methods.
  remarks: "Timeout is the number of milliseconds that a subsequent synchronous request made with the <xref:System.Net.HttpWebRequest.GetResponse%2A> method waits for a response, and the <xref:System.Net.HttpWebRequest.GetRequestStream%2A> method waits for a stream. The Timeout applies to the entire request and response, not individually to the <xref:System.Net.HttpWebRequest.GetRequestStream%2A> and <xref:System.Net.HttpWebRequest.GetResponse%2A> method calls. If the resource is not returned within the time-out period, the request throws a <xref:System.Net.WebException> with the <xref:System.Net.WebException.Status%2A> property set to <xref:System.Net.WebExceptionStatus?displayProperty=fullName>.  \n  \n The Timeout property must be set before the <xref:System.Net.HttpWebRequest.GetRequestStream%2A> or <xref:System.Net.HttpWebRequest.GetResponse%2A> method is called. Changing the Timeout property after calling the <xref:System.Net.HttpWebRequest.GetRequestStream%2A> or <xref:System.Net.HttpWebRequest.GetResponse%2A> method has no effect  \n  \n The Timeout property has no effect on asynchronous requests made with the <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> or <xref:System.Net.HttpWebRequest.BeginGetRequestStream%2A> method.  \n  \n> [!CAUTION]\n>  In the case of asynchronous requests, the client application implements its own time-out mechanism. Refer to the example in the <xref:System.Net.HttpWebRequest.BeginGetResponse%2A> method.  \n  \n To specify the amount of time to wait before a read or write operation times out, use the <xref:System.Net.HttpWebRequest.ReadWriteTimeout%2A> property.  \n  \n A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.FileWebRequest.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request."
  example:
  - "The following code example sets the Timeout property of the <xref:System.Net.HttpWebRequest> object.  \n  \n [!code-vb[HttpWebRequest_Timeout#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_9_1.vb)]\n [!code-cs[HttpWebRequest_Timeout#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_9_1.cs)]\n [!code-cpp[HttpWebRequest_Timeout#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_9_1.cpp)]"
  syntax:
    content: public override int Timeout { get; set; }
    return:
      type: System.Int32
      description: The number of milliseconds to wait before the request times out. The default value is 100,000 milliseconds (100 seconds).
  overload: System.Net.HttpWebRequest.Timeout*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value specified is less than zero and is not <xref href="System.Threading.Timeout.Infinite"></xref>.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.TransferEncoding
  id: TransferEncoding
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: TransferEncoding
  nameWithType: HttpWebRequest.TransferEncoding
  fullName: System.Net.HttpWebRequest.TransferEncoding
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the value of the `Transfer-encoding` HTTP header.
  remarks: "Before you can set the TransferEncoding property, you must first set the <xref:System.Net.HttpWebRequest.SendChunked%2A> property to `true`. Clearing TransferEncoding by setting it to `null` has no effect on the value of <xref:System.Net.HttpWebRequest.SendChunked%2A>.  \n  \n Values assigned to the TransferEncoding property replace any existing contents.  \n  \n> [!NOTE]\n>  The value for this property is stored in <xref:System.Net.WebHeaderCollection>. If WebHeaderCollection is set, the property value is lost."
  syntax:
    content: public string TransferEncoding { get; set; }
    return:
      type: System.String
      description: The value of the `Transfer-encoding` HTTP header. The default value is `null`.
  overload: System.Net.HttpWebRequest.TransferEncoding*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: TransferEncoding is set when <xref href="stem.Net.HttpWebRequest.SendChunked%2A"></xref> is `false`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: TransferEncoding is set to the value "Chunked".
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing
  id: UnsafeAuthenticatedConnectionSharing
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: HttpWebRequest.UnsafeAuthenticatedConnectionSharing
  fullName: System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets a value that indicates whether to allow high-speed NTLM-authenticated connection sharing.
  remarks: "The default value for this property is `false`, which causes the current connection to be closed after a request is completed. Your application must go through the authentication sequence every time it issues a new request.  \n  \n If this property is set to `true`, the connection used to retrieve the response remains open after the authentication has been performed. In this case, other requests that have this property set to `true` may use the connection without re-authenticating. In other words, if a connection has been authenticated for user A, user B may reuse A's connection; user B's request is fulfilled based on the credentials of user A.  \n  \n> [!CAUTION]\n>  Because it is possible for an application to use the connection without being authenticated, you need to be sure that there is no administrative vulnerability in your system when setting this property to `true`. If your application sends requests for multiple users (impersonates multiple user accounts) and relies on authentication to protect resources, do not set this property to `true` unless you use connection groups as described below.  \n  \n You may want to consider enabling this mechanism if your are having performance problems and your application is running on a Web server with integrated Windows authentication.  \n  \n Enabling this setting opens the system to security risks. If you set the UnsafeAuthenticatedConnectionSharing property to `true` be sure to take the following precautions:  \n  \n-   Use the <xref:System.Net.HttpWebRequest.ConnectionGroupName%2A> property to manage connections for different users. This avoids the potential use of the connection by non-authenticated applications. For example, user A should have a unique connection group name that is different from user B. This provides a layer of isolation for each user account.  \n  \n-   Run your application in a protected environment to help avoid possible connection exploits.  \n  \n If you control the back-end server, as an alternative you might consider turning off authentication persistence. This increases performance to a lesser degree, but it is safer. For more details, search for AuthPersistence in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).  \n  \n> [!NOTE]\n>  If both <xref:System.Net.WebRequest.PreAuthenticate%2A> and UnsafeAuthenticatedConnectionSharing are set to `true`, each request is sent using a connection from the unsafe pool, but with an Authorization header."
  syntax:
    content: public bool UnsafeAuthenticatedConnectionSharing { get; set; }
    return:
      type: System.Boolean
      description: '`true` to keep the authenticated connection open; otherwise, `false`.'
  overload: System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.UseDefaultCredentials
  id: UseDefaultCredentials
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: UseDefaultCredentials
  nameWithType: HttpWebRequest.UseDefaultCredentials
  fullName: System.Net.HttpWebRequest.UseDefaultCredentials
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets a <xref href="System.Boolean"></xref> value that controls whether default credentials are sent with requests.
  remarks: Set this property to `true` when requests made by this <xref:System.Net.HttpWebRequest> object should, if requested by the server, be authenticated using the credentials of the currently logged on user. For client applications, this is the desired behavior in most scenarios. For middle-tier applications, such as ASP.NET applications, instead of using this property, you would typically set the <xref:System.Net.HttpWebRequest.Credentials%2A> property to the credentials of the client on whose behalf the request is made.
  syntax:
    content: public override bool UseDefaultCredentials { get; set; }
    return:
      type: System.Boolean
      description: '`true` if the default credentials are used; otherwise `false`. The default value is `false`.'
  overload: System.Net.HttpWebRequest.UseDefaultCredentials*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: You attempted to set this property after the request was sent.
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
- uid: System.Net.HttpWebRequest.UserAgent
  id: UserAgent
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  name: UserAgent
  nameWithType: HttpWebRequest.UserAgent
  fullName: System.Net.HttpWebRequest.UserAgent
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: Gets or sets the value of the `User-agent` HTTP header.
  remarks: ''
  example:
  - "The following code example sets the UserAgent property.  \n  \n [!code-cs[HttpWebRequest_UserAgent#1](~/add/codesnippet/csharp/p-system.net.httpwebrequ_4_1.cs)]\n [!code-cpp[HttpWebRequest_UserAgent#1](~/add/codesnippet/cpp/p-system.net.httpwebrequ_4_1.cpp)]\n [!code-vb[HttpWebRequest_UserAgent#1](~/add/codesnippet/visualbasic/p-system.net.httpwebrequ_4_1.vb)]"
  syntax:
    content: public string UserAgent { get; set; }
    return:
      type: System.String
      description: "The value of the `User-agent` HTTP header. The default value is `null`.  \n  \n <div class=\"alert NOTE\">  \n The value for this property is stored in <xref href=\"System.Net.WebHeaderCollection\"></xref>. If WebHeaderCollection is set, the property value is lost.  \n  \n</div>"
  overload: System.Net.HttpWebRequest.UserAgent*
  exceptions: []
  original_ecmaxml_local_path: E:\mdoc\ECMA2YamlTestRepo2\fulldocset\xml\System.Net\HttpWebRequest.xml
  content_git_url: https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/masterwithyml/fulldocset/xml/System.Net/HttpWebRequest.xml
  version:
  - netframework-3.0
  - netframework-3.5-client
  - netframework-3.5
  - netframework-4.0-client
  - netframework-4.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
references:
- uid: System.Net.WebRequest
  isExternal: false
  name: System.Net.WebRequest
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Net.ProtocolViolationException
  parent: System.Net
  isExternal: false
  name: ProtocolViolationException
  nameWithType: ProtocolViolationException
  fullName: System.Net.ProtocolViolationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Net.WebException
  parent: System.Net
  isExternal: false
  name: WebException
  nameWithType: WebException
  fullName: System.Net.WebException
- uid: System.ObjectDisposedException
  parent: System
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  nameWithType: IOException
  fullName: System.IO.IOException
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.Net.HttpWebRequest.#ctor
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: HttpWebRequest()
  nameWithType: HttpWebRequest.HttpWebRequest()
  fullName: System.Net.HttpWebRequest.HttpWebRequest()
- uid: System.Net.HttpWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: HttpWebRequest(SerializationInfo,StreamingContext)
  nameWithType: HttpWebRequest.HttpWebRequest(SerializationInfo,StreamingContext)
  fullName: System.Net.HttpWebRequest.HttpWebRequest(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Net.HttpWebRequest.Abort
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Abort()
  nameWithType: HttpWebRequest.Abort()
  fullName: System.Net.HttpWebRequest.Abort()
- uid: System.Net.HttpWebRequest.Accept
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Accept
  nameWithType: HttpWebRequest.Accept
  fullName: System.Net.HttpWebRequest.Accept
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpWebRequest.AddRange(System.Int32)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AddRange(Int32)
  nameWithType: HttpWebRequest.AddRange(Int32)
  fullName: System.Net.HttpWebRequest.AddRange(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.HttpWebRequest.AddRange(System.Int64)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AddRange(Int64)
  nameWithType: HttpWebRequest.AddRange(Int64)
  fullName: System.Net.HttpWebRequest.AddRange(Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.HttpWebRequest.AddRange(System.Int32,System.Int32)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AddRange(Int32,Int32)
  nameWithType: HttpWebRequest.AddRange(Int32,Int32)
  fullName: System.Net.HttpWebRequest.AddRange(Int32,Int32)
- uid: System.Net.HttpWebRequest.AddRange(System.Int64,System.Int64)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AddRange(Int64,Int64)
  nameWithType: HttpWebRequest.AddRange(Int64,Int64)
  fullName: System.Net.HttpWebRequest.AddRange(Int64,Int64)
- uid: System.Net.HttpWebRequest.AddRange(System.String,System.Int32)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AddRange(String,Int32)
  nameWithType: HttpWebRequest.AddRange(String,Int32)
  fullName: System.Net.HttpWebRequest.AddRange(String,Int32)
- uid: System.Net.HttpWebRequest.AddRange(System.String,System.Int64)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AddRange(String,Int64)
  nameWithType: HttpWebRequest.AddRange(String,Int64)
  fullName: System.Net.HttpWebRequest.AddRange(String,Int64)
- uid: System.Net.HttpWebRequest.AddRange(System.String,System.Int32,System.Int32)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AddRange(String,Int32,Int32)
  nameWithType: HttpWebRequest.AddRange(String,Int32,Int32)
  fullName: System.Net.HttpWebRequest.AddRange(String,Int32,Int32)
- uid: System.Net.HttpWebRequest.AddRange(System.String,System.Int64,System.Int64)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AddRange(String,Int64,Int64)
  nameWithType: HttpWebRequest.AddRange(String,Int64,Int64)
  fullName: System.Net.HttpWebRequest.AddRange(String,Int64,Int64)
- uid: System.Net.HttpWebRequest.Address
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Address
  nameWithType: HttpWebRequest.Address
  fullName: System.Net.HttpWebRequest.Address
- uid: System.Uri
  parent: System
  isExternal: false
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.HttpWebRequest.AllowAutoRedirect
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AllowAutoRedirect
  nameWithType: HttpWebRequest.AllowAutoRedirect
  fullName: System.Net.HttpWebRequest.AllowAutoRedirect
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.HttpWebRequest.AllowReadStreamBuffering
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AllowReadStreamBuffering
  nameWithType: HttpWebRequest.AllowReadStreamBuffering
  fullName: System.Net.HttpWebRequest.AllowReadStreamBuffering
- uid: System.Net.HttpWebRequest.AllowWriteStreamBuffering
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AllowWriteStreamBuffering
  nameWithType: HttpWebRequest.AllowWriteStreamBuffering
  fullName: System.Net.HttpWebRequest.AllowWriteStreamBuffering
- uid: System.Net.HttpWebRequest.AutomaticDecompression
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AutomaticDecompression
  nameWithType: HttpWebRequest.AutomaticDecompression
  fullName: System.Net.HttpWebRequest.AutomaticDecompression
- uid: System.Net.DecompressionMethods
  parent: System.Net
  isExternal: false
  name: DecompressionMethods
  nameWithType: DecompressionMethods
  fullName: System.Net.DecompressionMethods
- uid: System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: BeginGetRequestStream(AsyncCallback,Object)
  nameWithType: HttpWebRequest.BeginGetRequestStream(AsyncCallback,Object)
  fullName: System.Net.HttpWebRequest.BeginGetRequestStream(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: false
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: BeginGetResponse(AsyncCallback,Object)
  nameWithType: HttpWebRequest.BeginGetResponse(AsyncCallback,Object)
  fullName: System.Net.HttpWebRequest.BeginGetResponse(AsyncCallback,Object)
- uid: System.Net.HttpWebRequest.ClientCertificates
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ClientCertificates
  nameWithType: HttpWebRequest.ClientCertificates
  fullName: System.Net.HttpWebRequest.ClientCertificates
- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509CertificateCollection
  nameWithType: X509CertificateCollection
  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection
- uid: System.Net.HttpWebRequest.Connection
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Connection
  nameWithType: HttpWebRequest.Connection
  fullName: System.Net.HttpWebRequest.Connection
- uid: System.Net.HttpWebRequest.ConnectionGroupName
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ConnectionGroupName
  nameWithType: HttpWebRequest.ConnectionGroupName
  fullName: System.Net.HttpWebRequest.ConnectionGroupName
- uid: System.Net.HttpWebRequest.ContentLength
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ContentLength
  nameWithType: HttpWebRequest.ContentLength
  fullName: System.Net.HttpWebRequest.ContentLength
- uid: System.Net.HttpWebRequest.ContentType
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ContentType
  nameWithType: HttpWebRequest.ContentType
  fullName: System.Net.HttpWebRequest.ContentType
- uid: System.Net.HttpWebRequest.ContinueDelegate
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ContinueDelegate
  nameWithType: HttpWebRequest.ContinueDelegate
  fullName: System.Net.HttpWebRequest.ContinueDelegate
- uid: System.Net.HttpContinueDelegate
  parent: System.Net
  isExternal: false
  name: HttpContinueDelegate
  nameWithType: HttpContinueDelegate
  fullName: System.Net.HttpContinueDelegate
- uid: System.Net.HttpWebRequest.ContinueTimeout
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ContinueTimeout
  nameWithType: HttpWebRequest.ContinueTimeout
  fullName: System.Net.HttpWebRequest.ContinueTimeout
- uid: System.Net.HttpWebRequest.CookieContainer
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: CookieContainer
  nameWithType: HttpWebRequest.CookieContainer
  fullName: System.Net.HttpWebRequest.CookieContainer
- uid: System.Net.CookieContainer
  parent: System.Net
  isExternal: false
  name: CookieContainer
  nameWithType: CookieContainer
  fullName: System.Net.CookieContainer
- uid: System.Net.HttpWebRequest.Credentials
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Credentials
  nameWithType: HttpWebRequest.Credentials
  fullName: System.Net.HttpWebRequest.Credentials
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: false
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Net.HttpWebRequest.Date
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Date
  nameWithType: HttpWebRequest.Date
  fullName: System.Net.HttpWebRequest.Date
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Net.HttpWebRequest.DefaultCachePolicy
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: DefaultCachePolicy
  nameWithType: HttpWebRequest.DefaultCachePolicy
  fullName: System.Net.HttpWebRequest.DefaultCachePolicy
- uid: System.Net.Cache.RequestCachePolicy
  parent: System.Net.Cache
  isExternal: false
  name: RequestCachePolicy
  nameWithType: RequestCachePolicy
  fullName: System.Net.Cache.RequestCachePolicy
- uid: System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: DefaultMaximumErrorResponseLength
  nameWithType: HttpWebRequest.DefaultMaximumErrorResponseLength
  fullName: System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength
- uid: System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: DefaultMaximumResponseHeadersLength
  nameWithType: HttpWebRequest.DefaultMaximumResponseHeadersLength
  fullName: System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength
- uid: System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: EndGetRequestStream(IAsyncResult)
  nameWithType: HttpWebRequest.EndGetRequestStream(IAsyncResult)
  fullName: System.Net.HttpWebRequest.EndGetRequestStream(IAsyncResult)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult,System.Net.TransportContext@)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: EndGetRequestStream(IAsyncResult,TransportContext)
  nameWithType: HttpWebRequest.EndGetRequestStream(IAsyncResult,TransportContext)
  fullName: System.Net.HttpWebRequest.EndGetRequestStream(IAsyncResult,TransportContext)
- uid: System.Net.TransportContext
  parent: System.Net
  isExternal: false
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: EndGetResponse(IAsyncResult)
  nameWithType: HttpWebRequest.EndGetResponse(IAsyncResult)
  fullName: System.Net.HttpWebRequest.EndGetResponse(IAsyncResult)
- uid: System.Net.WebResponse
  parent: System.Net
  isExternal: false
  name: WebResponse
  nameWithType: WebResponse
  fullName: System.Net.WebResponse
- uid: System.Net.HttpWebRequest.Expect
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Expect
  nameWithType: HttpWebRequest.Expect
  fullName: System.Net.HttpWebRequest.Expect
- uid: System.Net.HttpWebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: HttpWebRequest.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.HttpWebRequest.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Net.HttpWebRequest.GetRequestStream
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: GetRequestStream()
  nameWithType: HttpWebRequest.GetRequestStream()
  fullName: System.Net.HttpWebRequest.GetRequestStream()
- uid: System.Net.HttpWebRequest.GetRequestStream(System.Net.TransportContext@)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: GetRequestStream(TransportContext)
  nameWithType: HttpWebRequest.GetRequestStream(TransportContext)
  fullName: System.Net.HttpWebRequest.GetRequestStream(TransportContext)
- uid: System.Net.HttpWebRequest.GetResponse
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: GetResponse()
  nameWithType: HttpWebRequest.GetResponse()
  fullName: System.Net.HttpWebRequest.GetResponse()
- uid: System.Net.HttpWebRequest.HaveResponse
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: HaveResponse
  nameWithType: HttpWebRequest.HaveResponse
  fullName: System.Net.HttpWebRequest.HaveResponse
- uid: System.Net.HttpWebRequest.Headers
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Headers
  nameWithType: HttpWebRequest.Headers
  fullName: System.Net.HttpWebRequest.Headers
- uid: System.Net.WebHeaderCollection
  parent: System.Net
  isExternal: false
  name: WebHeaderCollection
  nameWithType: WebHeaderCollection
  fullName: System.Net.WebHeaderCollection
- uid: System.Net.HttpWebRequest.Host
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Host
  nameWithType: HttpWebRequest.Host
  fullName: System.Net.HttpWebRequest.Host
- uid: System.Net.HttpWebRequest.IfModifiedSince
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: IfModifiedSince
  nameWithType: HttpWebRequest.IfModifiedSince
  fullName: System.Net.HttpWebRequest.IfModifiedSince
- uid: System.Net.HttpWebRequest.KeepAlive
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: KeepAlive
  nameWithType: HttpWebRequest.KeepAlive
  fullName: System.Net.HttpWebRequest.KeepAlive
- uid: System.Net.HttpWebRequest.MaximumAutomaticRedirections
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: MaximumAutomaticRedirections
  nameWithType: HttpWebRequest.MaximumAutomaticRedirections
  fullName: System.Net.HttpWebRequest.MaximumAutomaticRedirections
- uid: System.Net.HttpWebRequest.MaximumResponseHeadersLength
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: MaximumResponseHeadersLength
  nameWithType: HttpWebRequest.MaximumResponseHeadersLength
  fullName: System.Net.HttpWebRequest.MaximumResponseHeadersLength
- uid: System.Net.HttpWebRequest.MediaType
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: MediaType
  nameWithType: HttpWebRequest.MediaType
  fullName: System.Net.HttpWebRequest.MediaType
- uid: System.Net.HttpWebRequest.Method
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Method
  nameWithType: HttpWebRequest.Method
  fullName: System.Net.HttpWebRequest.Method
- uid: System.Net.HttpWebRequest.Pipelined
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Pipelined
  nameWithType: HttpWebRequest.Pipelined
  fullName: System.Net.HttpWebRequest.Pipelined
- uid: System.Net.HttpWebRequest.PreAuthenticate
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: PreAuthenticate
  nameWithType: HttpWebRequest.PreAuthenticate
  fullName: System.Net.HttpWebRequest.PreAuthenticate
- uid: System.Net.HttpWebRequest.ProtocolVersion
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ProtocolVersion
  nameWithType: HttpWebRequest.ProtocolVersion
  fullName: System.Net.HttpWebRequest.ProtocolVersion
- uid: System.Version
  parent: System
  isExternal: false
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Net.HttpWebRequest.Proxy
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Proxy
  nameWithType: HttpWebRequest.Proxy
  fullName: System.Net.HttpWebRequest.Proxy
- uid: System.Net.IWebProxy
  parent: System.Net
  isExternal: false
  name: IWebProxy
  nameWithType: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Net.HttpWebRequest.ReadWriteTimeout
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ReadWriteTimeout
  nameWithType: HttpWebRequest.ReadWriteTimeout
  fullName: System.Net.HttpWebRequest.ReadWriteTimeout
- uid: System.Net.HttpWebRequest.Referer
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Referer
  nameWithType: HttpWebRequest.Referer
  fullName: System.Net.HttpWebRequest.Referer
- uid: System.Net.HttpWebRequest.RequestUri
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: RequestUri
  nameWithType: HttpWebRequest.RequestUri
  fullName: System.Net.HttpWebRequest.RequestUri
- uid: System.Net.HttpWebRequest.SendChunked
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: SendChunked
  nameWithType: HttpWebRequest.SendChunked
  fullName: System.Net.HttpWebRequest.SendChunked
- uid: System.Net.HttpWebRequest.ServerCertificateValidationCallback
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: HttpWebRequest.ServerCertificateValidationCallback
  fullName: System.Net.HttpWebRequest.ServerCertificateValidationCallback
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.HttpWebRequest.ServicePoint
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ServicePoint
  nameWithType: HttpWebRequest.ServicePoint
  fullName: System.Net.HttpWebRequest.ServicePoint
- uid: System.Net.ServicePoint
  parent: System.Net
  isExternal: false
  name: ServicePoint
  nameWithType: ServicePoint
  fullName: System.Net.ServicePoint
- uid: System.Net.HttpWebRequest.SupportsCookieContainer
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: SupportsCookieContainer
  nameWithType: HttpWebRequest.SupportsCookieContainer
  fullName: System.Net.HttpWebRequest.SupportsCookieContainer
- uid: System.Net.HttpWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: HttpWebRequest.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Net.HttpWebRequest.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Net.HttpWebRequest.Timeout
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Timeout
  nameWithType: HttpWebRequest.Timeout
  fullName: System.Net.HttpWebRequest.Timeout
- uid: System.Net.HttpWebRequest.TransferEncoding
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: TransferEncoding
  nameWithType: HttpWebRequest.TransferEncoding
  fullName: System.Net.HttpWebRequest.TransferEncoding
- uid: System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: HttpWebRequest.UnsafeAuthenticatedConnectionSharing
  fullName: System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing
- uid: System.Net.HttpWebRequest.UseDefaultCredentials
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: HttpWebRequest.UseDefaultCredentials
  fullName: System.Net.HttpWebRequest.UseDefaultCredentials
- uid: System.Net.HttpWebRequest.UserAgent
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: UserAgent
  nameWithType: HttpWebRequest.UserAgent
  fullName: System.Net.HttpWebRequest.UserAgent
- uid: System.Net.HttpWebRequest.#ctor*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: HttpWebRequest
  nameWithType: HttpWebRequest.HttpWebRequest
- uid: System.Net.HttpWebRequest.Abort*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Abort
  nameWithType: HttpWebRequest.Abort
- uid: System.Net.HttpWebRequest.Accept*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Accept
  nameWithType: HttpWebRequest.Accept
- uid: System.Net.HttpWebRequest.AddRange*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AddRange
  nameWithType: HttpWebRequest.AddRange
- uid: System.Net.HttpWebRequest.Address*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Address
  nameWithType: HttpWebRequest.Address
- uid: System.Net.HttpWebRequest.AllowAutoRedirect*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AllowAutoRedirect
  nameWithType: HttpWebRequest.AllowAutoRedirect
- uid: System.Net.HttpWebRequest.AllowReadStreamBuffering*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AllowReadStreamBuffering
  nameWithType: HttpWebRequest.AllowReadStreamBuffering
- uid: System.Net.HttpWebRequest.AllowWriteStreamBuffering*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AllowWriteStreamBuffering
  nameWithType: HttpWebRequest.AllowWriteStreamBuffering
- uid: System.Net.HttpWebRequest.AutomaticDecompression*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: AutomaticDecompression
  nameWithType: HttpWebRequest.AutomaticDecompression
- uid: System.Net.HttpWebRequest.BeginGetRequestStream*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: BeginGetRequestStream
  nameWithType: HttpWebRequest.BeginGetRequestStream
- uid: System.Net.HttpWebRequest.BeginGetResponse*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: BeginGetResponse
  nameWithType: HttpWebRequest.BeginGetResponse
- uid: System.Net.HttpWebRequest.ClientCertificates*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ClientCertificates
  nameWithType: HttpWebRequest.ClientCertificates
- uid: System.Net.HttpWebRequest.Connection*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Connection
  nameWithType: HttpWebRequest.Connection
- uid: System.Net.HttpWebRequest.ConnectionGroupName*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ConnectionGroupName
  nameWithType: HttpWebRequest.ConnectionGroupName
- uid: System.Net.HttpWebRequest.ContentLength*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ContentLength
  nameWithType: HttpWebRequest.ContentLength
- uid: System.Net.HttpWebRequest.ContentType*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ContentType
  nameWithType: HttpWebRequest.ContentType
- uid: System.Net.HttpWebRequest.ContinueDelegate*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ContinueDelegate
  nameWithType: HttpWebRequest.ContinueDelegate
- uid: System.Net.HttpWebRequest.ContinueTimeout*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ContinueTimeout
  nameWithType: HttpWebRequest.ContinueTimeout
- uid: System.Net.HttpWebRequest.CookieContainer*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: CookieContainer
  nameWithType: HttpWebRequest.CookieContainer
- uid: System.Net.HttpWebRequest.Credentials*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Credentials
  nameWithType: HttpWebRequest.Credentials
- uid: System.Net.HttpWebRequest.Date*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Date
  nameWithType: HttpWebRequest.Date
- uid: System.Net.HttpWebRequest.DefaultCachePolicy*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: DefaultCachePolicy
  nameWithType: HttpWebRequest.DefaultCachePolicy
- uid: System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: DefaultMaximumErrorResponseLength
  nameWithType: HttpWebRequest.DefaultMaximumErrorResponseLength
- uid: System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: DefaultMaximumResponseHeadersLength
  nameWithType: HttpWebRequest.DefaultMaximumResponseHeadersLength
- uid: System.Net.HttpWebRequest.EndGetRequestStream*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: EndGetRequestStream
  nameWithType: HttpWebRequest.EndGetRequestStream
- uid: System.Net.HttpWebRequest.EndGetResponse*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: EndGetResponse
  nameWithType: HttpWebRequest.EndGetResponse
- uid: System.Net.HttpWebRequest.Expect*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Expect
  nameWithType: HttpWebRequest.Expect
- uid: System.Net.HttpWebRequest.GetObjectData*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: GetObjectData
  nameWithType: HttpWebRequest.GetObjectData
- uid: System.Net.HttpWebRequest.GetRequestStream*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: GetRequestStream
  nameWithType: HttpWebRequest.GetRequestStream
- uid: System.Net.HttpWebRequest.GetResponse*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: GetResponse
  nameWithType: HttpWebRequest.GetResponse
- uid: System.Net.HttpWebRequest.HaveResponse*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: HaveResponse
  nameWithType: HttpWebRequest.HaveResponse
- uid: System.Net.HttpWebRequest.Headers*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Headers
  nameWithType: HttpWebRequest.Headers
- uid: System.Net.HttpWebRequest.Host*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Host
  nameWithType: HttpWebRequest.Host
- uid: System.Net.HttpWebRequest.IfModifiedSince*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: IfModifiedSince
  nameWithType: HttpWebRequest.IfModifiedSince
- uid: System.Net.HttpWebRequest.KeepAlive*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: KeepAlive
  nameWithType: HttpWebRequest.KeepAlive
- uid: System.Net.HttpWebRequest.MaximumAutomaticRedirections*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: MaximumAutomaticRedirections
  nameWithType: HttpWebRequest.MaximumAutomaticRedirections
- uid: System.Net.HttpWebRequest.MaximumResponseHeadersLength*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: MaximumResponseHeadersLength
  nameWithType: HttpWebRequest.MaximumResponseHeadersLength
- uid: System.Net.HttpWebRequest.MediaType*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: MediaType
  nameWithType: HttpWebRequest.MediaType
- uid: System.Net.HttpWebRequest.Method*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Method
  nameWithType: HttpWebRequest.Method
- uid: System.Net.HttpWebRequest.Pipelined*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Pipelined
  nameWithType: HttpWebRequest.Pipelined
- uid: System.Net.HttpWebRequest.PreAuthenticate*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: PreAuthenticate
  nameWithType: HttpWebRequest.PreAuthenticate
- uid: System.Net.HttpWebRequest.ProtocolVersion*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ProtocolVersion
  nameWithType: HttpWebRequest.ProtocolVersion
- uid: System.Net.HttpWebRequest.Proxy*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Proxy
  nameWithType: HttpWebRequest.Proxy
- uid: System.Net.HttpWebRequest.ReadWriteTimeout*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ReadWriteTimeout
  nameWithType: HttpWebRequest.ReadWriteTimeout
- uid: System.Net.HttpWebRequest.Referer*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Referer
  nameWithType: HttpWebRequest.Referer
- uid: System.Net.HttpWebRequest.RequestUri*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: RequestUri
  nameWithType: HttpWebRequest.RequestUri
- uid: System.Net.HttpWebRequest.SendChunked*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: SendChunked
  nameWithType: HttpWebRequest.SendChunked
- uid: System.Net.HttpWebRequest.ServerCertificateValidationCallback*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: HttpWebRequest.ServerCertificateValidationCallback
- uid: System.Net.HttpWebRequest.ServicePoint*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: ServicePoint
  nameWithType: HttpWebRequest.ServicePoint
- uid: System.Net.HttpWebRequest.SupportsCookieContainer*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: SupportsCookieContainer
  nameWithType: HttpWebRequest.SupportsCookieContainer
- uid: System.Net.HttpWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: HttpWebRequest.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Net.HttpWebRequest.Timeout*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: Timeout
  nameWithType: HttpWebRequest.Timeout
- uid: System.Net.HttpWebRequest.TransferEncoding*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: TransferEncoding
  nameWithType: HttpWebRequest.TransferEncoding
- uid: System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: HttpWebRequest.UnsafeAuthenticatedConnectionSharing
- uid: System.Net.HttpWebRequest.UseDefaultCredentials*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: UseDefaultCredentials
  nameWithType: HttpWebRequest.UseDefaultCredentials
- uid: System.Net.HttpWebRequest.UserAgent*
  parent: System.Net.HttpWebRequest
  isExternal: false
  name: UserAgent
  nameWithType: HttpWebRequest.UserAgent
