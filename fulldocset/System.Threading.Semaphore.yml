### YamlMime:ManagedReference
items:
- uid: System.Threading.Semaphore
  id: Semaphore
  children:
  - System.Threading.Semaphore.#ctor(System.Int32,System.Int32)
  - System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)
  - System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)
  - System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)
  - System.Threading.Semaphore.GetAccessControl
  - System.Threading.Semaphore.OpenExisting(System.String)
  - System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)
  - System.Threading.Semaphore.Release
  - System.Threading.Semaphore.Release(System.Int32)
  - System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)
  langs:
  - csharp
  name: Semaphore
  nameWithType: Semaphore
  fullName: System.Threading.Semaphore
  type: Class
  summary: Limits the number of threads that can access a resource or pool of resources concurrently.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public sealed class Semaphore : System.Threading.WaitHandle
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Threading.WaitHandle
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Threading.WaitHandle.Close
  - System.Threading.WaitHandle.Dispose
  - System.Threading.WaitHandle.Dispose(System.Boolean)
  - System.Threading.WaitHandle.Handle
  - System.Threading.WaitHandle.InvalidHandle
  - System.Threading.WaitHandle.SafeWaitHandle
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitOne
  - System.Threading.WaitHandle.WaitOne(System.Int32)
  - System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  - System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitTimeout
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Threading.Semaphore.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Threading.Semaphore
  langs:
  - csharp
  name: Semaphore(Int32,Int32)
  nameWithType: Semaphore.Semaphore(Int32,Int32)
  fullName: System.Threading.Semaphore.Semaphore(Int32,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.Semaphore"></xref> class, specifying the initial number of entries and the maximum number of concurrent entries.
  syntax:
    content: public Semaphore (int initialCount, int maximumCount);
    parameters:
    - id: initialCount
      type: System.Int32
      description: To be added.
    - id: maximumCount
      type: System.Int32
      description: To be added.
  overload: System.Threading.Semaphore.#ctor*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)
  id: '#ctor(System.Int32,System.Int32,System.String)'
  parent: System.Threading.Semaphore
  langs:
  - csharp
  name: Semaphore(Int32,Int32,String)
  nameWithType: Semaphore.Semaphore(Int32,Int32,String)
  fullName: System.Threading.Semaphore.Semaphore(Int32,Int32,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.Semaphore"></xref> class, specifying the initial number of entries and the maximum number of concurrent entries, and optionally specifying the name of a system semaphore object.
  syntax:
    content: public Semaphore (int initialCount, int maximumCount, string name);
    parameters:
    - id: initialCount
      type: System.Int32
      description: To be added.
    - id: maximumCount
      type: System.Int32
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
  overload: System.Threading.Semaphore.#ctor*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)
  id: '#ctor(System.Int32,System.Int32,System.String,System.Boolean@)'
  parent: System.Threading.Semaphore
  langs:
  - csharp
  name: Semaphore(Int32,Int32,String,Boolean)
  nameWithType: Semaphore.Semaphore(Int32,Int32,String,Boolean)
  fullName: System.Threading.Semaphore.Semaphore(Int32,Int32,String,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.Semaphore"></xref> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, and specifying a variable that receives a value indicating whether a new system semaphore was created.
  syntax:
    content: public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew);
    parameters:
    - id: initialCount
      type: System.Int32
      description: To be added.
    - id: maximumCount
      type: System.Int32
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    - id: createdNew
      type: System.Boolean
      description: To be added.
  overload: System.Threading.Semaphore.#ctor*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)
  id: '#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)'
  parent: System.Threading.Semaphore
  langs:
  - csharp
  name: Semaphore(Int32,Int32,String,Boolean,SemaphoreSecurity)
  nameWithType: Semaphore.Semaphore(Int32,Int32,String,Boolean,SemaphoreSecurity)
  fullName: System.Threading.Semaphore.Semaphore(Int32,Int32,String,Boolean,SemaphoreSecurity)
  type: Constructor
  assemblies:
  - System
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.Semaphore"></xref> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, specifying a variable that receives a value indicating whether a new system semaphore was created, and specifying security access control for the system semaphore.
  syntax:
    content: public Semaphore (int initialCount, int maximumCount, string name, out bool createdNew, System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);
    parameters:
    - id: initialCount
      type: System.Int32
      description: To be added.
    - id: maximumCount
      type: System.Int32
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    - id: createdNew
      type: System.Boolean
      description: To be added.
    - id: semaphoreSecurity
      type: System.Security.AccessControl.SemaphoreSecurity
      description: To be added.
  overload: System.Threading.Semaphore.#ctor*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Threading.Semaphore.GetAccessControl
  id: GetAccessControl
  parent: System.Threading.Semaphore
  langs:
  - csharp
  name: GetAccessControl()
  nameWithType: Semaphore.GetAccessControl()
  fullName: System.Threading.Semaphore.GetAccessControl()
  type: Method
  assemblies:
  - System
  namespace: System.Threading
  summary: Gets the access control security for a named system semaphore.
  syntax:
    content: public System.Security.AccessControl.SemaphoreSecurity GetAccessControl ();
    parameters: []
    return:
      type: System.Security.AccessControl.SemaphoreSecurity
      description: To be added.
  overload: System.Threading.Semaphore.GetAccessControl*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Threading.Semaphore.OpenExisting(System.String)
  id: OpenExisting(System.String)
  parent: System.Threading.Semaphore
  langs:
  - csharp
  name: OpenExisting(String)
  nameWithType: Semaphore.OpenExisting(String)
  fullName: System.Threading.Semaphore.OpenExisting(String)
  type: Method
  assemblies:
  - System
  namespace: System.Threading
  summary: Opens the specified named semaphore, if it already exists.
  syntax:
    content: public static System.Threading.Semaphore OpenExisting (string name);
    parameters:
    - id: name
      type: System.String
      description: To be added.
    return:
      type: System.Threading.Semaphore
      description: To be added.
  overload: System.Threading.Semaphore.OpenExisting*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)
  id: OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)
  parent: System.Threading.Semaphore
  langs:
  - csharp
  name: OpenExisting(String,SemaphoreRights)
  nameWithType: Semaphore.OpenExisting(String,SemaphoreRights)
  fullName: System.Threading.Semaphore.OpenExisting(String,SemaphoreRights)
  type: Method
  assemblies:
  - System
  namespace: System.Threading
  summary: Opens the specified named semaphore, if it already exists, with the desired security access.
  syntax:
    content: public static System.Threading.Semaphore OpenExisting (string name, System.Security.AccessControl.SemaphoreRights rights);
    parameters:
    - id: name
      type: System.String
      description: To be added.
    - id: rights
      type: System.Security.AccessControl.SemaphoreRights
      description: To be added.
    return:
      type: System.Threading.Semaphore
      description: To be added.
  overload: System.Threading.Semaphore.OpenExisting*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Threading.Semaphore.Release
  id: Release
  parent: System.Threading.Semaphore
  langs:
  - csharp
  name: Release()
  nameWithType: Semaphore.Release()
  fullName: System.Threading.Semaphore.Release()
  type: Method
  assemblies:
  - System
  namespace: System.Threading
  summary: Exits the semaphore and returns the previous count.
  syntax:
    content: public int Release ();
    parameters: []
    return:
      type: System.Int32
      description: To be added.
  overload: System.Threading.Semaphore.Release*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Threading.Semaphore.Release(System.Int32)
  id: Release(System.Int32)
  parent: System.Threading.Semaphore
  langs:
  - csharp
  name: Release(Int32)
  nameWithType: Semaphore.Release(Int32)
  fullName: System.Threading.Semaphore.Release(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Threading
  summary: Exits the semaphore a specified number of times and returns the previous count.
  syntax:
    content: public int Release (int releaseCount);
    parameters:
    - id: releaseCount
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Threading.Semaphore.Release*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
- uid: System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)
  id: SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)
  parent: System.Threading.Semaphore
  langs:
  - csharp
  name: SetAccessControl(SemaphoreSecurity)
  nameWithType: Semaphore.SetAccessControl(SemaphoreSecurity)
  fullName: System.Threading.Semaphore.SetAccessControl(SemaphoreSecurity)
  type: Method
  assemblies:
  - System
  namespace: System.Threading
  summary: Sets the access control security for a named system semaphore.
  syntax:
    content: public void SetAccessControl (System.Security.AccessControl.SemaphoreSecurity semaphoreSecurity);
    parameters:
    - id: semaphoreSecurity
      type: System.Security.AccessControl.SemaphoreSecurity
      description: To be added.
  overload: System.Threading.Semaphore.SetAccessControl*
  exceptions: []
  version:
  - netframework-20
  - netframework-30
  - netframework-35
  - netframework-40
references:
- uid: System.Threading.WaitHandle
  isExternal: false
  name: System.Threading.WaitHandle
- uid: System.Threading.Semaphore.#ctor(System.Int32,System.Int32)
  parent: System.Threading.Semaphore
  isExternal: false
  name: Semaphore(Int32,Int32)
  nameWithType: Semaphore.Semaphore(Int32,Int32)
  fullName: System.Threading.Semaphore.Semaphore(Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)
  parent: System.Threading.Semaphore
  isExternal: false
  name: Semaphore(Int32,Int32,String)
  nameWithType: Semaphore.Semaphore(Int32,Int32,String)
  fullName: System.Threading.Semaphore.Semaphore(Int32,Int32,String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)
  parent: System.Threading.Semaphore
  isExternal: false
  name: Semaphore(Int32,Int32,String,Boolean)
  nameWithType: Semaphore.Semaphore(Int32,Int32,String,Boolean)
  fullName: System.Threading.Semaphore.Semaphore(Int32,Int32,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)
  parent: System.Threading.Semaphore
  isExternal: false
  name: Semaphore(Int32,Int32,String,Boolean,SemaphoreSecurity)
  nameWithType: Semaphore.Semaphore(Int32,Int32,String,Boolean,SemaphoreSecurity)
  fullName: System.Threading.Semaphore.Semaphore(Int32,Int32,String,Boolean,SemaphoreSecurity)
- uid: System.Security.AccessControl.SemaphoreSecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: SemaphoreSecurity
  nameWithType: SemaphoreSecurity
  fullName: System.Security.AccessControl.SemaphoreSecurity
- uid: System.Threading.Semaphore.GetAccessControl
  parent: System.Threading.Semaphore
  isExternal: false
  name: GetAccessControl()
  nameWithType: Semaphore.GetAccessControl()
  fullName: System.Threading.Semaphore.GetAccessControl()
- uid: System.Threading.Semaphore.OpenExisting(System.String)
  parent: System.Threading.Semaphore
  isExternal: false
  name: OpenExisting(String)
  nameWithType: Semaphore.OpenExisting(String)
  fullName: System.Threading.Semaphore.OpenExisting(String)
- uid: System.Threading.Semaphore
  parent: System.Threading
  isExternal: false
  name: Semaphore
  nameWithType: Semaphore
  fullName: System.Threading.Semaphore
- uid: System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)
  parent: System.Threading.Semaphore
  isExternal: false
  name: OpenExisting(String,SemaphoreRights)
  nameWithType: Semaphore.OpenExisting(String,SemaphoreRights)
  fullName: System.Threading.Semaphore.OpenExisting(String,SemaphoreRights)
- uid: System.Security.AccessControl.SemaphoreRights
  parent: System.Security.AccessControl
  isExternal: false
  name: SemaphoreRights
  nameWithType: SemaphoreRights
  fullName: System.Security.AccessControl.SemaphoreRights
- uid: System.Threading.Semaphore.Release
  parent: System.Threading.Semaphore
  isExternal: false
  name: Release()
  nameWithType: Semaphore.Release()
  fullName: System.Threading.Semaphore.Release()
- uid: System.Threading.Semaphore.Release(System.Int32)
  parent: System.Threading.Semaphore
  isExternal: false
  name: Release(Int32)
  nameWithType: Semaphore.Release(Int32)
  fullName: System.Threading.Semaphore.Release(Int32)
- uid: System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)
  parent: System.Threading.Semaphore
  isExternal: false
  name: SetAccessControl(SemaphoreSecurity)
  nameWithType: Semaphore.SetAccessControl(SemaphoreSecurity)
  fullName: System.Threading.Semaphore.SetAccessControl(SemaphoreSecurity)
- uid: System.Threading.Semaphore.#ctor*
  parent: System.Threading.Semaphore
  isExternal: false
  name: Semaphore
  nameWithType: Semaphore.Semaphore
- uid: System.Threading.Semaphore.GetAccessControl*
  parent: System.Threading.Semaphore
  isExternal: false
  name: GetAccessControl
  nameWithType: Semaphore.GetAccessControl
- uid: System.Threading.Semaphore.OpenExisting*
  parent: System.Threading.Semaphore
  isExternal: false
  name: OpenExisting
  nameWithType: Semaphore.OpenExisting
- uid: System.Threading.Semaphore.Release*
  parent: System.Threading.Semaphore
  isExternal: false
  name: Release
  nameWithType: Semaphore.Release
- uid: System.Threading.Semaphore.SetAccessControl*
  parent: System.Threading.Semaphore
  isExternal: false
  name: SetAccessControl
  nameWithType: Semaphore.SetAccessControl
