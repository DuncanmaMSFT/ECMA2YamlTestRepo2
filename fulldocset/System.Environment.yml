### YamlMime:ManagedReference
items:
- uid: System.Environment
  id: Environment
  children:
  - System.Environment.CommandLine
  - System.Environment.CurrentDirectory
  - System.Environment.Exit(System.Int32)
  - System.Environment.ExitCode
  - System.Environment.ExpandEnvironmentVariables(System.String)
  - System.Environment.FailFast(System.String)
  - System.Environment.FailFast(System.String,System.Exception)
  - System.Environment.GetCommandLineArgs
  - System.Environment.GetEnvironmentVariable(System.String)
  - System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)
  - System.Environment.GetEnvironmentVariables
  - System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)
  - System.Environment.GetFolderPath(System.Environment.SpecialFolder)
  - System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)
  - System.Environment.GetLogicalDrives
  - System.Environment.HasShutdownStarted
  - System.Environment.Is64BitOperatingSystem
  - System.Environment.Is64BitProcess
  - System.Environment.MachineName
  - System.Environment.NewLine
  - System.Environment.OSVersion
  - System.Environment.ProcessorCount
  - System.Environment.SetEnvironmentVariable(System.String,System.String)
  - System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)
  - System.Environment.StackTrace
  - System.Environment.SystemDirectory
  - System.Environment.SystemPageSize
  - System.Environment.TickCount
  - System.Environment.UserDomainName
  - System.Environment.UserInteractive
  - System.Environment.UserName
  - System.Environment.Version
  - System.Environment.WorkingSet
  langs:
  - csharp
  name: Environment
  nameWithType: Environment
  fullName: System.Environment
  type: Class
  summary: Provides information about, and means to manipulate, the current environment and platform. This class cannot be inherited.
  remarks: Use the Environment class to retrieve information such as command-line arguments, the exit code, environment variable settings, contents of the call stack, time since last system boot, and the version of the common language runtime.
  example:
  - "The following example demonstrates displays a list of information about the current environment.  \n  \n [!code-cs[environment.class#1](~/add/codesnippet/csharp/t-system.environment_1.cs)]\n [!code-cpp[environment.class#1](~/add/codesnippet/cpp/t-system.environment_1.cpp)]\n [!code-vb[environment.class#1](~/add/codesnippet/visualbasic/t-system.environment_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class Environment
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.CommandLine
  id: CommandLine
  parent: System.Environment
  langs:
  - csharp
  name: CommandLine
  nameWithType: Environment.CommandLine
  fullName: System.Environment.CommandLine
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the command line for this process.
  remarks: "This property provides access to the program name and any arguments specified on the command line when the current process was started.  \n  \n The program name can  include path information, but is not required to do so. Use the <xref:System.Environment.GetCommandLineArgs%2A> method to retrieve the command-line information parsed and stored in an array of strings.  \n  \n The maximum size of the command-line buffer is not set to a specific number of characters; it varies depending on the Windows operating system that is running on the computer."
  example:
  - "The following example displays its own command line.  \n  \n [!code-cpp[environment.commandline#1](~/add/codesnippet/cpp/p-system.environment.com_1.cpp)]\n [!code-cs[environment.commandline#1](~/add/codesnippet/csharp/p-system.environment.com_1.cs)]\n [!code-vb[environment.commandline#1](~/add/codesnippet/visualbasic/p-system.environment.com_1.vb)]"
  syntax:
    content: public static string CommandLine { get; }
    return:
      type: System.String
      description: A string containing command-line arguments.
  overload: System.Environment.CommandLine*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.CurrentDirectory
  id: CurrentDirectory
  parent: System.Environment
  langs:
  - csharp
  name: CurrentDirectory
  nameWithType: Environment.CurrentDirectory
  fullName: System.Environment.CurrentDirectory
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets or sets the fully qualified path of the current working directory.
  remarks: By definition, if this process starts in the root directory of a local or network drive, the value of this property is the drive name followed by a trailing slash (for example, "C:\\"). If this process starts in a subdirectory, the value of this property is the drive and subdirectory path, without a trailing slash (for example, "C:\mySubDirectory").
  example:
  - "The following example demonstrates setting the CurrentDirectory property.  \n  \n [!code-cpp[System.Environment#4](~/add/codesnippet/cpp/p-system.environment.cur_1.cpp)]\n [!code-cs[System.Environment#4](~/add/codesnippet/csharp/p-system.environment.cur_1.cs)]\n [!code-vb[System.Environment#4](~/add/codesnippet/visualbasic/p-system.environment.cur_1.vb)]"
  syntax:
    content: public static string CurrentDirectory { get; set; }
    return:
      type: System.String
      description: A string containing a directory path.
  overload: System.Environment.CurrentDirectory*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Attempted to set to an empty string ("").
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Attempted to set to <xref uid="langword_csharp_null." name="null." href=""></xref>
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: An I/O error occurred.
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: Attempted to set a local path that cannot be found.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the appropriate permission.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.Exit(System.Int32)
  id: Exit(System.Int32)
  parent: System.Environment
  langs:
  - csharp
  name: Exit(Int32)
  nameWithType: Environment.Exit(Int32)
  fullName: System.Environment.Exit(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Terminates this process and returns an exit code to the operating system.
  remarks: "For the `exitCode` parameter, use a non-zero number to indicate an error. In your application, you can define your own error codes in an enumeration, and return the appropriate error code based on the scenario. For example, return a value of 1 to indicate that the required file is not present, and a value of 2 to indicate that the file is in the wrong format. For a list of exit codes used by the Windows operating system, see [System Error Codes](http://msdn.microsoft.com/library/ms681381.aspx) in the Windows documentation.  \n  \n Calling the Exit method differs from using your programming language's `return` statement in the following ways:  \n  \n-   Exit always terminates an application. Using the `return` statement may terminate an application only if it is used in the application entry point, such as in the `Main` method.  \n  \n-   Exit terminates an application immediately, even if other threads are running. If the `return` statement is called in the application entry point, it causes an application to terminate only after all foreground threads have terminated.  \n  \n-   Exit requires the caller to have permission to call unmanaged code. The `return` statement does not.  \n  \n-   If Exit is called from a `try` or `catch` block, the code in any `finally` block does not execute. If the `return` statement is used, the code in the `finally` block does execute.  \n  \n-   If Exit is called when code in a [constrained execution region](~/add/includes/ajax-current-ext-md.md) (CER) is running, the CER will not complete execution. If the `return` statement is used, the CER completes execution."
  syntax:
    content: public static void Exit (int exitCode);
    parameters:
    - id: exitCode
      type: System.Int32
      description: The exit code to return to the operating system. Use 0 (zero) to indicate that the process completed successfully.
  overload: System.Environment.Exit*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have sufficient security permission to perform this function.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.ExitCode
  id: ExitCode
  parent: System.Environment
  langs:
  - csharp
  name: ExitCode
  nameWithType: Environment.ExitCode
  fullName: System.Environment.ExitCode
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets or sets the exit code of the process.
  remarks: "If the `Main` method returns `void`, you can use this property to set the exit code that will be returned to the calling environment. If `Main` does not return `void`, this property is ignored. The initial value of this property is zero.  \n  \n> [!WARNING]\n>  The ExitCode property is a signed 32-bit integer. To prevent the property from returning a negative exit code, you should not use values greater than or equal to 0x80000000.  \n  \n Use a non-zero number to indicate an error. In your application, you can define your own error codes in an enumeration, and return the appropriate error code based on the scenario. For example, return a value of 1 to indicate that the required file is not present and a value of 2 to indicate that the file is in the wrong format. For a list of exit codes used by the Windows operating system, see [System Error Codes](http://msdn.microsoft.com/library/ms681381\\(v=vs.85\\)) in the Windows documentation."
  example:
  - "The following is a simple app named Double.exe that doubles an integer value passed to it as a command-line argument. The value assigns error codes to the ExitCode property to indicate error conditions. Note that you must add a reference to the System.Numerics.dll assembly to successfully compile the example.  \n  \n [!code-cs[System.Environment.ExitCode#1](~/add/codesnippet/csharp/p-system.environment.exi_1.cs)]\n [!code-vb[System.Environment.ExitCode#1](~/add/codesnippet/visualbasic/p-system.environment.exi_1.vb)]  \n  \n The example can then be invoked from a batch file such as the following, which makes its error codes accessible by using the `ERRORLEVEL` command.  \n  \n```  \n  \necho off  \nDouble.exe %1  \nIf errorlevel 1639 goto NoArg   \nif errorlevel 534 goto Overflow  \nif errorlevel 160 goto BadArg  \nif errorlevel 0 echo Completed Successfully   \ngoto :EOF  \n  \n:NoArg  \necho Missing argument  \ngoto :EOF  \n  \n: Overflow  \necho Arithmetic overflow  \ngoto :EOF  \n  \n:BadArg  \necho Invalid argument  \ngoto :EOF  \n  \n```  \n  \n The following shows some sample output produced by invoking the batch file.  \n  \n```Output  \n  \n>getdouble 123>echo offResult: 246Completed Successfully>getdouble 5912323109093>echo offArithmetic overflow>getdouble>echo offMissing argument>getdouble \"a string\">echo offInvalid argument  \n  \n```  \n  \n Note that code for Double.exe is identical in function to the following example, except that the former defines an entry point named `Main` that has no return value, whereas this example defines an entry point named `Main` that returns an integer.  \n  \n [!code-cs[System.Environment.ExitCode#2](~/add/codesnippet/csharp/p-system.environment.exi_2.cs)]\n [!code-vb[System.Environment.ExitCode#2](~/add/codesnippet/visualbasic/p-system.environment.exi_2.vb)]"
  syntax:
    content: public static int ExitCode { get; set; }
    return:
      type: System.Int32
      description: A 32-bit signed integer containing the exit code. The default value is 0 (zero), which indicates that the process completed successfully.
  overload: System.Environment.ExitCode*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.ExpandEnvironmentVariables(System.String)
  id: ExpandEnvironmentVariables(System.String)
  parent: System.Environment
  langs:
  - csharp
  name: ExpandEnvironmentVariables(String)
  nameWithType: Environment.ExpandEnvironmentVariables(String)
  fullName: System.Environment.ExpandEnvironmentVariables(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Replaces the name of each environment variable embedded in the specified string with the string equivalent of the value of the variable, then returns the resulting string.
  remarks: "COM interop is used to retrieve the environment variables from the operating system. If the environment variables cannot be retrieved due to a COM error, the HRESULT that explains the cause of the failure is used to generate one of several possible exceptions; that is, the exception depends on the HRESULT. For more information about how the HRESULT is processed, see the Remarks section of the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A?displayProperty=fullName> method.  \n  \n Replacement only occurs for environment variables that are set. For example, suppose `name` is \"MyENV = %MyENV%\". If the environment variable, MyENV, is set to 42, this method returns \"MyENV = 42\". If MyENV is not set, no change occurs; this method returns \"MyENV = %MyENV%\".  \n  \n The size of the return value is limited to 32K."
  example:
  - "The following example shows how to obtain the system drive and system root variables.  \n  \n [!code-cs[Environment.ExpandEnvironmentVariables#1](~/add/codesnippet/csharp/m-system.environment.exp_1.cs)]\n [!code-cpp[Environment.ExpandEnvironmentVariables#1](~/add/codesnippet/cpp/m-system.environment.exp_1.cpp)]\n [!code-vb[Environment.ExpandEnvironmentVariables#1](~/add/codesnippet/visualbasic/m-system.environment.exp_1.vb)]"
  syntax:
    content: public static string ExpandEnvironmentVariables (string name);
    parameters:
    - id: name
      type: System.String
      description: A string containing the names of zero or more environment variables. Each environment variable is quoted with the percent sign character (%).
    return:
      type: System.String
      description: A string with each environment variable replaced by its value.
  overload: System.Environment.ExpandEnvironmentVariables*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.FailFast(System.String)
  id: FailFast(System.String)
  parent: System.Environment
  langs:
  - csharp
  name: FailFast(String)
  nameWithType: Environment.FailFast(String)
  fullName: System.Environment.FailFast(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message in error reporting to Microsoft.
  remarks: "This method terminates a process without running any active `try`/`finally` blocks or finalizers.  \n  \n The FailFast method writes the `message` string to the Windows Application event log, creates a dump of your application, and then terminates the current process. The `message` string is also included in error reporting to Microsoft.  \n  \n Use the FailFast method instead of the <xref:System.Environment.Exit%2A> method to terminate your application if the state of your application is damaged beyond repair, and executing your application's `try`/`finally` blocks and finalizers will corrupt program resources.  \n  \n Information is reported to Microsoft by using Windows Error Reporting. For more information, see [Windows Error Reporting: Getting Started](http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx)."
  example:
  - "The following example writes a log entry to the Windows Application event log and terminates the current process.  \n  \n [!code-cs[environment.FailFast#1](~/add/codesnippet/csharp/m-system.environment.fai_1.cs)]\n [!code-vb[environment.FailFast#1](~/add/codesnippet/visualbasic/m-system.environment.fai_1.vb)]"
  syntax:
    content: public static void FailFast (string message);
    parameters:
    - id: message
      type: System.String
      description: A message that explains why the process was terminated, or <xref uid="langword_csharp_null" name="null" href=""></xref> if no explanation is provided.
  overload: System.Environment.FailFast*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.FailFast(System.String,System.Exception)
  id: FailFast(System.String,System.Exception)
  parent: System.Environment
  langs:
  - csharp
  name: FailFast(String,Exception)
  nameWithType: Environment.FailFast(String,Exception)
  fullName: System.Environment.FailFast(String,Exception)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message and exception information in error reporting to Microsoft.
  remarks: "This method terminates the process without running any active `try`/`finally` blocks or finalizers.  \n  \n The FailFast method writes the `message` string to the Windows Application event log, creates a dump of your application, and then terminates the current process.  \n  \n Information is reported to Microsoft by using Windows Error Reporting. For more information, see [Windows Error Reporting: Getting Started](http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx). Error reporting to Microsoft includes `message` and `exception` information, which provides details used to classify the error. Although `exception` is not handled because the process is terminated, the contextual information that raised the exception is still obtained.  \n  \n If `exception` is `null`, or if `exception` is not thrown, this method operates the same as the <xref:System.Environment.FailFast%28System.String%29> method overload.  \n  \n Use the FailFast method instead of the <xref:System.Environment.Exit%2A> method to terminate your application if the state of your application is damaged beyond repair, and executing your application's `try`/`finally` blocks and finalizers will corrupt program resources."
  syntax:
    content: public static void FailFast (string message, Exception exception);
    parameters:
    - id: message
      type: System.String
      description: A message that explains why the process was terminated, or <xref uid="langword_csharp_null" name="null" href=""></xref> if no explanation is provided.
    - id: exception
      type: System.Exception
      description: An exception that represents the error that caused the termination. This is typically the exception in a <xref uid="langword_csharp_catch" name="catch" href=""></xref> block.
  overload: System.Environment.FailFast*
  exceptions: []
  platform:
  - netframework-4.0
- uid: System.Environment.GetCommandLineArgs
  id: GetCommandLineArgs
  parent: System.Environment
  langs:
  - csharp
  name: GetCommandLineArgs()
  nameWithType: Environment.GetCommandLineArgs()
  fullName: System.Environment.GetCommandLineArgs()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns a string array containing the command-line arguments for the current process.
  remarks: "The first element in the array contains the file name of the executing program. If the file name is not available, the first element is equal to <xref:System.String?displayProperty=fullName>. The remaining elements contain any additional tokens entered on the command line.  \n  \n The program file name can, but is not required to, include path information.  \n  \n Command line arguments are delimited by spaces. You can use double quotation marks (\") to include spaces within an argument. The single quotation mark ('), however, does not provide this functionality.  \n  \n If a double quotation mark follows two or an even number of backslashes, each proceeding backslash pair is replaced with one backslash and the double quotation mark is removed. If a double quotation mark follows an odd number of backslashes, including just one, each preceding pair is replaced with one backslash and the remaining backslash is removed; however, in this case the double quotation mark is not removed.  \n  \n The following table shows how command line arguments can be delimited, and assumes `MyApp` as the current executing application.  \n  \n|Input at the command line|Resulting command line arguments|  \n|-------------------------------|--------------------------------------|  \n|`MyApp alpha beta`|`MyApp, alpha, beta`|  \n|`MyApp \"alpha with spaces\" \"beta with spaces\"`|`MyApp, alpha with spaces, beta with spaces`|  \n|`MyApp 'alpha with spaces' beta`|`MyApp, 'alpha, with, spaces', beta`|  \n|`MyApp \\\\\\alpha \\\\\\\\\"beta`|`MyApp, \\\\\\alpha, \\\\beta`|  \n|`MyApp \\\\\\\\\\\"alpha \\\"beta`|`MyApp, \\\\\"alpha, \"beta`|  \n  \n To obtain the command line as a single string, use the <xref:System.Environment.CommandLine%2A> property."
  example:
  - "The following example displays the application's command line arguments.  \n  \n [!code-cs[Environment.GetCommandLineArgs#1](~/add/codesnippet/csharp/m-system.environment.get_4_1.cs)]\n [!code-cpp[Environment.GetCommandLineArgs#1](~/add/codesnippet/cpp/m-system.environment.get_4_1.cpp)]\n [!code-vb[Environment.GetCommandLineArgs#1](~/add/codesnippet/visualbasic/m-system.environment.get_4_1.vb)]"
  syntax:
    content: public static string[] GetCommandLineArgs ();
    parameters: []
    return:
      type: System.String[]
      description: An array of string where each element contains a command-line argument. The first element is the executable file name, and the following zero or more elements contain the remaining command-line arguments.
  overload: System.Environment.GetCommandLineArgs*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The system does not support command-line arguments.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.GetEnvironmentVariable(System.String)
  id: GetEnvironmentVariable(System.String)
  parent: System.Environment
  langs:
  - csharp
  name: GetEnvironmentVariable(String)
  nameWithType: Environment.GetEnvironmentVariable(String)
  fullName: System.Environment.GetEnvironmentVariable(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Retrieves the value of an environment variable from the current process.
  remarks: "The GetEnvironmentVariable method retrieves an environment variable from the environment block of the current process only. It is equivalent to calling the <xref:System.Environment.GetEnvironmentVariable%28System.String%2CSystem.EnvironmentVariableTarget%29> method with a `target` value of <xref:System.EnvironmentVariableTarget?displayProperty=fullName>. The environment block of the current process includes the following environment variables:  \n  \n-   All per-machine environment variables that are defined at the time the process is created, along with their values.  \n  \n-   All per-user environment variables that are defined at the time the process is created, along with their values.  \n  \n-   Any variables added to the process block while the process is running by calling either the <xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%29> method or the <xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29> method with a `target` value of <xref:System.EnvironmentVariableTarget?displayProperty=fullName>.  \n  \n If environment variables are created after the process has started, you can use this method to retrieve only those variables that were created by calling the <xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%29> method or the <xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29> method with a `target` value of .<xref:System.EnvironmentVariableTarget?displayProperty=fullName>.  \n  \n To retrieve all environment variables along with their values, call the <xref:System.Environment.GetEnvironmentVariables%2A> method.  \n  \n Environment variable names are not case-sensitive."
  example:
  - "The following example uses the GetEnvironmentVariable method to retrieve the `windir` environment variable, which contains the path of the Windows directory.  \n  \n [!code-cpp[System.Environment#4](~/add/codesnippet/cpp/m-system.environment.get_3_1.cpp)]\n [!code-cs[System.Environment#4](~/add/codesnippet/csharp/m-system.environment.get_3_1.cs)]\n [!code-vb[System.Environment#4](~/add/codesnippet/visualbasic/m-system.environment.get_3_1.vb)]  \n  \n The following example attempts to retrieve the value of an environment variable named `Test1` from the process environment block. If the variable doesn't exist, the example creates its and retrieves its value. The example displays the value of the variable. If the example created the variable, it also calls the <xref:System.Environment.GetEnvironmentVariables%28System.EnvironmentVariableTarget%29> method with each member of the <xref:System.EnvironmentVariableTarget> enumeration to establish that the variable can be retrieved only from the current process environment block. Finally, if the example created the variable, it deletes it.  \n  \n [!code-vb[System.Environment.GetEnvironmentVariable#2](~/add/codesnippet/visualbasic/m-system.environment.get_3_2.vb)]\n [!code-cs[System.Environment.GetEnvironmentVariable#2](~/add/codesnippet/csharp/m-system.environment.get_3_2.cs)]"
  syntax:
    content: public static string GetEnvironmentVariable (string variable);
    parameters:
    - id: variable
      type: System.String
      description: The name of the environment variable.
    return:
      type: System.String
      description: The value of the environment variable specified by <code>variable</code>, or <xref uid="langword_csharp_null" name="null" href=""></xref> if the environment variable is not found.
  overload: System.Environment.GetEnvironmentVariable*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>variable</code> is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required permission to perform this operation.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)
  id: GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)
  parent: System.Environment
  langs:
  - csharp
  name: GetEnvironmentVariable(String,EnvironmentVariableTarget)
  nameWithType: Environment.GetEnvironmentVariable(String,EnvironmentVariableTarget)
  fullName: System.Environment.GetEnvironmentVariable(String,EnvironmentVariableTarget)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Retrieves the value of an environment variable from the current process or from the Windows operating system registry key for the current user or local machine.
  remarks: "The `target` parameter specifies whether the environment variable is retrieved from the current process or from the Windows operating system registry key for the current user or local machine. All per-user and per-machine environment variables are automatically copied into the environment block of the current process. However, environment variables added only to the environment block of the current process  persist only for the duration of the process.  \n  \n To retrieve all environment variables along with their values, call the <xref:System.Environment.GetEnvironmentVariables%2A> method.  \n  \n Environment variable names are not case-sensitive."
  example:
  - "The following example creates environment variables for the Process, User, and Machine targets, checks whether the operating system registry contains the User and Machine environment variables, then deletes the environment variables.  \n  \n [!code-cpp[environment.getsetenvar#1](~/add/codesnippet/cpp/a89bfadd-1ef1-401e-b035-_1.cpp)]\n [!code-vb[environment.getsetenvar#1](~/add/codesnippet/visualbasic/a89bfadd-1ef1-401e-b035-_1.vb)]\n [!code-cs[environment.getsetenvar#1](~/add/codesnippet/csharp/a89bfadd-1ef1-401e-b035-_1.cs)]"
  syntax:
    content: public static string GetEnvironmentVariable (string variable, EnvironmentVariableTarget target);
    parameters:
    - id: variable
      type: System.String
      description: The name of an environment variable.
    - id: target
      type: System.EnvironmentVariableTarget
      description: One of the <xref href="System.EnvironmentVariableTarget"></xref> values.
    return:
      type: System.String
      description: The value of the environment variable specified by the <code>variable</code> and <code>target</code> parameters, or <xref uid="langword_csharp_null" name="null" href=""></xref> if the environment variable is not found.
  overload: System.Environment.GetEnvironmentVariable*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>variable</code> is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>target</code> is not a valid <xref href="System.EnvironmentVariableTarget"></xref> value.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required permission to perform this operation.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.GetEnvironmentVariables
  id: GetEnvironmentVariables
  parent: System.Environment
  langs:
  - csharp
  name: GetEnvironmentVariables()
  nameWithType: Environment.GetEnvironmentVariables()
  fullName: System.Environment.GetEnvironmentVariables()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Retrieves all environment variable names and their values from the current process.
  remarks: The names and values for the environment variables are stored as key-value pairs in the returned <xref:System.Collections.IDictionary>.
  example:
  - "The following example demonstrates the GetEnvironmentVariables method.  \n  \n [!code-cs[Environment.GetEnvironmentVariables#1](~/add/codesnippet/csharp/m-system.environment.get_0_1.cs)]\n [!code-cpp[Environment.GetEnvironmentVariables#1](~/add/codesnippet/cpp/m-system.environment.get_0_1.cpp)]\n [!code-vb[Environment.GetEnvironmentVariables#1](~/add/codesnippet/visualbasic/m-system.environment.get_0_1.vb)]"
  syntax:
    content: public static System.Collections.IDictionary GetEnvironmentVariables ();
    parameters: []
    return:
      type: System.Collections.IDictionary
      description: A dictionary that contains all environment variable names and their values; otherwise, an empty dictionary if no environment variables are found.
  overload: System.Environment.GetEnvironmentVariables*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required permission to perform this operation.
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: The buffer is out of memory.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)
  id: GetEnvironmentVariables(System.EnvironmentVariableTarget)
  parent: System.Environment
  langs:
  - csharp
  name: GetEnvironmentVariables(EnvironmentVariableTarget)
  nameWithType: Environment.GetEnvironmentVariables(EnvironmentVariableTarget)
  fullName: System.Environment.GetEnvironmentVariables(EnvironmentVariableTarget)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Retrieves all environment variable names and their values from the current process, or from the Windows operating system registry key for the current user or local machine.
  remarks: "The `target` parameter specifies whether the source is the current process, the registry key for the current user, or the registry key for the local machine.  \n  \n The names and values of the environment variables are stored as key/value pairs in the returned <xref:System.Collections.IDictionary> object."
  example:
  - "The following example creates environment variables for the Process, User, and Machine targets, checks whether the operating system registry contains the User and Machine environment variables, then deletes the environment variables.  \n  \n [!code-cpp[environment.getsetenvar#1](~/add/codesnippet/cpp/m-system.environment.get_2_1.cpp)]\n [!code-vb[environment.getsetenvar#1](~/add/codesnippet/visualbasic/m-system.environment.get_2_1.vb)]\n [!code-cs[environment.getsetenvar#1](~/add/codesnippet/csharp/m-system.environment.get_2_1.cs)]"
  syntax:
    content: public static System.Collections.IDictionary GetEnvironmentVariables (EnvironmentVariableTarget target);
    parameters:
    - id: target
      type: System.EnvironmentVariableTarget
      description: One of the <xref href="System.EnvironmentVariableTarget"></xref> values.
    return:
      type: System.Collections.IDictionary
      description: A dictionary that contains all environment variable names and their values from the source specified by the <code>target</code> parameter; otherwise, an empty dictionary if no environment variables are found.
  overload: System.Environment.GetEnvironmentVariables*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required permission to perform this operation for the specified value of <code>target</code>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>target</code> contains an illegal value.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.GetFolderPath(System.Environment.SpecialFolder)
  id: GetFolderPath(System.Environment.SpecialFolder)
  parent: System.Environment
  langs:
  - csharp
  name: GetFolderPath(Environment+SpecialFolder)
  nameWithType: Environment.GetFolderPath(Environment+SpecialFolder)
  fullName: System.Environment.GetFolderPath(Environment+SpecialFolder)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  syntax:
    content: public static string GetFolderPath (Environment.SpecialFolder folder);
    parameters:
    - id: folder
      type: System.Environment.SpecialFolder
      description: To be added.
    return:
      type: System.String
      description: To be added.
  overload: System.Environment.GetFolderPath*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)
  id: GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)
  parent: System.Environment
  langs:
  - csharp
  name: GetFolderPath(Environment+SpecialFolder,Environment+SpecialFolderOption)
  nameWithType: Environment.GetFolderPath(Environment+SpecialFolder,Environment+SpecialFolderOption)
  fullName: System.Environment.GetFolderPath(Environment+SpecialFolder,Environment+SpecialFolderOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  syntax:
    content: public static string GetFolderPath (Environment.SpecialFolder folder, Environment.SpecialFolderOption option);
    parameters:
    - id: folder
      type: System.Environment.SpecialFolder
      description: To be added.
    - id: option
      type: System.Environment.SpecialFolderOption
      description: To be added.
    return:
      type: System.String
      description: To be added.
  overload: System.Environment.GetFolderPath*
  exceptions: []
  platform:
  - netframework-4.0
- uid: System.Environment.GetLogicalDrives
  id: GetLogicalDrives
  parent: System.Environment
  langs:
  - csharp
  name: GetLogicalDrives()
  nameWithType: Environment.GetLogicalDrives()
  fullName: System.Environment.GetLogicalDrives()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Returns an array of string containing the names of the logical drives on the current computer.
  remarks: ''
  example:
  - "The following example shows how to display the logical drives of the current computer using the GetLogicalDrives method.  \n  \n [!code-cpp[Environment.GetLogicalDrives#1](~/add/codesnippet/cpp/m-system.environment.get_1_1.cpp)]\n [!code-vb[Environment.GetLogicalDrives#1](~/add/codesnippet/visualbasic/m-system.environment.get_1_1.vb)]\n [!code-cs[Environment.GetLogicalDrives#1](~/add/codesnippet/csharp/m-system.environment.get_1_1.cs)]"
  syntax:
    content: public static string[] GetLogicalDrives ();
    parameters: []
    return:
      type: System.String[]
      description: An array of strings where each element contains the name of a logical drive. For example, if the computer's hard drive is the first logical drive, the first element returned is "C:\\".
  overload: System.Environment.GetLogicalDrives*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: An I/O error occurs.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required permissions.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.HasShutdownStarted
  id: HasShutdownStarted
  parent: System.Environment
  langs:
  - csharp
  name: HasShutdownStarted
  nameWithType: Environment.HasShutdownStarted
  fullName: System.Environment.HasShutdownStarted
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value that indicates whether the current application domain is being unloaded or the common language runtime (CLR) is shutting down.
  remarks: "When the CLR unloads an application domain, it runs the finalizers on all objects that have a finalizer method in that application domain. When the CLR shuts down, it starts the finalizer thread on all objects that have a finalizer method. The HasShutdownStarted property returns `true` only after the finalizer thread has been started. When the property returns `true`, you can determine whether an application domain is being unloaded or the CLR itself is shutting down by calling the <xref:System.AppDomain.IsFinalizingForUnload%2A?displayProperty=fullName> method. This method returns `true` if finalizers are called because the application domain is unloading or `false` if the CLR is shutting down.  \n  \n The HasShutdownStarted property returns `false` if the finalizer thread has not been started.  \n  \n By using this property, you can determine whether to access static variables in your finalization code. If either an application domain or the CLR is shutting down, you cannot reliably access any object that has a finalization method and that is referenced by a static field. This is because these objects may have already been finalized."
  syntax:
    content: public static bool HasShutdownStarted { get; }
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if the current application domain is being unloaded or the CLR is shutting down; otherwise, <xref uid="langword_csharp_false." name="false." href=""></xref>
  overload: System.Environment.HasShutdownStarted*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.Is64BitOperatingSystem
  id: Is64BitOperatingSystem
  parent: System.Environment
  langs:
  - csharp
  name: Is64BitOperatingSystem
  nameWithType: Environment.Is64BitOperatingSystem
  fullName: System.Environment.Is64BitOperatingSystem
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether the current operating system is a 64-bit operating system.
  syntax:
    content: public static bool Is64BitOperatingSystem { get; }
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if the operating system is 64-bit; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Environment.Is64BitOperatingSystem*
  exceptions: []
  platform:
  - netframework-4.0
- uid: System.Environment.Is64BitProcess
  id: Is64BitProcess
  parent: System.Environment
  langs:
  - csharp
  name: Is64BitProcess
  nameWithType: Environment.Is64BitProcess
  fullName: System.Environment.Is64BitProcess
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Determines whether the current process is a 64-bit process.
  syntax:
    content: public static bool Is64BitProcess { get; }
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if the process is 64-bit; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Environment.Is64BitProcess*
  exceptions: []
  platform:
  - netframework-4.0
- uid: System.Environment.MachineName
  id: MachineName
  parent: System.Environment
  langs:
  - csharp
  name: MachineName
  nameWithType: Environment.MachineName
  fullName: System.Environment.MachineName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the NetBIOS name of this local computer.
  remarks: The name of this computer is established at system startup when the name is read from the registry. If this computer is a node in a cluster, the name of the node is returned.
  example:
  - "The following example displays the name of the computer that runs the code example. (The machine name is omitted from the example output for security reasons.)  \n  \n [!code-cpp[environment.machinename#1](~/add/codesnippet/cpp/p-system.environment.mac_1.cpp)]\n [!code-vb[environment.machinename#1](~/add/codesnippet/visualbasic/p-system.environment.mac_1.vb)]\n [!code-cs[environment.machinename#1](~/add/codesnippet/csharp/p-system.environment.mac_1.cs)]"
  syntax:
    content: public static string MachineName { get; }
    return:
      type: System.String
      description: A string containing the name of this computer.
  overload: System.Environment.MachineName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The name of this computer cannot be obtained.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.NewLine
  id: NewLine
  parent: System.Environment
  langs:
  - csharp
  name: NewLine
  nameWithType: Environment.NewLine
  fullName: System.Environment.NewLine
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the newline string defined for this environment.
  remarks: "The property value of NewLine is a constant customized specifically for the current platform and implementation of the .NET Framework. For more information about the escape characters in the property value, see [Character Escapes](~/add/includes/ajax-current-ext-md.md).  \n  \n The functionality provided by NewLine is often what is meant by the terms newline, line feed, line break, carriage return, CRLF, and end of line.  \n  \n NewLine can be used in conjunction with language-specific newline support such as the escape characters '\\r' and '\\n' in Microsoft C# and C/C++, or `vbCrLf` in Microsoft Visual Basic.  \n  \n NewLine is automatically appended to text processed by the <xref:System.Console.WriteLine%2A?displayProperty=fullName> and <xref:System.Text.StringBuilder.AppendLine%2A?displayProperty=fullName> methods."
  example:
  - "The following example displays three lines separated by newlines.  \n  \n [!code-cpp[environment.newline#1](~/add/codesnippet/cpp/p-system.environment.new_1.cpp)]\n [!code-cs[environment.newline#1](~/add/codesnippet/csharp/p-system.environment.new_1.cs)]\n [!code-vb[environment.newline#1](~/add/codesnippet/visualbasic/p-system.environment.new_1.vb)]"
  syntax:
    content: public static string NewLine { get; }
    return:
      type: System.String
      description: A string containing "\r\n" for non-Unix platforms, or a string containing "\n" for Unix platforms.
  overload: System.Environment.NewLine*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.OSVersion
  id: OSVersion
  parent: System.Environment
  langs:
  - csharp
  name: OSVersion
  nameWithType: Environment.OSVersion
  fullName: System.Environment.OSVersion
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets an <xref href="System.OperatingSystem"></xref> object that contains the current platform identifier and version number.
  remarks: "> [!IMPORTANT]\n>  Starting with Windows 8, the  OSVersion property returns the same major and minor version numbers for all Windows platforms. Therefore, we do not recommend that you retrieve the value of this property to determine the operating system version.  \n  \n Typically, the OSVersion property is used to ensure that an app is running on some base version of an operating system in which a particular feature was introduced. When this is the case, you should perform a version check by testing whether the current operating system version returned by the OSVersion property is the same as, or greater than, the base operating system version. For more information, see the <xref:System.Version> class topic.  \n  \n Through Windows 8, the OSVersion property returns the version reported by the Windows [GetVersionEx](http://msdn.microsoft.com/library/windows/desktop/ms724451\\(v=vs.85\\).aspx) function. For a list of Windows desktop operating system versions and their corresponding version numbers, see [Operating System Version](https://msdn.microsoft.com/library/windows/desktop/ms724832.aspx) in the Windows Dev Center.  \n  \n> [!NOTE]\n>  The OSVersion property reports the same version number (6.2.0.0) for both [!INCLUDE[win8](~/add/includes/win8-md.md)] and [!INCLUDE[win81](~/add/includes/win81-md.md)] and the same major and minor version number for Windows 10.  \n  \n In some cases, the OSVersion property may not return the operating system version that matches the version specified for the Windows Program Compatibility mode feature."
  example:
  - "The following example displays the platform identifier and version number of the computer that runs the code example.  \n  \n [!code-cs[environment.osversion#1](~/add/codesnippet/csharp/p-system.environment.osv_1.cs)]\n [!code-cpp[environment.osversion#1](~/add/codesnippet/cpp/p-system.environment.osv_1.cpp)]\n [!code-vb[environment.osversion#1](~/add/codesnippet/visualbasic/p-system.environment.osv_1.vb)]"
  syntax:
    content: public static OperatingSystem OSVersion { get; }
    return:
      type: System.OperatingSystem
      description: An object that contains the platform identifier and version number.
  overload: System.Environment.OSVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "This property was unable to obtain the system version.  \n  \n -or-  \n  \n The obtained platform identifier is not a member of <xref href=\"System.PlatformID\"></xref>"
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.ProcessorCount
  id: ProcessorCount
  parent: System.Environment
  langs:
  - csharp
  name: ProcessorCount
  nameWithType: Environment.ProcessorCount
  fullName: System.Environment.ProcessorCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the number of processors on the current machine.
  remarks: For more information about processor groups and logical processors, see [Processor Groups](http://msdn.microsoft.com/library/windows/desktop/dd405503.aspx).
  example:
  - "The following example demonstrates the ProcessorCount property.  \n  \n [!code-cpp[environment.processorcount#1](~/add/codesnippet/cpp/p-system.environment.pro_1.cpp)]\n [!code-cs[environment.processorcount#1](~/add/codesnippet/csharp/p-system.environment.pro_1.cs)]\n [!code-vb[environment.processorcount#1](~/add/codesnippet/visualbasic/p-system.environment.pro_1.vb)]"
  syntax:
    content: public static int ProcessorCount { get; }
    return:
      type: System.Int32
      description: The 32-bit signed integer that specifies the number of processors on the current machine. There is no default. If the current machine contains multiple processor groups, this property returns the number of logical processors that are available for use by the common language runtime (CLR).
  overload: System.Environment.ProcessorCount*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.SetEnvironmentVariable(System.String,System.String)
  id: SetEnvironmentVariable(System.String,System.String)
  parent: System.Environment
  langs:
  - csharp
  name: SetEnvironmentVariable(String,String)
  nameWithType: Environment.SetEnvironmentVariable(String,String)
  fullName: System.Environment.SetEnvironmentVariable(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates, modifies, or deletes an environment variable stored in the current process.
  remarks: "Calling this method is equivalent to calling the <xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29> overload with a value of <xref:System.EnvironmentVariableTarget?displayProperty=fullName> for the `target` argument.  \n  \n If the `value` argument is not empty (see the discussion of deleting an environment variable later in this section for the definition of an empty value) and the environment variable named by the `variable` parameter does not exist, the environment variable is created and assigned the contents of `value`. If it does exist, its value is modified. Because the environment variable is defined in the environment block of the current process only, it does not persist after the process has ended.  \n  \n If `variable` contains a non-initial hexadecimal zero character, the characters before the zero character are considered the environment variable name and all subsequent characters are ignored.  \n  \n If `value` contains a non-initial hexadecimal zero character, the characters before the zero character are assigned to the environment variable and all subsequent characters are ignored.  \n  \n If `value` is empty and the environment variable named by `variable` exists, the environment variable is deleted. If `variable` does not exist, no error occurs even though the operation cannot be performed. `value` is considered empty under any of the following conditions:  \n  \n-   It is `null`.  \n  \n-   It is <xref:System.String.Empty?displayProperty=fullName>.  \n  \n-   It consists of a single character whose value is U+0000."
  example:
  - "The following example tests whether an environment variable named `APPDOMAIN` exists in the current process. If it does not, it creates it and sets its value to \"True\". If the value of the `APPDOMAIN` environment variable is \"True\", it calls the `Message.Display` method in a new application domain. Otherwise, it executes the `Message.Display` method in the current application domain.  \n  \n [!code-cs[System.Environment.SetEnvironmentVariable#1](~/add/codesnippet/csharp/m-system.environment.set_1.cs)]\n [!code-vb[System.Environment.SetEnvironmentVariable#1](~/add/codesnippet/visualbasic/m-system.environment.set_1.vb)]  \n  \n If you run the example for the first time, the message \"Executing in domain Domain2\" displays to the console. If you set the environment variable from the command line by using the command:  \n  \n `Set AppDomain=False`  \n  \n the example displays the message \"Executing in domain *exeName*.exe\", where *exeName* is the name of the executable.  \n  \n The following example attempts to retrieve the value of an environment variable named `Test1` from the process environment block. If the variable doesn't exist, the example creates the variable and retrieves its value. The example displays the value of the variable. If the example created the variable, it also calls the <xref:System.Environment.GetEnvironmentVariables%28System.EnvironmentVariableTarget%29> method with each member of the <xref:System.EnvironmentVariableTarget> enumeration to establish that the variable can be retrieved only from the current process environment block. Finally, if the example created the variable, it deletes it.  \n  \n [!code-vb[System.Environment.GetEnvironmentVariable#2](~/add/codesnippet/visualbasic/m-system.environment.set_2.vb)]\n [!code-cs[System.Environment.GetEnvironmentVariable#2](~/add/codesnippet/csharp/m-system.environment.set_2.cs)]"
  syntax:
    content: public static void SetEnvironmentVariable (string variable, string value);
    parameters:
    - id: variable
      type: System.String
      description: The name of an environment variable.
    - id: value
      type: System.String
      description: A value to assign to `variable`.
  overload: System.Environment.SetEnvironmentVariable*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>variable</code> is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>variable</code> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign (\"=\").  \n  \n -or-  \n  \n The length of <code>variable</code> or <code>value</code> is greater than or equal to 32,767 characters.  \n  \n -or-  \n  \n An error occurred during the execution of this operation."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required permission to perform this operation.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)
  id: SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)
  parent: System.Environment
  langs:
  - csharp
  name: SetEnvironmentVariable(String,String,EnvironmentVariableTarget)
  nameWithType: Environment.SetEnvironmentVariable(String,String,EnvironmentVariableTarget)
  fullName: System.Environment.SetEnvironmentVariable(String,String,EnvironmentVariableTarget)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Creates, modifies, or deletes an environment variable stored in the current process or in the Windows operating system registry key reserved for the current user or local machine.
  remarks: "The SetEnvironmentVariable method lets you define an environment variable that is available to all processes that run on a machine (the <xref:System.EnvironmentVariableTarget?displayProperty=fullName> value), to all processes run by a user (the <xref:System.EnvironmentVariableTarget?displayProperty=fullName> value), or to the current process (the <xref:System.EnvironmentVariableTarget> value). Per-machine and per-user environment variables are copied into the environment block of the current process. However, environment variables that are unique to the current process environment block persist only until the process ends.  \n  \n If the `value` argument is not empty (see the discussion of deleting an environment variable later in this section for the definition of an empty value) and the environment variable named by the `variable` parameter does not exist, the environment variable is created and assigned the contents of `value`.  If it does exist, its value is modified.  \n  \n If `variable` contains a non-initial hexadecimal zero character, the characters before the zero character are considered the environment variable name and all subsequent characters are ignored.  \n  \n If `value` contains a non-initial hexadecimal zero character, the characters before the zero character are assigned to the environment variable and all subsequent characters are ignored.  \n  \n If `value` is empty and the environment variable named by `variable` exists, the environment variable is deleted. `value` is considered empty under any of the following conditions:  \n  \n-   It is `null`.  \n  \n-   It is <xref:System.String.Empty?displayProperty=fullName>.  \n  \n-   It consists of a single character whose value is U+0000.  \n  \n If `variable` does not exist, no error occurs although the operation cannot be performed. Be careful when `target` is <xref:System.EnvironmentVariableTarget>, because you can accidentally delete an environment variable that affects your entire local machine, not just the current process or user.  \n  \n If `target` is <xref:System.EnvironmentVariableTarget>, the environment variable is stored in the HKEY_CURRENT_USER\\Environment key of the local computer's registry. It is also copied to instances of File Explorer that are running as the current user. The environment variable is then inherited by any new processes that the user launches from File Explorer.  \n  \n Similarly, if `target` is <xref:System.EnvironmentVariableTarget?displayProperty=fullName>, the environment variable is stored in the HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Session Manager\\Environment key of the local computer's registry. It is also copied to all instances of File Explorer. The environment variable is then inherited by any new processes that are launched from File Explorer.  \n  \n If `target` is <xref:System.EnvironmentVariableTarget> or <xref:System.EnvironmentVariableTarget>, other applications are notified of the set operation by a Windows `WM_SETTINGCHANGE` message.  \n  \n If `target` is <xref:System.EnvironmentVariableTarget?displayProperty=fullName> or <xref:System.EnvironmentVariableTarget?displayProperty=fullName>, we recommend that the length of `value` be less than 2048 characters."
  example:
  - "The following example creates environment variables for the <xref:System.EnvironmentVariableTarget?displayProperty=fullName>, <xref:System.EnvironmentVariableTarget?displayProperty=fullName>, and <xref:System.EnvironmentVariableTarget> targets, checks whether the operating system registry contains the user and machine environment variables, then deletes the environment variables.  \n  \n [!code-cpp[environment.getsetenvar#1](~/add/codesnippet/cpp/fdb0bf2f-51a3-4696-9719-_1.cpp)]\n [!code-vb[environment.getsetenvar#1](~/add/codesnippet/visualbasic/fdb0bf2f-51a3-4696-9719-_1.vb)]\n [!code-cs[environment.getsetenvar#1](~/add/codesnippet/csharp/fdb0bf2f-51a3-4696-9719-_1.cs)]"
  syntax:
    content: public static void SetEnvironmentVariable (string variable, string value, EnvironmentVariableTarget target);
    parameters:
    - id: variable
      type: System.String
      description: The name of an environment variable.
    - id: value
      type: System.String
      description: A value to assign to `variable`.
    - id: target
      type: System.EnvironmentVariableTarget
      description: One of the enumeration values that specifies the location of the environment variable.
  overload: System.Environment.SetEnvironmentVariable*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>variable</code> is <xref uid="langword_csharp_null" name="null" href=""></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>variable</code> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign (\"=\").  \n  \n -or-  \n  \n The length of <code>variable</code> is greater than or equal to 32,767 characters.  \n  \n -or-  \n  \n <code>target</code> is not a member of the <xref href=\"System.EnvironmentVariableTarget\"></xref> enumeration.  \n  \n -or-  \n  \n <code>target</code> is <xref href=\"System.EnvironmentVariableTarget\"></xref> or <xref href=\"System.EnvironmentVariableTarget\"></xref>, and the length of <code>variable</code> is greater than or equal to 255.  \n  \n -or-  \n  \n <code>target</code> is <xref href=\"System.EnvironmentVariableTarget\"></xref> and the length of <code>value</code> is greater than or equal to 32,767 characters.  \n  \n -or-  \n  \n An error occurred during the execution of this operation."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required permission to perform this operation.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.StackTrace
  id: StackTrace
  parent: System.Environment
  langs:
  - csharp
  name: StackTrace
  nameWithType: Environment.StackTrace
  fullName: System.Environment.StackTrace
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets current stack trace information.
  remarks: "The StackTrace property lists method calls in reverse chronological order, that is, the most recent method call is described first, and one line of stack trace information is listed for each method call on the stack. However, the StackTrace property might not report as many method calls as expected due to code transformations that occur during optimization.  \n  \n> [!NOTE]\n>  For a hierarchical view of the stack trace information by class, use the <xref:System.Diagnostics.StackTrace> class.  \n  \n The StackTrace property formats the stack trace information for each method call as follows:  \n  \n \"at `FullClassName`.`MethodName`(`MethodParams`) in `FileName` :line `LineNumber` \"  \n  \n The literal \"at\" is preceded by three spaces, and the entire substring starting with \"in\" is omitted if debug symbols are not available. The placeholders, `FullClassName`, `MethodName`, `MethodParams`, `FileName`, and `LineNumber`, are replaced by actual values, and are defined as follows:  \n  \n FullClassName  \n The full name of the class, including the namespace.  \n  \n `MethodName`  \n The name of the method.  \n  \n `MethodParams`  \n The list of parameter type/name pairs. Each pair is separated by a comma (\",\"). This information is omitted if `MethodName` takes no parameters.  \n  \n `FileName`  \n The name of the source file where the `MethodName` method is declared. This information is omitted if debug symbols are not available.  \n  \n `LineNumber`  \n The number of the line in `FileName` that contains the source code from `MethodName` for the instruction that is on the call stack. This information is omitted if debug symbols are not available.  \n  \n The <xref:System.Environment.NewLine%2A?displayProperty=fullName> string terminates each line of the stack trace."
  example:
  - "The following example demonstrates the StackTrace property.  \n  \n [!code-vb[environment.stacktrace#1](~/add/codesnippet/visualbasic/p-system.environment.sta_1.vb)]\n [!code-cpp[environment.stacktrace#1](~/add/codesnippet/cpp/p-system.environment.sta_1.cpp)]\n [!code-cs[environment.stacktrace#1](~/add/codesnippet/csharp/p-system.environment.sta_1.cs)]"
  syntax:
    content: public static string StackTrace { get; }
    return:
      type: System.String
      description: A string containing stack trace information. This value can be <xref href="System.String"></xref>.
  overload: System.Environment.StackTrace*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.SystemDirectory
  id: SystemDirectory
  parent: System.Environment
  langs:
  - csharp
  name: SystemDirectory
  nameWithType: Environment.SystemDirectory
  fullName: System.Environment.SystemDirectory
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the fully qualified path of the system directory.
  remarks: An example of the value returned is the string "C:\WinNT\System32".
  example:
  - "The following example displays the system directory of the computer that runs the code example. (The system directory is omitted from the example output for security reasons.)  \n  \n [!code-cs[environment.systemdirectory#1](~/add/codesnippet/csharp/p-system.environment.sys_1.cs)]\n [!code-vb[environment.systemdirectory#1](~/add/codesnippet/visualbasic/p-system.environment.sys_1.vb)]\n [!code-cpp[environment.systemdirectory#1](~/add/codesnippet/cpp/p-system.environment.sys_1.cpp)]"
  syntax:
    content: public static string SystemDirectory { get; }
    return:
      type: System.String
      description: A string containing a directory path.
  overload: System.Environment.SystemDirectory*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.SystemPageSize
  id: SystemPageSize
  parent: System.Environment
  langs:
  - csharp
  name: SystemPageSize
  nameWithType: Environment.SystemPageSize
  fullName: System.Environment.SystemPageSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the number of bytes in the operating system's memory page.
  remarks: "This information can be useful when determining whether to use the <xref:System.IO.MemoryMappedFiles.MemoryMappedFileOptions?displayProperty=fullName> option when you work with memory-mapped files.  \n  \n In Windows, this value is the `dwPageSize` member in the `SYSTEM_INFO` structure."
  syntax:
    content: public static int SystemPageSize { get; }
    return:
      type: System.Int32
      description: The number of bytes in the system memory page.
  overload: System.Environment.SystemPageSize*
  exceptions: []
  platform:
  - netframework-4.0
- uid: System.Environment.TickCount
  id: TickCount
  parent: System.Environment
  langs:
  - csharp
  name: TickCount
  nameWithType: Environment.TickCount
  fullName: System.Environment.TickCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the number of milliseconds elapsed since the system started.
  remarks: "The value of this property is derived from the system timer and is stored as a 32-bit signed integer. Note that, because it is derived from the system timer, the resolution of the TickCount property is limited to the resolution of the system timer, which is typically in the range of 10 to 16 milliseconds.  \n  \n> [!IMPORTANT]\n>  Because the value of the TickCount property value is a 32-bit signed integer, if the system runs continuously, TickCount will increment from zero to <xref:System.Int32?displayProperty=fullName> for approximately 24.9 days, then jump to <xref:System.Int32?displayProperty=fullName>, which is a negative number, then increment back to zero during the next 24.9 days. You can work around this issue by calling the Windows [GetTickCount](https://msdn.microsoft.com/library/windows/desktop/ms724408.aspx) function, which resets to zero after approximately 49.7 days, or by calling the [GetTickCount64](https://msdn.microsoft.com/library/windows/desktop/ms724411.aspx) function.  \n  \n TickCount is different from the <xref:System.DateTime.Ticks%2A?displayProperty=fullName> property, which is the number of 100-nanosecond intervals that have elapsed since 1/1/0001, 12:00am.  \n  \n Use the <xref:System.DateTime.Now%2A?displayProperty=fullName> property to obtain the current local date and time on this computer."
  example:
  - "The following example demonstrates how to retrieve the positive range of values returned by the TickCount property. The TickCount property cycles between <xref:System.Int32.MinValue?displayProperty=fullName>, which is a negative number, and <xref:System.Int32.MaxValue?displayProperty=fullName> once every 49.8 days. This code sample removes the sign bit to yield a nonnegative number that cycles between zero and <xref:System.Int32.MaxValue> once every 24.9 days.  \n  \n [!code-cpp[environment.tickcount#1](~/add/codesnippet/cpp/p-system.environment.tic_1.cpp)]\n [!code-vb[environment.tickcount#1](~/add/codesnippet/visualbasic/p-system.environment.tic_1.vb)]\n [!code-cs[environment.tickcount#1](~/add/codesnippet/csharp/p-system.environment.tic_1.cs)]"
  syntax:
    content: public static int TickCount { get; }
    return:
      type: System.Int32
      description: A 32-bit signed integer containing the amount of time in milliseconds that has passed since the last time the computer was started.
  overload: System.Environment.TickCount*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.UserDomainName
  id: UserDomainName
  parent: System.Environment
  langs:
  - csharp
  name: UserDomainName
  nameWithType: Environment.UserDomainName
  fullName: System.Environment.UserDomainName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the network domain name associated with the current user.
  remarks: "The domain account credentials for a user are formatted as the user's domain name, the '\\\\' character, and user name. Use the UserDomainName property to obtain the user's domain name without the user name, and the <xref:System.Environment.UserName%2A> property to obtain the user name without the domain name.  For example, if a user's domain name and user name are CORPORATENETWORK\\john, the UserDomainName property returns \"CORPORATENETWORK\".  \n  \n The UserDomainName property first attempts to get the domain name component of the Windows account name for the current user. If that attempt fails, this property attempts to get the domain name associated with the user name provided by the <xref:System.Environment.UserName%2A> property. If that attempt fails because the host computer is not joined to a domain, then the host computer name is returned."
  syntax:
    content: public static string UserDomainName { get; }
    return:
      type: System.String
      description: The network domain name associated with the current user.
  overload: System.Environment.UserDomainName*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: The operating system does not support retrieving the network domain name.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The network domain name cannot be retrieved.
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.UserInteractive
  id: UserInteractive
  parent: System.Environment
  langs:
  - csharp
  name: UserInteractive
  nameWithType: Environment.UserInteractive
  fullName: System.Environment.UserInteractive
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a value indicating whether the current process is running in user interactive mode.
  remarks: The UserInteractive property reports `false` for a Windows process or a service like IIS that runs without a user interface. If this property is `false`, do not display modal dialogs or message boxes because there is no graphical user interface for the user to interact with.
  example:
  - "The following example displays whether the current process is running in user interactive mode.  \n  \n [!code-cpp[Environment.UserInteractive#1](~/add/codesnippet/cpp/p-system.environment.use_0_1.cpp)]\n [!code-vb[Environment.UserInteractive#1](~/add/codesnippet/visualbasic/p-system.environment.use_0_1.vb)]\n [!code-cs[Environment.UserInteractive#1](~/add/codesnippet/csharp/p-system.environment.use_0_1.cs)]"
  syntax:
    content: public static bool UserInteractive { get; }
    return:
      type: System.Boolean
      description: <xref uid="langword_csharp_true" name="true" href=""></xref> if the current process is running in user interactive mode; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>.
  overload: System.Environment.UserInteractive*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.UserName
  id: UserName
  parent: System.Environment
  langs:
  - csharp
  name: UserName
  nameWithType: Environment.UserName
  fullName: System.Environment.UserName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the user name of the person who is currently logged on to the Windows operating system.
  remarks: "You can use the UserName property to identify the user on the current thread, to the system and application for security or access purposes. It can also be used to customize a particular application for each user.  \n  \n The UserName property wraps a call to the Windows [GetUserName](http://msdn.microsoft.com/library/windows/desktop/ms724432.aspx) function. The domain account credentials for a user are formatted as the user's domain name, the '\\\\' character, and user name. Use the <xref:System.Environment.UserDomainName%2A> property to obtain the user's domain name and the UserName property to obtain the user name.  \n  \n If an ASP.NET application runs in a development environment, the UserName property returns the name of the current user. In a published ASP.NET application, this property returns the name of the application pool account (such as Default AppPool)."
  example:
  - "The following example displays the user name of the person who started the current thread.  \n  \n [!code-cpp[Environment.UserName#1](~/add/codesnippet/cpp/p-system.environment.use_1_1.cpp)]\n [!code-cs[Environment.UserName#1](~/add/codesnippet/csharp/p-system.environment.use_1_1.cs)]\n [!code-vb[Environment.UserName#1](~/add/codesnippet/visualbasic/p-system.environment.use_1_1.vb)]"
  syntax:
    content: public static string UserName { get; }
    return:
      type: System.String
      description: The user name of the person who is logged on to Windows.
  overload: System.Environment.UserName*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.Version
  id: Version
  parent: System.Environment
  langs:
  - csharp
  name: Version
  nameWithType: Environment.Version
  fullName: System.Environment.Version
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets a <xref href="System.Version"></xref> object that describes the major, minor, build, and revision numbers of the common language runtime.
  remarks: "For the .NET Framework Versions 4, 4.5, 4.5.1, and 4.5.2, the Version property returns a <xref:System.Version> object whose string representation has the form `4.0.30319.xxxxx`. For the [!INCLUDE[net_v46](~/add/includes/net-v46-md.md)], it has the form `4.0.30319.42000`.  \n  \n> [!WARNING]\n>  For the [!INCLUDE[net_v45](~/add/includes/net-v45-md.md)] and later, we do not recommend using the Version property to detect the version of the runtime; instead, you can determine the version of the common language runtime by querying the registry. For more information, see [How to: Determine Which .NET Framework Versions Are Installed](~/add/includes/ajax-current-ext-md.md).  \n  \n For more information about the version of the common language runtime that is installed with each version of the .NET Framework, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example displays the version of the common language runtime. (The version is omitted from the example output for security reasons.)  \n  \n [!code-cs[Environment.Version#1](~/add/codesnippet/csharp/p-system.environment.ver_1.cs)]\n [!code-cpp[Environment.Version#1](~/add/codesnippet/cpp/p-system.environment.ver_1.cpp)]\n [!code-vb[Environment.Version#1](~/add/codesnippet/visualbasic/p-system.environment.ver_1.vb)]"
  syntax:
    content: public static Version Version { get; }
    return:
      type: System.Version
      description: An object that displays the version of the common language runtime.
  overload: System.Environment.Version*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
- uid: System.Environment.WorkingSet
  id: WorkingSet
  parent: System.Environment
  langs:
  - csharp
  name: WorkingSet
  nameWithType: Environment.WorkingSet
  fullName: System.Environment.WorkingSet
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: Gets the amount of physical memory mapped to the process context.
  remarks: ''
  example:
  - "The following example displays the size of the working set of the computer that runs the code example.  \n  \n [!code-cpp[Environment.WorkingSet#1](~/add/codesnippet/cpp/p-system.environment.wor_1.cpp)]\n [!code-vb[Environment.WorkingSet#1](~/add/codesnippet/visualbasic/p-system.environment.wor_1.vb)]\n [!code-cs[Environment.WorkingSet#1](~/add/codesnippet/csharp/p-system.environment.wor_1.cs)]"
  syntax:
    content: public static long WorkingSet { get; }
    return:
      type: System.Int64
      description: A 64-bit signed integer containing the number of bytes of physical memory mapped to the process context.
  overload: System.Environment.WorkingSet*
  exceptions: []
  platform:
  - netframework-2.0
  - netframework-3.0
  - netframework-3.5
  - netframework-4.0
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  nameWithType: IOException
  fullName: System.IO.IOException
- uid: System.IO.DirectoryNotFoundException
  parent: System.IO
  isExternal: false
  name: DirectoryNotFoundException
  nameWithType: DirectoryNotFoundException
  fullName: System.IO.DirectoryNotFoundException
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.OutOfMemoryException
  parent: System
  isExternal: false
  name: OutOfMemoryException
  nameWithType: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.PlatformNotSupportedException
  parent: System
  isExternal: false
  name: PlatformNotSupportedException
  nameWithType: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.Environment.CommandLine
  parent: System.Environment
  isExternal: false
  name: CommandLine
  nameWithType: Environment.CommandLine
  fullName: System.Environment.CommandLine
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Environment.CurrentDirectory
  parent: System.Environment
  isExternal: false
  name: CurrentDirectory
  nameWithType: Environment.CurrentDirectory
  fullName: System.Environment.CurrentDirectory
- uid: System.Environment.Exit(System.Int32)
  parent: System.Environment
  isExternal: false
  name: Exit(Int32)
  nameWithType: Environment.Exit(Int32)
  fullName: System.Environment.Exit(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Environment.ExitCode
  parent: System.Environment
  isExternal: false
  name: ExitCode
  nameWithType: Environment.ExitCode
  fullName: System.Environment.ExitCode
- uid: System.Environment.ExpandEnvironmentVariables(System.String)
  parent: System.Environment
  isExternal: false
  name: ExpandEnvironmentVariables(String)
  nameWithType: Environment.ExpandEnvironmentVariables(String)
  fullName: System.Environment.ExpandEnvironmentVariables(String)
- uid: System.Environment.FailFast(System.String)
  parent: System.Environment
  isExternal: false
  name: FailFast(String)
  nameWithType: Environment.FailFast(String)
  fullName: System.Environment.FailFast(String)
- uid: System.Environment.FailFast(System.String,System.Exception)
  parent: System.Environment
  isExternal: false
  name: FailFast(String,Exception)
  nameWithType: Environment.FailFast(String,Exception)
  fullName: System.Environment.FailFast(String,Exception)
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Environment.GetCommandLineArgs
  parent: System.Environment
  isExternal: false
  name: GetCommandLineArgs()
  nameWithType: Environment.GetCommandLineArgs()
  fullName: System.Environment.GetCommandLineArgs()
- uid: System.String[]
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Environment.GetEnvironmentVariable(System.String)
  parent: System.Environment
  isExternal: false
  name: GetEnvironmentVariable(String)
  nameWithType: Environment.GetEnvironmentVariable(String)
  fullName: System.Environment.GetEnvironmentVariable(String)
- uid: System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)
  parent: System.Environment
  isExternal: false
  name: GetEnvironmentVariable(String,EnvironmentVariableTarget)
  nameWithType: Environment.GetEnvironmentVariable(String,EnvironmentVariableTarget)
  fullName: System.Environment.GetEnvironmentVariable(String,EnvironmentVariableTarget)
- uid: System.EnvironmentVariableTarget
  parent: System
  isExternal: false
  name: EnvironmentVariableTarget
  nameWithType: EnvironmentVariableTarget
  fullName: System.EnvironmentVariableTarget
- uid: System.Environment.GetEnvironmentVariables
  parent: System.Environment
  isExternal: false
  name: GetEnvironmentVariables()
  nameWithType: Environment.GetEnvironmentVariables()
  fullName: System.Environment.GetEnvironmentVariables()
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)
  parent: System.Environment
  isExternal: false
  name: GetEnvironmentVariables(EnvironmentVariableTarget)
  nameWithType: Environment.GetEnvironmentVariables(EnvironmentVariableTarget)
  fullName: System.Environment.GetEnvironmentVariables(EnvironmentVariableTarget)
- uid: System.Environment.GetFolderPath(System.Environment.SpecialFolder)
  parent: System.Environment
  isExternal: false
  name: GetFolderPath(Environment+SpecialFolder)
  nameWithType: Environment.GetFolderPath(Environment+SpecialFolder)
  fullName: System.Environment.GetFolderPath(Environment+SpecialFolder)
- uid: System.Environment.SpecialFolder
  parent: System
  isExternal: false
  name: Environment+SpecialFolder
  nameWithType: Environment+SpecialFolder
  fullName: System.Environment+SpecialFolder
- uid: System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)
  parent: System.Environment
  isExternal: false
  name: GetFolderPath(Environment+SpecialFolder,Environment+SpecialFolderOption)
  nameWithType: Environment.GetFolderPath(Environment+SpecialFolder,Environment+SpecialFolderOption)
  fullName: System.Environment.GetFolderPath(Environment+SpecialFolder,Environment+SpecialFolderOption)
- uid: System.Environment.SpecialFolderOption
  parent: System
  isExternal: false
  name: Environment+SpecialFolderOption
  nameWithType: Environment+SpecialFolderOption
  fullName: System.Environment+SpecialFolderOption
- uid: System.Environment.GetLogicalDrives
  parent: System.Environment
  isExternal: false
  name: GetLogicalDrives()
  nameWithType: Environment.GetLogicalDrives()
  fullName: System.Environment.GetLogicalDrives()
- uid: System.Environment.HasShutdownStarted
  parent: System.Environment
  isExternal: false
  name: HasShutdownStarted
  nameWithType: Environment.HasShutdownStarted
  fullName: System.Environment.HasShutdownStarted
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Environment.Is64BitOperatingSystem
  parent: System.Environment
  isExternal: false
  name: Is64BitOperatingSystem
  nameWithType: Environment.Is64BitOperatingSystem
  fullName: System.Environment.Is64BitOperatingSystem
- uid: System.Environment.Is64BitProcess
  parent: System.Environment
  isExternal: false
  name: Is64BitProcess
  nameWithType: Environment.Is64BitProcess
  fullName: System.Environment.Is64BitProcess
- uid: System.Environment.MachineName
  parent: System.Environment
  isExternal: false
  name: MachineName
  nameWithType: Environment.MachineName
  fullName: System.Environment.MachineName
- uid: System.Environment.NewLine
  parent: System.Environment
  isExternal: false
  name: NewLine
  nameWithType: Environment.NewLine
  fullName: System.Environment.NewLine
- uid: System.Environment.OSVersion
  parent: System.Environment
  isExternal: false
  name: OSVersion
  nameWithType: Environment.OSVersion
  fullName: System.Environment.OSVersion
- uid: System.OperatingSystem
  parent: System
  isExternal: false
  name: OperatingSystem
  nameWithType: OperatingSystem
  fullName: System.OperatingSystem
- uid: System.Environment.ProcessorCount
  parent: System.Environment
  isExternal: false
  name: ProcessorCount
  nameWithType: Environment.ProcessorCount
  fullName: System.Environment.ProcessorCount
- uid: System.Environment.SetEnvironmentVariable(System.String,System.String)
  parent: System.Environment
  isExternal: false
  name: SetEnvironmentVariable(String,String)
  nameWithType: Environment.SetEnvironmentVariable(String,String)
  fullName: System.Environment.SetEnvironmentVariable(String,String)
- uid: System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)
  parent: System.Environment
  isExternal: false
  name: SetEnvironmentVariable(String,String,EnvironmentVariableTarget)
  nameWithType: Environment.SetEnvironmentVariable(String,String,EnvironmentVariableTarget)
  fullName: System.Environment.SetEnvironmentVariable(String,String,EnvironmentVariableTarget)
- uid: System.Environment.StackTrace
  parent: System.Environment
  isExternal: false
  name: StackTrace
  nameWithType: Environment.StackTrace
  fullName: System.Environment.StackTrace
- uid: System.Environment.SystemDirectory
  parent: System.Environment
  isExternal: false
  name: SystemDirectory
  nameWithType: Environment.SystemDirectory
  fullName: System.Environment.SystemDirectory
- uid: System.Environment.SystemPageSize
  parent: System.Environment
  isExternal: false
  name: SystemPageSize
  nameWithType: Environment.SystemPageSize
  fullName: System.Environment.SystemPageSize
- uid: System.Environment.TickCount
  parent: System.Environment
  isExternal: false
  name: TickCount
  nameWithType: Environment.TickCount
  fullName: System.Environment.TickCount
- uid: System.Environment.UserDomainName
  parent: System.Environment
  isExternal: false
  name: UserDomainName
  nameWithType: Environment.UserDomainName
  fullName: System.Environment.UserDomainName
- uid: System.Environment.UserInteractive
  parent: System.Environment
  isExternal: false
  name: UserInteractive
  nameWithType: Environment.UserInteractive
  fullName: System.Environment.UserInteractive
- uid: System.Environment.UserName
  parent: System.Environment
  isExternal: false
  name: UserName
  nameWithType: Environment.UserName
  fullName: System.Environment.UserName
- uid: System.Environment.Version
  parent: System.Environment
  isExternal: false
  name: Version
  nameWithType: Environment.Version
  fullName: System.Environment.Version
- uid: System.Version
  parent: System
  isExternal: false
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Environment.WorkingSet
  parent: System.Environment
  isExternal: false
  name: WorkingSet
  nameWithType: Environment.WorkingSet
  fullName: System.Environment.WorkingSet
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Environment.CommandLine*
  parent: System.Environment
  isExternal: false
  name: CommandLine
  nameWithType: Environment.CommandLine
- uid: System.Environment.CurrentDirectory*
  parent: System.Environment
  isExternal: false
  name: CurrentDirectory
  nameWithType: Environment.CurrentDirectory
- uid: System.Environment.Exit*
  parent: System.Environment
  isExternal: false
  name: Exit
  nameWithType: Environment.Exit
- uid: System.Environment.ExitCode*
  parent: System.Environment
  isExternal: false
  name: ExitCode
  nameWithType: Environment.ExitCode
- uid: System.Environment.ExpandEnvironmentVariables*
  parent: System.Environment
  isExternal: false
  name: ExpandEnvironmentVariables
  nameWithType: Environment.ExpandEnvironmentVariables
- uid: System.Environment.FailFast*
  parent: System.Environment
  isExternal: false
  name: FailFast
  nameWithType: Environment.FailFast
- uid: System.Environment.GetCommandLineArgs*
  parent: System.Environment
  isExternal: false
  name: GetCommandLineArgs
  nameWithType: Environment.GetCommandLineArgs
- uid: System.Environment.GetEnvironmentVariable*
  parent: System.Environment
  isExternal: false
  name: GetEnvironmentVariable
  nameWithType: Environment.GetEnvironmentVariable
- uid: System.Environment.GetEnvironmentVariables*
  parent: System.Environment
  isExternal: false
  name: GetEnvironmentVariables
  nameWithType: Environment.GetEnvironmentVariables
- uid: System.Environment.GetFolderPath*
  parent: System.Environment
  isExternal: false
  name: GetFolderPath
  nameWithType: Environment.GetFolderPath
- uid: System.Environment.GetLogicalDrives*
  parent: System.Environment
  isExternal: false
  name: GetLogicalDrives
  nameWithType: Environment.GetLogicalDrives
- uid: System.Environment.HasShutdownStarted*
  parent: System.Environment
  isExternal: false
  name: HasShutdownStarted
  nameWithType: Environment.HasShutdownStarted
- uid: System.Environment.Is64BitOperatingSystem*
  parent: System.Environment
  isExternal: false
  name: Is64BitOperatingSystem
  nameWithType: Environment.Is64BitOperatingSystem
- uid: System.Environment.Is64BitProcess*
  parent: System.Environment
  isExternal: false
  name: Is64BitProcess
  nameWithType: Environment.Is64BitProcess
- uid: System.Environment.MachineName*
  parent: System.Environment
  isExternal: false
  name: MachineName
  nameWithType: Environment.MachineName
- uid: System.Environment.NewLine*
  parent: System.Environment
  isExternal: false
  name: NewLine
  nameWithType: Environment.NewLine
- uid: System.Environment.OSVersion*
  parent: System.Environment
  isExternal: false
  name: OSVersion
  nameWithType: Environment.OSVersion
- uid: System.Environment.ProcessorCount*
  parent: System.Environment
  isExternal: false
  name: ProcessorCount
  nameWithType: Environment.ProcessorCount
- uid: System.Environment.SetEnvironmentVariable*
  parent: System.Environment
  isExternal: false
  name: SetEnvironmentVariable
  nameWithType: Environment.SetEnvironmentVariable
- uid: System.Environment.StackTrace*
  parent: System.Environment
  isExternal: false
  name: StackTrace
  nameWithType: Environment.StackTrace
- uid: System.Environment.SystemDirectory*
  parent: System.Environment
  isExternal: false
  name: SystemDirectory
  nameWithType: Environment.SystemDirectory
- uid: System.Environment.SystemPageSize*
  parent: System.Environment
  isExternal: false
  name: SystemPageSize
  nameWithType: Environment.SystemPageSize
- uid: System.Environment.TickCount*
  parent: System.Environment
  isExternal: false
  name: TickCount
  nameWithType: Environment.TickCount
- uid: System.Environment.UserDomainName*
  parent: System.Environment
  isExternal: false
  name: UserDomainName
  nameWithType: Environment.UserDomainName
- uid: System.Environment.UserInteractive*
  parent: System.Environment
  isExternal: false
  name: UserInteractive
  nameWithType: Environment.UserInteractive
- uid: System.Environment.UserName*
  parent: System.Environment
  isExternal: false
  name: UserName
  nameWithType: Environment.UserName
- uid: System.Environment.Version*
  parent: System.Environment
  isExternal: false
  name: Version
  nameWithType: Environment.Version
- uid: System.Environment.WorkingSet*
  parent: System.Environment
  isExternal: false
  name: WorkingSet
  nameWithType: Environment.WorkingSet
